import { NextRequest, NextResponse } from 'next/server';
import { universalAIService } from '@/lib/services/UniversalAIService';

export async function GET() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Universal AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...");

  try {
    // Test all AI providers availability
    const providersStatus = await universalAIService.testAIProviders();
    console.log("üîó –°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:", providersStatus);

    // Test invoice processing with the universal service
    const testOcrText = `
–ò–ù–í–û–ô–° ‚Ññ INV-2025-001
–î–∞—Ç–∞: 15.01.2025
–ü—Ä–æ–¥–∞–≤–µ—Ü: –û–û–û "–¢–µ—Å—Ç–ö–æ–º–ø–∞–Ω–∏—è"
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –û–û–û "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"

–¢–æ–≤–∞—Ä—ã:
1. –¢–µ–ø–ª–æ–≤–∞—è –º–∞—Å–ª—è–Ω–∞—è –ø–µ—á—å —Å –≥–∞–∑–æ–≤–æ–π –≥–æ—Ä–µ–ª–∫–æ–π - 1 —à—Ç. –ø–æ 280000 —Ä—É–±. = 280000 —Ä—É–±.
2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –≤–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é - 1 —à—Ç. –ø–æ 0 —Ä—É–±. = 0 —Ä—É–±.

–ò—Ç–æ–≥–æ: 280000 —Ä—É–±.
–ù–î–° 20%: 56000 —Ä—É–±.
–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: 336000 —Ä—É–±.

–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:
–ë–∞–Ω–∫: –°–±–µ—Ä–±–∞–Ω–∫ –†–æ—Å—Å–∏–∏
–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç: 40702810123456789012
–ë–ò–ö: 044525225
–ò–ù–ù: 1234567890
    `;

    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ Universal AI...");
    const result = await universalAIService.processInvoiceWithAI(testOcrText);

    const availableProviders = Object.entries(providersStatus)
      .filter(([, available]) => available)
      .map(([provider]) => provider);

    return NextResponse.json({
      success: true,
      message: "Universal AI —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      testResults: {
        availableProviders,
        providersStatus,
        processingResult: result,
        inputLength: testOcrText.length,
        itemsFound: result.items?.length || 0,
        hasInvoiceInfo: !!result.invoiceInfo,
        hasBankInfo: !!result.bankInfo
      },
      configuration: {
        botHubKey: !!process.env.BOTHUB_API_KEY,
        openaiKey: !!process.env.OPENAI_API_KEY,
        anthropicKey: !!process.env.ANTHROPIC_API_KEY
      },
      originalInput: testOcrText.substring(0, 300) + "..."
    });

  } catch (error) {
    console.error("‚ùå Universal AI —Ç–µ—Å—Ç –æ—à–∏–±–∫–∞:", error);

    return NextResponse.json({
      success: false,
      error: "Universal AI —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω",
      details: error instanceof Error ? error.message : String(error),
      configuration: {
        botHubKey: !!process.env.BOTHUB_API_KEY,
        openaiKey: !!process.env.OPENAI_API_KEY,
        anthropicKey: !!process.env.ANTHROPIC_API_KEY
      }
    });
  }
}