// ‚ö†Ô∏è –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ChatBotService

import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";
import { supabaseService } from "@/lib/supabaseServiceClient";
import { ChatBotService } from "@/lib/telegram/ChatBotService";

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —á–∞—Ç-–±–æ—Ç–∞
let chatBotService: ChatBotService | null = null;

function getChatBotService(): ChatBotService {
  if (!chatBotService) {
    try {
      chatBotService = new ChatBotService();
    } catch (error) {
      console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ChatBotService:", error);
      throw error;
    }
  }
  return chatBotService;
}

// POST: Webhook –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ Get2B ChatHub Assistant (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
export async function POST(request: NextRequest) {
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —á—Ç–æ webhook –ø–æ–ª—É—á–µ–Ω
  console.error('üö® WEBHOOK CALL DETECTED! Time:', new Date().toISOString());
  
  try {
    const body = await request.json();
    
    console.error('ü§ñ WEBHOOK RECEIVED - FULL PAYLOAD:');
    console.error('====================================');
    console.error(JSON.stringify(body, null, 2));
    console.error('====================================');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
    if (body.callback_query) {
      console.log('üìû CALLBACK QUERY detected - handling...');
      return await handleCallbackQuery(body.callback_query);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!body.message) {
      console.log('‚ùå NO MESSAGE in payload - exiting');
      return NextResponse.json({ success: true, message: "No message to process" });
    }

    console.log('‚úÖ MESSAGE found in payload - processing...');

    const message = body.message;
    const chatId = message.chat.id;
    const text = message.text || '';
    const userId = message.from.id;
    const userName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    console.log('üì© Processing chat bot message:', {
      chatId,
      userId,
      userName,
      text,
      textLength: text.length,
      isCommand: text.startsWith('/')
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) {
      console.log('üîß COMMAND detected - handling command:', text);
      await handleChatBotCommand(chatId, text, userId, userName);
    } else {
      console.log('üí¨ REGULAR MESSAGE detected - handling as manager reply:', text);
      // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É
      await handleManagerReply(message, chatId, text, userId, userName);
    }

    return NextResponse.json({ success: true, message: "Chat bot message processed" });

  } catch (error) {
    console.error('üí• Chat bot webhook error:', error);
    return NextResponse.json(
      { error: "Internal server error", details: String(error) },
      { status: 500 }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–∞—Ç-–±–æ—Ç–∞
async function handleChatBotCommand(chatId: number, command: string, userId: number, userName: string) {
  console.log("üîÑ –û–ë–ù–û–í–õ–ï–ù–û: handleChatBotCommand - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ChatBotService");

  try {
    const service = getChatBotService();
    const responseText = service.getCommandResponse(command, userName);
    
    await service.sendMessage(chatId, responseText);
    console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑ ChatBotService");
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º (ULTRA DEBUG VERSION)
async function handleManagerReply(message: any, chatId: number, text: string, userId: number, userName: string) {
  console.log("üí¨ ULTRA DEBUG: handleManagerReply started");
  console.log("üìù ULTRA DEBUG: Message text:", text);
  console.log("üë§ ULTRA DEBUG: User:", { userId, userName, chatId });
  console.log("üîç ULTRA DEBUG: Full message object:", JSON.stringify(message, null, 2));
  
  let webChatMessageSaved = false;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
    const replyToMessage = message.reply_to_message;
    console.log("üîç DEBUG: Reply to message exists:", !!replyToMessage);
    
    if (replyToMessage?.text) {
      console.log("üìÑ DEBUG: Reply text:", replyToMessage.text);
    }
    
    let roomId = null;
    let projectId = null;

    if (replyToMessage?.text) {
      // –ò—â–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ä–µ–ø–ª–∞—è
      const projectMatch = replyToMessage.text.match(/üÜî –ü—Ä–æ–µ–∫—Ç: ([a-f0-9-]+)/);
      console.log("üéØ DEBUG: Project regex match:", projectMatch);
      
      if (projectMatch) {
        projectId = projectMatch[1];
        console.log("‚úÖ ULTRA DEBUG: Found project ID:", projectId);

        // –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        console.log("üîç ULTRA DEBUG: Searching for room with project_id:", projectId);
        
        let room = null;
        let roomError = null;
        
        try {
          const result = await supabaseService
            .from('chat_rooms')
            .select('id, name, user_id')
            .eq('project_id', projectId)
            .eq('room_type', 'project')
            .eq('is_active', true)
            .single();

          room = result.data;
          roomError = result.error;

          console.log("üì¶ ULTRA DEBUG: Room query result:", { room, error: roomError });
          console.log("üåê ULTRA DEBUG: Supabase URL:", process.env.NEXT_PUBLIC_SUPABASE_URL);
        } catch (dbError) {
          console.error("üí• ULTRA DEBUG: Database connection error:", dbError);
          roomError = dbError;
        }

        if (room) {
          roomId = room.id;
          console.log("‚úÖ DEBUG: Found chat room:", { roomId, roomName: room.name, userId: room.user_id });
        } else {
          console.log("‚ùå DEBUG: No room found for project:", projectId);
          if (roomError) {
            console.log("üö® DEBUG: Room query error:", roomError);
          }
        }
      } else {
        console.log("‚ùå DEBUG: No project ID found in reply text");
      }
    } else {
      console.log("‚ùå DEBUG: No reply_to_message.text");
    }

    if (roomId) {
      console.log("üíæ DEBUG: Attempting to save message to web chat...");
      
      // üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –í –í–ï–ë-–ß–ê–¢ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
      const messageData = {
        room_id: roomId,
        content: text,
        sender_type: 'manager' as const,
        sender_manager_id: String(userId),
        sender_name: userName || '–ú–µ–Ω–µ–¥–∂–µ—Ä Get2B',
        message_type: 'text' as const
      };
      
      console.log("üíæ DEBUG: Message data to save:", messageData);
      
      const { data: newMessage, error } = await supabaseService
        .from('chat_messages')
        .insert(messageData)
        .select()
        .single();

      console.log("üìä DEBUG: Database insert result:", { newMessage, error });

      if (error) {
        console.error('‚ùå DEBUG: Database save error:', error);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
      } else {
        webChatMessageSaved = true;
        console.log('‚úÖ DEBUG: Message saved successfully:', {
          messageId: newMessage.id,
          roomId: newMessage.room_id,
          content: newMessage.content,
          senderType: newMessage.sender_type
        });
      }

      // üîß –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram (–Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ)
      try {
        const service = getChatBotService();
        await service.sendMessage(chatId, `‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –≤ –≤–µ–±-—á–∞—Ç:\n\n"${text}"`);
        console.log("‚úÖ DEBUG: Confirmation sent to Telegram");
      } catch (telegramError) {
        console.warn("‚ö†Ô∏è DEBUG: Failed to send Telegram confirmation (non-critical):", telegramError);
        // –ù–ï –ü–†–ï–†–´–í–ê–ï–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–±-—á–∞—Ç!
      }
      
    } else {
      console.log("‚ùå DEBUG: No room found - cannot save message");
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      try {
        const service = getChatBotService();
        await service.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.\n\n–û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–∞—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.`);
      } catch (telegramError) {
        console.warn("‚ö†Ô∏è DEBUG: Failed to send error to Telegram:", telegramError);
      }
    }
    
  } catch (error) {
    console.error('‚ùå DEBUG: handleManagerReply error:', error);
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    try {
      const service = getChatBotService();
      await service.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${error instanceof Error ? error.message : String(error)}`);
    } catch (telegramError) {
      console.warn("‚ö†Ô∏è DEBUG: Failed to send error to Telegram:", telegramError);
    }
  }

  // üéØ –ì–õ–ê–í–ù–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–±-—á–∞—Ç
  if (webChatMessageSaved) {
    console.log("üéâ DEBUG: SUCCESS - Message saved to web chat!");
  } else {
    console.log("üí• DEBUG: FAILED - Message NOT saved to web chat");
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç—Ö–∞–±–∞
async function getChatHubStatus(): Promise<string> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: roomsData, error: roomsError } = await supabase
      .from('chat_rooms')
      .select('room_type, is_active')
      .eq('is_active', true);

    const { data: messagesData, error: messagesError } = await supabase
      .from('chat_messages')
      .select('id')
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());

    const { data: participantsData, error: participantsError } = await supabase
      .from('chat_participants')
      .select('id')
      .eq('is_active', true);

    const totalRooms = roomsData?.length || 0;
    const aiRooms = roomsData?.filter(r => r.room_type === 'ai').length || 0;
    const projectRooms = roomsData?.filter(r => r.room_type === 'project').length || 0;
    const todayMessages = messagesData?.length || 0;
    const activeParticipants = participantsData?.length || 0;

    return `üè† –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: ${totalRooms}
ü§ñ AI —á–∞—Ç–æ–≤: ${aiRooms}
üìã –ü—Ä–æ–µ–∫—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤: ${projectRooms}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å: ${todayMessages}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${activeParticipants}`;

  } catch (error) {
    console.error('Error getting chat status:', error);
    return '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
async function getActiveProjectChats(): Promise<string> {
  try {
    const { data: projectChats, error } = await supabase
      .from('chat_rooms')
      .select(`
        id,
        name,
        project_id,
        created_at,
        projects!inner(name, status)
      `)
      .eq('room_type', 'project')
      .eq('is_active', true)
      .limit(10);

    if (error || !projectChats || projectChats.length === 0) {
      return 'üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤';
    }

    return projectChats.map((chat: any, index: number) => 
      `${index + 1}. **${chat.projects?.name || chat.name}**
   üí¨ –ß–∞—Ç: ${chat.name}
   üìä –°—Ç–∞—Ç—É—Å: ${chat.projects?.status || 'unknown'}
   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(chat.created_at).toLocaleDateString('ru-RU')}`
    ).join('\n\n');

  } catch (error) {
    console.error('Error getting project chats:', error);
    return '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤';
  }
}

// ========================================
// üí¨ –û–ë–†–ê–ë–û–¢–ö–ê –ß–ê–¢-–§–£–ù–ö–¶–ò–ô (CALLBACK QUERIES)
// ========================================

async function handleCallbackQuery(callbackQuery: any) {
  try {
    const data = callbackQuery.data;
    const service = getChatBotService();
    
    console.log("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query —á–∞—Ç-–±–æ—Ç–∞:", data);

    // –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–µ
    if (data.startsWith("quick_reply_")) {
      const [, , roomId, replyType] = data.split("_");
      
      try {
        const { handleQuickReply } = await import('@/lib/telegram-chat-integration');
        
        await handleQuickReply({
          roomId,
          replyType: replyType as 'ok' | 'clarify',
          managerName: callbackQuery.from?.first_name || "–ú–µ–Ω–µ–¥–∂–µ—Ä Get2B",
          managerTelegramId: String(callbackQuery.from?.id)
        });

        const responseText = replyType === 'ok' 
          ? "‚úÖ –û—Ç–≤–µ—Ç \"–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ\" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É" 
          : "‚ùì –û—Ç–≤–µ—Ç \"–ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è\" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É";
            
        await service.answerCallbackQuery(callbackQuery.id, responseText);

        console.log("üí¨ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç:", roomId, replyType);
        return NextResponse.json({ 
          ok: true, 
          message: `Quick reply sent to chat ${roomId}` 
        });
      } catch (error: any) {
        console.error("‚ùå Chat quick reply error:", error);
        return NextResponse.json({ ok: false, error: error.message });
      }
    }

    // –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞
    if (data.startsWith("open_chat_")) {
      const roomId = data.replace("open_chat_", "");
      
      await service.answerCallbackQuery(
        callbackQuery.id, 
        "üí¨ –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö", 
        true
      );

      return NextResponse.json({ ok: true, message: "Chat open requested" });
    }

    // –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
    if (data.startsWith("project_details_")) {
      const projectId = data.replace("project_details_", "");
      
      try {
        const { sendProjectDetailsToTelegram } = await import('@/lib/telegram-chat-integration');
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∏–∑ callback query
        const chatId = callbackQuery.message?.chat?.id || callbackQuery.from?.id;
        await sendProjectDetailsToTelegram(projectId, chatId);

        await service.answerCallbackQuery(callbackQuery.id, "üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");

        console.log("üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", projectId);
        return NextResponse.json({ 
          ok: true, 
          message: `Project details sent for ${projectId}` 
        });
      } catch (error: any) {
        console.error("‚ùå Project details error:", error);
        return NextResponse.json({ ok: false, error: error.message });
      }
    }

    // ========================================
    // ‚≠ê –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–ö–†–ï–î–ò–¢–ê–¶–ò–ò
    // ========================================

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é
    if (data.startsWith("accredit_view_")) {
      const applicationId = data.replace("accredit_view_", "");
      
      try {
        await service.answerCallbackQuery(callbackQuery.id, "üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏...");
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã
        const { data: application, error } = await supabase
          .from('accreditation_applications')
          .select('*')
          .eq('id', applicationId)
          .single();

        if (error || !application) {
          await service.answerCallbackQuery(callbackQuery.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true);
          return NextResponse.json({ ok: false, error: "Application not found" });
        }

        // üîß –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –æ—Ç –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram
        const cleanText = (text: string | null | undefined): string => {
          if (!text) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
          return text
            .replace(/[*_`[\](){}|]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ Markdown —Å–∏–º–≤–æ–ª—ã
            .replace(/[<>]/g, '') // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
            .replace(/\n+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
            .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
            .trim();
        };

        // üì§ –§–û–†–ú–ò–†–£–ï–ú –ü–û–î–†–û–ë–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –í –°–¢–ò–õ–ï –î–ï–¢–ê–õ–ï–ô –ü–†–û–ï–ö–¢–ê
        let detailsText = `üîç –î–ï–¢–ê–õ–ò –ó–ê–Ø–í–ö–ò –ù–ê –ê–ö–ö–†–ï–î–ò–¢–ê–¶–ò–Æ\n\n`;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        detailsText += `üÜî ID –∑–∞—è–≤–∫–∏: ${application.id}\n`;
        detailsText += `üìä –°—Ç–∞—Ç—É—Å: ${cleanText(application.status)}\n`;
        detailsText += `üìÖ –ü–æ–¥–∞–Ω–∞: ${new Date(application.submitted_at).toLocaleString('ru-RU')}\n\n`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        detailsText += `üè¢ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–°–¢–ê–í–©–ò–ö–ï:\n`;
        detailsText += `‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${cleanText(application.supplier_name)}\n`;
        detailsText += `‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ${cleanText(application.company_name)}\n`;
        detailsText += `‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cleanText(application.category)}\n`;
        detailsText += `‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ${cleanText(application.country)}\n\n`;
        
        // –ü–∞—Ä—Å–∏–º profile_data –µ—Å–ª–∏ —ç—Ç–æ JSON
        if (application.profile_data) {
          try {
            const profileData = typeof application.profile_data === 'string' 
              ? JSON.parse(application.profile_data) 
              : application.profile_data;
            
            if (profileData) {
              detailsText += `üìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n`;
              if (profileData.description) {
                detailsText += `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${cleanText(profileData.description)}\n`;
              }
              if (profileData.contact_email) {
                detailsText += `‚Ä¢ Email: ${cleanText(profileData.contact_email)}\n`;
              }
              if (profileData.contact_phone) {
                detailsText += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${cleanText(profileData.contact_phone)}\n`;
              }
              if (profileData.website) {
                detailsText += `‚Ä¢ –°–∞–π—Ç: ${cleanText(profileData.website)}\n`;
              }
              detailsText += `\n`;
            }
          } catch (parseError) {
            console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ profile_data:', parseError);
          }
        }
        
        // –ü–∞—Ä—Å–∏–º products –µ—Å–ª–∏ —ç—Ç–æ JSON
        if (application.products) {
          try {
            const products = typeof application.products === 'string' 
              ? JSON.parse(application.products) 
              : application.products;
            
            if (Array.isArray(products) && products.length > 0) {
              detailsText += `üì¶ –¢–û–í–ê–†–´ –ò –£–°–õ–£–ì–ò:\n`;
              products.forEach((product: any, index: number) => {
                detailsText += `${index + 1}. ${cleanText(product.name)}\n`;
                if (product.description) {
                  detailsText += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${cleanText(product.description)}\n`;
                }
                if (product.category) {
                  detailsText += `   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cleanText(product.category)}\n`;
                }
                if (product.price) {
                  detailsText += `   –¶–µ–Ω–∞: ${cleanText(product.price)} ${cleanText(product.currency || 'USD')}\n`;
                }
                if (product.certificates && Array.isArray(product.certificates) && product.certificates.length > 0) {
                  detailsText += `   –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: ${product.certificates.length} —à—Ç.\n`;
                }
                detailsText += `\n`;
              });
            }
          } catch (parseError) {
            console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ products:', parseError);
          }
        }
        
        // –ü–∞—Ä—Å–∏–º legal_confirmation –µ—Å–ª–∏ —ç—Ç–æ JSON
        if (application.legal_confirmation) {
          try {
            const legalData = typeof application.legal_confirmation === 'string' 
              ? JSON.parse(application.legal_confirmation) 
              : application.legal_confirmation;
            
            if (legalData) {
              detailsText += `‚öñÔ∏è –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø:\n`;
              detailsText += `‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ: ${legalData.isLegalEntity ? '–î–∞' : '–ù–µ—Ç'}\n`;
              detailsText += `‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: ${legalData.hasRightToRepresent ? '–î–∞' : '–ù–µ—Ç'}\n`;
              detailsText += `‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: ${legalData.confirmAccuracy ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}\n\n`;
            }
          } catch (parseError) {
            console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ legal_confirmation:', parseError);
          }
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        detailsText += `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–¢–ï–†–ò–ê–õ–û–í:\n`;
        detailsText += `‚Ä¢ –¢–æ–≤–∞—Ä—ã: ${application.products_count || 0}\n`;
        detailsText += `‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: ${application.certificates_count || 0}\n`;
        detailsText += `‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: ${application.legal_documents_count || 0}\n\n`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
        if (application.reviewed_by) {
          detailsText += `üë§ –†–ê–°–°–ú–û–¢–†–ï–ù–û:\n`;
          detailsText += `‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${cleanText(application.reviewed_by)}\n`;
          detailsText += `‚Ä¢ –î–∞—Ç–∞: ${new Date(application.reviewed_at).toLocaleString('ru-RU')}\n`;
          if (application.rejection_reason) {
            detailsText += `‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${cleanText(application.rejection_reason)}\n`;
          }
          detailsText += `\n`;
        }
        
        // –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        detailsText += `üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n`;
        detailsText += `https://get2b.com/dashboard/profile`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
        const replyMarkup = {
          inline_keyboard: [
            [
              { text: "üì¶ –¢–æ–≤–∞—Ä—ã", callback_data: `accredit_files_${applicationId}_products` },
              { text: "üìã –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", callback_data: `accredit_files_${applicationId}_certificates` }
            ],
            [
              { text: "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data: `accredit_files_${applicationId}_documents` },
              { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: `accredit_files_${applicationId}_summary` }
            ],
            [
              { text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data: `accredit_approve_${applicationId}` },
              { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `accredit_reject_${applicationId}` }
            ]
          ]
        };

        await service.sendMessageWithButtons(callbackQuery.message.chat.id, detailsText, replyMarkup, 'Markdown');

        return NextResponse.json({ 
          ok: true, 
          message: `Accreditation details sent for ${applicationId}` 
        });
      } catch (error: any) {
        console.error("‚ùå Accreditation view error:", error);
        return NextResponse.json({ ok: false, error: error.message });
      }
    }

    // –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é
    if (data.startsWith("accredit_approve_")) {
      const applicationId = data.replace("accredit_approve_", "");
      
      try {
        await service.answerCallbackQuery(callbackQuery.id, "‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ...");
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        const { data: application, error: fetchError } = await supabase
          .from('accreditation_applications')
          .select('*')
          .eq('id', applicationId)
          .single();

        if (fetchError || !application) {
          await service.answerCallbackQuery(callbackQuery.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true);
          return NextResponse.json({ ok: false, error: "Application not found" });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        const { error: updateError } = await supabase
          .from('accreditation_applications')
          .update({ 
            status: 'approved',
            reviewed_by: callbackQuery.from?.first_name || '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            reviewed_at: new Date().toISOString()
          })
          .eq('id', applicationId);

        if (updateError) {
          await service.answerCallbackQuery(callbackQuery.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏", true);
          return NextResponse.json({ ok: false, error: updateError.message });
        }

        // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
        const categoryMapping: { [key: string]: string } = {
          '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
          '—Ç–∞–Ω–∫–æ–≤–∞—è': '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã',
          '321d': '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞',
          '312312': '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞',
          '.kjblubuy': '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö',
          '12412': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
        };

        const mappedCategory = categoryMapping[application.category] || application.category;

        // üü† –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –í –û–†–ê–ù–ñ–ï–í–û–ú –ö–ê–ë–ò–ù–ï–¢–ï (catalog_verified_suppliers)
        const verifiedSupplierData = {
          name: application.supplier_name,
          company_name: application.company_name,
          category: mappedCategory,
          country: application.country,
          description: application.application_data?.description || '',
          contact_email: application.application_data?.contact_email || '',
          contact_phone: application.application_data?.contact_phone || '',
          website: application.application_data?.website || '',
          contact_person: application.application_data?.contact_person || '',
          min_order: application.application_data?.min_order || '',
          response_time: application.application_data?.response_time || '',
          employees: application.application_data?.employees || '',
          established: application.application_data?.established || '',
          certifications: application.application_data?.certifications || null,
          specialties: application.application_data?.specialties || null,
          payment_methods: application.application_data?.payment_methods || null,
          logo_url: application.application_data?.logo_url || null,
          moderation_status: 'approved',
          moderated_by: callbackQuery.from?.id || null,
          moderated_at: new Date().toISOString(),
          is_verified: true,
          is_active: true,
          public_rating: 0,
          reviews_count: 0,
          projects_count: 0,
          success_rate: 0
        };

        const { data: verifiedSupplier, error: createError } = await supabase
          .from('catalog_verified_suppliers')
          .insert([verifiedSupplierData])
          .select()
          .single();

        if (createError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:", createError);
          await service.answerCallbackQuery(callbackQuery.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", true);
          return NextResponse.json({ ok: false, error: createError.message });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        await supabase
          .from('accreditation_applications')
          .update({ 
            verified_supplier_id: verifiedSupplier.id 
          })
          .eq('id', applicationId);

        // üì¶ –ö–û–ü–ò–†–£–ï–ú –¢–û–í–ê–†–´ –í –û–†–ê–ù–ñ–ï–í–´–ô –ö–ê–ë–ò–ù–ï–¢ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (application.products_data) {
          try {
            const products = typeof application.products_data === 'string' 
              ? JSON.parse(application.products_data) 
              : application.products_data;

            if (Array.isArray(products) && products.length > 0) {
              const verifiedProducts = products.map((product: any) => ({
                supplier_id: verifiedSupplier.id,
                name: product.name || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                description: product.description || '',
                category: product.category || application.category,
                price: product.price || 0,
                currency: product.currency || 'USD',
                min_order: product.min_order || '',
                in_stock: true,
                image_url: product.image_url || null,
                certification: product.certification || null
              }));

              await supabase
                .from('catalog_verified_products')
                .insert(verifiedProducts);
            }
          } catch (productError) {
            console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:", productError);
          }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
          await service.notifyAccreditationApproved({
            applicationId: application.id,
            supplierName: application.supplier_name,
            companyName: application.company_name,
            managerName: callbackQuery.from?.first_name || '–ú–µ–Ω–µ–¥–∂–µ—Ä'
          });

        await service.answerCallbackQuery(callbackQuery.id, "‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ä–∞–Ω–∂–µ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç.");

        return NextResponse.json({ 
          ok: true, 
          message: `Accreditation approved for ${applicationId}`,
          verified_supplier_id: verifiedSupplier.id
        });
      } catch (error: any) {
        console.error("‚ùå Accreditation approve error:", error);
        return NextResponse.json({ ok: false, error: error.message });
      }
    }

    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é
    if (data.startsWith("accredit_reject_")) {
      const applicationId = data.replace("accredit_reject_", "");
      
      try {
        await service.answerCallbackQuery(callbackQuery.id, "‚ùå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ...");
        
        // –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–∫–ª–æ–Ω—è–µ–º –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã)
        const { error } = await supabase
          .from('accreditation_applications')
          .update({ 
            status: 'rejected',
            rejection_reason: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram',
            reviewed_by: callbackQuery.from?.first_name || '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            reviewed_at: new Date().toISOString()
          })
          .eq('id', applicationId);

        if (error) {
          await service.answerCallbackQuery(callbackQuery.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏", true);
          return NextResponse.json({ ok: false, error: error.message });
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const { data: application } = await supabase
          .from('accreditation_applications')
          .select('*')
          .eq('id', applicationId)
          .single();

        if (application) {
          await service.notifyAccreditationRejected({
            applicationId: application.id,
            supplierName: application.supplier_name,
            companyName: application.company_name,
            managerName: callbackQuery.from?.first_name || '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            reason: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram'
          });
        }

        await service.answerCallbackQuery(callbackQuery.id, "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");

        return NextResponse.json({ 
          ok: true, 
          message: `Accreditation rejected for ${applicationId}` 
        });
      } catch (error: any) {
        console.error("‚ùå Accreditation reject error:", error);
        return NextResponse.json({ ok: false, error: error.message });
      }
    }

    // ========================================
    // üìÅ –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í –ê–ö–ö–†–ï–î–ò–¢–ê–¶–ò–ò
    // ========================================

    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞—è–≤–∫–∏
    if (data.startsWith("accredit_files_")) {
      const parts = data.split('_');
      const applicationId = parts[2];
      const fileType = parts[3];
      
      try {
        await service.answerCallbackQuery(callbackQuery.id, "üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã...");
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API
        const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/telegram/get-accreditation-files?applicationId=${applicationId}&type=${fileType}`);
        const result = await response.json();
        
        if (!result.success) {
          await service.answerCallbackQuery(callbackQuery.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤", true);
          return NextResponse.json({ ok: false, error: result.error });
        }

        const filesData = result.data;
        let messageText = '';
        let replyMarkup: any = null;

        switch (fileType) {
          case 'products':
            messageText = `üì¶ –¢–û–í–ê–†–´ –ó–ê–Ø–í–ö–ò –ù–ê –ê–ö–ö–†–ï–î–ò–¢–ê–¶–ò–Æ\n\n`;
            messageText += `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${filesData.supplierName}\n`;
            messageText += `üÜî ID –∑–∞—è–≤–∫–∏: ${filesData.applicationId}\n\n`;
            
            if (filesData.products && filesData.products.length > 0) {
              filesData.products.forEach((product: any, index: number) => {
                messageText += `${index + 1}. ${product.name}\n`;
                messageText += `   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
                messageText += `   –¶–µ–Ω–∞: ${product.price || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ${product.currency || ''}\n`;
                messageText += `   üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${product.images.length}\n`;
                messageText += `   üìã –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: ${product.certificates.length}\n\n`;
              });
            } else {
              messageText += `‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n`;
            }

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            if (filesData.products && filesData.products.length > 0) {
              replyMarkup = {
                inline_keyboard: filesData.products.map((product: any, index: number) => [
                  { text: `üì∑ ${product.name} (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)`, callback_data: `accredit_product_images_${applicationId}_${index}` },
                  { text: `üìã ${product.name} (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)`, callback_data: `accredit_product_certs_${applicationId}_${index}` }
                ]).concat([
                  [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data: `accredit_view_${applicationId}` }]
                ])
              };
            }
            break;

          case 'certificates':
            messageText = `üìã –°–ï–†–¢–ò–§–ò–ö–ê–¢–´ –ó–ê–Ø–í–ö–ò –ù–ê –ê–ö–ö–†–ï–î–ò–¢–ê–¶–ò–Æ\n\n`;
            messageText += `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${filesData.supplierName}\n`;
            messageText += `üÜî ID –∑–∞—è–≤–∫–∏: ${filesData.applicationId}\n\n`;
            
            if (filesData.certificates && filesData.certificates.length > 0) {
              filesData.certificates.forEach((cert: any, index: number) => {
                messageText += `${index + 1}. ${cert.name}\n`;
                messageText += `   –¢–æ–≤–∞—Ä: ${cert.productName}\n`;
                messageText += `   –†–∞–∑–º–µ—Ä: ${(cert.size / 1024).toFixed(1)} KB\n`;
                messageText += `   –¢–∏–ø: ${cert.type}\n\n`;
              });
            } else {
              messageText += `‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n`;
            }

            replyMarkup = {
              inline_keyboard: [
                [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data: `accredit_view_${applicationId}` }]
              ]
            };
            break;

          case 'documents':
            messageText = `üìÑ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –î–û–ö–£–ú–ï–ù–¢–´ –ó–ê–Ø–í–ö–ò –ù–ê –ê–ö–ö–†–ï–î–ò–¢–ê–¶–ò–Æ\n\n`;
            messageText += `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${filesData.supplierName}\n`;
            messageText += `üÜî ID –∑–∞—è–≤–∫–∏: ${filesData.applicationId}\n\n`;
            
            if (filesData.documents && filesData.documents.length > 0) {
              console.log("üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", filesData.documents.length);
              
              filesData.documents.forEach((doc: any, index: number) => {
                messageText += `${index + 1}. ${doc.name}\n`;
                messageText += `   –¢–∏–ø: ${doc.type}\n`;
                messageText += `   –†–∞–∑–º–µ—Ä: ${(doc.size / 1024).toFixed(1)} KB\n`;
                messageText += `   –§–∞–π–ª: ${doc.fileName}\n`;
                messageText += `   URL: ${doc.public_url ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}\n\n`;
              });
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ Telegram
              for (let docIndex = 0; docIndex < filesData.documents.length; docIndex++) {
                const doc = filesData.documents[docIndex];
                console.log("üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", {
                  name: doc.name,
                  hasUrl: !!doc.public_url,
                  url: doc.public_url
                });
                
                if (doc.public_url) {
                  try {
                    console.log("üì§ DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API");
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/send-accreditation-legal-document?applicationId=${applicationId}&docIndex=${docIndex}&chatId=${callbackQuery.message.chat.id}`, {
                      method: 'POST'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                      console.log("‚úÖ DEBUG: –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API");
                    } else {
                      console.error("‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API:", result.error);
                      // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                      await service.sendMessage(callbackQuery.message.chat.id, `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: ${doc.public_url}`);
                    }
                  } catch (docError) {
                    console.error("‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", docError);
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    await service.sendMessage(callbackQuery.message.chat.id, `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: ${doc.public_url}`);
                  }
                } else {
                  console.log("‚ùå DEBUG: –ù–µ—Ç public_url –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:", doc);
                  await service.sendMessage(callbackQuery.message.chat.id, `‚ùå –ù–µ—Ç URL –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${doc.name}`);
                }
              }
            } else {
              messageText += `‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n`;
              console.log("‚ùå DEBUG: –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö");
            }

            replyMarkup = {
              inline_keyboard: [
                [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data: `accredit_view_${applicationId}` }]
              ]
            };
            break;

          case 'summary':
            messageText = `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í –ó–ê–Ø–í–ö–ò –ù–ê –ê–ö–ö–†–ï–î–ò–¢–ê–¶–ò–Æ\n\n`;
            messageText += `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${filesData.supplierName}\n`;
            messageText += `üÜî ID –∑–∞—è–≤–∫–∏: ${filesData.applicationId}\n\n`;
            messageText += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${filesData.summary.products}\n`;
            messageText += `üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${filesData.summary.totalImages}\n`;
            messageText += `üìã –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: ${filesData.summary.totalCertificates}\n`;
            messageText += `üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${filesData.summary.totalDocuments}\n\n`;

            if (filesData.products && filesData.products.length > 0) {
              messageText += `üìã –î–ï–¢–ê–õ–ò –ü–û –¢–û–í–ê–†–ê–ú:\n`;
              filesData.products.forEach((product: any, index: number) => {
                messageText += `${index + 1}. ${product.name}\n`;
                messageText += `   üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${product.imagesCount}\n`;
                messageText += `   üìã –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: ${product.certificatesCount}\n`;
              });
            }

            replyMarkup = {
              inline_keyboard: [
                [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data: `accredit_view_${applicationId}` }]
              ]
            };
            break;
        }

        if (replyMarkup) {
          await service.sendMessageWithButtons(callbackQuery.message.chat.id, messageText, replyMarkup, 'Markdown');
        } else {
          await service.sendMessage(callbackQuery.message.chat.id, messageText, 'Markdown');
        }

        return NextResponse.json({ 
          ok: true, 
          message: `Files data sent for ${applicationId}` 
        });
      } catch (error: any) {
        console.error("‚ùå Accreditation files error:", error);
        return NextResponse.json({ ok: false, error: error.message });
      }
    }

    // ========================================
    // üì∑ –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ò –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í –¢–û–í–ê–†–û–í
    // ========================================

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    if (data.startsWith("accredit_product_images_")) {
      const parts = data.split('_');
      const applicationId = parts[3];
      const productIndex = parts[4];
      
      try {
        await service.answerCallbackQuery(callbackQuery.id, "üì∑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...");
        
        console.log("üîç DEBUG: –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", { applicationId, productIndex });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
        const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/telegram/get-accreditation-files?applicationId=${applicationId}&type=product_images&productIndex=${productIndex}`);
        const result = await response.json();
        
        console.log("üîç DEBUG: –û—Ç–≤–µ—Ç API —Ñ–∞–π–ª–æ–≤:", JSON.stringify(result, null, 2));
        
        if (!result.success) {
          await service.answerCallbackQuery(callbackQuery.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", true);
          return NextResponse.json({ ok: false, error: result.error });
        }

        const filesData = result.data;
        console.log("üîç DEBUG: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤:", JSON.stringify(filesData, null, 2));
        
        let messageText = `üì∑ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –¢–û–í–ê–†–ê\n\n`;
        messageText += `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${filesData.supplierName}\n`;
        messageText += `üÜî ID –∑–∞—è–≤–∫–∏: ${filesData.applicationId}\n`;
        messageText += `üì¶ –¢–æ–≤–∞—Ä: ${filesData.productName}\n\n`;
        
        if (filesData.images && filesData.images.length > 0) {
          console.log("üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", filesData.images.length);
          
          filesData.images.forEach((image: any, index: number) => {
            messageText += `${index + 1}. ${image.name}\n`;
            messageText += `   –†–∞–∑–º–µ—Ä: ${(image.size / 1024).toFixed(1)} KB\n`;
            messageText += `   –¢–∏–ø: ${image.type}\n`;
            messageText += `   URL: ${image.public_url ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}\n\n`;
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
          for (let imageIndex = 0; imageIndex < filesData.images.length; imageIndex++) {
            const image = filesData.images[imageIndex];
            console.log("üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", {
              name: image.name,
              hasUrl: !!image.public_url,
              url: image.public_url
            });
            
            if (image.public_url) {
              try {
                console.log("üì§ DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API");
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/send-accreditation-document?applicationId=${applicationId}&productIndex=${productIndex}&imageIndex=${imageIndex}&chatId=${callbackQuery.message.chat.id}`, {
                  method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                  console.log("‚úÖ DEBUG: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API");
                } else {
                  console.error("‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API:", result.error);
                  // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                  await service.sendMessage(callbackQuery.message.chat.id, `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image.public_url}`);
                }
              } catch (photoError) {
                console.error("‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", photoError);
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                await service.sendMessage(callbackQuery.message.chat.id, `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image.public_url}`);
              }
            } else {
              console.log("‚ùå DEBUG: –ù–µ—Ç public_url –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", image);
              await service.sendMessage(callbackQuery.message.chat.id, `‚ùå –ù–µ—Ç URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${image.name}`);
            }
          }
        } else {
          messageText += `‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n`;
          console.log("‚ùå DEBUG: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö");
        }

        const replyMarkup = {
          inline_keyboard: [
            [{ text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data: `accredit_files_${applicationId}_products` }]
          ]
        };

        await service.sendMessageWithButtons(callbackQuery.message.chat.id, messageText, replyMarkup, 'Markdown');

        return NextResponse.json({ 
          ok: true, 
          message: `Product images sent for ${applicationId}, product ${productIndex}` 
        });
      } catch (error: any) {
        console.error("‚ùå Product images error:", error);
        return NextResponse.json({ ok: false, error: error.message });
      }
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    if (data.startsWith("accredit_product_certs_")) {
      const parts = data.split('_');
      const applicationId = parts[3];
      const productIndex = parts[4];
      
      try {
        await service.answerCallbackQuery(callbackQuery.id, "üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...");
        
        console.log("üîç DEBUG: –ó–∞–ø—Ä–æ—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", { applicationId, productIndex });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
        const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/telegram/get-accreditation-files?applicationId=${applicationId}&type=product_certificates&productIndex=${productIndex}`);
        const result = await response.json();
        
        console.log("üîç DEBUG: –û—Ç–≤–µ—Ç API —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:", JSON.stringify(result, null, 2));
        
        if (!result.success) {
          await service.answerCallbackQuery(callbackQuery.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤", true);
          return NextResponse.json({ ok: false, error: result.error });
        }

        const filesData = result.data;
        console.log("üîç DEBUG: –î–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:", JSON.stringify(filesData, null, 2));
        
        let messageText = `üìã –°–ï–†–¢–ò–§–ò–ö–ê–¢–´ –¢–û–í–ê–†–ê\n\n`;
        messageText += `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${filesData.supplierName}\n`;
        messageText += `üÜî ID –∑–∞—è–≤–∫–∏: ${filesData.applicationId}\n`;
        messageText += `üì¶ –¢–æ–≤–∞—Ä: ${filesData.productName}\n\n`;
        
        if (filesData.certificates && filesData.certificates.length > 0) {
          console.log("üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:", filesData.certificates.length);
          
          filesData.certificates.forEach((cert: any, index: number) => {
            messageText += `${index + 1}. ${cert.name}\n`;
            messageText += `   –†–∞–∑–º–µ—Ä: ${(cert.size / 1024).toFixed(1)} KB\n`;
            messageText += `   –¢–∏–ø: ${cert.type}\n`;
            messageText += `   URL: ${cert.public_url ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}\n\n`;
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ Telegram
          for (let certIndex = 0; certIndex < filesData.certificates.length; certIndex++) {
            const cert = filesData.certificates[certIndex];
            console.log("üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", {
              name: cert.name,
              hasUrl: !!cert.public_url,
              url: cert.public_url
            });
            
            if (cert.public_url) {
              try {
                console.log("üì§ DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API");
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/send-accreditation-certificate?applicationId=${applicationId}&productIndex=${productIndex}&certIndex=${certIndex}&chatId=${callbackQuery.message.chat.id}`, {
                  method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                  console.log("‚úÖ DEBUG: –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API");
                } else {
                  console.error("‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API:", result.error);
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                  const fileCheckResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/find-file?fileName=${encodeURIComponent(cert.name)}`);
                  const fileCheckResult = await fileCheckResponse.json();
                  
                  if (fileCheckResult.success && Object.values(fileCheckResult.results).some((bucket: any) => bucket.found)) {
                    // –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    await service.sendMessage(callbackQuery.message.chat.id, `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${cert.public_url}`);
                  } else {
                    // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    await service.sendMessage(callbackQuery.message.chat.id, `‚ö†Ô∏è –§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${cert.name}\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.`);
                  }
                }
              } catch (certError) {
                console.error("‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", certError);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                try {
                  const fileCheckResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/find-file?fileName=${encodeURIComponent(cert.name)}`);
                  const fileCheckResult = await fileCheckResponse.json();
                  
                  if (fileCheckResult.success && Object.values(fileCheckResult.results).some((bucket: any) => bucket.found)) {
                    await service.sendMessage(callbackQuery.message.chat.id, `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${cert.public_url}`);
                  } else {
                    await service.sendMessage(callbackQuery.message.chat.id, `‚ö†Ô∏è –§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${cert.name}\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.`);
                  }
                } catch (fileCheckError) {
                  await service.sendMessage(callbackQuery.message.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: ${cert.name}`);
                }
              }
            } else {
              console.log("‚ùå DEBUG: –ù–µ—Ç public_url –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", cert);
              await service.sendMessage(callbackQuery.message.chat.id, `‚ùå –ù–µ—Ç URL –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${cert.name}`);
            }
          }
        } else {
          messageText += `‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n`;
          console.log("‚ùå DEBUG: –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö");
        }

        const replyMarkup = {
          inline_keyboard: [
            [{ text: "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data: `accredit_files_${applicationId}_products` }]
          ]
        };

        await service.sendMessageWithButtons(callbackQuery.message.chat.id, messageText, replyMarkup, 'Markdown');

        return NextResponse.json({ 
          ok: true, 
          message: `Product certificates sent for ${applicationId}, product ${productIndex}` 
        });
      } catch (error: any) {
        console.error("‚ùå Product certificates error:", error);
        return NextResponse.json({ ok: false, error: error.message });
      }
    }

    return NextResponse.json({ ok: true, message: "Callback query processed" });
    
  } catch (error: any) {
    console.error("‚ùå Callback query error:", error);
    return NextResponse.json({ ok: false, error: error.message });
  }
} 