import { supabase } from "@/lib/supabaseClient";
import { NextResponse } from 'next/server'

interface ProductHistoryItem {
  category?: string;
  product_name?: string; 
  total_value?: number;
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('user_id')

    if (!userId) {
      return NextResponse.json(
        { error: 'user_id –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      )
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: productHistory, error: historyError } = await supabase
      .from('project_product_history')
      .select('category, product_name, total_value')
      .eq('user_id', userId)

    if (historyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', historyError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' },
        { status: 500 }
      )
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const categoryStats: { [key: string]: { 
      count: number, 
      totalValue: number, 
      products: string[] 
    } } = {}

    productHistory?.forEach((item: ProductHistoryItem) => {
      const category = item.category || '–ü—Ä–æ—á–µ–µ'
      
      if (!categoryStats[category]) {
        categoryStats[category] = {
          count: 0,
          totalValue: 0,
          products: []
        }
      }
      
      categoryStats[category].count += 1
      categoryStats[category].totalValue += item.total_value || 0
      
      if (item.product_name && !categoryStats[category].products.includes(item.product_name)) {
        categoryStats[category].products.push(item.product_name)
      }
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const sortedCategories = Object.entries(categoryStats)
      .map(([category, stats]) => ({
        category,
        frequency: stats.count,
        totalSpent: stats.totalValue,
        productCount: stats.products.length,
        topProducts: stats.products.slice(0, 3), // –¢–æ–ø 3 —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        percentage: Math.round((stats.count / (productHistory?.length || 1)) * 100)
      }))
      .sort((a, b) => b.frequency - a.frequency)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (>10% –æ—Ç –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤)
    const mainCategories = sortedCategories.filter(cat => cat.percentage >= 10)
    const topCategory = sortedCategories[0]?.category
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProfile = {
      primaryCategory: topCategory,
      mainCategories: mainCategories.map(cat => cat.category),
      categoryPreferences: sortedCategories.slice(0, 5), // –¢–æ–ø 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      totalOrders: productHistory?.length || 0,
      analysisDate: new Date().toISOString()
    }

    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`)
    console.log(`üìä –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${topCategory}`)
    console.log(`üìà –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`, mainCategories.map(c => c.category))

    return NextResponse.json({
      success: true,
      userProfile,
      categories: sortedCategories,
      insights: {
        message: topCategory 
          ? `–í—ã —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "${topCategory}" (${sortedCategories[0]?.percentage}% –∑–∞–∫–∞–∑–æ–≤)`
          : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
        recommendation: mainCategories.length > 0
          ? `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: ${mainCategories.map(c => c.category).join(', ')}`
          : '–°–æ–∑–¥–∞–π—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'
      }
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
} 