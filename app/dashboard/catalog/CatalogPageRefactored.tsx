'use client'

import React, { useState, useEffect, useMemo, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import { CATEGORY_CERTIFICATIONS } from '@/components/catalog-categories-and-certifications'
import { CatalogHeader } from './components/CatalogHeader'
import { SupplierGrid } from './components/SupplierGrid'
import { AddSupplierModal } from './components/AddSupplierModal'
import { useCatalogOptimization } from './hooks/useCatalogOptimization'

interface Supplier {
  id: string
  name: string
  company_name: string
  category: string
  country: string
  city: string
  description: string
  logo_url?: string
  contact_email?: string
  contact_phone?: string
  website?: string
  source_type?: string
  total_projects?: number
  last_project_date?: string
  rating?: number
  is_featured?: boolean
  verification_level?: string
  public_rating?: number
  projects_count?: number
  catalog_user_products?: any[]
  catalog_verified_products?: any[]
}

interface Category {
  value: string
  label: string
}

export default function CatalogPageRefactored() {
  const router = useRouter()
  
  // === –°–û–°–¢–û–Ø–ù–ò–ï SUPABASE ===
  const [supabaseError, setSupabaseError] = useState<string | null>(null)
  const [supabaseConnected, setSupabaseConnected] = useState<boolean>(true)

  // === –°–û–°–¢–û–Ø–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê ===
  const [activeMode, setActiveMode] = useState<'clients' | 'catalog'>('clients')
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all')

  // === –î–ê–ù–ù–´–ï –ü–û–°–¢–ê–í–©–ò–ö–û–í ===
  const [realSuppliers, setRealSuppliers] = useState<Supplier[]>([])
  const [verifiedSuppliers, setVerifiedSuppliers] = useState<Supplier[]>([])
  const [loadingSuppliers, setLoadingSuppliers] = useState(false)
  const [loadingVerified, setLoadingVerified] = useState(false)

  // === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
  const [showAddSupplierModal, setShowAddSupplierModal] = useState(false)
  const [selectedSupplier, setSelectedSupplier] = useState<Supplier | null>(null)
  
  // === –ö–ê–¢–ï–ì–û–†–ò–ò ===
  const [apiCategories, setApiCategories] = useState<any[]>([])

  // === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
  const [recommendations, setRecommendations] = useState<any>(null)
  const [loadingRecommendations, setLoadingRecommendations] = useState(false)
  const [recommendationsError, setRecommendationsError] = useState<string | null>(null)

  // === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE ===
  useEffect(() => {
    const checkSupabaseConnection = async () => {
      try {
        const { supabase } = await import('@/lib/supabaseClient')
        const { data, error } = await supabase.auth.getSession()
        
        if (error) {
          console.error('[SUPABASE CONNECTION ERROR]', error)
          setSupabaseError(error.message)
          setSupabaseConnected(false)
        } else {
          setSupabaseConnected(true)
          setSupabaseError(null)
        }
      } catch (err) {
        console.error('[SUPABASE IMPORT ERROR]', err)
        setSupabaseError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞')
        setSupabaseConnected(false)
      }
    }

    checkSupabaseConnection()
  }, [])

  // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–†–ò –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò ===
  useEffect(() => {
    loadSuppliersFromAPI()
    loadVerifiedSuppliersFromAPI()
    loadCategoriesFromAPI()
  }, [])

  // === –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò ===
  const loadSuppliersFromAPI = useCallback(async () => {
    setLoadingSuppliers(true)
    try {
      const response = await fetch('/api/catalog/user-suppliers')
      const data = await response.json()
      
      if (data.suppliers) {
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', data.suppliers.length)
        setRealSuppliers(data.suppliers)
      } else {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API')
        setRealSuppliers([])
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', error)
      setRealSuppliers([])
    } finally {
      setLoadingSuppliers(false)
    }
  }, [])

  const loadVerifiedSuppliersFromAPI = useCallback(async () => {
    setLoadingVerified(true)
    try {
      const response = await fetch('/api/catalog/verified-suppliers')
      const data = await response.json()
      
      if (data.suppliers) {
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', data.suppliers.length)
        setVerifiedSuppliers(data.suppliers)
      } else {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API')
        setVerifiedSuppliers([])
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', error)
      setVerifiedSuppliers([])
    } finally {
      setLoadingVerified(false)
    }
  }, [])

  const loadCategoriesFromAPI = useCallback(async () => {
    try {
      const response = await fetch('/api/catalog/categories')
      const data = await response.json()
      
      if (data.categories) {
        setApiCategories(data.categories)
      } else {
        // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        setApiCategories(CATEGORY_CERTIFICATIONS.map(cat => ({
          name: cat.category,
          icon: 'üì¶'
        })))
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
      // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      setApiCategories(CATEGORY_CERTIFICATIONS.map(cat => ({
        name: cat.category,
        icon: 'üì¶'
      })))
    }
  }, [])

  const loadRecommendations = useCallback(async () => {
    setLoadingRecommendations(true)
    setRecommendationsError(null)
    
    try {
      const response = await fetch('/api/catalog/recommendations?user_id=test-user-id&limit=10')
      const data = await response.json()
      
      if (data.success && data.recommendations) {
        setRecommendations(data.recommendations)
        console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.recommendations)
      } else {
        setRecommendationsError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error)
      setRecommendationsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
    } finally {
      setLoadingRecommendations(false)
    }
  }, [])

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô (–ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï) ===
  const handleViewDetails = useCallback((supplier: Supplier) => {
    setSelectedSupplier(supplier)
  }, [])

  const handleStartProject = useCallback((supplier: Supplier) => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º:', supplier.name)
    
    const params = new URLSearchParams({
      supplierId: supplier.id.toString(),
      supplierName: supplier.name || supplier.company_name || '',
      mode: 'catalog'
    })
    
    router.push(`/dashboard/create-project?${params.toString()}`)
  }, [router])

  const handleImportFromProjects = useCallback(() => {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ —ç—Ö–æ –∫–∞—Ä—Ç–æ—á–µ–∫
    console.log('üîÆ –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤')
  }, [])

  const handleAddSupplier = useCallback(() => {
    setShowAddSupplierModal(true)
  }, [])

  const handleCloseAddModal = useCallback(() => {
    setShowAddSupplierModal(false)
  }, [])

  const handleAddModalSuccess = useCallback(() => {
    setShowAddSupplierModal(false)
    loadSuppliersFromAPI() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  }, [loadSuppliersFromAPI])

  const handleModeChange = useCallback((mode: 'clients' | 'catalog') => {
    setActiveMode(mode)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
    if (mode === 'catalog' && !recommendations && !loadingRecommendations) {
      loadRecommendations()
    }
  }, [recommendations, loadingRecommendations, loadRecommendations])

  // === –î–ê–ù–ù–´–ï –î–õ–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
  const currentSuppliers = useMemo(() => 
    activeMode === 'clients' ? realSuppliers : verifiedSuppliers, 
    [activeMode, realSuppliers, verifiedSuppliers]
  )
  
  const isLoading = useMemo(() => 
    activeMode === 'clients' ? loadingSuppliers : loadingVerified,
    [activeMode, loadingSuppliers, loadingVerified]
  )

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
  const categories: Category[] = useMemo(() => [
    { value: 'all', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
    ...apiCategories.map(cat => ({ 
      value: cat.name, 
      label: `${cat.icon || 'üì¶'} ${cat.name}` 
    }))
  ], [apiCategories])

  // === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ê–õ–û–ì–ê ===
  const {
    filteredSuppliers,
    sortedSuppliers,
    searchStats,
    sortOptions,
    currentSort,
    setCurrentSort,
    debouncedSearchQuery,
    isSearching
  } = useCatalogOptimization({
    suppliers: currentSuppliers,
    searchQuery,
    selectedCategory,
    mode: activeMode,
    debounceMs: 300
  })

  return (
    <div className="min-h-screen bg-background">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ */}
      <CatalogHeader
        activeMode={activeMode}
        setActiveMode={handleModeChange}
        realSuppliersCount={realSuppliers.length}
        verifiedSuppliersCount={verifiedSuppliers.length}
        filteredSuppliersCount={searchStats.filtered}
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        selectedCategory={selectedCategory}
        setSelectedCategory={setSelectedCategory}
        categories={categories}
        sortOptions={sortOptions}
        currentSort={currentSort}
        setCurrentSort={setCurrentSort}
        isSearching={isSearching}
        onAddSupplier={handleAddSupplier}
        onImportFromProjects={handleImportFromProjects}
        onLoadRecommendations={loadRecommendations}
        supabaseConnected={supabaseConnected}
        supabaseError={supabaseError}
      />

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ */}
      <div className="max-w-7xl mx-auto px-8 py-12">
        <SupplierGrid
          suppliers={sortedSuppliers}
          mode={activeMode}
          loading={isLoading}
          searchQuery={debouncedSearchQuery}
          selectedCategory={selectedCategory}
          searchStats={searchStats}
          onViewDetails={handleViewDetails}
          onStartProject={handleStartProject}
          onAddSupplier={handleAddSupplier}
          onImportFromProjects={handleImportFromProjects}
        />
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {showAddSupplierModal && (
        <AddSupplierModal
          isOpen={showAddSupplierModal}
          onClose={handleCloseAddModal}
          onSuccess={handleAddModalSuccess}
        />
      )}

      {/* TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {/* - SupplierModal –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
      {/* - EchoCardsModal –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
      {/* - ProductModal –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
    </div>
  )
} 