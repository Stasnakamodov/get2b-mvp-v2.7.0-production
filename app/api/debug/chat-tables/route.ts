import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function GET() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...");

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data: connectionTest, error: connectionError } = await supabase
      .from('projects')
      .select('count')
      .limit(1);
    
    if (connectionError) {
      return NextResponse.json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase",
        details: connectionError.message
      });
    }

    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç");

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —á–∞—Ç–æ–≤
    const chatTablesCheck = [];
    
    for (const tableName of ['chat_rooms', 'chat_messages', 'chat_participants']) {
      const { data, error } = await supabase
        .from(tableName)
        .select('*')
        .limit(1);
      
      chatTablesCheck.push({
        table_name: tableName,
        exists: !error,
        error: error?.message || null
      });
    }

    console.log("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:", chatTablesCheck);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_chat_rooms
    let functionCheck = null;
    const testUserId = "00000000-0000-0000-0000-000000000000";
    const { data: functionData, error: functionError } = await supabase
      .rpc('get_user_chat_rooms', { p_user_id: testUserId });

    if (!functionError) {
      functionCheck = "‚úÖ –§—É–Ω–∫—Ü–∏—è get_user_chat_rooms —Ä–∞–±–æ—Ç–∞–µ—Ç";
    } else {
      functionCheck = `‚ùå –§—É–Ω–∫—Ü–∏—è get_user_chat_rooms –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${functionError.message}`;
    }

    console.log("‚öôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π:", functionCheck);

    // 4. –ü—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    let roomsTestResult = null;
    const { data: roomsData, error: roomsError } = await supabase
      .from('chat_rooms')
      .select('count')
      .limit(1);

    if (!roomsError) {
      roomsTestResult = "‚úÖ –¢–∞–±–ª–∏—Ü–∞ chat_rooms –¥–æ—Å—Ç—É–ø–Ω–∞";
    } else {
      roomsTestResult = `‚ùå –¢–∞–±–ª–∏—Ü–∞ chat_rooms –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${roomsError.message}`;
    }

    console.log("üè† –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ chat_rooms:", roomsTestResult);

    // 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å)
    let createRoomTest = null;
    if (!roomsError) {
      const testUserId = "00000000-0000-0000-0000-000000000000"; // –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
      const { data: createData, error: createError } = await supabase
        .from('chat_rooms')
        .insert([{
          user_id: testUserId,
          room_type: 'ai',
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
          description: '–¢–µ—Å—Ç API'
        }])
        .select()
        .single();

      if (!createError) {
        createRoomTest = "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç";
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
        await supabase.from('chat_rooms').delete().eq('id', createData.id);
      } else {
        createRoomTest = `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç: ${createError.message}`;
      }
    }

    // –ü–æ–¥—Å—á–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    const tablesExist = chatTablesCheck.filter(t => t.exists).length;
    const allTablesReady = tablesExist === 3;
    const functionWorks = !functionError;

    return NextResponse.json({
      success: true,
      timestamp: new Date().toISOString(),
      diagnostics: {
        connection: "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        tables: chatTablesCheck,
        tables_summary: `${tablesExist}/3 —Ç–∞–±–ª–∏—Ü –≥–æ—Ç–æ–≤–æ`,
        functions: functionCheck, 
        chat_rooms_access: roomsTestResult,
        create_room_test: createRoomTest,
        system_ready: allTablesReady && functionWorks,
        next_steps: allTablesReady ? 
          "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!" : 
          "‚ùå –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç: create-chathub-tables-simple.sql",
        errors: {
          function_error: functionError?.message,
          rooms_error: roomsError?.message
        }
      }
    });

  } catch (error) {
    console.error("üí• Unexpected error:", error);
    return NextResponse.json({
      success: false,
      error: "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
      details: String(error),
      timestamp: new Date().toISOString()
    });
  }
} 