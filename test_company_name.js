// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
const testText = `–ö–ê–†–¢–û–ß–ö–ê
–ü–†–ï–î–ü–†–ò–Ø–¢–ò–Ø
–û–û–û "–ê–ô –¢–ò –ì–†–£–ü"
–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø
–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
–û–ë–©–ï–°–¢–í–û –° –û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨–Æ "–ê–ô –¢–ò –ì–†–£–ü"
–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
–û–û–û "–ê–ô –¢–ò –ì–†–£–ü"`;

console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏...");

// –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
const quoteMatch = testText.match(/(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)\s*["¬´]([^¬ª"]+)["¬ª]/i);
console.log("–¢–µ—Å—Ç 1 - –ü–æ–∏—Å–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö:", quoteMatch ? `${quoteMatch[1]} "${quoteMatch[2]}"` : "–ù–µ –Ω–∞–π–¥–µ–Ω–æ");

// –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
const patternMatch = testText.match(/\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)\s*["¬´]?([^¬ª"\n\r0-9]{3,100})["¬ª]?/i);
console.log("–¢–µ—Å—Ç 2 - –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É:", patternMatch ? `${patternMatch[1]} ${patternMatch[2]}` : "–ù–µ –Ω–∞–π–¥–µ–Ω–æ");

// –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏
const lines = testText.split('\n');
for (const line of lines) {
  const trimmedLine = line.trim();
  if (trimmedLine.includes('"') && 
      (trimmedLine.includes('–û–û–û') || trimmedLine.includes('–û–ê–û') || trimmedLine.includes('–ó–ê–û') || trimmedLine.includes('–ò–ü'))) {
    
    const match = trimmedLine.match(/(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)\s*["¬´]([^¬ª"]+)["¬ª]/i);
    if (match) {
      console.log("–¢–µ—Å—Ç 3 - –ù–∞–π–¥–µ–Ω–æ –≤ —Å—Ç—Ä–æ–∫–µ:", `${match[1]} "${match[2]}"`);
      break;
    }
  }
}

console.log("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"); 