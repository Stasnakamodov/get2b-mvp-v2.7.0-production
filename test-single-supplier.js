const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  'https://ejkhdhexkadecpbjjmsz.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVqa2hkaGV4a2FkZWNwYmpqbXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwMzcxNDIsImV4cCI6MjA2MjYxMzE0Mn0.DHcfdHrQmPiG4AkwDaCa9AXYB7zQPJlK7VuXt-g1uUU'
);

async function testSingleSupplier() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const supplier = {
      name: '–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç',
      company_name: '–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç –û–û–û',
      category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
      country: '–†–æ—Å—Å–∏—è',
      city: '–ú–æ—Å–∫–≤–∞',
      description: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
      contact_email: 'test@test.ru',
      public_rating: 4.8,
      reviews_count: 127,
      projects_count: 189,
      is_featured: true,
      is_active: true,
      is_verified: true,
      moderation_status: 'approved'
    };
    
    const { data, error } = await supabase
      .from('catalog_verified_suppliers')
      .insert([supplier])
      .select();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      console.log('\nüîÑ –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
      const categories = ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å', '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ'];
      
      for (const cat of categories) {
        console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${cat}`);
        const testSupplier = { ...supplier, category: cat, name: `–¢–µ—Å—Ç ${cat}` };
        
        const { data: testData, error: testError } = await supabase
          .from('catalog_verified_suppliers')
          .insert([testSupplier])
          .select();
        
        if (testError) {
          console.log(`‚ùå ${cat}: ${testError.message}`);
        } else {
          console.log(`‚úÖ ${cat}: —É—Å–ø–µ—à–Ω–æ`);
          console.log('–î–∞–Ω–Ω—ã–µ:', testData?.[0]);
          break;
        }
      }
      
    } else {
      console.log('‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', data?.[0]);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testSingleSupplier();