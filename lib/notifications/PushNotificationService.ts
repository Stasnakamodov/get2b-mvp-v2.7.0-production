// import webpush from 'web-push' // TODO: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: npm install web-push @types/web-push

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è web-push (–ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç)
declare const webpush: {
  setVapidDetails: (subject: string, publicKey: string, privateKey: string) => void
  sendNotification: (subscription: any, payload: string, options?: any) => Promise<{ statusCode: number }>
}

export interface PushSubscription {
  endpoint: string
  keys: {
    p256dh: string
    auth: string
  }
}

export interface PushNotificationPayload {
  title: string
  body: string
  icon?: string
  badge?: string
  tag?: string
  data?: any
  actions?: Array<{
    action: string
    title: string
    icon?: string
  }>
  requireInteraction?: boolean
  silent?: boolean
}

/**
 * üîî –°–ï–†–í–ò–° PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Web Push API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±—Ä–∞—É–∑–µ—Ä
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Chrome, Firefox, Safari, Edge
 */
export class PushNotificationService {
  private static instance: PushNotificationService
  private isConfigured: boolean = false

  constructor() {
    this.initializeWebPush()
  }

  static getInstance(): PushNotificationService {
    if (!PushNotificationService.instance) {
      PushNotificationService.instance = new PushNotificationService()
    }
    return PushNotificationService.instance
  }

  private initializeWebPush() {
    const vapidPublicKey = process.env.VAPID_PUBLIC_KEY
    const vapidPrivateKey = process.env.VAPID_PRIVATE_KEY
    const vapidEmail = process.env.VAPID_EMAIL

    if (!vapidPublicKey || !vapidPrivateKey || !vapidEmail) {
      console.warn('‚ö†Ô∏è VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.')
      console.log('üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npx web-push generate-vapid-keys')
      return
    }

    try {
      webpush.setVapidDetails(
        `mailto:${vapidEmail}`,
        vapidPublicKey,
        vapidPrivateKey
      )
      this.isConfigured = true
      console.log('‚úÖ Web Push —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web Push:', error)
    }
  }

  /**
   * üì§ –û–¢–ü–†–ê–í–ö–ê PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
   */
  async sendNotification(
    subscription: PushSubscription,
    payload: PushNotificationPayload
  ): Promise<{ success: boolean; error?: string; messageId?: string }> {
    if (!this.isConfigured) {
      return {
        success: false,
        error: 'Push notifications not configured'
      }
    }

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const notificationPayload = JSON.stringify({
        title: payload.title,
        body: payload.body,
        icon: payload.icon || '/favicon-192x192.png',
        badge: payload.badge || '/favicon-96x96.png',
        tag: payload.tag || 'get2b-notification',
        data: payload.data || {},
        actions: payload.actions || [],
        requireInteraction: payload.requireInteraction || false,
        silent: payload.silent || false,
        timestamp: Date.now()
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const result = await webpush.sendNotification(
        subscription,
        notificationPayload,
        {
          TTL: 24 * 60 * 60, // 24 —á–∞—Å–∞
          urgency: 'normal'
        }
      )

      console.log('‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result.statusCode)

      return {
        success: true,
        messageId: `push_${Date.now()}`
      }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
      if (error.statusCode === 410) {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
        return {
          success: false,
          error: 'Push subscription expired'
        }
      }

      if (error.statusCode === 413) {
        // Payload —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        return {
          success: false,
          error: 'Push payload too large'
        }
      }

      return {
        success: false,
        error: error.message || 'Unknown push notification error'
      }
    }
  }

  /**
   * üì± –°–û–ó–î–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –î–õ–Ø –ü–†–û–ï–ö–¢–ê
   */
  createProjectNotification(
    projectId: string,
    status: string,
    projectData: any
  ): PushNotificationPayload {
    const company = projectData.companyName || '–ü—Ä–æ–µ–∫—Ç'
    const amount = projectData.amount ? `${projectData.amount} ${projectData.currency || 'USD'}` : ''

    switch (status) {
      case 'waiting_approval':
        return {
          title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ üü°',
          body: `–ü—Ä–æ–µ–∫—Ç "${company}" (${amount}) –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è`,
          icon: '/icons/approval-needed.png',
          tag: `project_${projectId}_approval`,
          data: { projectId, status, action: 'approval_needed' },
          actions: [
            { action: 'open_project', title: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç', icon: '/icons/open.png' },
            { action: 'approve', title: '–û–¥–æ–±—Ä–∏—Ç—å', icon: '/icons/approve.png' }
          ],
          requireInteraction: true
        }

      case 'waiting_receipt':
        return {
          title: '–û–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ üßæ',
          body: `–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è "${company}" (${amount})`,
          icon: '/icons/receipt-waiting.png',
          tag: `project_${projectId}_receipt`,
          data: { projectId, status, action: 'upload_receipt' },
          actions: [
            { action: 'open_project', title: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫', icon: '/icons/upload.png' }
          ],
          requireInteraction: true
        }

      case 'receipt_rejected':
        return {
          title: '–ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå',
          body: `–ß–µ–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${company}" –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫.`,
          icon: '/icons/receipt-rejected.png',
          tag: `project_${projectId}_rejected`,
          data: { projectId, status, action: 'reupload_receipt' },
          actions: [
            { action: 'open_project', title: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å', icon: '/icons/fix.png' }
          ],
          requireInteraction: true
        }

      case 'waiting_manager_receipt':
        return {
          title: '–û–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üíº',
          body: `–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${company}"`,
          icon: '/icons/manager-receipt.png',
          tag: `project_${projectId}_manager`,
          data: { projectId, status, action: 'manager_receipt_needed' },
          actions: [
            { action: 'open_project', title: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç', icon: '/icons/open.png' }
          ]
        }

      case 'waiting_client_confirmation':
        return {
          title: '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚úÖ',
          body: `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "${company}"`,
          icon: '/icons/confirmation.png',
          tag: `project_${projectId}_confirm`,
          data: { projectId, status, action: 'client_confirmation' },
          actions: [
            { action: 'open_project', title: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', icon: '/icons/confirm.png' }
          ],
          requireInteraction: true
        }

      case 'completed':
        return {
          title: '–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω üéâ',
          body: `–ü—Ä–æ–µ–∫—Ç "${company}" (${amount}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!`,
          icon: '/icons/completed.png',
          tag: `project_${projectId}_completed`,
          data: { projectId, status, action: 'project_completed' },
          actions: [
            { action: 'open_project', title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', icon: '/icons/view.png' }
          ]
        }

      default:
        return {
          title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ üìã',
          body: `–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ "${company}" –∏–∑–º–µ–Ω—ë–Ω`,
          icon: '/icons/update.png',
          tag: `project_${projectId}_update`,
          data: { projectId, status, action: 'status_update' },
          actions: [
            { action: 'open_project', title: '–û—Ç–∫—Ä—ã—Ç—å', icon: '/icons/open.png' }
          ]
        }
    }
  }

  /**
   * üîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
   */
  isEnabled(): boolean {
    return this.isConfigured
  }

  /**
   * üìã –ü–û–õ–£–ß–ï–ù–ò–ï VAPID PUBLIC KEY
   */
  getVapidPublicKey(): string | null {
    return process.env.VAPID_PUBLIC_KEY || null
  }

  /**
   * ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–î–ü–ò–°–ö–ò
   */
  validateSubscription(subscription: any): subscription is PushSubscription {
    return (
      subscription &&
      typeof subscription.endpoint === 'string' &&
      subscription.keys &&
      typeof subscription.keys.p256dh === 'string' &&
      typeof subscription.keys.auth === 'string'
    )
  }

  /**
   * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò
   */
  async getDeliveryStats(): Promise<{
    totalSent: number
    delivered: number
    failed: number
    expired: number
  }> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return {
      totalSent: 0,
      delivered: 0,
      failed: 0,
      expired: 0
    }
  }
} 