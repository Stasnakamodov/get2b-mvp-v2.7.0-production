import { NextRequest, NextResponse } from 'next/server';
import CurrencyService from '@/lib/services/CurrencyService';

/**
 * üí± API –≠–ù–î–ü–û–ò–ù–¢ –ö–£–†–°–û–í –í–ê–õ–Æ–¢ GET2B
 * GET /api/currency/rates
 */
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const forceRefresh = searchParams.get('refresh') === 'true';
  const currencies = searchParams.get('currencies')?.split(',');

  try {
    console.log(`üì° [Currency API] –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤${forceRefresh ? ' (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)' : ''}`);
    
    const currencyService = CurrencyService.getInstance();
    const data = await currencyService.getRates(forceRefresh);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª—é—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (currencies && currencies.length > 0) {
      const filteredRates: Record<string, any> = {};
      currencies.forEach(currency => {
        const code = currency.toUpperCase();
        if (data.rates[code]) {
          filteredRates[code] = data.rates[code];
        }
      });
      data.rates = filteredRates;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—É—é –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const response = {
      ...data,
      meta: {
        cache_duration: '1 hour',
        last_updated: data.updated_at,
        available_currencies: Object.keys(data.rates),
        api_version: '1.0',
        get2b_integration: true
      }
    };

    console.log(`‚úÖ [Currency API] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${Object.keys(data.rates).length}`);
    console.log(`üìä [Currency API] –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}`);

    return NextResponse.json(response, {
      status: 200,
      headers: {
        'Cache-Control': 'public, max-age=3600', // 1 —á–∞—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        'X-Source': data.source,
        'X-Updated': data.updated_at
      }
    });

  } catch (error: any) {
    console.error('‚ùå [Currency API] –û—à–∏–±–∫–∞:', error);

    return NextResponse.json({
      error: 'Failed to fetch currency rates',
      message: error.message,
      timestamp: new Date().toISOString(),
      success: false
    }, {
      status: 500
    });
  }
}

/**
 * üí∞ POST /api/currency/rates - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
 */
export async function POST(request: NextRequest) {
  try {
    const { amount, from, to = 'RUB' } = await request.json();

    if (!amount || !from) {
      return NextResponse.json({
        error: 'Missing required parameters',
        message: 'amount and from currency are required',
        success: false
      }, { status: 400 });
    }

    const currencyService = CurrencyService.getInstance();
    const conversion = await currencyService.convert(Number(amount), from.toUpperCase(), to.toUpperCase());

    console.log(`üí± [Currency API] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${amount} ${from} ‚Üí ${conversion.amount} ${to}`);

    return NextResponse.json({
      success: true,
      conversion,
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    console.error('‚ùå [Currency API] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
    
    return NextResponse.json({
      error: 'Conversion failed',
      message: error.message,
      success: false
    }, { status: 500 });
  }
} 