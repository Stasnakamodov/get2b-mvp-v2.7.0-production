import { useEffect, useRef, useCallback, useState } from 'react';
import { ChatRoomWithStats } from '@/lib/types/chat';

// –•—É–∫ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º error handling
export function useChatRoomsPolling({
  userId,
  onRoomsUpdate,
  enabled = !!userId, // üîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—â–∏—Ç–æ–π
  pollingInterval = 45000 // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: 45 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∏–≥–∞–Ω–∏—è (–±—ã–ª–æ 25)
}: {
  userId?: string;
  onRoomsUpdate?: (rooms: ChatRoomWithStats[]) => void;
  enabled?: boolean;
  pollingInterval?: number;
}) {
  
  const pollingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isPollingRef = useRef(false);
  const retryCountRef = useRef(0);
  const maxRetries = 3;
  
  // üÜï –ù–û–í–û–ï: –∫–µ—à –¥–ª—è —É–º–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const lastRoomsHashRef = useRef<string>('');
  const lastSuccessTimeRef = useRef<number>(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const [lastError, setLastError] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState(true);

  // üÜï –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const createRoomsHash = (rooms: ChatRoomWithStats[]): string => {
    return rooms.map(room => 
      `${room.id}-${room.name}-${room.unread_count}-${room.last_message_content?.substring(0, 50) || ''}`
    ).join('|');
  };

  // –§—É–Ω–∫—Ü–∏—è —Å retry logic –∏ exponential backoff
  const fetchWithRetry = async (url: string, maxRetries: number = 3): Promise<any> => {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ Polling attempt ${attempt}/${maxRetries} for userId: ${userId}`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000); // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 30 —Å–µ–∫—É–Ω–¥
        
        const response = await fetch(url, {
          signal: controller.signal,
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache'
          }
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log(`‚úÖ Polling success, rooms: ${data.rooms?.length || 0}`);
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        retryCountRef.current = 0;
        setLastError(null);
        setIsConnected(true);
        
        return data;
        
      } catch (error) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AbortError –æ—Ç timeout
        if (error instanceof Error && error.name === 'AbortError') {
          console.warn(`‚è±Ô∏è Polling timeout on attempt ${attempt} - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
          setLastError('Timeout - —Å–µ—Ä–≤–µ—Ä –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç');
          
          // –î–ª—è timeout –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
          if (attempt === maxRetries) {
            console.log('üì° Timeout –Ω–∞ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º polling...');
            retryCountRef.current = Math.min(retryCountRef.current + 1, 3); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–æ—Å—Ç
            setIsConnected(false);
            return { success: false, error: 'timeout' }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–º–µ—Å—Ç–æ throw
          }
        } else {
          console.warn(`‚ö†Ô∏è Polling attempt ${attempt} failed:`, error);
          setLastError(error instanceof Error ? error.message : 'Unknown error');
          
          if (attempt === maxRetries) {
            setIsConnected(false);
            throw error;
          }
        }
        
        // Exponential backoff: 1s, 2s, 4s
        const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000); // –ú–∞–∫—Å 5 —Å–µ–∫
        console.log(`‚è≥ Retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è polling
  const pollForRoomsUpdates = useCallback(async () => {
    if (!userId || !enabled || isPollingRef.current) {
      return;
    }

    try {
      isPollingRef.current = true;

      const params = new URLSearchParams({ user_id: userId });
      const url = `/api/chat/rooms?${params}`;
      
      const data = await fetchWithRetry(url, maxRetries);

      // üöÄ –£–ú–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      if (data && data.success && data.rooms && onRoomsUpdate) {
        const newRoomsHash = createRoomsHash(data.rooms);
        const currentTime = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if (newRoomsHash !== lastRoomsHashRef.current) {
          console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö - –æ–±–Ω–æ–≤–ª—è–µ–º');
          onRoomsUpdate(data.rooms);
          lastRoomsHashRef.current = newRoomsHash;
          lastSuccessTimeRef.current = currentTime;
        } else {
          console.log('‚úÖ –ö–æ–º–Ω–∞—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        }
      } else if (data && data.error === 'timeout') {
        // Timeout - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–æ –∏ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
        console.log('‚è±Ô∏è Polling timeout - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      }
      
    } catch (error) {
      console.error('üí• All polling attempts failed:', error);
      retryCountRef.current++;
      
      // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (retryCountRef.current > 5) {
        console.warn('üö® Too many polling failures, slowing down...');
      }
      
    } finally {
      isPollingRef.current = false;
    }
  }, [userId, enabled, onRoomsUpdate]);

  // –ó–∞–ø—É—Å–∫ polling —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  const startPolling = useCallback(() => {
    if (pollingTimeoutRef.current) {
      clearTimeout(pollingTimeoutRef.current);
    }

    const poll = async () => {
      await pollForRoomsUpdates();
      
      if (enabled && userId) {
        // üß† –ê–î–ê–ü–¢–ò–í–ù–´–ô –ò–ù–¢–ï–†–í–ê–õ: –∑–∞–º–µ–¥–ª—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let adaptiveInterval = pollingInterval;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if (retryCountRef.current > 5) {
          adaptiveInterval *= 2;
        }
        
        // üÜï –ù–û–í–û–ï: –∑–∞–º–µ–¥–ª—è–µ–º –µ—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π (—ç–∫–æ–Ω–æ–º–∏–º —Ä–µ—Å—É—Ä—Å—ã)
        const timeSinceLastUpdate = Date.now() - lastSuccessTimeRef.current;
        if (timeSinceLastUpdate > 300000) { // 5 –º–∏–Ω—É—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          adaptiveInterval = Math.min(adaptiveInterval * 1.5, 90000); // –ú–∞–∫—Å 90 —Å–µ–∫—É–Ω–¥
          console.log(`‚è≥ –ó–∞–º–µ–¥–ª—è–µ–º polling –¥–æ ${adaptiveInterval/1000}—Å - –¥–æ–ª–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`);
        }
          
        pollingTimeoutRef.current = setTimeout(poll, adaptiveInterval);
      }
    };

    poll();
  }, [pollForRoomsUpdates, enabled, userId, pollingInterval]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
  const stopPolling = useCallback(() => {
    if (pollingTimeoutRef.current) {
      clearTimeout(pollingTimeoutRef.current);
      pollingTimeoutRef.current = null;
    }
    isPollingRef.current = false;
  }, []);

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  const forceUpdate = useCallback(async () => {
    await pollForRoomsUpdates();
  }, [pollForRoomsUpdates]);

  // –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ polling –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (enabled && userId) {
      startPolling();
    } else {
      stopPolling();
    }

    return () => stopPolling();
  }, [enabled, userId, startPolling, stopPolling]);

  // Cleanup –ø—Ä–∏ unmount
  useEffect(() => {
    return () => {
      stopPolling();
    };
  }, [stopPolling]);

  return {
    startPolling,
    stopPolling,
    forceUpdate,
    isPolling: isPollingRef.current,
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    isConnected,
    lastError,
    retryCount: retryCountRef.current
  };
} 