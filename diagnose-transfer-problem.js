console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –ü–ï–†–ï–ù–û–°–ê –¢–û–í–ê–†–û–í');
console.log('=====================================');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∏ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç
async function diagnoseTransferProblem() {
    const baseUrl = 'http://localhost:3000';
    
    try {
        console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–†–ê–ù–ñ–ï–í–û–ô –ö–û–ú–ù–ê–¢–´ (catalog_verified_suppliers)');
        const verifiedSuppliersResponse = await fetch(`${baseUrl}/api/supabase-direct?table=catalog_verified_suppliers`);
        const verifiedSuppliers = await verifiedSuppliersResponse.json();
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ: ${verifiedSuppliers.length}`);
        
        if (verifiedSuppliers.length > 0) {
            console.log('\nüìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:');
            for (const supplier of verifiedSuppliers.slice(0, 3)) {
                console.log(`  - ${supplier.name} (ID: ${supplier.id}) - Active: ${supplier.is_active}`);
            }
        }
        
        console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–û–í–ê–†–û–í –í –û–†–ê–ù–ñ–ï–í–û–ô –ö–û–ú–ù–ê–¢–ï (catalog_verified_products)');
        const verifiedProductsResponse = await fetch(`${baseUrl}/api/supabase-direct?table=catalog_verified_products`);
        const verifiedProducts = await verifiedProductsResponse.json();
        
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ: ${verifiedProducts.length}`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
        const productsBySupplier = {};
        verifiedProducts.forEach(product => {
            const supplierId = product.supplier_id;
            if (!productsBySupplier[supplierId]) {
                productsBySupplier[supplierId] = [];
            }
            productsBySupplier[supplierId].push(product);
        });
        
        console.log('\nüìã –¢–æ–≤–∞—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º:');
        Object.entries(productsBySupplier).forEach(([supplierId, products]) => {
            const supplier = verifiedSuppliers.find(s => s.id === supplierId);
            const supplierName = supplier ? supplier.name : '–ù–ï –ù–ê–ô–î–ï–ù';
            console.log(`  - ${supplierName} (${supplierId}): ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            
            if (products.length > 0) {
                console.log(`    –ü—Ä–∏–º–µ—Ä—ã: ${products.slice(0, 2).map(p => p.name).join(', ')}`);
            }
        });
        
        console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–ï–ô –ö–û–ú–ù–ê–¢–´ (catalog_user_suppliers)');
        const userSuppliersResponse = await fetch(`${baseUrl}/api/supabase-direct?table=catalog_user_suppliers`);
        const userSuppliers = await userSuppliersResponse.json();
        
        console.log(`üè¢ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ: ${userSuppliers.length}`);
        
        if (userSuppliers.length > 0) {
            console.log('\nüìã –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏:');
            for (const supplier of userSuppliers) {
                console.log(`  - ${supplier.name} (ID: ${supplier.id}) - Source: ${supplier.source_supplier_id} - Active: ${supplier.is_active}`);
            }
        }
        
        console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–û–í–ê–†–û–í –í –°–ò–ù–ï–ô –ö–û–ú–ù–ê–¢–ï (catalog_user_products)');
        const userProductsResponse = await fetch(`${baseUrl}/api/supabase-direct?table=catalog_user_products`);
        const userProducts = await userProductsResponse.json();
        
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ: ${userProducts.length}`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –≤ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ
        const userProductsBySupplier = {};
        userProducts.forEach(product => {
            const supplierId = product.supplier_id;
            if (!userProductsBySupplier[supplierId]) {
                userProductsBySupplier[supplierId] = [];
            }
            userProductsBySupplier[supplierId].push(product);
        });
        
        console.log('\nüìã –¢–æ–≤–∞—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –≤ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ:');
        Object.entries(userProductsBySupplier).forEach(([supplierId, products]) => {
            const supplier = userSuppliers.find(s => s.id === supplierId);
            const supplierName = supplier ? supplier.name : '–ù–ï –ù–ê–ô–î–ï–ù';
            console.log(`  - ${supplierName} (${supplierId}): ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        });
        
        console.log('\n5Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´');
        console.log('====================');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ
        let problemFound = false;
        
        for (const userSupplier of userSuppliers) {
            const userProductsCount = userProductsBySupplier[userSupplier.id]?.length || 0;
            const sourceSupplierProducts = productsBySupplier[userSupplier.source_supplier_id]?.length || 0;
            
            if (sourceSupplierProducts > 0 && userProductsCount === 0) {
                console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: ${userSupplier.name}`);
                console.log(`   - –í –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ: ${sourceSupplierProducts} —Ç–æ–≤–∞—Ä–æ–≤`);
                console.log(`   - –í —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ: ${userProductsCount} —Ç–æ–≤–∞—Ä–æ–≤`);
                console.log(`   - Source supplier ID: ${userSupplier.source_supplier_id}`);
                problemFound = true;
            }
        }
        
        if (!problemFound) {
            console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseTransferProblem();