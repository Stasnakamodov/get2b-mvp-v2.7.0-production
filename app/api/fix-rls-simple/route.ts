import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function POST() {
  try {
    console.log("üîß –í–†–ï–ú–ï–ù–ù–û –æ—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è —á–∞—Ç-—Ç–∞–±–ª–∏—Ü...");

    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –¥–µ–ª–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
    // –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const results = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º
    const { data: roomsTest, error: roomsError } = await supabase
      .from('chat_rooms')
      .select('id')
      .limit(1);

    if (roomsError) {
      console.log("‚ùå –û—à–∏–±–∫–∞ chat_rooms:", roomsError.message);
      results.push({ table: "chat_rooms", error: roomsError.message });
    } else {
      console.log("‚úÖ chat_rooms –¥–æ—Å—Ç—É–ø–Ω–∞");
      results.push({ table: "chat_rooms", accessible: true });
    }

    const { data: messagesTest, error: messagesError } = await supabase
      .from('chat_messages')
      .select('id')
      .limit(1);

    if (messagesError) {
      console.log("‚ùå –û—à–∏–±–∫–∞ chat_messages:", messagesError.message);
      results.push({ table: "chat_messages", error: messagesError.message });
    } else {
      console.log("‚úÖ chat_messages –¥–æ—Å—Ç—É–ø–Ω–∞");
      results.push({ table: "chat_messages", accessible: true });
    }

    const { data: participantsTest, error: participantsError } = await supabase
      .from('chat_participants')
      .select('id')
      .limit(1);

    if (participantsError) {
      console.log("‚ùå –û—à–∏–±–∫–∞ chat_participants:", participantsError.message);
      results.push({ table: "chat_participants", error: participantsError.message });
    } else {
      console.log("‚úÖ chat_participants –¥–æ—Å—Ç—É–ø–Ω–∞");
      results.push({ table: "chat_participants", accessible: true });
    }

    return NextResponse.json({
      success: true,
      message: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
      results,
      note: "–ù—É–∂–Ω—ã –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è RLS –ø–æ–ª–∏—Ç–∏–∫",
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü",
      details: String(error)
    }, { status: 500 });
  }
} 