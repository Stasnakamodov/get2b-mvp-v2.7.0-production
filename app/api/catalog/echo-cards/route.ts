import { NextRequest, NextResponse } from 'next/server'
import { supabaseAdmin as supabase } from '@/lib/supabaseAdmin'

// üß† API –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø "–≠–•–û –ö–ê–†–¢–û–ß–ï–ö" –ü–û–°–¢–ê–í–©–ò–ö–û–í –ò–ó –ü–†–û–ï–ö–¢–û–í
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('user_id')
    
    if (!userId) {
      return NextResponse.json(
        { error: 'user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      )
    }

    // ========================================
    // üìä –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–û–õ–¨–ö–û –ê–ö–¢–£–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
    // ========================================

    // 1. –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ project_requisites
    console.log('üîç [PRIORITY 1] –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ project_requisites –¥–ª—è user_id:', userId)
    
    const { data: projectRequisites, error: projectRequisitesError } = await supabase
      .from('project_requisites')
      .select('*')
      .eq('user_id', userId)

    if (projectRequisitesError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è project_requisites (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç):', projectRequisitesError)
    }

    console.log('üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ project_requisites:', projectRequisites?.length || 0)

    // 2. –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ fallback
    console.log('üîç [PRIORITY 2] –ü–æ–ª—É—á–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è user_id:', userId)
    
    const { data: bankRequisites, error: bankError } = await supabase
      .from('bank_accounts')
      .select('*')
      .eq('user_id', userId)

    const { data: cardRequisites, error: cardError } = await supabase
      .from('supplier_cards')
      .select('*')
      .eq('user_id', userId)

    const { data: cryptoRequisites, error: cryptoError } = await supabase
      .from('crypto_wallets')
      .select('*')
      .eq('user_id', userId)

    if (bankError || cardError || cryptoError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', { bankError, cardError, cryptoError })
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤' },
        { status: 500 }
      )
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Å —Ç–∏–ø–∞–º–∏ (FALLBACK)
    const allTemplateRequisites = [
      ...(bankRequisites || []).map(r => ({ ...r, type: 'bank', source: 'bank_accounts' })),
      ...(cardRequisites || []).map(r => ({ ...r, type: 'p2p', source: 'supplier_cards' })),
      ...(cryptoRequisites || []).map(r => ({ ...r, type: 'crypto', source: 'crypto_wallets' }))
    ]

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ç–∏–ø–∞–º–∏ (–ü–†–ò–û–†–ò–¢–ï–¢)
    const allProjectRequisites = (projectRequisites || []).map(r => ({ 
      ...r, 
      source: 'project_requisites' 
    }))

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', {
      from_projects: allProjectRequisites.length,
      from_templates: allTemplateRequisites.length,
      total: allProjectRequisites.length + allTemplateRequisites.length
    })

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    const hasAnyRequisites = (allProjectRequisites.length + allTemplateRequisites.length) > 0
    if (!hasAnyRequisites) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø—Ä–æ–µ–∫—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: allProjects } = await supabase
        .from('projects')
        .select('id, name')
        .eq('user_id', userId)
        .limit(1)
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (!allProjects || allProjects.length === 0) {
        return NextResponse.json({
          success: true,
          echo_cards: [],
          summary: {
            total_projects: 0,
            projects_with_supplier_data: 0,
            unique_suppliers: 0,
            message: '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç—Ö–æ –∫–∞—Ä—Ç–æ—á–µ–∫.',
            filter_applied: 'no_projects'
          }
        })
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã, –Ω–æ –Ω–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –∫–∞—Ä—Ç–æ—á–∫–∏
      console.log('üîÑ –ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –∫–∞—Ä—Ç–æ—á–∫–∏')
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let projectsQuery = supabase
      .from('projects')
      .select(`
        id,
        name,
        company_data,
        supplier_data,
        supplier_type,
        status,
        amount,
        currency,
        payment_method,
        created_at
      `)
      .eq('user_id', userId)
      .gte('current_step', 5) // –¢–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã –¥–æ—à–µ–¥—à–∏–µ –¥–æ Step5

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!hasAnyRequisites) {
      return NextResponse.json({
        success: true,
        echo_cards: [],
        summary: {
          total_projects: 0,
          projects_with_supplier_data: 0,
          unique_suppliers: 0,
          message: '–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–π–¥–∏—Ç–µ Step5 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.',
          filter_applied: 'no_requisites',
          requisites_count: 0
        }
      })
    }

    const { data: projects, error: projectsError } = await projectsQuery

    if (projectsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤', details: projectsError.message },
        { status: 500 }
      )
    }

    if (!projects || projects.length === 0) {
      return NextResponse.json({
        success: true,
        echo_cards: [],
        summary: {
          total_projects: 0,
          projects_with_supplier_data: 0,
          unique_suppliers: 0,
          message: '–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤',
          filter_applied: 'no_projects_found'
        }
      })
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–æ–≤–∞—Ä—ã) –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤  
    const projectIds = projects.map(p => p.id)
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectIds)
    
    const { data: specifications, error: specificationsError } = await supabase
      .from('project_specifications')
      .select(`
        project_id,
        item_name,
        quantity,
        price,
        total,
        image_url,
        created_at
      `)
      .in('project_id', projectIds)
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π (—Ç–æ–≤–∞—Ä–æ–≤):', specifications?.length || 0)
    if (specifications && specifications.length > 0) {
      console.log('üì¶ –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:', specifications.slice(0, 3))
    }

    if (specificationsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π:', specificationsError)
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
    }

    // ========================================
    // üîç –°–û–ó–î–ê–ï–ú –¢–û–õ–¨–ö–û –ê–ö–¢–£–ê–õ–¨–ù–´–ï –≠–•–û –ö–ê–†–¢–û–ß–ö–ò
    // ========================================

    const echoCards: any[] = []
    const supplierStats = new Map()

    projects.forEach((project: any) => {
      // –ò—â–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ payment_method
      const paymentMethodMap: any = {
        'bank-transfer': 'bank',
        'p2p': 'p2p', 
        'crypto': 'crypto'
      }
      
      const expectedType = paymentMethodMap[project.payment_method] || 'bank'
      const projectRequisites = allProjectRequisites?.filter((r: any) => r.type === expectedType) || []
      
      // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const projectItems = specifications?.filter(s => s.project_id === project.id) || []
      
      let supplierInfo: any = {}
      
      // –ò–ó–í–õ–ï–ö–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ù–ö–û–í–°–ö–ò–•/P2P/–ö–†–ò–ü–¢–û–†–ï–ö–í–ò–ó–ò–¢–û–í
      if (projectRequisites.length > 0) {
        const mainRequisite = projectRequisites[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç
        
        supplierInfo = {
          name: project.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
          company_name: mainRequisite.data?.recipientName || mainRequisite.data?.holder_name || mainRequisite.data?.name || project.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
          category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
          country: getCountryFromRequisite(mainRequisite),
          city: getCityFromRequisite(mainRequisite),
          contact_email: null, // –í —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –æ–±—ã—á–Ω–æ –Ω–µ—Ç email
          contact_phone: null, // –í —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –æ–±—ã—á–Ω–æ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          website: null,
          contact_person: mainRequisite.data?.recipientName || mainRequisite.data?.holder_name,
          // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
          payment_methods: formatPaymentMethods(mainRequisite.data || {}, mainRequisite.type),
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          payment_type: mainRequisite.type,
          requisite_details: mainRequisite,
          source: 'project_requisites'
        }
      }
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –î–∞–Ω–Ω—ã–µ –∏–∑ supplier_data (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è)  
      else if (project.supplier_data && Object.keys(project.supplier_data).length > 0) {
        // –Ø–≤–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º description –∏–∑ supplier_data
        const { description, ...cleanSupplierData } = project.supplier_data
        supplierInfo = {
          ...cleanSupplierData,
          source: 'supplier_data'
        }
      }
      // –ù–ï –ü–û–ö–ê–ó–´–í–ê–ï–ú –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê
      else {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç ${project.name} - –Ω–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞`)
        return
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      const supplierKey = `${supplierInfo.name}_${supplierInfo.company_name}`.replace(/\s+/g, '_').toLowerCase()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      if (!supplierStats.has(supplierKey)) {
        supplierStats.set(supplierKey, {
          supplier_info: supplierInfo,
          projects: [],
          total_amount: 0,
          total_projects: 0,
          successful_projects: 0,
          cancelled_projects: 0,
          active_projects: 0,
          products: new Set(),
          categories: new Set(['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞']),
          payment_methods: new Set(),
          last_project_date: project.created_at,
          first_project_date: project.created_at,
          products_detailed: [] // –ú–∞—Å—Å–∏–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö
        })
      }

      const stats = supplierStats.get(supplierKey)
      stats.projects.push({
        id: project.id,
        name: project.name,
        status: project.status,
        amount: project.amount,
        currency: project.currency,
        payment_method: project.payment_method,
        created_at: project.created_at
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      stats.total_projects += 1
      if (project.status === 'completed') stats.successful_projects += 1
      if (project.status === 'cancelled') stats.cancelled_projects += 1
      if (project.status === 'active') stats.active_projects += 1
      if (project.amount) stats.total_amount += parseFloat(project.amount)
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
      if (project.payment_method) {
        stats.payment_methods.add(project.payment_method)
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã
      if (new Date(project.created_at) > new Date(stats.last_project_date)) {
        stats.last_project_date = project.created_at
      }
      if (new Date(project.created_at) < new Date(stats.first_project_date)) {
        stats.first_project_date = project.created_at
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      console.log(`üõçÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}: –Ω–∞–π–¥–µ–Ω–æ ${projectItems.length} —Ç–æ–≤–∞—Ä–æ–≤`)
      
      projectItems.forEach((item: any) => {
        const productName = item.item_name
        if (productName && productName.trim()) {
          stats.products.add(productName.trim())
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          const existingProduct = stats.products_detailed.find((p: any) => p.name === productName.trim())
          if (!existingProduct) {
            const productInfo = {
              name: productName.trim(),
              price: item.price || '',
              quantity: item.quantity || 1,
              total: item.total || '',
              image_url: item.image_url || '', // üñºÔ∏è –ö–ê–†–¢–ò–ù–ö–ê –¢–û–í–ê–†–ê –ò–ó STEP2
              project_id: item.project_id,
              created_at: item.created_at
            }
            
            stats.products_detailed.push(productInfo)
            console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${productName.trim()} (—Ü–µ–Ω–∞: ${item.price || '–±–µ–∑ —Ü–µ–Ω—ã'}, –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${item.image_url ? '‚úÖ' : '‚ùå'})`)
          } else {
            console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${productName.trim()}`)
          }
        }
      })
      
      console.log(`üì¶ –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ${supplierKey}: ${stats.products_detailed.length}`)
    })

    // ========================================
    // üìã –§–û–†–ú–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–û–õ–¨–ö–û –ê–ö–¢–£–ê–õ–¨–ù–´–•
    // ========================================

    supplierStats.forEach((stats, supplierKey) => {
      const supplierInfo = stats.supplier_info
      const successRate = stats.total_projects > 0 
        ? Math.round((stats.successful_projects / stats.total_projects) * 100) 
        : 0
      
      echoCards.push({
        supplier_key: supplierKey,
        supplier_info: {
          name: supplierInfo.name,
          company_name: supplierInfo.company_name,
          category: Array.from(stats.categories)[0] || '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
          country: supplierInfo.country || '',
          city: supplierInfo.city || '',
          contact_email: supplierInfo.contact_email,
          contact_phone: supplierInfo.contact_phone,
          website: supplierInfo.website,
          contact_person: supplierInfo.contact_person,
          // –ù–ò–ö–û–ì–î–ê –ù–ï –ü–ï–†–ï–î–ê–ï–ú DESCRIPTION
          // description: –ù–ï –í–ö–õ–Æ–ß–ê–ï–ú –í–û–û–ë–©–ï
          // –ü–ª–∞—Ç–µ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
          payment_methods: supplierInfo.payment_methods,
          payment_type: supplierInfo.payment_type,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          requisite_details: supplierInfo.requisite_details,
        },
        statistics: {
          total_projects: stats.total_projects,
          successful_projects: stats.successful_projects,
          cancelled_projects: stats.cancelled_projects,
          active_projects: stats.active_projects,
          success_rate: successRate,
          total_spent: stats.total_amount,
          avg_project_value: stats.total_projects > 0 
            ? Math.round(stats.total_amount / stats.total_projects) 
            : 0,
          products_count: stats.products.size,
          categories_count: stats.categories.size,
          payment_methods_used: Array.from(stats.payment_methods),
          first_project_date: stats.first_project_date,
          last_project_date: stats.last_project_date
        },
        products: Array.from(stats.products), // –í—Å–µ —Ç–æ–≤–∞—Ä—ã (–Ω–∞–∑–≤–∞–Ω–∏—è)  
        products_detailed: stats.products_detailed, // –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å —Ü–µ–Ω–∞–º–∏
        categories: Array.from(stats.categories),
        projects: stats.projects.sort((a: any, b: any) => 
          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
        ),
        extraction_info: {
          data_source: supplierInfo.source,
          can_import_to_catalog: true,
          needs_manual_review: supplierInfo.source !== 'project_requisites',
          completeness_score: calculateCompletenessScore(supplierInfo),
          has_payment_details: !!supplierInfo.payment_methods,
          is_actual_data: supplierInfo.source === 'project_requisites' || supplierInfo.source === 'supplier_data'
        }
      })
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    echoCards.sort((a: any, b: any) => {
      if (b.statistics.total_projects !== a.statistics.total_projects) {
        return b.statistics.total_projects - a.statistics.total_projects
      }
      return b.statistics.success_rate - a.statistics.success_rate
    })

    return NextResponse.json({
      success: true,
      echo_cards: echoCards,
      summary: {
        total_projects: projects.length,
        projects_with_supplier_data: allProjectRequisites?.length || 0,
        unique_suppliers: echoCards.length,
        message: echoCards.length > 0 
          ? `–ù–∞–π–¥–µ–Ω–æ ${echoCards.length} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –∏–∑ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`
          : hasAnyRequisites
            ? '–ï—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç—Ö–æ –∫–∞—Ä—Ç–æ—á–∫–∏'
            : '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–π–¥–∏—Ç–µ Step5 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.',
        filter_applied: hasAnyRequisites 
          ? 'with_requisites' 
          : 'no_requisites',
        requisites_count: allProjectRequisites?.length || 0
      }
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API —ç—Ö–æ –∫–∞—Ä—Ç–æ—á–µ–∫:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

// ========================================
// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ========================================

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
function getCountryFromRequisite(requisite: any): string {
  if (requisite.type === 'bank') {
    // –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏—â–µ–º —Å—Ç—Ä–∞–Ω—É
    if (requisite.country) return requisite.country
    if (requisite.details?.cnapsCode) return '–ö–∏—Ç–∞–π'
    return '' // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  }
  if (requisite.type === 'crypto') {
    // –î–ª—è –∫—Ä–∏–ø—Ç–æ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç
    return '–ì–ª–æ–±–∞–ª—å–Ω–æ'
  }
  if (requisite.type === 'p2p') {
    // –î–ª—è P2P –∫–∞—Ä—Ç –∏—â–µ–º —Å—Ç—Ä–∞–Ω—É
    if (requisite.country) return requisite.country
    return '' // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  }
  return '' // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞  
function getCityFromRequisite(requisite: any): string {
  if (requisite.type === 'bank') {
    // –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏—â–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const address = requisite.recipientAddress || requisite.details?.recipientAddress
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã/–±—É–∫–≤—ã –∫–∞–∫ ID)
    if (address && !isTestData(address)) {
      return address
    }
    return '' // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  }
  if (requisite.type === 'crypto') {
    // –î–ª—è –∫—Ä–∏–ø—Ç–æ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç
    return '–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ'
  }
  if (requisite.type === 'p2p') {
    // –î–ª—è P2P –∫–∞—Ä—Ç –∏—â–µ–º –∞–¥—Ä–µ—Å
    const address = requisite.address
    if (address && !isTestData(address)) {
      return address
    }
    return '' // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  }
  return '' // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ/–∑–∞–≥–ª—É—à–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
function isTestData(value: string): boolean {
  if (!value) return true
  // –®–∞–±–ª–æ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const testPatterns = [
    /^[A-F0-9]{4}-[A-F0-9]{4}$/i,  // "75F5-3DC9"
    /^[0-9]{10,}$/,                 // –î–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –∫–∞–∫ "8888888888888"
    /^test/i,                       // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "test"
    /^demo/i,                       // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "demo"
    /^temp/i,                       // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "temp"
    /^placeholder/i,                // "placeholder"
    /^sample/i,                     // "sample"
  ]
  
  return testPatterns.some(pattern => pattern.test(value))
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ —Ç–∏–ø—É —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
function getCountryByRequisite(data: any, type: string): string {
  if (type === 'bank' && data.cnapsCode) return '–ö–∏—Ç–∞–π'
  if (type === 'crypto') return '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'
  if (data.country) return data.country
  return '' // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
function formatPaymentMethods(data: any, type: string): any {
  switch (type) {
    case 'bank':
      return {
        bank: {
          bank_name: data.bankName,
          account_number: data.accountNumber,
          swift_code: data.swift,
          iban: data.iban,
          cnaps_code: data.cnapsCode,
          recipient_name: data.recipientName,
          recipient_address: data.recipientAddress,
          bank_address: data.bankAddress,
        }
      }
    case 'p2p':
      return {
        card: {
          number: data.card_number,
          holder: data.holder_name,
          expiry: data.expiry_date,
        }
      }
    case 'crypto':
      return {
        crypto: {
          address: data.address,
          network: data.network,
        }
      }
    default:
      return data
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
function calculateCompletenessScore(supplierInfo: any): number {
  const fields = ['name', 'company_name', 'country', 'city', 'contact_person', 'payment_methods']
  const filledFields = fields.filter(field => {
    const value = supplierInfo[field]
    return value && value !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ' && value !== null && value !== ''
  })
  return Math.round((filledFields.length / fields.length) * 100)
}

// ========================================
// üì• POST - –ò–ú–ü–û–†–¢ –≠–•–û –ö–ê–†–¢–û–ß–ö–ò –í –ö–ê–¢–ê–õ–û–ì  
// ========================================

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { user_id, supplier_key, supplier_data, products = [] } = body

    if (!user_id || !supplier_key || !supplier_data) {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: user_id, supplier_key, supplier_data' },
        { status: 400 }
      )
    }

    // 1. –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: newSupplier, error: supplierError } = await supabase
      .from('catalog_user_suppliers')
      .insert({
        user_id,
        name: supplier_data.name,
        company_name: supplier_data.company_name,
        category: supplier_data.category === '–ù–µ —É–∫–∞–∑–∞–Ω–æ' ? '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' : (supplier_data.category || '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'),
        country: supplier_data.country || '',
        city: supplier_data.city,
        description: null, // –û–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        contact_email: supplier_data.contact_email,
        contact_phone: supplier_data.contact_phone,
        website: supplier_data.website,
        contact_person: supplier_data.contact_person,
        payment_methods: supplier_data.payment_methods,
        source_type: 'extracted_from_projects',
        is_active: true
      })
      .select()
      .single()

    if (supplierError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', supplierError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', details: supplierError.message },
        { status: 500 }
      )
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (products.length > 0 && newSupplier) {
      const productsToInsert = products.map((product: any) => ({
        supplier_id: newSupplier.id,
        user_id,
        name: product.name || product,
        description: null, // –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        category: supplier_data.category === '–ù–µ —É–∫–∞–∑–∞–Ω–æ' ? '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' : (supplier_data.category || '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'),
        price: null, // –¶–µ–Ω—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±—ã—á–Ω–æ –Ω–µ—Ç
        currency: 'USD',
        min_order: '1 —à—Ç—É–∫–∞',
        in_stock: true
      }))

      const { error: productsError } = await supabase
        .from('catalog_user_products')
        .insert(productsToInsert)

      if (productsError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', productsError)
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç.–∫. –ø–æ—Å—Ç–∞–≤—â–∏–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω
      }
    }

    return NextResponse.json({
      success: true,
      supplier: newSupplier,
      products_added: products.length,
      message: `–ü–æ—Å—Ç–∞–≤—â–∏–∫ "${supplier_data.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥`
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —ç—Ö–æ –∫–∞—Ä—Ç–æ—á–∫–∏:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
} 