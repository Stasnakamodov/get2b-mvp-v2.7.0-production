import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabaseClient'

// üéØ API ENDPOINT: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Category-First –ø–æ–¥—Ö–æ–¥)
// GET /api/catalog/products-by-category/{category}
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ category: string }> }
) {
  const startTime = Date.now()
  
  try {
    const resolvedParams = await params
    const category = decodeURIComponent(resolvedParams.category)
    console.log(`üì¶ [API] –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "${category}"`)

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { searchParams } = new URL(request.url)
    const searchQuery = searchParams.get('search') || null
    const limit = parseInt(searchParams.get('limit') || '50')
    const offset = parseInt(searchParams.get('offset') || '0')
    const userId = searchParams.get('user_id') || null
    const sortBy = searchParams.get('sort') || 'default'

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ RLS
    const authHeader = request.headers.get('authorization')
    let currentUserId = null
    
    if (authHeader) {
      try {
        const token = authHeader.replace('Bearer ', '')
        const { data: { user } } = await supabase.auth.getUser(token)
        currentUserId = user?.id || null
      } catch (error) {
        console.log('‚ÑπÔ∏è [API] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞')
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (null –¥–ª—è "all")
    const categoryFilter = category === 'all' ? null : category

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_products_by_category
    const { data: products, error } = await supabase.rpc('get_products_by_category', {
      category_name: categoryFilter,
      user_id_param: currentUserId,
      search_query: searchQuery,
      limit_param: limit,
      offset_param: offset
    })

    console.log('üîç [API] –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –ë–î:', products?.[0])

    if (error) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error)
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        details: error.message
      }, { status: 500 })
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É sort
    const sortedProducts = sortProducts(products || [], sortBy)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const supplierStats = groupProductsBySupplier(sortedProducts)

    const executionTime = Date.now() - startTime
    console.log(`‚úÖ [API] –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ ${executionTime}–º—Å:`, {
      total_products: sortedProducts.length,
      suppliers_count: supplierStats.length,
      search_query: searchQuery,
      user_id: currentUserId ? 'authenticated' : 'anonymous'
    })

    return NextResponse.json({
      success: true,
      category: category,
      products: sortedProducts,
      suppliers: supplierStats,
      pagination: {
        limit,
        offset,
        total: sortedProducts.length,
        has_more: sortedProducts.length === limit
      },
      summary: {
        total_products: sortedProducts.length,
        suppliers_count: supplierStats.length,
        verified_products: sortedProducts.filter(p => p.room_type === 'verified').length,
        user_products: sortedProducts.filter(p => p.room_type === 'user').length,
        execution_time_ms: executionTime
      }
    })

  } catch (error) {
    console.error('‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error)
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  }
}

// üîÑ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
function sortProducts(products: any[], sortBy: string) {
  const sorted = [...products]
  
  switch (sortBy) {
    case 'name_asc':
      return sorted.sort((a, b) => (a.product_name || '').localeCompare(b.product_name || ''))
    
    case 'name_desc':
      return sorted.sort((a, b) => (b.product_name || '').localeCompare(a.product_name || ''))
    
    case 'price_asc':
      return sorted.sort((a, b) => {
        const priceA = parseFloat(a.price) || 0
        const priceB = parseFloat(b.price) || 0
        return priceA - priceB
      })
    
    case 'price_desc':
      return sorted.sort((a, b) => {
        const priceA = parseFloat(a.price) || 0
        const priceB = parseFloat(b.price) || 0
        return priceB - priceA
      })
    
    case 'supplier_rating':
      return sorted.sort((a, b) => {
        const ratingA = a.supplier_rating || 0
        const ratingB = b.supplier_rating || 0
        return ratingB - ratingA
      })
    
    case 'supplier_projects':
      return sorted.sort((a, b) => {
        const projectsA = a.supplier_projects || 0
        const projectsB = b.supplier_projects || 0
        return projectsB - projectsA
      })
    
    case 'room_type':
      return sorted.sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ verified (–∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã–µ), –ø–æ—Ç–æ–º user (–ª–∏—á–Ω—ã–µ)
        if (a.room_type === 'verified' && b.room_type === 'user') return -1
        if (a.room_type === 'user' && b.room_type === 'verified') return 1
        return 0
      })
    
    case 'default':
    default:
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–Ω–∞—á–∞–ª–∞ verified, –ø–æ—Ç–æ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
      return sorted.sort((a, b) => {
        // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
        if (a.room_type === 'verified' && b.room_type === 'user') return -1
        if (a.room_type === 'user' && b.room_type === 'verified') return 1
        
        // 2. –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        const ratingA = a.supplier_rating || 0
        const ratingB = b.supplier_rating || 0
        if (ratingA !== ratingB) return ratingB - ratingA
        
        // 3. –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        const projectsA = a.supplier_projects || 0
        const projectsB = b.supplier_projects || 0
        return projectsB - projectsA
      })
  }
}

// üìä –§—É–Ω–∫—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
function groupProductsBySupplier(products: any[]) {
  const supplierMap = new Map()
  
  products.forEach(product => {
    const supplierId = product.supplier_id
    if (!supplierMap.has(supplierId)) {
      supplierMap.set(supplierId, {
        supplier_id: supplierId,
        supplier_name: product.supplier_name,
        supplier_company_name: product.supplier_company_name,
        supplier_category: product.supplier_category,
        supplier_country: product.supplier_country,
        supplier_city: product.supplier_city,
        supplier_email: product.supplier_email,
        supplier_phone: product.supplier_phone,
        supplier_website: product.supplier_website,
        supplier_rating: product.supplier_rating,
        supplier_reviews: product.supplier_reviews,
        supplier_projects: product.supplier_projects,
        room_type: product.room_type,
        room_icon: product.room_icon,
        room_description: product.room_description,
        products_count: 0,
        products: []
      })
    }
    
    const supplier = supplierMap.get(supplierId)
    supplier.products_count++
    supplier.products.push({
      id: product.id,
      product_name: product.product_name,
      description: product.description,
      price: product.price,
      currency: product.currency,
      min_order: product.min_order,
      in_stock: product.in_stock,
      item_code: product.item_code,
      image_url: product.image_url,
      item_name: product.item_name
    })
  })
  
  return Array.from(supplierMap.values()).sort((a, b) => {
    // –°–Ω–∞—á–∞–ª–∞ verified –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏, –ø–æ—Ç–æ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
    if (a.room_type === 'verified' && b.room_type === 'user') return -1
    if (a.room_type === 'user' && b.room_type === 'verified') return 1
    return b.products_count - a.products_count
  })
}