import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabaseClient';

export async function GET(request: NextRequest) {
  try {
    console.log("üß™ –¢–ï–°–¢–ò–†–£–ï–ú SUPABASE STORAGE");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ buckets
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ buckets:", bucketsError);
      return NextResponse.json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ buckets",
        details: bucketsError.message
      }, { status: 500 });
    }
    
    console.log("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ buckets:", buckets);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π bucket
    const bucketName = "step2-ready-invoices";
    const { data: bucketFiles, error: bucketError } = await supabase.storage
      .from(bucketName)
      .list();
    
    if (bucketError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket:", bucketError);
      return NextResponse.json({
        success: false,
        error: `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket ${bucketName}`,
        details: bucketError.message,
        buckets: buckets.map(b => b.name)
      }, { status: 500 });
    }
    
    console.log("üìÅ –§–∞–π–ª—ã –≤ bucket:", bucketFiles);
    
    return NextResponse.json({
      success: true,
      buckets: buckets.map(b => b.name),
      targetBucket: bucketName,
      bucketFiles: bucketFiles,
      bucketExists: true
    });
    
  } catch (error) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è storage:", error);
    return NextResponse.json({
      success: false,
      error: "–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è storage",
      details: error instanceof Error ? error.message : "Unknown error"
    }, { status: 500 });
  }
} 