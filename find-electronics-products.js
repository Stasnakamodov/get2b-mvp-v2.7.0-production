const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function findElectronicsProducts() {
  console.log('üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ electronics –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c021fb58-c00f-405e-babd-47d20e8a8ff6\n');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: suppliers } = await supabase
    .from('catalog_user_suppliers')
    .select('id, name')
    .eq('user_id', 'c021fb58-c00f-405e-babd-47d20e8a8ff6');
  
  const supplierIds = suppliers?.map(s => s.id) || [];
  console.log(`üë• –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${suppliers?.length || 0}`);
  suppliers?.forEach(s => console.log(`   - ${s.name} (${s.id})`));
  
  // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ electronics —É —ç—Ç–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  const { data: electronicsProducts, error } = await supabase
    .from('catalog_user_products')
    .select(`
      id,
      name,
      category,
      supplier_id,
      price,
      currency,
      description,
      in_stock
    `)
    .in('supplier_id', supplierIds)
    .eq('category', 'electronics');
    
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    return;
  }
  
  console.log(`\nüì± –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "electronics": ${electronicsProducts?.length || 0}\n`);
  
  if (electronicsProducts && electronicsProducts.length > 0) {
    electronicsProducts.forEach((product, i) => {
      const supplier = suppliers?.find(s => s.id === product.supplier_id);
      console.log(`${i + 1}. "${product.name}"`);
      console.log(`   üí∞ –¶–µ–Ω–∞: ${product.price} ${product.currency || ''}`);
      console.log(`   üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`   üì¶ –í –Ω–∞–ª–∏—á–∏–∏: ${product.in_stock ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${supplier?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} (${product.supplier_id})`);
      console.log(`   üÜî ID —Ç–æ–≤–∞—Ä–∞: ${product.id}\n`);
    });
  } else {
    console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç API hierarchical categories
  console.log('üå≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API /api/catalog/categories/hierarchical...\n');
  
  const response = await fetch('http://localhost:3000/api/catalog/categories/hierarchical?room=user', {
    headers: {
      'Content-Type': 'application/json'
    }
  });
  
  const apiData = await response.json();
  
  if (apiData.success) {
    const electronicsCategory = apiData.categoryTrees?.find(tree => 
      tree.main_category.name.toLowerCase().includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω') || 
      tree.main_category.key === 'electronics'
    );
    
    if (electronicsCategory) {
      console.log('üì± –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT" –Ω–∞–π–¥–µ–Ω–∞ –≤ API:');
      console.log(`   –ì–ª–∞–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${electronicsCategory.main_category.name}`);
      console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${electronicsCategory.main_category.products_count || 0}`);
      
      if (electronicsCategory.subcategories?.length > 0) {
        console.log('   –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
        electronicsCategory.subcategories.forEach(sub => {
          console.log(`      - ${sub.name}: ${sub.products_count || 0} —Ç–æ–≤–∞—Ä–æ–≤`);
        });
      }
    } else {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API');
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
      apiData.categoryTrees?.forEach(tree => {
        console.log(`   - ${tree.main_category.name} (${tree.main_category.products_count || 0} —Ç–æ–≤–∞—Ä–æ–≤)`);
      });
    }
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ API:', apiData.error);
  }

  process.exit(0);
}

findElectronicsProducts().catch(console.error);