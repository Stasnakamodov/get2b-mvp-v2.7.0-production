console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –¢–û–í–ê–†–û–í');
console.log('===================================');

async function fixMissingProducts() {
    const baseUrl = 'http://localhost:3000';
    
    try {
        console.log('\n1Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–• –ü–û–°–¢–ê–í–©–ò–ö–û–í –ë–ï–ó –¢–û–í–ê–†–û–í');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        const userSuppliersResponse = await fetch(`${baseUrl}/api/supabase-direct?table=catalog_user_suppliers`);
        const userSuppliers = await userSuppliersResponse.json();
        
        const importedSuppliers = userSuppliers.filter(s => 
            s.source_supplier_id && 
            s.is_active === true &&
            s.source_type === 'imported_from_catalog'
        );
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${importedSuppliers.length}`);
        
        for (const supplier of importedSuppliers) {
            console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${supplier.name}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ
            const userProductsResponse = await fetch(`${baseUrl}/api/supabase-direct?table=catalog_user_products&supplier_id=${supplier.id}`);
            const userProducts = await userProductsResponse.json();
            
            console.log(`  - –¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ: ${userProducts.length}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
            const verifiedProductsResponse = await fetch(`${baseUrl}/api/supabase-direct?table=catalog_verified_products&supplier_id=${supplier.source_supplier_id}`);
            const verifiedProducts = await verifiedProductsResponse.json();
            
            console.log(`  - –¢–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ: ${verifiedProducts.length}`);
            
            if (verifiedProducts.length > 0 && userProducts.length === 0) {
                console.log(`  üîß –ù–£–ñ–ï–ù –ò–ú–ü–û–†–¢ –¢–û–í–ê–†–û–í –¥–ª—è ${supplier.name}`);
                
                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É
                console.log(`  üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é ${verifiedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
                
                const userProductsToInsert = verifiedProducts.map(product => ({
                    user_id: supplier.user_id,
                    supplier_id: supplier.id,
                    name: product.name,
                    code: product.code,
                    price: product.price,
                    currency: product.currency || 'USD',
                    category: product.category,
                    description: product.description,
                    min_order: product.min_order,
                    in_stock: product.in_stock,
                    image_url: product.image_url,
                    specifications: product.specifications,
                    is_active: true,
                    created_at: new Date().toISOString()
                }));
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API Supabase –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                try {
                    const insertResponse = await fetch(`${baseUrl}/api/supabase-direct`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            action: 'insert',
                            table: 'catalog_user_products',
                            data: userProductsToInsert
                        })
                    });
                    
                    if (insertResponse.ok) {
                        console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–≤–∞—Ä—ã –¥–ª—è ${supplier.name}`);
                    } else {
                        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è ${supplier.name}`);
                    }
                } catch (error) {
                    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤: ${error.message}`);
                }
                
            } else if (userProducts.length > 0) {
                console.log(`  ‚úÖ –£ ${supplier.name} —Ç–æ–≤–∞—Ä—ã —É–∂–µ –µ—Å—Ç—å`);
            } else {
                console.log(`  ‚ö†Ô∏è –£ ${supplier.name} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ`);
            }
        }
        
        console.log('\nüéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù!');
        console.log('–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
    }
}

fixMissingProducts();