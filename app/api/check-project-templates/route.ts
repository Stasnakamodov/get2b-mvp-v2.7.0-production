import { NextResponse } from 'next/server'
import { supabaseAdmin as supabase } from '@/lib/supabaseAdmin'

export async function GET() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É project_templates...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ pg_catalog.pg_tables
    const { data: tableExists, error: tableError } = await supabase
      .from('pg_catalog.pg_tables')
      .select('tablename')
      .eq('tablename', 'project_templates')
      .eq('schemaname', 'public')

    if (tableError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (pg_catalog):', tableError)
      return NextResponse.json({
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã',
        details: tableError.message
      }, { status: 500 })
    }

    const tableExistsResult = tableExists && tableExists.length > 0

    console.log('üìã –¢–∞–±–ª–∏—Ü–∞ project_templates —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', tableExistsResult)

    if (!tableExistsResult) {
      return NextResponse.json({
        error: '–¢–∞–±–ª–∏—Ü–∞ project_templates –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        suggestion: '–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É project_templates'
      }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count, error: countError } = await supabase
      .from('project_templates')
      .select('*', { count: 'exact', head: true })

    if (countError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π:', countError)
      return NextResponse.json({
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π',
        details: countError.message
      }, { status: 500 })
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')

    return NextResponse.json({
      success: true,
      table_exists: tableExistsResult,
      record_count: count,
      message: '–¢–∞–±–ª–∏—Ü–∞ project_templates —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞'
    })
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({
      error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
} 