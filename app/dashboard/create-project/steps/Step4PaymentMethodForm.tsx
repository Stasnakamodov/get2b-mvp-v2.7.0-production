import React, { useState, useEffect, useMemo } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { ArrowRight, Landmark, CreditCard, Wallet, CheckCircle, Plus } from "lucide-react";
import { useCreateProjectContext } from "../context/CreateProjectContext";
import { useToast } from "@/components/ui/use-toast";
import { useProjectSupabase } from "../hooks/useProjectSupabase";
import { sendPaymentMethodToTelegram } from "../utils/telegram";
import { supabase } from "@/lib/supabaseClient";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"

const paymentMethods = [
  {
    id: "bank-transfer",
    title: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥",
    description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π SWIFT/SEPA –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç",
    icon: Landmark,
    luxuryAccent: "from-blue-500 to-indigo-500",
    commission: "–æ—Ç 0,5%",
    time: "1-3 –¥–Ω—è",
  },
  {
    id: "p2p",
    title: "P2P –ø–µ—Ä–µ–≤–æ–¥",
    description: "–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
    icon: CreditCard,
    luxuryAccent: "from-green-500 to-lime-500",
    commission: "1%",
    time: "–¥–æ 1 —á–∞—Å–∞",
  },
  {
    id: "crypto",
    title: "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    description: "USDT, BTC, ETH –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ç–∏",
    icon: Wallet,
    luxuryAccent: "from-yellow-400 to-orange-500",
    commission: "0%",
    time: "–¥–æ 30 –º–∏–Ω",
  },
];

export default function Step4PaymentMethodForm() {
  const { setCurrentStep, maxStepReached, setMaxStepReached, projectName, paymentMethod, setPaymentMethod, projectId, supplierData, setSupplierData } = useCreateProjectContext();
  const [selectedMethod, setSelectedMethod] = useState<string | null>(paymentMethod);
  const { toast } = useToast();
  const { saveSpecification, updateStep, error: supabaseError } = useProjectSupabase();
  const [loading, setLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  // üéØ –°–ò–°–¢–ï–ú–ê –≠–•–û –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ supplier_name –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
  useEffect(() => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç—Ö–æ –¥–∞–Ω–Ω—ã–µ
    if (!projectId || supplierData?.echo_source === 'processed') {
      console.log("[Step4] ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —ç—Ö–æ –¥–∞–Ω–Ω—ã—Ö:", { 
        projectId: !!projectId, 
        echoProcessed: supplierData?.echo_source === 'processed'
      });
      return;
    }

    async function loadEchoSupplierData() {
      console.log("[Step4] üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ö–æ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è...");
      
      try {
        // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞
        const { data: specifications, error: specsError } = await supabase
          .from("project_specifications")
          .select("supplier_name")
          .eq("project_id", projectId)
          .not("supplier_name", "is", null)
          .not("supplier_name", "eq", "");
        
        if (specsError) {
          console.error("[Step4] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π:", specsError);
          return;
        }

        if (!specifications || specifications.length === 0) {
          console.log("[Step4] –ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö");
          return;
        }

        const suppliers = [...new Set(specifications.map(s => s.supplier_name))];
        console.log("[Step4] –ù–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏:", suppliers);

        // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏—â–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ò –¥–æ–ø–æ–ª–Ω—è–µ–º –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        for (const supplierName of suppliers) {
          console.log(`[Step4] üîç –ü–æ–∏—Å–∫ —ç—Ö–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: "${supplierName}"`);
          
          // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç—ã —Å —ç—Ç–∏–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –≥–¥–µ –µ—Å—Ç—å payment_method (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã)
          const { data: echoProjects, error: echoError } = await supabase
            .from("project_specifications")
            .select(`
              project_id,
              projects!inner(payment_method, user_id)
            `)
            .ilike("supplier_name", `%${supplierName}%`)
            .not("projects.payment_method", "is", null);
          
          if (echoError) {
            console.error(`[Step4] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç—Ö–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è ${supplierName}:`, echoError);
            continue;
          }

          // –ò—â–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —ç—Ö–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
          console.log(`[Step4] üîç –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ${supplierName} –≤ –∫–∞—Ç–∞–ª–æ–≥–µ...`);
          const { data: catalogSupplier, error: catalogError } = await supabase
            .from('catalog_verified_suppliers')
            .select('id, name, company_name, payment_methods, bank_accounts, crypto_wallets, p2p_cards')
            .ilike('name', `%${supplierName}%`)
            .single();
          
          if (catalogError) {
            console.log(`[Step4] –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:`, catalogError.message);
          }

          // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —ç—Ö–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –Ω–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          if ((!echoProjects || echoProjects.length === 0) && !catalogSupplier) {
            console.log(`[Step4] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ${supplierName} (–Ω–∏ —ç—Ö–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –Ω–∏ –∫–∞—Ç–∞–ª–æ–≥–∞)`);
            continue;
          }

          console.log(`[Step4] ‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${supplierName}:`, { 
            echoProjects: echoProjects?.length || 0, 
            catalogFound: !!catalogSupplier 
          });
          
          // 3. –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ + —ç—Ö–æ + –∫–∞—Ç–∞–ª–æ–≥
          const echoPaymentMethods = echoProjects ? [...new Set(echoProjects.map((p: any) => p.projects?.payment_method).filter(Boolean))] : [];
          
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
          const enhancedSupplierData = {
            // –ë–µ—Ä–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
            ...(supplierData || {}),
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            name: supplierData?.name || supplierName,
            company_name: supplierData?.company_name || catalogSupplier?.company_name || supplierName,
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ + —ç—Ö–æ + –∫–∞—Ç–∞–ª–æ–≥
            payment_methods: [
              ...(supplierData?.payment_methods || []),
              ...echoPaymentMethods,
              ...(catalogSupplier?.payment_methods || [])
            ].filter((method, index, arr) => arr.indexOf(method) === index), // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            
            // –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            bank_accounts: supplierData?.bank_accounts || catalogSupplier?.bank_accounts || [],
            crypto_wallets: supplierData?.crypto_wallets || catalogSupplier?.crypto_wallets || [],
            p2p_cards: supplierData?.p2p_cards || catalogSupplier?.p2p_cards || [],
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            echo_source: 'processed', // –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            echo_projects_count: echoProjects?.length || 0,
            catalog_found: !!catalogSupplier,
            enhanced: true // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          };

          console.log(`[Step4] üéØ –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${supplierName}:`, enhancedSupplierData);
          setSupplierData(enhancedSupplierData);
          
          // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
          break;
        }
      } catch (error) {
        console.error("[Step4] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ö–æ –¥–∞–Ω–Ω—ã—Ö:", error);
      }
    }

    loadEchoSupplierData();
  }, [projectId, supplierData, setSupplierData]);

  // üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–ª—è –∫–∞–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –µ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  const methodsWithSupplierData = useMemo(() => {
    console.log("[Step4] –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", supplierData);
    console.log("[Step4] –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", supplierData?.payment_methods);
    
    if (!supplierData?.payment_methods || !Array.isArray(supplierData.payment_methods)) {
      console.log("[Step4] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç–æ–¥–∞—Ö –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞");
      return [];
    }
    
    // –ú–∞–ø–ø–∏–Ω–≥ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –ë–î –∏ UI
    const dbToUiMapping: Record<string, string> = {
      'bank_transfer': 'bank-transfer', // –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, UI - –¥–µ—Ñ–∏—Å
      'p2p': 'p2p', // –æ–¥–∏–Ω–∞–∫–æ–≤–æ
      'crypto': 'crypto', // –æ–¥–∏–Ω–∞–∫–æ–≤–æ
      'card': 'p2p', // –∫–∞—Ä—Ç–æ—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã = P2P –≤ UI
      'cash': 'cash' // –Ω–∞–ª–∏—á–Ω—ã–µ (–µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ UI)
    };
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç—ã UI
    const uiMethods = supplierData.payment_methods
      .map((dbMethod: string) => dbToUiMapping[dbMethod] || dbMethod)
      .filter(Boolean);
      
    console.log("[Step4] –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Ç–æ–¥–æ–≤ –ë–î -> UI:", supplierData.payment_methods, "->", uiMethods);
    
    return uiMethods;
  }, [supplierData]);

  // üéØ –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫ –∫–∞–∂–¥–æ–º—É –º–µ—Ç–æ–¥—É
  const enrichedPaymentMethods = useMemo(() => {
    return paymentMethods.map(method => {
      const hasSupplierData = methodsWithSupplierData.includes(method.id);
      const supplierRequisitesCount = getSupplierRequisitesCount(method.id);
      console.log(`[Step4] ${method.id}: hasSupplierData=${hasSupplierData}, supplierRequisitesCount=${supplierRequisitesCount}`);
      return {
        ...method,
        hasSupplierData,
        supplierRequisitesCount
      };
    });
  }, [methodsWithSupplierData, supplierData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
  function getSupplierRequisitesCount(methodId: string): number {
    if (!supplierData) return 0;
    
    let count = 0;
    switch (methodId) {
      case 'bank-transfer':
        count = (Array.isArray(supplierData.bank_accounts) ? supplierData.bank_accounts.length : 0);
        console.log(`[Step4] bank-transfer —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:`, count, supplierData.bank_accounts);
        return count;
      case 'p2p':
        count = (Array.isArray(supplierData.p2p_cards) ? supplierData.p2p_cards.length : 0);
        console.log(`[Step4] p2p —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:`, count, supplierData.p2p_cards);
        return count;
      case 'crypto':
        count = (Array.isArray(supplierData.crypto_wallets) ? supplierData.crypto_wallets.length : 0);
        console.log(`[Step4] crypto —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:`, count, supplierData.crypto_wallets, `(null: ${supplierData.crypto_wallets === null})`);
        return count;
      default:
        return 0;
    }
  }

  useEffect(() => {
    if (paymentMethod) setSelectedMethod(paymentMethod);
    if (projectId) {
      updateStep(projectId, 4);
    }
  }, [paymentMethod, projectId, updateStep]);

  // üéØ –£–º–Ω–æ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ–¥–Ω–æ–º –º–µ—Ç–æ–¥–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  useEffect(() => {
    const methodsWithData = enrichedPaymentMethods.filter(method => method.hasSupplierData);
    if (methodsWithData.length === 1 && !selectedMethod) {
      const singleMethod = methodsWithData[0].id;
      console.log("[Step4] –ê–≤—Ç–æ–≤—ã–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", singleMethod);
      setSelectedMethod(singleMethod);
      setPaymentMethod(singleMethod);
    }
  }, [enrichedPaymentMethods, selectedMethod, setPaymentMethod]);

  const handleSelect = (method: string) => {
    if (isProcessing) return;
    setSelectedMethod(method);
    setPaymentMethod(method);
  };

  const handleNext = async () => {
    if (isProcessing || loading) {
      console.log("[Step4] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ");
      return;
    }
    
    console.log("[Step4] handleNext –≤—ã–∑–≤–∞–Ω —Å selectedMethod:", selectedMethod);
    setIsProcessing(true);
    setErrorMsg(null);
    
    if (!selectedMethod) {
      console.log("[Step4] –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω");
      toast({ title: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", variant: "destructive" });
      setIsProcessing(false);
      return;
    }
    
    const allowedMethods = ["bank-transfer", "p2p", "crypto"];
    if (!allowedMethods.includes(selectedMethod)) {
      console.log("[Step4] –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", selectedMethod);
      toast({ title: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", variant: "destructive" });
      setIsProcessing(false);
      return;
    }
    
    console.log("[Step4] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, projectId:", projectId);
    setLoading(true);
    setPaymentMethod(selectedMethod);
    
    let saveResult = true;
    try {
      if (projectId) {
        console.log("[Step4] –í—ã–∑—ã–≤–∞–µ–º saveSpecification...");
        saveResult = await saveSpecification({ 
          projectId, 
          currentStep: 5, 
          payment_method: selectedMethod, 
          status: "filling_requisites" 
        });
        console.log("[Step4] saveSpecification —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", saveResult);
      } else {
        console.warn("[Step4] projectId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      }
    } catch (err) {
      console.error("[Step4] saveSpecification –æ—à–∏–±–∫–∞:", err);
      setErrorMsg("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + (err instanceof Error ? err.message : String(err)));
      setLoading(false);
      setIsProcessing(false);
      return;
    }
    
    if (!saveResult) {
      console.error("[Step4] saveSpecification –≤–µ—Ä–Ω—É–ª false, supabaseError:", supabaseError);
      setErrorMsg(supabaseError || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã");
      toast({ 
        title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 
        description: supabaseError || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", 
        variant: "destructive" 
      });
      setLoading(false);
      setIsProcessing(false);
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞)
    try {
      console.log("[Step4] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...");
      await sendPaymentMethodToTelegram(selectedMethod, projectName);
      console.log("[Step4] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —É—Å–ø–µ—à–Ω–∞");
    } catch (err) {
      console.warn("[Step4] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):", err);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    const nextStep = 5;
    console.log("[Step4] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥:", nextStep);
    console.log("[Step4] –¢–µ–∫—É—â–∏–π maxStepReached:", maxStepReached);
    
    setCurrentStep(nextStep);
    
    if (nextStep > maxStepReached) {
      console.log("[Step4] –û–±–Ω–æ–≤–ª—è–µ–º maxStepReached –¥–æ:", nextStep);
      setMaxStepReached(nextStep);
      if (projectId) {
        try {
          await updateStep(projectId, nextStep, nextStep);
          console.log("[Step4] updateStep —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω");
        } catch (updateErr) {
          console.error("[Step4] –û—à–∏–±–∫–∞ updateStep:", updateErr);
        }
      }
    } else if (projectId) {
      try {
        await updateStep(projectId, nextStep);
        console.log("[Step4] updateStep (–±–µ–∑ maxStep) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω");
      } catch (updateErr) {
        console.error("[Step4] –û—à–∏–±–∫–∞ updateStep (–±–µ–∑ maxStep):", updateErr);
      }
    }
    
    setLoading(false);
    setIsProcessing(false);
    console.log("[Step4] handleNext –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
  };

  return (
    <motion.div
      key="payment-method"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="max-w-2xl mx-auto mt-24"
    >
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-center mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h2>
        <p className="text-center text-muted-foreground text-base">
          –í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—â–µ–Ω—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π
        </p>
        {enrichedPaymentMethods.filter(m => m.hasSupplierData).length === 1 && (
          <div className="text-center mt-4">
            <div className="inline-flex items-center px-4 py-2 bg-blue-50 text-blue-700 rounded-lg text-sm">
              ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            </div>
          </div>
        )}
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
        {enrichedPaymentMethods.map((method) => {
          const Icon = method.icon;
          const isSelected = selectedMethod === method.id;
          return (
            <Card
              key={method.id}
              className={`cursor-pointer transition-all border-2 ${isSelected ? "border-blue-600 shadow-lg bg-blue-50 dark:bg-blue-900/10" : "border-gray-200 dark:border-gray-700 hover:border-blue-400"}`}
              onClick={() => handleSelect(method.id)}
            >
              <CardHeader className="items-center">
                <div className={`w-12 h-12 rounded-full flex items-center justify-center mb-2 ${isSelected ? "bg-blue-600" : "bg-gray-200 dark:bg-gray-800"}`}>
                  <Icon className="h-7 w-7 text-white" />
                </div>
                <CardTitle className="text-center text-lg">{method.title}</CardTitle>
                <CardDescription className="text-center">{method.description}</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col items-center gap-2 pt-0">
                <span className="text-xs text-gray-500">üí∞ –ö–æ–º–∏—Å—Å–∏—è: <span className="font-medium text-gray-700 dark:text-white">{method.commission}</span></span>
                <span className="text-xs text-gray-500">‚ö° –í—Ä–µ–º—è: <span className="font-medium text-gray-700 dark:text-white">{method.time}</span></span>
                
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ª–∏—á–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ */}
                {method.hasSupplierData ? (
                  <div className="flex items-center justify-center gap-1 px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs font-medium mt-1">
                    <CheckCircle className="w-3 h-3" />
                    <span>–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>
                    {method.supplierRequisitesCount > 1 && (
                      <span className="ml-1 px-1 bg-green-200 rounded-full text-xs">
                        {method.supplierRequisitesCount}
                      </span>
                    )}
                  </div>
                ) : (
                  <div className="flex items-center justify-center gap-1 px-2 py-1 bg-orange-100 text-orange-600 rounded-full text-xs font-medium mt-1">
                    <Plus className="w-3 h-3" />
                    <span>–†—É—á–Ω–æ–π –≤–≤–æ–¥</span>
                  </div>
                )}
              </CardContent>
            </Card>
          );
        })}
      </div>
      <div className="flex justify-between items-center gap-4">
        <Button
          variant="outline"
          className="rounded-full border border-gray-300 text-gray-600 bg-gray-100"
          onClick={() => setCurrentStep(3)}
        >
          –ù–∞–∑–∞–¥
        </Button>
        <Button
          className="rounded-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-8 py-3 text-lg font-semibold shadow-lg"
          onClick={handleNext}
          disabled={loading || isProcessing}
        >
          {loading || isProcessing ? "–°–æ—Ö—Ä–∞–Ω—è–µ–º..." : <>–î–∞–ª–µ–µ<ArrowRight className="h-5 w-5 ml-2" /></>}
        </Button>
      </div>
      {errorMsg && (
        <div className="text-red-600 font-semibold text-center mt-4">{errorMsg}</div>
      )}
    </motion.div>
  );
} 