import { NextRequest, NextResponse } from "next/server";
import { supabaseService } from "@/lib/supabaseServiceClient";

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const fileName = searchParams.get('fileName');
    
    if (!fileName) {
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞"
      }, { status: 400 });
    }

    console.log("üîç [FIND-FILE] –ò—â–µ–º —Ñ–∞–π–ª:", fileName);
    
    interface SearchResults {
      [bucketName: string]: {
        found: boolean;
        files?: Array<{ name: string; size?: number; updated_at?: string }>;
        error?: string;
        publicUrl?: string;
      };
    }

    // –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –±–∞–∫–µ—Ç–∞—Ö
    const buckets = ['project-images', 'accreditation-certificates', 'accreditation-documents'];
    const results: SearchResults = {};

    for (const bucketName of buckets) {
      try {
        console.log(`üîç [FIND-FILE] –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∫–µ—Ç: ${bucketName}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ
        const { data: files, error } = await supabaseService.storage
          .from(bucketName)
          .list('', { limit: 1000 });

        if (error) {
          console.error(`‚ùå [FIND-FILE] –û—à–∏–±–∫–∞ –≤ –±–∞–∫–µ—Ç–µ ${bucketName}:`, error);
          results[bucketName] = { found: false, error: error.message };
          continue;
        }

        // –ò—â–µ–º —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏
        const foundFiles = files?.filter(file => 
          file.name.includes(fileName) || 
          decodeURIComponent(file.name).includes(fileName)
        ) || [];

        if (foundFiles.length > 0) {
          console.log(`‚úÖ [FIND-FILE] –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∫–µ—Ç–µ ${bucketName}:`, foundFiles.length, "—Ñ–∞–π–ª–æ–≤");
          
          results[bucketName] = {
            found: true,
            files: foundFiles.map(file => ({
              name: file.name,
              size: file.metadata?.size,
              path: file.name,
              public_url: supabaseService.storage.from(bucketName).getPublicUrl(file.name).data.publicUrl
            }))
          };
        } else {
          results[bucketName] = { found: false, files: [] };
        }
      } catch (error) {
        console.error(`‚ùå [FIND-FILE] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–∞–∫–µ—Ç–µ ${bucketName}:`, error);
        results[bucketName] = { found: false, error: error instanceof Error ? error.message : 'Unknown error' };
      }
    }

    return NextResponse.json({
      success: true,
      fileName,
      results
    });

  } catch (error) {
    console.error("‚ùå [FIND-FILE] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 