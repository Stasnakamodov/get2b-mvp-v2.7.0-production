import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const { callback_data, application_id } = await request.json();
    
    console.log("üß™ [TEST-BOT-CALLBACK] –¢–µ—Å—Ç–∏—Ä—É–µ–º callback –±–æ—Ç–∞:", { callback_data, application_id });
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º callback query –æ—Ç Telegram
    const mockCallbackQuery = {
      id: "test_callback_" + Date.now(),
      from: {
        id: 123456789,
        is_bot: false,
        first_name: "Test",
        username: "testuser"
      },
      message: {
        message_id: 1,
        chat: {
          id: 123456789,
          type: "private"
        },
        date: Math.floor(Date.now() / 1000)
      },
      data: callback_data
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ webhook'—É
    const webhookUrl = "http://localhost:3000/api/telegram-chat-webhook";
    
    console.log("üì° [TEST-BOT-CALLBACK] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ webhook:", webhookUrl);
    
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        update_id: Date.now(),
        callback_query: mockCallbackQuery
      })
    });

    const result = await response.text();
    
    console.log("üì° [TEST-BOT-CALLBACK] –û—Ç–≤–µ—Ç webhook:", result);

    return NextResponse.json({
      success: true,
      message: "Callback –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
      callback_data,
      application_id,
      webhook_response: result
    });

  } catch (error) {
    console.error("‚ùå [TEST-BOT-CALLBACK] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 