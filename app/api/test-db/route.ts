import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function GET(request: NextRequest) {
  try {
    console.log("üß™ [TEST-DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data: testData, error: testError } = await supabase
      .from('supplier_profiles')
      .select('count')
      .limit(1);

    if (testError) {
      console.error("‚ùå [TEST-DB] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", testError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
        details: testError.message 
      }, { status: 500 });
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã supplier_profiles
    let supplierColumns = null;
    let columnsError = null;
    try {
      const result = await supabase.rpc('get_table_columns', { table_name: 'supplier_profiles' });
      supplierColumns = result.data;
      columnsError = result.error;
    } catch (error) {
      columnsError = { message: 'RPC function not available' };
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–±–µ–∑ –ø–æ–ª—è accreditation_status)
    const { data: suppliers, error: suppliersError } = await supabase
      .from('supplier_profiles')
      .select('id, name, company_name, category, country, user_id')
      .limit(5);

    if (suppliersError) {
      console.error("‚ùå [TEST-DB] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", suppliersError);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã accreditation_applications
    const { data: accreditationTest, error: accreditationError } = await supabase
      .from('accreditation_applications')
      .select('id')
      .limit(1);

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã catalog_verified_suppliers
    const { data: verifiedTest, error: verifiedError } = await supabase
      .from('catalog_verified_suppliers')
      .select('id')
      .limit(1);

    console.log("‚úÖ [TEST-DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

    return NextResponse.json({
      success: true,
      message: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç",
      data: {
        supplier_profiles: {
          exists: !suppliersError,
          count: suppliers?.length || 0,
          sample: suppliers?.[0] || null,
          error: suppliersError?.message
        },
        accreditation_applications: {
          exists: !accreditationError,
          error: accreditationError?.message
        },
        catalog_verified_suppliers: {
          exists: !verifiedError,
          error: verifiedError?.message
        },
        columns: {
          supplier_profiles: supplierColumns || 'RPC not available',
          error: columnsError?.message
        }
      }
    });

  } catch (error) {
    console.error("‚ùå [TEST-DB] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 