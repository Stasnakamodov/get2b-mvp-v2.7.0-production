// ‚ö†Ô∏è –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ManagerBotService
// –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å

import { ManagerBotService } from './telegram/ManagerBotService';

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞
let managerBotService: ManagerBotService | null = null;

function getManagerBotService(): ManagerBotService {
  if (!managerBotService) {
    try {
      managerBotService = new ManagerBotService();
    } catch (error) {
      console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ManagerBotService:", error);
      throw error;
    }
  }
  return managerBotService;
}

// ===============================
// –û–ë–†–ê–¢–ù–û-–°–û–í–ú–ï–°–¢–ò–ú–´–ï –§–£–ù–ö–¶–ò–ò
// ===============================

export async function sendTelegramMessage(text: string) {
  console.log("üîÑ DEPRECATED: sendTelegramMessage - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ManagerBotService");
  
  try {
    const service = getManagerBotService();
    await service.sendMessage(text);
    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ManagerBotService");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
}

export async function sendTelegramDocument(documentUrl: string, caption?: string) {
  console.log("üîÑ DEPRECATED: sendTelegramDocument - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ManagerBotService");
  
  try {
    const service = getManagerBotService();
    const result = await service.sendDocument(documentUrl, caption);
    console.log("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ManagerBotService");
    return { success: true, result };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
    throw error;
  }
}

export async function sendClientReceiptApprovalRequest(documentUrl: string, caption: string, projectRequestId: string) {
  console.log("üîÑ sendClientReceiptApprovalRequest - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ManagerBotService");
  
  try {
    const service = getManagerBotService();
    const result = await service.sendClientReceiptApprovalRequest(documentUrl, caption, projectRequestId);
    console.log("‚úÖ –ß–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ManagerBotService");
    return { success: true, result };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", error);
    throw error;
  }
}

export async function sendTelegramProjectApprovalRequest(
  text: string,
  projectId: string,
  type: "spec" | "receipt" = "spec",
) {
  console.log("üîÑ DEPRECATED: sendTelegramProjectApprovalRequest - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ManagerBotService");
  
  try {
    const service = getManagerBotService();
    const result = await service.sendProjectApprovalRequest(text, projectId, type);
    console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ManagerBotService");
    return { success: true, result };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    throw error;
  }
}

export async function sendSupplierReceiptRequestToManager({
  projectId,
  email,
  companyName,
  amount,
  currency,
  paymentMethod,
  requisites,
}: {
  projectId: string;
  email: string;
  companyName: string;
  amount: number;
  currency: string;
  paymentMethod: string;
  requisites?: string;
}) {
  console.log("üîÑ DEPRECATED: sendSupplierReceiptRequestToManager - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ManagerBotService");
  
  try {
    const service = getManagerBotService();
    const result = await service.sendSupplierReceiptRequest({
      projectId,
      email,
      companyName,
      amount,
      currency,
      paymentMethod,
      requisites
    });
    console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ManagerBotService");
    return { success: true, result };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    throw error;
  }
}

export async function sendClientConfirmationRequestToTelegram({
  projectId,
  email,
  companyName,
}: {
  projectId: string;
  email: string;
  companyName: string;
}) {
  console.log("üîÑ DEPRECATED: sendClientConfirmationRequestToTelegram - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ManagerBotService");
  
  try {
    const service = getManagerBotService();
    const result = await service.sendClientConfirmationRequest({
      projectId,
      email,
      companyName
    });
    console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ManagerBotService");
    return { success: true, result };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    throw error;
  }
}

export async function sendAccreditationRequestToTelegram({
  supplierId,
  supplierName,
  companyName,
  country,
  category,
  userEmail,
  notes,
  productsCount
}: {
  supplierId: string;
  supplierName: string;
  companyName: string;
  country: string;
  category: string;
  userEmail: string;
  notes?: string;
  productsCount: number;
}) {
  console.log("üîÑ DEPRECATED: sendAccreditationRequestToTelegram - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ManagerBotService");
  
  try {
    const service = getManagerBotService();
    const result = await service.sendAccreditationRequest({
      supplierId,
      supplierName,
      companyName,
      country,
      category,
      userEmail,
      notes,
      productsCount
    });
    console.log("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ ManagerBotService");
    return { success: true, result };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:", error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
 */
export async function sendClientProfileNotificationToManager({
  userId,
  userName,
  userEmail,
  profileId,
  companyName,
  legalName,
  inn,
  kpp,
  ogrn,
  address,
  email,
  phone,
  bankName,
  bankAccount,
  corrAccount,
  bik
}: {
  userId: string;
  userName?: string;
  userEmail?: string;
  profileId: string;
  companyName: string;
  legalName: string;
  inn: string;
  kpp: string;
  ogrn: string;
  address: string;
  email: string;
  phone: string;
  bankName: string;
  bankAccount: string;
  corrAccount: string;
  bik: string;
}) {
  try {
    const service = getManagerBotService();
    const result = await service.sendClientProfileNotification({
      userId,
      userName,
      userEmail,
      profileId,
      companyName,
      legalName,
      inn,
      kpp,
      ogrn,
      address,
      email,
      phone,
      bankName,
      bankAccount,
      corrAccount,
      bik
    });
    console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É");
    return { success: true, result };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –∫–ª–∏–µ–Ω—Ç–∞:", error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
 */
export async function sendSupplierProfileNotificationToManager({
  userId,
  userName,
  userEmail,
  profileId,
  companyName,
  category,
  country,
  city,
  description,
  contactEmail,
  contactPhone,
  website
}: {
  userId: string;
  userName?: string;
  userEmail?: string;
  profileId: string;
  companyName: string;
  category: string;
  country: string;
  city?: string;
  description?: string;
  contactEmail?: string;
  contactPhone?: string;
  website?: string;
}) {
  try {
    const service = getManagerBotService();
    const result = await service.sendSupplierProfileNotification({
      userId,
      userName,
      userEmail,
      profileId,
      companyName,
      category,
      country,
      city,
      description,
      contactEmail,
      contactPhone,
      website
    });
    console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É");
    return { success: true, result };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", error);
    throw error;
  }
}
