import React, { useState, useEffect, useRef } from "react";
import { useCreateProjectContext } from "../context/CreateProjectContext";
import { Button } from "@/components/ui/button";
import { CheckCircle, Clock, FileCheck, Banknote, ArrowLeft, Upload, X } from "lucide-react";
import { motion } from "framer-motion";
import { useToast } from "@/components/ui/use-toast";
import { supabase } from "@/lib/supabaseClient";
import { changeProjectStatus } from "@/lib/supabaseProjectStatus";
import { sendTelegramMessageClient, sendTelegramDocumentClient } from "@/lib/telegram-client";

export default function Step7ClientConfirmationForm() {
  const { 
    projectId, 
    setCurrentStep, 
    projectName, 
    companyData,
    specificationItems,
    paymentMethod 
  } = useCreateProjectContext();
  
  const [isConfirming, setIsConfirming] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [projectData, setProjectData] = useState<any>(null);
  const [managerReceipt, setManagerReceipt] = useState<string | null>(null);
  const [clientReceiptFile, setClientReceiptFile] = useState<File | null>(null);
  const [clientReceiptUrl, setClientReceiptUrl] = useState<string | null>(null);
  const [isUploadingReceipt, setIsUploadingReceipt] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    async function loadProjectData() {
      if (!projectId) return;
      
      const { data, error } = await supabase
        .from("projects")
        .select("*")
        .eq("id", projectId)
        .single();
        
      if (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
        return;
      }
      
      setProjectData(data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      if (data.receipts) {
        try {
          const receipts = typeof data.receipts === 'string' 
            ? JSON.parse(data.receipts) 
            : data.receipts;
          
          if (receipts.manager_receipt) {
            setManagerReceipt(receipts.manager_receipt);
          }
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ receipts:", e);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —á–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞
      if (data.client_confirmation_url) {
        setClientReceiptUrl(data.client_confirmation_url);
      }
      
      // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
      if (data.status === 'completed') {
        setIsCompleted(true);
      }
    }
    
    loadProjectData();
  }, [projectId]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
  const handleClientReceiptUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file || !projectId) return;

    setIsUploadingReceipt(true);
    setUploadError(null);

    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
      const { data: userData } = await supabase.auth.getUser();
      const userId = userData?.user?.id || 'unknown';

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const fileExtension = file.name.split('.').pop() || 'jpg';
      const fileName = `client-receipt-${projectId}-${Date.now()}.${fileExtension}`;
      const filePath = `${userId}/${fileName}`;

      console.log("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞:", {
        fileName,
        size: file.size,
        type: file.type
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from("step7-client-confirmations")
        .upload(filePath, file, {
          contentType: file.type,
          upsert: false
        });

      if (uploadError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:", uploadError);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: " + uploadError.message);
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL —Ñ–∞–π–ª–∞
      const { data: urlData } = supabase.storage
        .from("step7-client-confirmations")
        .getPublicUrl(filePath);

      const fileUrl = urlData.publicUrl;
      console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:", fileUrl);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –ø—Ä–æ–µ–∫—Ç
      const { error: updateError } = await supabase
        .from("projects")
        .update({ 
          client_confirmation_url: fileUrl,
          updated_at: new Date().toISOString()
        })
        .eq("id", projectId);

      if (updateError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", updateError);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª");
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram
      const telegramCaption = `üìã –ö–õ–ò–ï–ù–¢ –ó–ê–ì–†–£–ó–ò–õ –ß–ï–ö!\n\n` +
        `üÜî –ü—Ä–æ–µ–∫—Ç: ${projectId}\n` +
        `üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: ${projectName}\n` +
        `üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${companyData?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üìß Email: ${companyData?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üí∞ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${paymentMethod || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
        `üìÑ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —á–µ–∫–æ–º.\n` +
        `‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –µ—Å–ª–∏ –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`;

      try {
        await sendTelegramDocumentClient(fileUrl, telegramCaption);
        console.log("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram");
      } catch (telegramError) {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", telegramError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }

      setClientReceiptFile(file);
      setClientReceiptUrl(fileUrl);

      toast({
        title: "–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!",
        description: "–í–∞—à —á–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
        variant: "default"
      });

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞:", error);
      setUploadError(error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive"
      });
    } finally {
      setIsUploadingReceipt(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞
  const handleRemoveClientReceipt = async () => {
    if (!projectId || !clientReceiptUrl) return;

    try {
      // –£–¥–∞–ª—è–µ–º URL –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { error: updateError } = await supabase
        .from("projects")
        .update({ 
          client_confirmation_url: null,
          updated_at: new Date().toISOString()
        })
        .eq("id", projectId);

      if (updateError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", updateError);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª");
      }

      setClientReceiptFile(null);
      setClientReceiptUrl(null);

      toast({
        title: "–ß–µ–∫ —É–¥–∞–ª–µ–Ω",
        description: "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫.",
        variant: "default"
      });

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ–∫.",
        variant: "destructive"
      });
    }
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  const handleConfirmCompletion = async () => {
    if (!projectId) return;
    
    setIsConfirming(true);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData } = await supabase.auth.getUser();
      const userId = userData?.user?.id;
      
      // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
      await changeProjectStatus({
        projectId,
        newStatus: "completed",
        changedBy: userId || "client",
        comment: "–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      const telegramText = `‚úÖ –ü–†–û–ï–ö–¢ –ó–ê–í–ï–†–®–ï–ù!\n\n` +
        `üìã –ü—Ä–æ–µ–∫—Ç: ${projectName}\n` +
        `üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${companyData?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üìß Email: ${companyData?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üí∞ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${paymentMethod || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üì¶ –ü–æ–∑–∏—Ü–∏–π –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${specificationItems?.length || 0}\n` +
        `üìÑ –ß–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞: ${clientReceiptUrl ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}\n\n` +
        `üéâ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!`;
      
      await sendTelegramMessageClient(telegramText);
      
      setIsCompleted(true);
      
      toast({
        title: "–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!",
        description: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.",
        variant: "default"
      });
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive"
      });
    } finally {
      setIsConfirming(false);
    }
  };

  if (isCompleted) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="max-w-2xl mx-auto p-6"
      >
        <div className="text-center space-y-6">
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ delay: 0.2 }}
            className="mx-auto w-20 h-20 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center"
          >
            <CheckCircle className="h-12 w-12 text-green-600 dark:text-green-400" />
          </motion.div>
          
          <div>
            <h2 className="text-3xl font-bold text-green-700 dark:text-green-400">–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
            <p className="text-gray-600 dark:text-gray-300 mt-2">
              –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            </p>
          </div>
          
          <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-lg p-6">
            <h3 className="font-semibold text-green-800 dark:text-green-300 mb-2">–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ:</h3>
            <ul className="text-sm text-green-700 dark:text-green-300 space-y-1 text-left">
              <li>‚Ä¢ –í–∞—à –ø—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏</li>
              <li>‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏</li>
              <li>‚Ä¢ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ</li>
              <li>‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</li>
            </ul>
          </div>
          
          <div className="flex gap-4 justify-center">
            <Button
              onClick={() => window.location.href = '/dashboard'}
              variant="default"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–∞—à–±–æ—Ä–¥
            </Button>
            <Button
              onClick={() => window.location.href = '/dashboard/create-project'}
              variant="outline"
            >
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
            </Button>
          </div>
        </div>
      </motion.div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-2xl mx-auto p-6"
    >
      <div className="space-y-6">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</h2>
          <p className="text-gray-600 dark:text-gray-300 mt-2">
            –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
          </p>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ */}
        <div className="bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6">
          <h3 className="font-semibold mb-4 flex items-center gap-2 text-gray-900 dark:text-gray-100">
            <FileCheck className="h-5 w-5 text-gray-600 dark:text-gray-300" />
            –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <span className="font-medium text-gray-900 dark:text-gray-100">–ü—Ä–æ–µ–∫—Ç:</span>
              <p className="text-gray-600 dark:text-gray-300">{projectName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            </div>
            <div>
              <span className="font-medium text-gray-900 dark:text-gray-100">–ö–æ–º–ø–∞–Ω–∏—è:</span>
              <p className="text-gray-600 dark:text-gray-300">{companyData?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            </div>
            <div>
              <span className="font-medium text-gray-900 dark:text-gray-100">Email:</span>
              <p className="text-gray-600 dark:text-gray-300">{companyData?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            </div>
            <div>
              <span className="font-medium text-gray-900 dark:text-gray-100">–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</span>
              <p className="text-gray-600 dark:text-gray-300">{paymentMethod || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            </div>
            <div>
              <span className="font-medium text-gray-900 dark:text-gray-100">–ü–æ–∑–∏—Ü–∏–π –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏:</span>
              <p className="text-gray-600 dark:text-gray-300">{specificationItems?.length || 0}</p>
            </div>
            <div>
              <span className="font-medium text-gray-900 dark:text-gray-100">–°—Ç–∞—Ç—É—Å:</span>
              <p className="text-green-600 dark:text-green-400 font-medium">–ì–æ—Ç–æ–≤ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é</p>
            </div>
          </div>
        </div>

        {/* –ß–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ */}
        {managerReceipt && (
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-6">
            <h3 className="font-semibold mb-4 flex items-center gap-2 text-blue-800 dark:text-blue-300">
              <Banknote className="h-5 w-5 text-blue-800 dark:text-blue-300" />
              –ß–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            </h3>
            <div className="flex items-center gap-4">
              <CheckCircle className="h-6 w-6 text-green-500 dark:text-green-400" />
              <div>
                <p className="font-medium text-gray-900 dark:text-gray-100">–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –≥–æ—Ç–æ–≤</p>
                <a 
                  href={managerReceipt} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-blue-600 dark:text-blue-400 hover:underline text-sm"
                >
                  –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫ ‚Üí
                </a>
              </div>
            </div>
          </div>
        )}

        {/* –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ */}
        <div className="bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-700 rounded-lg p-6">
          <h3 className="font-semibold mb-4 flex items-center gap-2 text-orange-800 dark:text-orange-300">
            <Upload className="h-5 w-5 text-orange-800 dark:text-orange-300" />
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤
          </h3>
          
          {!clientReceiptUrl ? (
            <div className="space-y-4">
              <p className="text-sm text-orange-700 dark:text-orange-300">
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. 
                –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç.
              </p>
              
              <div className="flex flex-col gap-3">
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*,application/pdf"
                  onChange={handleClientReceiptUpload}
                  className="hidden"
                />
                
                {uploadError && (
                  <div className="text-red-600 dark:text-red-400 text-sm bg-red-50 dark:bg-red-900/20 p-2 rounded">
                    {uploadError}
                  </div>
                )}
                
                <Button
                  onClick={() => fileInputRef.current?.click()}
                  disabled={isUploadingReceipt}
                  variant="outline"
                  className="w-full border-orange-300 dark:border-orange-600 hover:border-orange-400 dark:hover:border-orange-500 text-orange-800 dark:text-orange-200 bg-white dark:bg-gray-800"
                >
                  {isUploadingReceipt ? (
                    <>
                      <Clock className="h-4 w-4 mr-2 animate-spin" />
                      –ó–∞–≥—Ä—É–∂–∞—é —á–µ–∫...
                    </>
                  ) : (
                    <>
                      <Upload className="h-4 w-4 mr-2" />
                      –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —á–µ–∫–∞
                    </>
                  )}
                </Button>
                
                <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, PDF (–º–∞–∫—Å. 50 –ú–ë)
                </p>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <CheckCircle className="h-6 w-6 text-green-500 dark:text-green-400" />
                <div className="flex-1">
                  <p className="font-medium text-green-800 dark:text-green-300">–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É</p>
                  <a 
                    href={clientReceiptUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-orange-600 dark:text-orange-400 hover:underline text-sm"
                  >
                    –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —á–µ–∫ ‚Üí
                  </a>
                </div>
                <Button
                  onClick={handleRemoveClientReceipt}
                  variant="outline"
                  size="sm"
                  className="text-red-600 dark:text-red-400 border-red-300 dark:border-red-600 hover:border-red-400 dark:hover:border-red-500 bg-white dark:bg-gray-800"
                >
                  <X className="h-4 w-4 mr-1" />
                  –£–¥–∞–ª–∏—Ç—å
                </Button>
              </div>
              
              <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded p-3">
                <p className="text-sm text-green-700 dark:text-green-300">
                  ‚úÖ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç.
                </p>
              </div>
            </div>
          )}
        </div>

        {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ */}
        <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-lg p-6">
          <h3 className="font-semibold mb-3 text-yellow-800 dark:text-yellow-300">
            ‚ö†Ô∏è –í–∞–∂–Ω–æ! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
          </h3>
          <p className="text-sm text-yellow-700 dark:text-yellow-300 mb-4">
            –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —á—Ç–æ:
          </p>
          <ul className="text-sm text-yellow-700 dark:text-yellow-300 space-y-1 list-disc list-inside">
            <li>–ü–æ–ª—É—á–∏–ª–∏ —á–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</li>
            <li>–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤–∞—à —Å—á–µ—Ç</li>
            <li>{clientReceiptUrl ? '–ó–∞–≥—Ä—É–∑–∏–ª–∏ —á–µ–∫ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤' : '–ì–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞'}</li>
            <li>–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ</li>
            <li>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é</li>
          </ul>
          
          {!clientReceiptUrl && (
            <div className="mt-4 bg-orange-100 dark:bg-orange-900/30 border border-orange-300 dark:border-orange-600 rounded p-3">
              <p className="text-sm text-orange-700 dark:text-orange-300">
                üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞.
              </p>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex gap-4 justify-between">
          <Button
            variant="outline"
            onClick={() => setCurrentStep(6)}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            –ù–∞–∑–∞–¥
          </Button>

          <Button
            onClick={handleConfirmCompletion}
            disabled={isConfirming}
            className="flex items-center gap-2"
          >
            {isConfirming ? (
              <>
                <Clock className="h-4 w-4 animate-spin" />
                –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ–µ–∫—Ç...
              </>
            ) : (
              <>
                <CheckCircle className="h-4 w-4" />
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              </>
            )}
          </Button>
        </div>
      </div>
    </motion.div>
  );
} 