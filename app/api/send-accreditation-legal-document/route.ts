import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// POST: –û—Ç–ø—Ä–∞–≤–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤ Telegram
export async function POST(request: NextRequest) {
  try {
    console.log("üì§ [SEND-LEGAL-DOC] –û—Ç–ø—Ä–∞–≤–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram");

    const { searchParams } = new URL(request.url);
    const applicationId = searchParams.get('applicationId');
    const docIndex = searchParams.get('docIndex') || '0';
    const chatId = searchParams.get('chatId') || process.env.TELEGRAM_CHAT_ID;

    if (!applicationId) {
      return NextResponse.json({ 
        error: "–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞—è–≤–∫–∏" 
      }, { status: 400 });
    }

    if (!chatId) {
      return NextResponse.json({ 
        error: "–ù–µ —É–∫–∞–∑–∞–Ω chat_id" 
      }, { status: 400 });
    }

    console.log("üîç [SEND-LEGAL-DOC] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:", { applicationId, docIndex });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const { data: application, error } = await supabase
      .from('accreditation_applications')
      .select('*')
      .eq('id', applicationId)
      .single();

    if (error || !application) {
      return NextResponse.json({ 
        error: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" 
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    let legalDocumentsData = [];
    try {
      legalDocumentsData = typeof application.legal_documents_data === 'string' 
        ? JSON.parse(application.legal_documents_data) 
        : application.legal_documents_data || [];
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ legal_documents_data:', parseError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" 
      }, { status: 500 });
    }

    const document = legalDocumentsData[parseInt(docIndex)];
    
    if (!document) {
      return NextResponse.json({ 
        error: "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" 
      }, { status: 404 });
    }

    console.log("üìÑ [SEND-LEGAL-DOC] –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç:", document);

    if (!document.public_url) {
      return NextResponse.json({ 
        error: "–£ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL" 
      }, { status: 400 });
    }

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ public_url
      const urlParts = document.public_url.split('/storage/v1/object/public/');
      if (urlParts.length !== 2) {
        return NextResponse.json({ 
          error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç public_url" 
        }, { status: 400 });
      }
      
      const bucketAndPath = urlParts[1];
      const [bucket, ...pathParts] = bucketAndPath.split('/');
      const storagePath = pathParts.join('/');
      
      console.log("üì• [SEND-LEGAL-DOC] –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ –±–∞–∫–µ—Ç–∞:", bucket, "–ø–æ –ø—É—Ç–∏:", storagePath);
      
      const { data: fileData, error: downloadError } = await supabase.storage
        .from(bucket)
        .download(storagePath);

      if (downloadError) {
        console.error("‚ùå [SEND-LEGAL-DOC] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", downloadError);
        return NextResponse.json({ 
          error: "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞",
          details: downloadError.message
        }, { status: 500 });
      }

      console.log("‚úÖ [SEND-LEGAL-DOC] –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä:", fileData.size);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer
      const buffer = Buffer.from(await fileData.arrayBuffer());

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
      const botToken = process.env.TELEGRAM_CHAT_BOT_TOKEN;
      if (!botToken) {
        return NextResponse.json({ 
          error: "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞" 
        }, { status: 500 });
      }

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      const formData = new FormData();
      formData.append('chat_id', chatId);
      formData.append('document', new Blob([buffer]), document.fileName);
      formData.append('caption', `‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç\n\nüè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${application.supplier_name}\nüìã –¢–∏–ø: ${document.type}\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${document.name}\nüìè –†–∞–∑–º–µ—Ä: ${(document.size / 1024).toFixed(1)} KB`);

      console.log("üì§ [SEND-LEGAL-DOC] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...");

      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendDocument`, {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (!result.ok) {
        console.error("‚ùå [SEND-LEGAL-DOC] –û—à–∏–±–∫–∞ Telegram API:", result);
        return NextResponse.json({ 
          error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram",
          details: result.description
        }, { status: 500 });
      }

      console.log("‚úÖ [SEND-LEGAL-DOC] –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");

      return NextResponse.json({
        success: true,
        message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram",
        result: result
      });

    } catch (error) {
      console.error("‚ùå [SEND-LEGAL-DOC] –û—à–∏–±–∫–∞:", error);
      return NextResponse.json({
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 });
    }

  } catch (error) {
    console.error("‚ùå [SEND-LEGAL-DOC] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 