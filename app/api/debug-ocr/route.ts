import { type NextRequest, NextResponse } from "next/server";
import { getYandexVisionService } from "@/lib/services/YandexVisionService";

export async function POST(request: NextRequest) {
  try {
    console.log("üîç API /debug-ocr –≤—ã–∑–≤–∞–Ω");
    
    const body = await request.json();
    const { fileUrl, fileType } = body;
    
    if (!fileUrl || !fileType) {
      return NextResponse.json(
        { error: "fileUrl –∏ fileType –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      );
    }
    
    console.log("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª:", {
      fileUrl: fileUrl.substring(0, 100) + "...",
      fileType
    });
    
    const visionService = getYandexVisionService();
    const extractedText = await visionService.extractTextFromDocument(fileUrl, fileType);
    
    console.log("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω:", extractedText);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    const suggestions = extractCompanyData(extractedText);
    
    return NextResponse.json({
      success: true,
      extractedText,
      suggestions,
      textLength: extractedText.length,
      hasData: Object.keys(suggestions).length > 0
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ API debug-ocr:", error);
    return NextResponse.json(
      {
        error: "–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ OCR",
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function extractCompanyData(text: string) {
  const suggestions: any = {};
  
  console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏...");

  // –ü–æ–∏—Å–∫ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä) - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const innPatterns = [
    /\b–ò–ù–ù[:\s]*(\d{10}|\d{12})\b/i,
    /\b–ò–ù–ù[:\s]*(\d{3}-\d{3}-\d{3}-\d{3})\b/i,
    /\b(\d{10}|\d{12})\s*\(–ò–ù–ù\)/i,
    /\b–ò–ù–ù\/–ö–ü–ü[:\s]*(\d{10})\/(\d{9})\b/i,
    /\b(\d{10})\/(\d{9})\s*\(–ò–ù–ù\/–ö–ü–ü\)/i
  ];
  
  for (const pattern of innPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.inn = match[1].replace(/-/g, '');
      console.log("‚úÖ –ò–ù–ù –Ω–∞–π–¥–µ–Ω:", suggestions.inn);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù/–ö–ü–ü, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ –ö–ü–ü
      if (match[2]) {
        suggestions.kpp = match[2].replace(/-/g, '');
        console.log("‚úÖ –ö–ü–ü –Ω–∞–π–¥–µ–Ω –∏–∑ –ò–ù–ù/–ö–ü–ü:", suggestions.kpp);
      }
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –ö–ü–ü (9 —Ü–∏—Ñ—Ä) - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const kppPatterns = [
    /\b–ö–ü–ü[:\s]*(\d{9})\b/i,
    /\b–ö–ü–ü[:\s]*(\d{3}-\d{3}-\d{3})\b/i,
    /\b(\d{9})\s*\(–ö–ü–ü\)/i
  ];
  
  for (const pattern of kppPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.kpp = match[1].replace(/-/g, '');
      console.log("‚úÖ –ö–ü–ü –Ω–∞–π–¥–µ–Ω:", suggestions.kpp);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –û–ì–†–ù (13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä) - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const ogrnPatterns = [
    /\b–û–ì–†–ù[:\s]*(\d{13}|\d{15})\b/i,
    /\b–û–ì–†–ù[:\s]*(\d{1}-\d{4}-\d{4}-\d{4})\b/i,
    /\b(\d{13}|\d{15})\s*\(–û–ì–†–ù\)/i
  ];
  
  for (const pattern of ogrnPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.ogrn = match[1].replace(/-/g, '');
      console.log("‚úÖ –û–ì–†–ù –Ω–∞–π–¥–µ–Ω:", suggestions.ogrn);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const companyPatterns = [
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*["¬´]?([^¬ª"\n]+)["¬ª]?/i,
    /\b–ù–∞–∑–≤–∞–Ω–∏–µ[:\s]*([^,\n]+)/i,
    /\b–ö–æ–º–ø–∞–Ω–∏—è[:\s]*([^,\n]+)/i,
    /\b–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è[:\s]*([^,\n]+)/i,
    /\b–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ[:\s]*\n*([^,\n]+)/i,
    /\b–û–±—â–µ—Å—Ç–≤–æ\s+—Å\s+–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π\s+–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é\s*["¬´]?([^¬ª"\n]+)["¬ª]?/i
  ];
  
  for (const pattern of companyPatterns) {
    const match = text.match(pattern);
    if (match) {
      if (match[2]) {
        suggestions.companyName = match[1] + ' ' + match[2];
      } else {
        suggestions.companyName = match[1];
      }
      console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ:", suggestions.companyName);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const bankPatterns = [
    /\b–ë–∞–Ω–∫[:\s]*([^,\n]+)/i,
    /\b–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è[:\s]*([^,\n]+)/i,
    /\b–ü–æ–ª—É—á–∞—Ç–µ–ª—å[:\s]*([^,\n]+)/i,
    /\b–≤\s+([^,\n]+)\s*$/i
  ];
  
  for (const pattern of bankPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.bankName = match[1].trim();
      console.log("‚úÖ –ë–∞–Ω–∫ –Ω–∞–π–¥–µ–Ω:", suggestions.bankName);
      break;
    }
  }

  const accountPatterns = [
    /\b(—Ä\/—Å|—Å—á–µ—Ç|—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç)[:\s]*(\d{20})\b/i,
    /\b(\d{20})\s*\(—Å—á–µ—Ç\)/i,
    /\b–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç[:\s]*(\d{20})\b/i
  ];
  
  for (const pattern of accountPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.bankAccount = match[2] || match[1];
      console.log("‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω:", suggestions.bankAccount);
      break;
    }
  }

  const corrAccountPatterns = [
    /\b(–∫–æ—Ä—Ä|–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç)[:\s]*(\d{20})\b/i,
    /\b–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç[:\s]*(\d{20})\b/i
  ];
  
  for (const pattern of corrAccountPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.bankCorrAccount = match[2] || match[1];
      console.log("‚úÖ –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω:", suggestions.bankCorrAccount);
      break;
    }
  }

  const bikPatterns = [
    /\b–ë–ò–ö[:\s]*(\d{9})\b/i,
    /\b(\d{9})\s*\(–ë–ò–ö\)/i,
    /\b–ë–ò–ö –±–∞–Ω–∫–∞[:\s]*(\d{9})\b/i
  ];
  
  for (const pattern of bikPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.bankBik = match[1];
      console.log("‚úÖ –ë–ò–ö –Ω–∞–π–¥–µ–Ω:", suggestions.bankBik);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞
  const addressPatterns = [
    /\b(–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å|–ê–¥—Ä–µ—Å)[:\s]*\n*([^,\n]+)/i,
    /\b(–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å)[:\s]*\n*([^,\n]+)/i
  ];
  
  for (const pattern of addressPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.address = match[2] || match[1];
      console.log("‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω:", suggestions.address);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phonePatterns = [
    /\b(–¢–µ–ª–µ—Ñ–æ–Ω|–¢–µ–ª)[:\s]*([+\d\s\-\(\)]+)/i,
    /\b([+7]\s*\(\d{3}\)\s*\d{3}-\d{2}-\d{2})/i
  ];
  
  for (const pattern of phonePatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.phone = match[2] || match[1];
      console.log("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞–π–¥–µ–Ω:", suggestions.phone);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ email
  const emailPatterns = [
    /\b(E-mail|Email)[:\s]*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i,
    /\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i
  ];
  
  for (const pattern of emailPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.email = match[2] || match[1];
      console.log("‚úÖ Email –Ω–∞–π–¥–µ–Ω:", suggestions.email);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ —Å–∞–π—Ç–∞
  const websitePatterns = [
    /\b(Website|–°–∞–π—Ç)[:\s]*([^\s\n]+)/i,
    /\b(https?:\/\/[^\s\n]+)/i
  ];
  
  for (const pattern of websitePatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.website = match[2] || match[1];
      // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–ø–∞–ª–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (suggestions.website && suggestions.website.startsWith(':')) {
        suggestions.website = suggestions.website.substring(1).trim();
      }
      console.log("‚úÖ –°–∞–π—Ç –Ω–∞–π–¥–µ–Ω:", suggestions.website);
      break;
    }
  }

  console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", suggestions);
  return suggestions;
} 