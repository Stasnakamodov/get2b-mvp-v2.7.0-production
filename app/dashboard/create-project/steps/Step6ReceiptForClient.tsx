import React, { useEffect, useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { useCreateProjectContext } from "../context/CreateProjectContext";
import { supabase } from "@/lib/supabaseClient";
import { Download, CheckCircle } from "lucide-react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { sendSupplierReceiptRequestToManagerClient } from "@/lib/telegram-client";

export default function Step6ReceiptForClient() {
  const { projectId, projectName, setCurrentStep, specificationItems, paymentMethod, companyData, currentStep } = useCreateProjectContext();
  const [receiptUrl, setReceiptUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isInitialLoading, setIsInitialLoading] = useState(true); // –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const [requisite, setRequisite] = useState<any>(null);
  const [projectData, setProjectData] = useState<any>(null);
  const [hasManagerReceipt, setHasManagerReceipt] = useState(false);
  const [isRequestSent, setIsRequestSent] = useState(false);
  const [showLoader, setShowLoader] = useState(true); // –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∞–¥–µ—Ä–∞
  const sentRequest = useRef(false);
  const isProcessing = useRef(false); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  const loadingTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç –∏–∑ project_requisites
  useEffect(() => {
    async function fetchRequisite() {
      if (!projectId) return;
      
      console.log("üîç [STEP6] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:", projectId);
      
      // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const { data, error } = await supabase
        .from("project_requisites")
        .select("data")
        .eq("project_id", projectId)
        .order("created_at", { ascending: false })
        .limit(1)
        .single();
      
      console.log("üîç [STEP6] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", { data, error });
      
      if (data) {
        console.log("‚úÖ [STEP6] –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:", data.data);
        setRequisite(data.data); // data ‚Äî —ç—Ç–æ jsonb —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
      } else {
        console.log("‚ùå [STEP6] –†–µ–∫–≤–∏–∑–∏—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–∏—á–∏–Ω–∞:", error || "data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        setRequisite(null);
      }
    }
    fetchRequisite();
  }, [projectId]);

  useEffect(() => {
    let timeout: NodeJS.Timeout;
    let interval: NodeJS.Timeout;
    
    async function fetchReceipt() {
      if (!projectId) return;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
      if (isInitialLoading) {
        setIsLoading(true);
      }
      
      const { data, error } = await supabase
        .from("projects")
        .select("email, company_data, payment_method, amount, currency, status, receipts, updated_at")
        .eq("id", projectId)
        .single();
        
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è
      if (loadingTimeoutRef.current) {
        clearTimeout(loadingTimeoutRef.current);
      }
      
      loadingTimeoutRef.current = setTimeout(async () => {
        if (!error && data) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
          let managerReceiptUrl = null;
          
          if (data.receipts) {
            try {
              // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
              const receiptsData = JSON.parse(data.receipts);
              if (receiptsData.manager_receipt) {
                managerReceiptUrl = receiptsData.manager_receipt;
              }
            } catch {
              // –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
              if (data.status === "in_work") {
                managerReceiptUrl = data.receipts;
              }
            }
          }
          
          console.log("üîç [STEP6] –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", {
            managerReceiptUrl: !!managerReceiptUrl,
            status: data.status,
            hasReceipts: !!data.receipts
          });
          
          if (managerReceiptUrl) {
            setReceiptUrl(managerReceiptUrl);
            setHasManagerReceipt(true);
            setShowLoader(false); // –£–±–∏—Ä–∞–µ–º –ª–æ–∞–¥–µ—Ä –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —á–µ–∫–∞
            
            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê: –µ—Å–ª–∏ –µ—Å—Ç—å —á–µ–∫, –Ω–æ —Å—Ç–∞—Ç—É—Å –µ—â–µ waiting_manager_receipt
            if (data.status === "waiting_manager_receipt") {
              console.log("üîÑ [STEP6] –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ in_work");
              await supabase
                .from("projects")
                .update({ 
                  status: "in_work",
                  updated_at: new Date().toISOString()
                })
                .eq("id", projectId);
              console.log("‚úÖ [STEP6] –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ in_work");
            }
          } else {
            setReceiptUrl(null);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ manager_receipt –≤ JSON –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ hasManagerReceipt
            if (data.receipts && data.status === "in_work") {
              try {
                const receiptsData = JSON.parse(data.receipts);
                setHasManagerReceipt(!!receiptsData.manager_receipt);
              } catch {
                setHasManagerReceipt(false);
              }
            } else {
              setHasManagerReceipt(false);
            }
          }
        } else {
          setReceiptUrl(null);
        }
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (isInitialLoading) {
          setIsLoading(false);
          setIsInitialLoading(false);
        }
      }, 800); // –£–º–µ–Ω—å—à–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    }
    
    fetchReceipt();
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —á–µ–∫–∞ –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    if (!receiptUrl && !isInitialLoading) {
      interval = setInterval(fetchReceipt, 5000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    }
    
    return () => {
      if (loadingTimeoutRef.current) {
        clearTimeout(loadingTimeoutRef.current);
      }
      if (interval) clearInterval(interval);
    };
  }, [projectId, receiptUrl, isInitialLoading]);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ –Ω–∞ 6 —à–∞–≥
  useEffect(() => {
    async function sendReceiptRequest() {
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      const sentKey = `supplier_receipt_sent_${projectId}`;
      const sessionKey = `session_receipt_sent_${projectId}`;
      const timestamp = Date.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –∏ sessionStorage
      const alreadySentLocal = localStorage.getItem(sentKey);
      const alreadySentSession = sessionStorage.getItem(sessionKey);
      
      // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ - –≤—ã—Ö–æ–¥–∏–º
      if (!projectId || 
          sentRequest.current || 
          isProcessing.current ||
          isRequestSent || 
          alreadySentLocal || 
          alreadySentSession) {
        console.log("üîÑ [STEP6] –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", {
          projectId: !!projectId,
          sentRequestRef: sentRequest.current,
          isProcessing: isProcessing.current,
          isRequestSent,
          alreadySentLocal: !!alreadySentLocal,
          alreadySentSession: !!alreadySentSession,
          timestamp
        });
        return;
      }
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –°–†–ê–ó–£ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
      sentRequest.current = true;
      isProcessing.current = true;
      setIsRequestSent(true);
      localStorage.setItem(sentKey, JSON.stringify({ timestamp, sent: true }));
      sessionStorage.setItem(sessionKey, JSON.stringify({ timestamp, sent: true }));
      
      try {
        const { data: fetchedProjectData, error } = await supabase
          .from("projects")
          .select("email, company_data, amount, currency, payment_method, receipts, status, specification_id")
          .eq("id", projectId)
          .single();
          
        if (error || !fetchedProjectData) {
          console.log("üîÑ [STEP6] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ waiting_manager_receipt
        if (fetchedProjectData.status !== "waiting_manager_receipt") {
          console.log("üîÑ [STEP6] –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", fetchedProjectData.status);
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setProjectData(fetchedProjectData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        let hasManagerReceiptLocal = false;
        if (fetchedProjectData.receipts) {
          try {
            const receiptsData = JSON.parse(fetchedProjectData.receipts);
            hasManagerReceiptLocal = !!receiptsData.manager_receipt;
          } catch {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
            hasManagerReceiptLocal = fetchedProjectData.status === "in_work";
          }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setHasManagerReceipt(hasManagerReceiptLocal);
        
        // –ï—Å–ª–∏ —á–µ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        if (hasManagerReceiptLocal) {
          console.log("üîÑ [STEP6] –ß–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º");
          localStorage.setItem(sentKey, JSON.stringify({ timestamp, completed: true }));
          sessionStorage.setItem(sessionKey, JSON.stringify({ timestamp, completed: true }));
          return;
        }
        
        console.log("üîÑ [STEP6] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞");
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let totalAmount = 0;
        if (fetchedProjectData.specification_id) {
          const { data: specData } = await supabase
            .from('project_specifications')
            .select('*')
            .eq('id', fetchedProjectData.specification_id)
            .single();
          
          if (specData) {
            totalAmount = specData.total || specData.totalPrice || 0;
          }
        }
        
        // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç specification_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ specificationItems
        if (totalAmount === 0 && specificationItems && specificationItems.length > 0) {
          totalAmount = specificationItems.reduce((sum, item) => sum + (item.total || item.totalPrice || 0), 0);
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º amount –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        if (totalAmount === 0) {
          totalAmount = fetchedProjectData.amount || 0;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let requisiteText = '';
        try {
          console.log("üîç [TELEGRAM] –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:", projectId);
          
          const { data: requisiteData } = await supabase
            .from("project_requisites")
            .select("data")
            .eq("project_id", projectId)
            .order("created_at", { ascending: false })
            .limit(1)
            .single();
          
          console.log("üîç [TELEGRAM] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", { 
            hasData: !!requisiteData, 
            data: requisiteData,
            paymentMethod: fetchedProjectData.payment_method 
          });
          
          if (requisiteData?.data) {
            const req = requisiteData.data;
            const details = req.details || req;
            
            console.log("üîç [TELEGRAM] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:", { req, details, paymentMethod: fetchedProjectData.payment_method });
            
            if (fetchedProjectData.payment_method === 'bank-transfer') {
              requisiteText = `\n\nüìã –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${details.recipientName || '-'}\n‚Ä¢ –ë–∞–Ω–∫: ${details.bankName || '-'}\n‚Ä¢ –°—á–µ—Ç: ${details.accountNumber || '-'}\n‚Ä¢ SWIFT/BIC: ${details.swift || details.cnapsCode || details.iban || '-'}\n‚Ä¢ –í–∞–ª—é—Ç–∞: ${details.transferCurrency || 'USD'}`;
            } else if (fetchedProjectData.payment_method === 'p2p') {
              requisiteText = `\n\nüí≥ –ö–∞—Ä—Ç–∞ –¥–ª—è P2P:\n‚Ä¢ –ë–∞–Ω–∫: ${req.bank || '-'}\n‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${req.card_number || '-'}\n‚Ä¢ –î–µ—Ä–∂–∞—Ç–µ–ª—å: ${req.holder_name || '-'}`;
            } else if (fetchedProjectData.payment_method === 'crypto') {
              requisiteText = `\n\nü™ô –ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫:\n‚Ä¢ –ê–¥—Ä–µ—Å: ${req.address || '-'}\n‚Ä¢ –°–µ—Ç—å: ${req.network || '-'}`;
            }
            
            console.log("‚úÖ [TELEGRAM] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", requisiteText);
          } else {
            console.log("‚ùå [TELEGRAM] –î–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
          }
        } catch (error) {
          console.log("‚ö†Ô∏è [TELEGRAM] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        if (totalAmount !== fetchedProjectData.amount && totalAmount > 0) {
          console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –ë–î: ${fetchedProjectData.amount} ‚Üí ${totalAmount}`);
          await supabase
            .from("projects")
            .update({ amount: totalAmount })
            .eq("id", projectId);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        await sendSupplierReceiptRequestToManagerClient({
          projectId,
          email: fetchedProjectData.email || "email@example.com",
          companyName: projectName || "–ü—Ä–æ–µ–∫—Ç",
          amount: totalAmount,
          currency: fetchedProjectData.currency || "USD",
          paymentMethod: fetchedProjectData.payment_method || "bank-transfer",
          requisites: requisiteText
        });
        
        console.log("‚úÖ [STEP6] –ó–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        localStorage.setItem(sentKey, JSON.stringify({ timestamp, completed: true }));
        sessionStorage.setItem(sessionKey, JSON.stringify({ timestamp, completed: true }));
        
      } catch (error) {
        console.error("‚ùå [STEP6] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É:", error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        sentRequest.current = false;
        isProcessing.current = false;
        setIsRequestSent(false);
        localStorage.removeItem(sentKey);
        sessionStorage.removeItem(sessionKey);
      } finally {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        isProcessing.current = false;
      }
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    const timeoutId = setTimeout(sendReceiptRequest, 500);
    
    return () => {
      clearTimeout(timeoutId);
    };
  }, [projectId]); // –£–±–∏—Ä–∞–µ–º specificationItems –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // --- –°–≤–æ–¥–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ ---
  const renderRequisiteTable = (requisite: any): React.ReactNode => {
    if (!requisite || typeof requisite !== 'object') return <span>‚Äî</span>;
    const keyLabels: Record<string, string> = {
      name: '–ù–∞–∑–≤–∞–Ω–∏–µ',
      country: '–°—Ç—Ä–∞–Ω–∞',
      recipientName: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å',
      recipientAddress: '–Æ—Ä. –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
      bankName: '–ë–∞–Ω–∫',
      bankAddress: '–ê–¥—Ä–µ—Å –±–∞–Ω–∫–∞',
      cnapsCode: 'CNAPS –∫–æ–¥',
      iban: 'IBAN',
      swift: 'SWIFT/BIC',
      accountNumber: '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞',
      transferCurrency: '–í–∞–ª—é—Ç–∞',
      paymentPurpose: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞',
      otherDetails: '–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      card_number: '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
      holder_name: '–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã',
      expiry_date: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è',
      address: '–ê–¥—Ä–µ—Å',
      network: '–°–µ—Ç—å',
    };
    const details: Record<string, any> = requisite.details || requisite;
    const rows = Object.entries(details).filter(([_, value]) => value).map(([key, value]) => (
      <tr key={key}>
        <td className="px-2 py-1 font-medium text-gray-700">{keyLabels[key] || key}</td>
        <td className="px-2 py-1">{value}</td>
      </tr>
    ));
    if (rows.length === 0) return <span>‚Äî</span>;
    return (
      <table className="min-w-full text-sm">
        <tbody>{rows}</tbody>
      </table>
    );
  };

  return (
    <div className="max-w-2xl mx-auto mt-24 text-gray-900">
      <div className="mb-8 flex flex-col items-center">
        <CheckCircle className="h-16 w-16 text-green-500 mb-4" />
        <h2 className="text-2xl font-bold mb-2 text-center">–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤</h2>
        <Card className="w-full mb-6">
          <CardHeader>
            <CardTitle>–í–∞—à–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm mb-2">
                <thead>
                  <tr className="text-gray-500">
                    <th className="px-2 py-1 text-left">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th className="px-2 py-1 text-left">–ö–æ–ª-–≤–æ</th>
                    <th className="px-2 py-1 text-left">–¶–µ–Ω–∞</th>
                    <th className="px-2 py-1 text-left">–°—É–º–º–∞</th>
                  </tr>
                </thead>
                <tbody>
                  {specificationItems.map((item, idx) => (
                    <tr key={item.id || idx}>
                      <td className="px-2 py-1">{item.item_name || item.name}</td>
                      <td className="px-2 py-1">{item.quantity}</td>
                      <td className="px-2 py-1">{item.price || item.pricePerUnit}</td>
                      <td className="px-2 py-1">{item.total || item.totalPrice}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
              <div className="text-right font-semibold">–ò—Ç–æ–≥–æ: {specificationItems.reduce((sum, item) => sum + (item.total || item.totalPrice || 0), 0)}</div>
            </div>
            <div className="mt-4">
              <div><b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {paymentMethod === 'bank-transfer' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥' : paymentMethod === 'p2p' ? 'P2P –ø–µ—Ä–µ–≤–æ–¥' : paymentMethod === 'crypto' ? '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞' : '-'}</div>
              <div className="mt-2"><b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
                {requisite ? (
                  <div className="bg-gray-50 dark:bg-gray-800 rounded p-2 mt-1 text-xs text-gray-900 dark:text-gray-100 overflow-x-auto">
                    {renderRequisiteTable(requisite)}
                  </div>
                ) : '‚Äî'}
              </div>
            </div>
          </CardContent>
        </Card>
        <p className="text-center text-muted-foreground text-base mb-4">
          {receiptUrl
            ? "‚úÖ –í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —á–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ."
            : projectData?.status === "in_work" 
              ? hasManagerReceipt
                ? "‚úÖ –ß–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!"
                : "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ —á–µ–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤."
              : "–û–∂–∏–¥–∞–π—Ç–µ, –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–∏—Ç —á–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤."}
        </p>
        {/* –ï–¥–∏–Ω—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ª–æ–∞–¥–µ—Ä */}
        {!receiptUrl && showLoader ? (
          <div className="flex flex-col items-center gap-2 mt-4">
            <div className="w-8 h-8 border-4 border-blue-200 border-t-blue-500 rounded-full animate-spin"></div>
            <span className="text-gray-600 text-sm">
              {isLoading && isInitialLoading ? "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ–∫–∞..." : "–û–∂–∏–¥–∞–µ–º —á–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."}
            </span>
          </div>
        ) : receiptUrl ? (
          <>
            <a href={receiptUrl} target="_blank" rel="noopener noreferrer">
              <Button className="bg-blue-500 hover:bg-blue-600 text-white flex items-center gap-2 mt-4">
                <Download className="h-5 w-5" /> –°–∫–∞—á–∞—Ç—å —á–µ–∫
              </Button>
            </a>
            <Button
              className="mt-4 bg-green-600 hover:bg-green-700 text-white"
              onClick={async () => {
                console.log("üîÑ [STEP6] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Step7, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting_client_confirmation");
                setCurrentStep(7);
                if (projectId) {
                  await supabase
                    .from("projects")
                    .update({ 
                      current_step: 7,
                      max_step_reached: 7,
                      status: "waiting_client_confirmation"
                    })
                    .eq("id", projectId);
                  console.log("‚úÖ [STEP6] –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ waiting_client_confirmation");
                }
              }}
            >
              –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            </Button>
          </>
        ) : null}
      </div>
    </div>
  );
} 