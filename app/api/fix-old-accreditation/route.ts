import { NextRequest, NextResponse } from "next/server";
import { supabaseService } from "@/lib/supabaseServiceClient";

export async function POST(request: NextRequest) {
  try {
    const { applicationId } = await request.json();
    
    if (!applicationId) {
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–∫–∞–∑–∞–Ω ID –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏"
      }, { status: 400 });
    }

    console.log("üîß [FIX-OLD-ACCREDITATION] –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é:", applicationId);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏
    const { data: application, error } = await supabaseService
      .from('accreditation_applications')
      .select('*')
      .eq('id', applicationId)
      .single();

    if (error || !application) {
      return NextResponse.json({
        success: false,
        error: "–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    let productsData = [];
    try {
      productsData = typeof application.products_data === 'string' 
        ? JSON.parse(application.products_data) 
        : application.products_data;
    } catch (parseError) {
      return NextResponse.json({
        success: false,
        error: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
      }, { status: 500 });
    }

    let hasChanges = false;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (let i = 0; i < productsData.length; i++) {
      const product = productsData[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
      if (product.certificates && product.certificates.length > 0 && (!product.certificates_info || product.certificates_info.length === 0)) {
        console.log(`üîß [FIX-OLD-ACCREDITATION] –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${i}:`, product.certificates);
        
        product.certificates_info = [];
        
        for (let j = 0; j < product.certificates.length; j++) {
          const certName = product.certificates[j];
          const certPath = `accreditation/${applicationId}/products/${i}/certificates/${certName}`;
          
          try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å public_url –∏–∑ Storage
            const { data: urlData } = supabaseService.storage
              .from('project-images') // –°—Ç–∞—Ä—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –º–æ–≥–ª–∏ –±—ã—Ç—å –≤ project-images
              .getPublicUrl(certPath);
            
            if (urlData.publicUrl) {
              product.certificates_info.push({
                name: certName,
                size: 1024, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                type: 'image/jpeg', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ç–∏–ø
                public_url: urlData.publicUrl
              });
              console.log(`‚úÖ [FIX-OLD-ACCREDITATION] –î–æ–±–∞–≤–ª–µ–Ω public_url –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:`, certName);
            } else {
              // –ü—Ä–æ–±—É–µ–º –≤ –Ω–æ–≤–æ–º –±–∞–∫–µ—Ç–µ
              const { data: urlData2 } = supabaseService.storage
                .from('accreditation-certificates')
                .getPublicUrl(certPath);
              
              if (urlData2.publicUrl) {
                product.certificates_info.push({
                  name: certName,
                  size: 1024,
                  type: 'image/jpeg',
                  public_url: urlData2.publicUrl
                });
                console.log(`‚úÖ [FIX-OLD-ACCREDITATION] –î–æ–±–∞–≤–ª–µ–Ω public_url –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–Ω–æ–≤—ã–π –±–∞–∫–µ—Ç):`, certName);
              }
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è [FIX-OLD-ACCREDITATION] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:`, certName);
          }
        }
        
        hasChanges = true;
      }
    }

    if (hasChanges) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
      const { error: updateError } = await supabaseService
        .from('accreditation_applications')
        .update({
          products_data: JSON.stringify(productsData),
          updated_at: new Date().toISOString()
        })
        .eq('id', applicationId);

      if (updateError) {
        return NextResponse.json({
          success: false,
          error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
        }, { status: 500 });
      }

      console.log("‚úÖ [FIX-OLD-ACCREDITATION] –ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞");
    }

    return NextResponse.json({
      success: true,
      message: "–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞",
      has_changes: hasChanges,
      products_count: productsData.length
    });

  } catch (error) {
    console.error("‚ùå [FIX-OLD-ACCREDITATION] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 