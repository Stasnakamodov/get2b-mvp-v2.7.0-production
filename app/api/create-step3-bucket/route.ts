import { createClient } from '@supabase/supabase-js'
import { NextResponse } from 'next/server'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function POST() {
  try {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ bucket step3-supplier-receipts...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ bucket
    const { data: buckets, error: listError } = await supabase.storage.listBuckets()
    
    if (listError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ buckets:', listError)
      return NextResponse.json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ buckets: ' + listError.message 
      }, { status: 500 })
    }
    
    const bucketExists = buckets?.some(bucket => bucket.name === 'step3-supplier-receipts')
    
    if (bucketExists) {
      console.log('‚úÖ Bucket step3-supplier-receipts —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      return NextResponse.json({ 
        success: true, 
        message: 'Bucket step3-supplier-receipts —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
      })
    }
    
    // –°–æ–∑–¥–∞–µ–º bucket
    const { data, error } = await supabase.storage.createBucket('step3-supplier-receipts', {
      public: true,
      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'],
      fileSizeLimit: 10485760 // 10MB
    })
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:', error)
      return NextResponse.json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: ' + error.message 
      }, { status: 500 })
    }
    
    console.log('‚úÖ Bucket step3-supplier-receipts —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    
    return NextResponse.json({ 
      success: true, 
      message: 'Bucket step3-supplier-receipts —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      data 
    })
    
  } catch (error: any) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ 
      success: false, 
      error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ' + error.message 
    }, { status: 500 })
  }
} 