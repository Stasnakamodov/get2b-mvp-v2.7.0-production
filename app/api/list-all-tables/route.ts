import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function GET(request: NextRequest) {
  try {
    console.log("üîç [API] –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...");

    const tables: any = {
      all: [],
      chatRelated: [],
      messageRelated: [],
      roomRelated: [],
      oldRelated: [],
      summary: {}
    };

    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
    const knownTables = [
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞
      'projects', 'project_specifications', 'specifications',
      'client_profiles', 'supplier_profiles',
      
      // –ö–∞—Ç–∞–ª–æ–≥
      'catalog_verified_suppliers', 'catalog_user_suppliers',
      'catalog_verified_products', 'catalog_user_products',
      
      // –ß–∞—Ç
      'chat_rooms', 'chat_messages',
      
      // –ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è
      'accreditation_applications',
      
      // –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —á–∞—Ç–∞
      'chats', 'messages', 'rooms',
      'chat_old', 'messages_old', 'rooms_old',
      'chat_temp', 'messages_temp', 'rooms_temp',
      'chat_backup', 'messages_backup', 'rooms_backup',
      'chat_archive', 'messages_archive', 'rooms_archive',
      'chat_legacy', 'messages_legacy', 'rooms_legacy',
      'chat_deprecated', 'messages_deprecated', 'rooms_deprecated',
      
      // –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      'echo_cards', 'supplier_drafts', 'project_templates',
      'project_requisites', 'user_notifications'
    ];

    for (const tableName of knownTables) {
      try {
        const { count, error } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });

        if (!error) {
          tables.all.push({
            name: tableName,
            exists: true,
            recordCount: count
          });

          // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
          if (tableName.toLowerCase().includes('chat')) {
            tables.chatRelated.push(tableName);
          }
          if (tableName.toLowerCase().includes('message')) {
            tables.messageRelated.push(tableName);
          }
          if (tableName.toLowerCase().includes('room')) {
            tables.roomRelated.push(tableName);
          }
          if (tableName.toLowerCase().includes('old') || 
              tableName.toLowerCase().includes('temp') ||
              tableName.toLowerCase().includes('backup') ||
              tableName.toLowerCase().includes('archive') ||
              tableName.toLowerCase().includes('legacy') ||
              tableName.toLowerCase().includes('deprecated')) {
            tables.oldRelated.push(tableName);
          }
        }
      } catch (err) {
        // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        tables.all.push({
          name: tableName,
          exists: false,
          recordCount: 0
        });
      }
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    tables.summary = {
      totalChecked: tables.all.length,
      existingTables: tables.all.filter((t: any) => t.exists).length,
      nonExistingTables: tables.all.filter((t: any) => !t.exists).length,
      chatRelatedTables: tables.chatRelated.length,
      messageRelatedTables: tables.messageRelated.length,
      roomRelatedTables: tables.roomRelated.length,
      oldRelatedTables: tables.oldRelated.length,
      analysisDate: new Date().toISOString()
    };

    console.log("‚úÖ [API] –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω");
    console.log("üìä [API] –°–≤–æ–¥–∫–∞:", tables.summary);

    return NextResponse.json({
      success: true,
      tables,
      message: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø–æ–ª—É—á–µ–Ω"
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:", error);
    return NextResponse.json({ 
      error: "Internal server error",
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 