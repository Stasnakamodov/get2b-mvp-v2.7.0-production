import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// GET: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Supabase –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const table = searchParams.get("table");
    const supplierId = searchParams.get("supplier_id");
    
    if (!table) {
      return NextResponse.json({ error: "table parameter required" }, { status: 400 });
    }
    
    console.log(`üîç [DIRECT] –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ: ${table}, supplier_id: ${supplierId}`);
    
    let query = supabase.from(table).select("*");
    
    if (supplierId) {
      query = query.eq("supplier_id", supplierId);
    }
    
    const { data, error } = await query;
    
    if (error) {
      console.error(`‚ùå [DIRECT] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${table}:`, error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }
    
    console.log(`‚úÖ [DIRECT] –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ ${table}:`, data?.length || 0);
    
    return NextResponse.json(data || []);
    
  } catch (error: any) {
    console.error("üí• [DIRECT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}