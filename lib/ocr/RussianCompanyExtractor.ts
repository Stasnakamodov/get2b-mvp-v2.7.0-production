import { 
  RUSSIAN_COMPANY_PATTERNS, 
  PatternResult, 
  calculateBaseConfidence, 
  calculateContextBonus 
} from './RussianCompanyPatterns';

export interface ExtractedField {
  value: string;
  confidence: number;
  source: 'pattern' | 'context' | 'fallback';
  alternatives?: string[];
}

export interface ExtractedCompanyData {
  companyName?: ExtractedField;
  legalName?: ExtractedField;
  inn?: ExtractedField;
  kpp?: ExtractedField;
  ogrn?: ExtractedField;
  bankName?: ExtractedField;
  bankAccount?: ExtractedField;
  bankBik?: ExtractedField;
  corrAccount?: ExtractedField;
  phone?: ExtractedField;
  email?: ExtractedField;
  address?: ExtractedField;
  director?: ExtractedField;
  overallConfidence: number;
  extractedFields: number;
}

export class RussianCompanyExtractor {
  
  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
   */
  extractCompanyData(text: string): ExtractedCompanyData {
    console.log('üîç [RussianCompanyExtractor] –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏');
    console.log('üìÑ [RussianCompanyExtractor] –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', text.length);
    console.log('üìÑ [RussianCompanyExtractor] –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', text.substring(0, 200));

    const results: Partial<ExtractedCompanyData> = {};
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    results.inn = this.extractField(text, 'inn', RUSSIAN_COMPANY_PATTERNS.inn);
    results.kpp = this.extractField(text, 'kpp', RUSSIAN_COMPANY_PATTERNS.kpp);
    results.ogrn = this.extractField(text, 'ogrn', RUSSIAN_COMPANY_PATTERNS.ogrn);
    results.companyName = this.extractField(text, 'companyName', RUSSIAN_COMPANY_PATTERNS.companyName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ legalName –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (RUSSIAN_COMPANY_PATTERNS.legalName) {
      results.legalName = this.extractField(text, 'legalName', RUSSIAN_COMPANY_PATTERNS.legalName);
    } else {
      console.log('‚ö†Ô∏è [RussianCompanyExtractor] legalName –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }
    results.bankName = this.extractField(text, 'bankName', RUSSIAN_COMPANY_PATTERNS.bankName);
    results.bankAccount = this.extractField(text, 'bankAccount', RUSSIAN_COMPANY_PATTERNS.bankAccount);
    results.bankBik = this.extractField(text, 'bankBik', RUSSIAN_COMPANY_PATTERNS.bankBik);
    results.corrAccount = this.extractField(text, 'corrAccount', RUSSIAN_COMPANY_PATTERNS.corrAccount);
    results.phone = this.extractField(text, 'phone', RUSSIAN_COMPANY_PATTERNS.phone);
    results.email = this.extractField(text, 'email', RUSSIAN_COMPANY_PATTERNS.email);
    results.address = this.extractField(text, 'address', RUSSIAN_COMPANY_PATTERNS.address);
    results.director = this.extractField(text, 'director', RUSSIAN_COMPANY_PATTERNS.director);

    // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    this.postProcessResults(results, text);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const extractedFields = Object.values(results).filter(field => 
      field && typeof field === 'object' && 'value' in field && field.value
    ).length;

    const confidenceFields = Object.values(results).filter(
      (field): field is ExtractedField => 
        field !== undefined && 
        typeof field === 'object' && 
        'confidence' in field && 
        'value' in field
    );
    
    const totalConfidence = confidenceFields.reduce(
      (sum, field) => sum + field.confidence, 
      0
    );

    const overallConfidence = extractedFields > 0 ? Math.round(totalConfidence / extractedFields) : 0;

    console.log('üìä [RussianCompanyExtractor] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:');
    console.log(`   - –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π: ${extractedFields}`);
    console.log(`   - –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${overallConfidence}%`);

    return {
      ...results,
      extractedFields,
      overallConfidence
    } as ExtractedCompanyData;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É—è –º–∞—Å—Å–∏–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private extractField(text: string, fieldType: string, patterns: RegExp[]): ExtractedField | undefined {
    const alternatives: string[] = [];
    
    for (let i = 0; i < patterns.length; i++) {
      const pattern = patterns[i];
      const matches = Array.from(text.matchAll(pattern));
      
      for (const match of matches) {
        let value = this.extractValueFromMatch(match, fieldType);
        
        if (!value) continue;
        
        // –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        value = this.cleanValue(value, fieldType);
        
        if (!this.validateValue(value, fieldType, text)) {
          alternatives.push(value);
          continue;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        const baseConfidence = calculateBaseConfidence(i, patterns.length);
        const contextBonus = calculateContextBonus(match, fieldType);
        const confidence = Math.min(baseConfidence + contextBonus, 99);

        console.log(`‚úÖ [${fieldType}] –ù–∞–π–¥–µ–Ω–æ: "${value}" (confidence: ${confidence}%)`);

        return {
          value,
          confidence,
          source: i < 3 ? 'pattern' : i < 6 ? 'context' : 'fallback',
          alternatives: alternatives.length > 0 ? alternatives : undefined
        };
      }
    }

    if (alternatives.length > 0) {
      console.log(`‚ö†Ô∏è [${fieldType}] –ù–∞–π–¥–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –Ω–æ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é:`, alternatives);
    }

    console.log(`‚ùå [${fieldType}] –ù–µ –Ω–∞–π–¥–µ–Ω–æ`);
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ regex –º–∞—Ç—á–∞
   */
  private extractValueFromMatch(match: RegExpMatchArray, fieldType: string): string {
    // –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
    if (match[1]) return match[1].trim();
    
    // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ç–æ—Ä–∞—è –∏–ª–∏ —Ç—Ä–µ—Ç—å—è –≥—Ä—É–ø–ø–∞
    if (fieldType === 'companyName' && match[2]) {
      return (match[1] + ' ' + match[2]).trim();
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –±–µ—Ä–µ–º –≤–µ—Å—å –º–∞—Ç—á
    return match[0].trim();
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç OCR –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
   */
  private cleanValue(value: string, fieldType: string): string {
    // –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
    let cleaned = value.trim();
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
    switch (fieldType) {
      case 'inn':
      case 'kpp':
      case 'ogrn':
      case 'bankAccount':
      case 'bankBik':
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        cleaned = cleaned.replace(/[^\d]/g, '');
        break;
        
      case 'companyName':
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        cleaned = cleaned
          .replace(/^["¬´]+/, '')
          .replace(/["¬ª]+$/, '')
          .replace(/\s+/g, ' ')
          .trim();
        break;
        
      case 'phone':
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, +, -, —Å–∫–æ–±–æ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        cleaned = cleaned.replace(/[^\d+\-\(\)\s]/g, '');
        // –ó–∞—Ç–µ–º —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
        cleaned = cleaned.replace(/[^\d+]/g, '');
        if (cleaned.startsWith('8')) {
          cleaned = '+7' + cleaned.substring(1);
        }
        break;
        
      case 'email':
        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        cleaned = cleaned.toLowerCase();
        break;
        
      case 'bankBik':
        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –ª–∞—Ç–∏–Ω—Å–∫—É—é 'p' –≤–º–µ—Å—Ç–æ —Ä—É—Å—Å–∫–æ–π '—Ä'
        cleaned = cleaned.replace(/^[p—Ä]/, '');
        break;
    }
    
    return cleaned;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  private validateValue(value: string, fieldType: string, originalText?: string): boolean {
    if (!value || value.length === 0) return false;
    
    switch (fieldType) {
      case 'inn':
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
        if (!/^\d{10}$|^\d{12}$/.test(value)) return false;
        
        // üî• –ó–ê–©–ò–¢–ê –û–¢ –õ–û–ñ–ù–û–ì–û INN –ò–ó –û–ì–†–ù
        if (originalText && this.isInnFromOgrn(value, originalText)) {
          console.log(`‚ùå [validateValue] –û—Ç–∫–ª–æ–Ω—ë–Ω –ª–æ–∂–Ω—ã–π INN –∏–∑ –û–ì–†–ù: ${value}`);
          return false;
        }
        
        return true;
        
      case 'kpp':
        return /^\d{9}$/.test(value);
        
      case 'ogrn':
        return /^\d{13}$|^\d{15}$/.test(value);
        
      case 'bankAccount':
        return /^\d{20}$/.test(value);
        
      case 'corrAccount':
        // –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–µ —Å—á–µ—Ç–∞ –º–æ–≥—É—Ç –±—ã—Ç—å 19-20 —Ü–∏—Ñ—Ä (—Ä–∞–∑–Ω—ã–µ –±–∞–Ω–∫–∏)
        return /^\d{19,20}$/.test(value);
        
      case 'bankBik':
        return /^\d{9}$/.test(value);
        
      case 'companyName':
        // üî•üî•üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        const documentHeaders = [
          '–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è',
          '–ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞',
          '–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', 
          '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
          '–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏',
          '–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏',
          '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
          '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
        ];
        
        // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        if (documentHeaders.some(header => 
          value.includes(header) || 
          value.toLowerCase().includes('–∫–∞—Ä—Ç–æ—á–∫') ||
          value.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç') ||
          value.toLowerCase().includes('–¥–æ–∫—É–º–µ–Ω—Ç')
        )) {
          console.log(`‚ùå [validateValue] –û—Ç–∫–ª–æ–Ω—ë–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${value}`);
          return false;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        const descriptivePatterns = [
          /–Ω–∞–∑–≤–∞–Ω–∏–µ\s+–ø—Ä–æ–µ–∫—Ç–∞/i,
          /–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s+–¥–æ–∫—É–º–µ–Ω—Ç–∞/i,
          /–∫–∞—Ä—Ç–æ—á–∫–∞\s+/i,
          /–æ—Å–Ω–æ–≤–Ω–∞—è\s+–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/i
        ];
        
        if (descriptivePatterns.some(pattern => pattern.test(value))) {
          console.log(`‚ùå [validateValue] –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${value}`);
          return false;
        }
        
        return value.length >= 3 && value.length <= 200 && 
               /[–∞-—è—ë–ê-–Ø–Åa-zA-Z]/.test(value);
        
      case 'phone':
        return /^\+?[78]\d{10}$/.test(value.replace(/[^\d+]/g, ''));
        
      case 'email':
        return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(value);
        
      case 'address':
        // üî•üî•üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –û—Ç–∫–ª–æ–Ω—è–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (value.includes('—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏') || 
            value.includes('–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏') || 
            value.includes('–£—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏') ||
            value.includes('—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –£—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏') ||
            value.match(/^\s*\([^)]*\)\s*$/)) {
          console.log(`‚ùå [validateValue] –û—Ç–∫–ª–æ–Ω—ë–Ω –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: ${value}`);
          return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å (–µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã)
        const hasAddressMarkers = /\d{6}|–≥–æ—Ä–æ–¥|–≥\.|–æ–±–ª\.|–æ–±–ª–∞—Å—Ç—å|–†–æ—Å—Å–∏–π—Å–∫–∞—è\s+–§–µ–¥–µ—Ä–∞—Ü–∏—è|—É–ª\.|—É–ª–∏—Ü–∞|–ø—Ä\.|–ø—Ä–æ—Å–ø–µ–∫—Ç|–¥\.|–¥–æ–º/.test(value);
        if (!hasAddressMarkers) {
          console.log(`‚ö†Ô∏è [validateValue] –ê–¥—Ä–µ—Å –±–µ–∑ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: ${value}`);
          return false;
        }
        
        return value.length >= 10 && value.length <= 300;
        
      case 'director':
        return value.length >= 5 && /[–ê-–Ø–Å]/.test(value);
        
      default:
        return value.length > 0;
    }
  }

  /**
   * –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  private postProcessResults(results: Partial<ExtractedCompanyData>, text: string): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ò–ù–ù/–ö–ü–ü
    this.handleInnKppFormat(results, text);
    
    // –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –±–∞–Ω–∫–æ–≤
    this.cleanBankName(results);
    
    // –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ë–ò–ö
    this.findMissingBik(results, text);
    
    // –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    this.findMissingPhone(results, text);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤
    this.processBankAccounts(results, text);

    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ
    if (results.companyName && results.companyName.value.length < 10 && results.companyName.confidence < 80) {
      const betterName = this.findBetterCompanyName(text, results.companyName.value);
      if (betterName) {
        console.log('üîÑ [postProcess] –ó–∞–º–µ–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ:', betterName);
        results.companyName.value = betterName;
        results.companyName.confidence += 10;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (results.phone) {
      const cleanPhone = this.cleanValue(results.phone.value, 'phone');
      if (this.validateValue(cleanPhone, 'phone')) {
        results.phone.value = this.formatPhone(cleanPhone);
      }
    }
  }
  
  /**
   * üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ò–ù–ù/–ö–ü–ü
   */
  private handleInnKppFormat(results: Partial<ExtractedCompanyData>, text: string): void {
    console.log('üîó [handleInnKppFormat] –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù/–ö–ü–ü –≤ —Ç–µ–∫—Å—Ç–µ...');
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ò–ù–ù/–ö–ü–ü - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    const innKppPatterns = [
      // –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
      /–ò–ù–ù\s*[\/\\]\s*–ö–ü–ü[:\s\n]*(\d{10})\s*[\/\\]\s*(\d{9})/gi,
      /–ò–ù–ù[:\s]+(\d{10})\s*[\/\\]\s*–ö–ü–ü[:\s]+(\d{9})/gi,
      
      // –ü—Ä–æ—Å—Ç–æ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª—ç—à
      /(\d{10})\s*[\/\\]\s*(\d{9})/g,
      
      // –° –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
      /–ò–ù–ù\s*[\/\\]\s*–ö–ü–ü\s*\n\s*(\d{10})\s*[\/\\]\s*(\d{9})/gi,
      
      // –í —Å–∫–æ–±–∫–∞—Ö –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
      /–ò–ù–ù[:\s]*(\d{10})[,\s]+–ö–ü–ü[:\s]*(\d{9})/gi,
      
      // –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      /\|\s*(\d{10})\s*[\/\\]\s*(\d{9})\s*\|/gi
    ];
    
    let foundInnKpp = false;
    
    for (let i = 0; i < innKppPatterns.length; i++) {
      const pattern = innKppPatterns[i];
      const matches = Array.from(text.matchAll(pattern));
      
      console.log(`üîç [handleInnKppFormat] –ü–∞—Ç—Ç–µ—Ä–Ω ${i + 1}: –Ω–∞–π–¥–µ–Ω–æ ${matches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
      
      for (const match of matches) {
        const innValue = match[1];
        const kppValue = match[2];
        
        console.log(`üîó [handleInnKppFormat] –ù–∞–π–¥–µ–Ω –ò–ù–ù/–ö–ü–ü: ${innValue}/${kppValue}`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (!/^\d{10}$/.test(innValue) || !/^\d{9}$/.test(kppValue)) {
          console.log(`‚ö†Ô∏è [handleInnKppFormat] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: –ò–ù–ù=${innValue}, –ö–ü–ü=${kppValue}`);
          continue;
        }
        
        // üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ó–ê–ú–ï–ù–ê: –ï—Å–ª–∏ –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –Ω–∞–π–¥–µ–Ω —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        if (!results.inn || results.inn.confidence < 85) {
          results.inn = {
            value: innValue,
            confidence: 95, // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –ò–ù–ù/–ö–ü–ü
            source: 'context'
          };
          console.log('‚úÖ [handleInnKppFormat] –ò–∑–≤–ª–µ—á–µ–Ω –ò–ù–ù –∏–∑ –ò–ù–ù/–ö–ü–ü —Ñ–æ—Ä–º–∞—Ç–∞:', innValue);
        } else {
          console.log(`üí° [handleInnKppFormat] –ò–ù–ù —É–∂–µ –Ω–∞–π–¥–µ–Ω —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (${results.inn.confidence}%), —Å–æ—Ö—Ä–∞–Ω—è–µ–º: ${results.inn.value}`);
        }
        
        // üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ó–ê–ú–ï–ù–ê: –ï—Å–ª–∏ –ö–ü–ü –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if (!results.kpp || results.kpp.confidence < 85 || results.kpp.value !== kppValue) {
          results.kpp = {
            value: kppValue,
            confidence: 95, // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –ò–ù–ù/–ö–ü–ü
            source: 'context'
          };
          console.log('‚úÖ [handleInnKppFormat] –ò–∑–≤–ª–µ—á–µ–Ω –ö–ü–ü –∏–∑ –ò–ù–ù/–ö–ü–ü —Ñ–æ—Ä–º–∞—Ç–∞:', kppValue);
        } else {
          console.log(`üí° [handleInnKppFormat] –ö–ü–ü —É–∂–µ –Ω–∞–π–¥–µ–Ω —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (${results.kpp.confidence}%), –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ`);
          if (results.kpp.value !== kppValue) {
            console.log(`üîÑ [handleInnKppFormat] –ó–∞–º–µ–Ω—è–µ–º –ö–ü–ü ${results.kpp.value} –Ω–∞ ${kppValue} –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ò–ù–ù/–ö–ü–ü`);
            results.kpp.value = kppValue;
            results.kpp.confidence = 95;
          }
        }
        
        foundInnKpp = true;
        break; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      }
      
      if (foundInnKpp) break;
    }
    
    if (foundInnKpp) {
      console.log('‚úÖ [handleInnKppFormat] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù/–ö–ü–ü');
    } else {
      console.log('‚ùå [handleInnKppFormat] –§–æ—Ä–º–∞—Ç –ò–ù–ù/–ö–ü–ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ');
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –±–∞–Ω–∫–æ–≤
   */
  private cleanBankName(results: Partial<ExtractedCompanyData>): void {
    if (results.bankName) {
      let cleanName = results.bankName.value;
      const originalName = cleanName;
      
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      cleanName = cleanName
        .replace(/–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s+–±–∞–Ω–∫–∞[\s\n]*/, '')
        .replace(/–ë–ò–ö\s+–±–∞–Ω–∫–∞[\s\n]*/, '')
        .replace(/\n+/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();
      
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ª–æ–≥ "–≤" –≤ –Ω–∞—á–∞–ª–µ
      cleanName = cleanName.replace(/^–≤\s+/, '');
      
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–∞–Ω–∫ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      if (cleanName.length < 3 || cleanName === '–ê–û' || cleanName === '–ü–ê–û' || cleanName === '–±–∞–Ω–∫–∞') {
        console.log('‚ö†Ô∏è [cleanBankName] –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:', cleanName);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–∞–Ω–∫ –ø–æ –ë–ò–ö –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        if (results.bankBik) {
          const bikValue = results.bankBik.value;
          if (bikValue === '044525593') {
            cleanName = '–ê–õ–¨–§–ê-–ë–ê–ù–ö';
            console.log('üîç [cleanBankName] –û–ø—Ä–µ–¥–µ–ª–µ–Ω –±–∞–Ω–∫ –ø–æ –ë–ò–ö 044525593: –ê–õ–¨–§–ê-–ë–ê–ù–ö');
          } else if (bikValue === '044525225') {
            cleanName = '–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫';
            console.log('üîç [cleanBankName] –û–ø—Ä–µ–¥–µ–ª–µ–Ω –±–∞–Ω–∫ –ø–æ –ë–ò–ö 044525225: –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫');
          }
        }
        
        // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (cleanName.length < 3) {
          cleanName = originalName;
          console.log('üîÑ [cleanBankName] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
        }
      }
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –±–∞–Ω–∫–æ–≤ 
      if (cleanName.includes('–°–±–µ—Ä–±–∞–Ω–∫') || cleanName.includes('–°–ë–ï–†–ë–ê–ù–ö')) {
        cleanName = '–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫';
      } else if (cleanName.includes('¬´–°–±–µ—Ä–±–∞–Ω–∫¬ª') || cleanName.includes('"–°–±–µ—Ä–±–∞–Ω–∫"')) {
        cleanName = '–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫';
      } else if (cleanName.includes('–ê–õ–¨–§–ê')) {
        cleanName = '–ê–õ–¨–§–ê-–ë–ê–ù–ö';
      }
      
      if (cleanName !== results.bankName.value) {
        console.log('üßπ [postProcess] –û—á–∏—â–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:', results.bankName.value, '->', cleanName);
        results.bankName.value = cleanName;
        results.bankName.confidence = Math.min(results.bankName.confidence + 10, 95);
      }
    }
  }
  
  /**
   * –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ë–ò–ö
   */
  private findMissingBik(results: Partial<ExtractedCompanyData>, text: string): void {
    if (!results.bankBik) {
      // –ü–æ–∏—Å–∫ –ë–ò–ö —Ä—è–¥–æ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
      const bikPatterns = [
        /–ë–ò–ö[\s\n]*(\d{9})/gi,
        /–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π\s+–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π\s+–∫–æ–¥[\s\n]*(\d{9})/gi,
        /(?:–≤\s+–ü–ê–û\s+–°–±–µ—Ä–±–∞–Ω–∫|\b–ü–ê–û\s+–°–ë–ï–†–ë–ê–ù–ö)[\s\S]{0,100}?(\d{9})/gi,
        /(\d{9})(?=\s|$)/g
      ];
      
      for (const pattern of bikPatterns) {
        const matches = Array.from(text.matchAll(pattern));
        for (const match of matches) {
          const bikValue = match[1].replace(/[^\d]/g, '');
          if (bikValue.length === 9) {
            results.bankBik = {
              value: bikValue,
              confidence: 80,
              source: 'context'
            };
            console.log('üîç [postProcess] –ù–∞–π–¥–µ–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –ë–ò–ö:', bikValue);
            return;
          }
        }
      }
    }
  }
  
  /**
   * –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
   */
  private findMissingPhone(results: Partial<ExtractedCompanyData>, text: string): void {
    if (!results.phone) {
      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      const phonePatterns = [
        // –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã
        /\+7\s*\(\s*(\d{3})\s*\)\s*(\d{3})\s*-?\s*(\d{2})\s*-?\s*(\d{2})/g,
        // –ë–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
        /(?:^|\s)\(?\s*(\d{3})\s*\)?\s*(\d{3})\s*-?\s*(\d{2})\s*-?\s*(\d{2})(?:\s*\.{3})?/g,
        // –õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç 11 —Ü–∏—Ñ—Ä
        /(?:\+?7|8)([\s\-\(\)]*(\d[\s\-\(\)]*){10})/g,
        // –ü–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        /(?:–¢–µ–ª–µ—Ñ–æ–Ω|Phone|Tel)[:\s]+([+\d\s\-\(\)]{10,})/gi
      ];
      
      for (const pattern of phonePatterns) {
        const matches = Array.from(text.matchAll(pattern));
        for (const match of matches) {
          let phoneValue = match[0];
          
          // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
          phoneValue = this.cleanValue(phoneValue, 'phone');
          
          if (this.validateValue(phoneValue, 'phone')) {
            results.phone = {
              value: this.formatPhone(phoneValue),
              confidence: 85,
              source: 'context'
            };
            console.log('üîç [postProcess] –ù–∞–π–¥–µ–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:', results.phone.value);
            return;
          }
        }
      }
    }
  }

  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  private findBetterCompanyName(text: string, currentName: string): string | null {
    const lines = text.split('\n');
    
    // –ò—â–µ–º –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
    for (let i = 0; i < Math.min(lines.length, 10); i++) {
      const line = lines[i].trim();
      
      if (line.length > currentName.length + 5 && 
          line.length < 100 && 
          /^[–ê-–Ø–Å]/.test(line) &&
          !line.includes('–ò–ù–ù') &&
          !line.includes('–ö–ü–ü') &&
          !line.includes('–û–ì–†–ù') &&
          !/^\d/.test(line)) {
        return line;
      }
    }
    
    return null;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥
   */
  private formatPhone(phone: string): string {
    const digits = phone.replace(/[^\d]/g, '');
    
    if (digits.length === 11 && digits.startsWith('7')) {
      return `+7 (${digits.substring(1, 4)}) ${digits.substring(4, 7)}-${digits.substring(7, 9)}-${digits.substring(9)}`;
    }
    
    if (digits.length === 11 && digits.startsWith('8')) {
      return `+7 (${digits.substring(1, 4)}) ${digits.substring(4, 7)}-${digits.substring(7, 9)}-${digits.substring(9)}`;
    }
    
    return phone;
  }

  /**
   * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤
   */
  private processBankAccounts(results: Partial<ExtractedCompanyData>, text: string): void {
    // –ï—Å–ª–∏ —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 20-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞
    if (!results.bankAccount) {
      const accountPatterns = [
        // –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 20-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        /(?:^|\n)\s*(\d{20})\s*(?:\n|$)/gm,
        // 20-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ —Ä—è–¥–æ–º —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏
        /(?:—Ä–∞—Å—á–µ—Ç–Ω—ã–π|—Ä–∞—Å—á—ë—Ç–Ω—ã–π|—Ä\/—Å)[\s\S]{0,50}?(\d{20})/gi,
        // –õ—é–±—ã–µ 20-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 40
        /\b(40\d{18})\b/g
      ];
      
      for (const pattern of accountPatterns) {
        const matches = Array.from(text.matchAll(pattern));
        for (const match of matches) {
          const accountNumber = match[1];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç
          if (results.corrAccount && results.corrAccount.value === accountNumber) {
            continue;
          }
          
          // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞ —á–∞—Å—Ç–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 40
          if (accountNumber.startsWith('40')) {
            results.bankAccount = {
              value: accountNumber,
              confidence: 75,
              source: 'pattern'
            };
            console.log('üè¶ [postProcess] –ù–∞–π–¥–µ–Ω —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç:', accountNumber);
            break;
          }
        }
      }
    }

    // üî• –ù–û–í–û–ï: –ï—Å–ª–∏ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    if (!results.corrAccount) {
      console.log('üîç [postProcess] –ò—â–µ–º –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏...');
      
      const corrAccountPatterns = [
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞
        /(?:^|\n)\s*(\d{20})\s*(?:\n|$)/gm,
        // –†—è–¥–æ–º —Å –ë–ò–ö –∏–ª–∏ –±–∞–Ω–∫–æ–º
        /–ë–ò–ö[\s\S]{0,100}?(\d{20})/gi,
        /–±–∞–Ω–∫[\s\S]{0,100}?(\d{20})/gi,
        // –õ—é–±—ã–µ 20-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 30 (—Ç–∏–ø–∏—á–Ω–æ –¥–ª—è –∫–æ—Ä—Ä. —Å—á–µ—Ç–æ–≤)
        /\b(30\d{18})\b/g,
        // –í—Å–µ 20-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        /\b(\d{20})\b/g
      ];
      
      for (const pattern of corrAccountPatterns) {
        const matches = Array.from(text.matchAll(pattern));
        for (const match of matches) {
          const corrAccountNumber = match[1];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç
          if (results.bankAccount && results.bankAccount.value === corrAccountNumber) {
            continue;
          }
          
          // –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–µ —Å—á–µ—Ç–∞ —á–∞—Å—Ç–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 30
          if (corrAccountNumber.startsWith('30')) {
            results.corrAccount = {
              value: corrAccountNumber,
              confidence: 85,
              source: 'pattern'
            };
            console.log('üè¶ [postProcess] –ù–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç:', corrAccountNumber);
            break;
          }
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—á–µ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 30, –Ω–æ –Ω–∞—à–ª–∏ –¥—Ä—É–≥–æ–π 20-–∑–Ω–∞—á–Ω—ã–π
          // –∏ —ç—Ç–æ –Ω–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∫–æ—Ä—Ä. —Å—á–µ—Ç
          if (!corrAccountNumber.startsWith('40') && corrAccountNumber !== results.bankAccount?.value) {
            results.corrAccount = {
              value: corrAccountNumber,
              confidence: 70,
              source: 'pattern'
            };
            console.log('üè¶ [postProcess] –ù–∞–π–¥–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç:', corrAccountNumber);
            break;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ—Ä—Ä. —Å—á–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        if (results.corrAccount) break;
      }
      
      if (!results.corrAccount) {
        console.log('‚ùå [postProcess] –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏');
      }
    }
  }

  /**
   * üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ INN –ª–æ–∂–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∏–∑ –û–ì–†–ù
   */
  private isInnFromOgrn(innCandidate: string, text: string): boolean {
    console.log(`üîç [isInnFromOgrn] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ù–ù "${innCandidate}" –Ω–∞ –ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑ –û–ì–†–ù`);
    
    // üî• –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç INN –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    const innContextPatterns = [
      new RegExp(`–ò–ù–ù[:\\s]+${innCandidate}(?=\\s|$)`, 'gi'),  // "–ò–ù–ù: 1234567890" –∏–ª–∏ "–ò–ù–ù 1234567890"
      new RegExp(`${innCandidate}\\s*[\\/\\\\]\\s*\\d{9}`, 'gi'),  // "1234567890 / 123456789" (–ò–ù–ù/–ö–ü–ü)
      new RegExp(`${innCandidate}\\s+\\d{9}(?=\\s|$)`, 'gi'),  // "1234567890 123456789" (–ò–ù–ù –ø—Ä–æ–±–µ–ª –ö–ü–ü)
      new RegExp(`–ò–ù–ù\\s*[\\/\\\\]\\s*–ö–ü–ü[:\\s]*${innCandidate}\\s*[\\/\\\\]\\s*\\d{9}`, 'gi')  // "–ò–ù–ù / –ö–ü–ü: 1234567890 / 123456789"
    ];
    
    let foundInCorrectContext = false;
    for (const pattern of innContextPatterns) {
      if (pattern.test(text)) {
        console.log(`‚úÖ [isInnFromOgrn] –ò–ù–ù "${innCandidate}" –Ω–∞–π–¥–µ–Ω –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º`);
        foundInCorrectContext = true;
        break;
      }
    }
    
    // –ï—Å–ª–∏ –ò–ù–ù –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ
    if (foundInCorrectContext) {
      return false;
    }
    
    console.log(`‚ö†Ô∏è [isInnFromOgrn] –ò–ù–ù "${innCandidate}" –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑ –û–ì–†–ù...`);
    
    // üî• –ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ò–ù–ù –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑ –û–ì–†–ù
    const ogrnPattern = /\d{13,15}/g;
    const ogrnMatches = Array.from(text.matchAll(ogrnPattern));
    
    for (const match of ogrnMatches) {
      const ogrnNumber = match[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ INN –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –û–ì–†–ù
      if (ogrnNumber.includes(innCandidate)) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –û–ì–†–ù –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å–æ —Å–ª–æ–≤–∞–º–∏ "–û–ì–†–ù" –∏–ª–∏ "–æ—Ç"
        const matchIndex = match.index!;
        const contextBefore = text.substring(Math.max(0, matchIndex - 30), matchIndex);
        const contextAfter = text.substring(matchIndex + ogrnNumber.length, 
                                           Math.min(text.length, matchIndex + ogrnNumber.length + 30));
        
        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –û–ì–†–ù
        const ogrnKeywords = /–û–ì–†–ù|–æ–≥—Ä–Ω|—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π|–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π|–æ—Å–Ω–æ–≤–Ω–æ–π/i;
        const dateKeywords = /\b–æ—Ç\b|\b–≥\.?\b|\d{2}\.\d{2}\.\d{4}/i;
        
        if (ogrnKeywords.test(contextBefore) || ogrnKeywords.test(contextAfter) || dateKeywords.test(contextAfter)) {
          console.log(`üîç [isInnFromOgrn] –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –û–ì–†–ù –¥–ª—è "${innCandidate}"`);
          console.log(`   –û–ì–†–ù: ${ogrnNumber}`);
          console.log(`   –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ: "${contextBefore}"`);
          console.log(`   –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ: "${contextAfter}"`);
          console.log(`   ‚ùå –ë–õ–û–ö–ò–†–£–ï–ú –∫–∞–∫ –ª–æ–∂–Ω—ã–π INN –∏–∑ –û–ì–†–ù`);
          return true;
        }
      }
    }
    
    console.log(`‚úÖ [isInnFromOgrn] –ò–ù–ù "${innCandidate}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–æ–∂–Ω—ã–º –∏–∑ –û–ì–†–ù`);
    return false;
  }
}