import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// POST: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export async function POST(request: NextRequest) {
  try {
    console.log("üé® [CREATE-IMAGE] –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");

    const { searchParams } = new URL(request.url);
    const applicationId = searchParams.get('applicationId') || '05fdf6bd-7f27-4e54-9b3f-485b938e7c33';

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Canvas API
    const { createCanvas } = await import('canvas');
    
    // –°–æ–∑–¥–∞–µ–º canvas 400x300
    const canvas = createCanvas(400, 300);
    const ctx = canvas.getContext('2d');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω
    ctx.fillStyle = '#f0f0f0';
    ctx.fillRect(0, 0, 400, 300);

    // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 2;
    ctx.strokeRect(10, 10, 380, 280);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    ctx.fillStyle = '#333';
    ctx.font = '24px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 200, 100);
    
    ctx.font = '16px Arial';
    ctx.fillText('–¥–ª—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏', 200, 130);
    
    ctx.font = '12px Arial';
    ctx.fillText(`ID: ${applicationId}`, 200, 160);
    ctx.fillText(`–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`, 200, 180);

    // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
    ctx.fillStyle = '#4CAF50';
    ctx.beginPath();
    ctx.arc(200, 220, 30, 0, 2 * Math.PI);
    ctx.fill();
    
    ctx.fillStyle = 'white';
    ctx.font = '20px Arial';
    ctx.fillText('‚úì', 200, 228);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
    const buffer = canvas.toBuffer('image/png');
    
    console.log("‚úÖ [CREATE-IMAGE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä:", buffer.length);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Storage
    const fileName = `test-quality-image-${Date.now()}.png`;
    const storagePath = `accreditation/${applicationId}/products/0/images/${fileName}`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('project-images')
      .upload(storagePath, buffer, {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: false
      });

    if (uploadError) {
      console.error("‚ùå [CREATE-IMAGE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", uploadError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        details: uploadError.message
      }, { status: 500 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabase.storage
      .from('project-images')
      .getPublicUrl(storagePath);

    console.log("‚úÖ [CREATE-IMAGE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", urlData.publicUrl);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const { data: application, error: appError } = await supabase
      .from('accreditation_applications')
      .select('*')
      .eq('id', applicationId)
      .single();

    if (appError || !application) {
      return NextResponse.json({ 
        error: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" 
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    let productsData = [];
    try {
      productsData = typeof application.products_data === 'string' 
        ? JSON.parse(application.products_data) 
        : application.products_data;
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ products_data:', parseError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤" 
      }, { status: 500 });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É —Ç–æ–≤–∞—Ä—É
    if (productsData.length > 0) {
      if (!productsData[0].images_info) {
        productsData[0].images_info = [];
      }
      
      productsData[0].images_info.push({
        name: fileName,
        size: buffer.length,
        type: 'image/png',
        public_url: urlData.publicUrl
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
      const { error: updateError } = await supabase
        .from('accreditation_applications')
        .update({
          products_data: JSON.stringify(productsData),
          updated_at: new Date().toISOString()
        })
        .eq('id', applicationId);

      if (updateError) {
        console.error("‚ùå [CREATE-IMAGE] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", updateError);
      } else {
        console.log("‚úÖ [CREATE-IMAGE] –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º");
      }
    }

    return NextResponse.json({
      success: true,
      message: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
      image: {
        name: fileName,
        size: buffer.length,
        type: 'image/png',
        public_url: urlData.publicUrl,
        storage_path: storagePath
      }
    });

  } catch (error) {
    console.error("‚ùå [CREATE-IMAGE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 