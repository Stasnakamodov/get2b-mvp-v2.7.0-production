import React, { useState, useEffect } from "react";
import { supabase } from "@/lib/supabaseClient";

export function useSaveTemplate() {
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  async function saveTemplate({ name, description, data }: { name: string; description?: string; data: any }) {
    setIsSaving(true);
    setError(null);
    setSuccess(false);
    // –ü–æ–ª—É—á–∞–µ–º user_id
    const { data: userData, error: userError } = await supabase.auth.getUser();
    if (userError || !userData?.user?.id) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      setIsSaving(false);
      return false;
    }
    const user_id = userData.user.id;
    const { error } = await supabase.from("templates").insert([
      {
        user_id,
        name,
        description: description || null,
        data,
      },
    ]);
    if (error) {
      setError(error.message);
      setIsSaving(false);
      return false;
    }
    setSuccess(true);
    setIsSaving(false);
    return true;
  }

  return { saveTemplate, isSaving, error, success };
}

export function useTemplates() {
  const [templates, setTemplates] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  async function fetchTemplates() {
    setLoading(true);
    setError(null);
    // –ü–æ–ª—É—á–∞–µ–º user_id
    const { data: userData, error: userError } = await supabase.auth.getUser();
    if (userError || !userData?.user?.id) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      setLoading(false);
      return;
    }
    const user_id = userData.user.id;
    const { data, error } = await supabase
      .from("templates")
      .select("id, name, description, data, created_at")
      .eq("user_id", user_id)
      .order("created_at", { ascending: false });
    if (error) {
      setError(error.message);
      setLoading(false);
      return;
    }
    setTemplates(data || []);
    setLoading(false);
  }

  return { templates, loading, error, fetchTemplates };
}

// –ù–æ–≤—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π project_templates
export function useProjectTemplates() {
  const [templates, setTemplates] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [saving, setSaving] = useState(false);
  const [success, setSuccess] = useState(false);

  const fetchTemplates = React.useCallback(async () => {
    console.log('üîÑ [useProjectTemplates] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —à–∞–±–ª–æ–Ω–æ–≤...');
    setLoading(true);
    setError(null);
    
    try {
      console.log('üë§ [useProjectTemplates] –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const { data: userData, error: userError } = await supabase.auth.getUser();
      if (userError || !userData?.user?.id) {
        console.error('‚ùå [useProjectTemplates] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        setLoading(false);
        return;
      }
      const user_id = userData.user.id;
      console.log('‚úÖ [useProjectTemplates] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:', user_id);
      
      console.log('üìã [useProjectTemplates] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ project_templates...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞')), 10000); // 10 —Å–µ–∫—É–Ω–¥
      });
      
      const fetchPromise = supabase
        .from("project_templates")
        .select("*")
        .eq("user_id", user_id)
        .order("created_at", { ascending: false });
      
      const { data, error } = await Promise.race([fetchPromise, timeoutPromise]) as any;
      
      if (error) {
        console.error('‚ùå [useProjectTemplates] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–æ–≤:', error);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (error.message.includes('Failed to fetch') || error.message.includes('network')) {
          setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        } else if (error.message.includes('relation') && error.message.includes('does not exist')) {
          setError('–¢–∞–±–ª–∏—Ü–∞ project_templates –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        } else {
          setError(error.message);
        }
        
        setLoading(false);
        return;
      }
      
      console.log('‚úÖ [useProjectTemplates] –®–∞–±–ª–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data?.length || 0);
      setTemplates(data || []);
      setLoading(false);
    } catch (err: any) {
      console.error('‚ùå [useProjectTemplates] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      if (err.message.includes('Failed to fetch') || err.message.includes('network')) {
        setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
      } else if (err.message.includes('–¢–∞–π–º–∞—É—Ç')) {
        setError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
        setError('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤');
      }
      
      setLoading(false);
    }
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏ (—à–∞–≥ 1–ê)
  async function saveProjectTemplate({
    name,
    description,
    companyData,
    specification = [],
    role = 'client',
  }: {
    name: string;
    description?: string;
    companyData: any;
    specification?: any[];
    role?: 'client' | 'supplier';
  }) {
    setSaving(true);
    setError(null);
    setSuccess(false);
    const { data: userData, error: userError } = await supabase.auth.getUser();
    if (userError || !userData?.user?.id) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      setSaving(false);
      return false;
    }
    const user_id = userData.user.id;
    const insertObj = {
      user_id,
      name,
      description: description || null,
      company_name: companyData.name || '',
      company_legal: companyData.legalName || '',
      company_inn: companyData.inn || '',
      company_kpp: companyData.kpp || '',
      company_ogrn: companyData.ogrn || '',
      company_address: companyData.address || '',
      company_bank: companyData.bankName || '',
      company_account: companyData.bankAccount || '',
      company_corr: companyData.bankCorrAccount || '',
      company_bik: companyData.bankBik || '',
      company_email: companyData.email || '',
      company_phone: companyData.phone || '',
      company_website: companyData.website || '',
      specification: specification,
      role,
    };
    const { error } = await supabase.from("project_templates").insert([insertObj]);
    if (error) {
      setError(error.message);
      setSaving(false);
      return false;
    }
    setSuccess(true);
    setSaving(false);
    fetchTemplates(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    return true;
  }

  useEffect(() => { fetchTemplates(); }, []);

  return { templates, loading, error, fetchTemplates, saveProjectTemplate, saving, success };
} 