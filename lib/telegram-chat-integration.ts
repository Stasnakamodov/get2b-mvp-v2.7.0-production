// ‚ö†Ô∏è –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ChatBotService
// –£–±—Ä–∞–Ω—ã –ø—Ä—è–º—ã–µ fetch –∑–∞–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å

import { supabase } from "@/lib/supabaseClient";
import { ChatBotService } from "./telegram/ChatBotService";

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —á–∞—Ç-–±–æ—Ç–∞
let chatBotService: ChatBotService | null = null;

function getChatBotService(): ChatBotService {
  if (!chatBotService) {
    try {
      chatBotService = new ChatBotService();
    } catch (error) {
      console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ChatBotService:", error);
      throw error;
    }
  }
  return chatBotService;
}

// ========================================
// üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ß–ê–¢–•–ê–ë–ê –° TELEGRAM
// ========================================

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ Telegram –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
 */
export async function notifyManagersAboutChatMessage({
  roomId,
  projectId,
  userMessage,
  userName,
  projectName,
  companyName
}: {
  roomId: string;
  projectId: string;
  userMessage: string;
  userName?: string;
  projectName?: string;
  companyName?: string;
}) {
  console.log("üîÑ –û–ë–ù–û–í–õ–ï–ù–û: notifyManagersAboutChatMessage - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ChatBotService");

  try {
    const service = getChatBotService();
    const result = await service.notifyManagersAboutChatMessage({
      roomId,
      projectId,
      userMessage,
      userName,
      projectName,
      companyName
    });

    console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ChatBotService");
    return { success: true, messageId: result.result?.message_id };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    return { success: false, error: String(error) };
  }
}

/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é notifyManagersAboutNewMessage
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ app/api/chat/messages/route.ts
 */
export async function notifyManagersAboutNewMessage({
  roomId,
  projectId,
  userMessage,
  userName,
  projectName,
  companyName,
  messageId
}: {
  roomId: string;
  projectId: string;
  userMessage: string;
  userName?: string;
  projectName?: string;
  companyName?: string;
  messageId?: string;
}) {
  console.log("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: notifyManagersAboutNewMessage - –∏—Å–ø–æ–ª—å–∑—É–µ–º notifyManagersAboutChatMessage");

  // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  return await notifyManagersAboutChatMessage({
    roomId,
    projectId,
    userMessage,
    userName,
    projectName,
    companyName
  });
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —á–∞—Ç –∫–æ–º–Ω–∞—Ç—É
 */
export async function addManagerMessageToChat({
  roomId,
  content,
  managerName = "–ú–µ–Ω–µ–¥–∂–µ—Ä Get2B",
  managerTelegramId
}: {
  roomId: string;
  content: string;
  managerName?: string;
  managerTelegramId?: string;
}) {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    const { data: message, error } = await supabase
      .from('chat_messages')
      .insert({
        room_id: roomId,
        content,
        sender_type: 'manager',
        sender_manager_id: managerTelegramId,
        sender_name: managerName,
        message_type: 'text',
        is_delivered: true
      })
      .select()
      .single();

    if (error) {
      throw new Error(`Database error: ${error.message}`);
    }

    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç:", message.id);
    return { success: true, message };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —á–∞—Ç:", error);
    return { success: false, error: String(error) };
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞ –ø–æ ID –ø—Ä–æ–µ–∫—Ç–∞
 */
export async function getChatRoomByProjectId(projectId: string) {
  try {
    const { data: room, error } = await supabase
      .from('chat_rooms')
      .select('*')
      .eq('project_id', projectId)
      .eq('room_type', 'project')
      .single();

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞:", error);
      return null;
    }

    return room;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞:", error);
    return null;
  }
}

/**
 * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
 */
export async function assignManagerToProject({
  projectId,
  managerTelegramId,
  managerName,
  specialization = 'general'
}: {
  projectId: string;
  managerTelegramId: string;
  managerName: string;
  specialization?: string;
}) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    const { data: existing, error: checkError } = await supabase
      .from('manager_assignments')
      .select('id')
      .eq('project_id', projectId)
      .eq('manager_telegram_id', managerTelegramId)
      .eq('assignment_status', 'active')
      .single();

    if (existing) {
      console.log("üìã –ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø—Ä–æ–µ–∫—Ç");
      return { success: true, existing: true };
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    const { data: assignment, error } = await supabase
      .from('manager_assignments')
      .insert({
        project_id: projectId,
        manager_telegram_id: managerTelegramId,
        manager_name: managerName,
        manager_specialization: specialization,
        assignment_status: 'active',
        assignment_type: 'auto',
        assigned_by: 'telegram_chat_integration'
      })
      .select()
      .single();

    if (error) {
      throw new Error(`Database error: ${error.message}`);
    }

    console.log("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø—Ä–æ–µ–∫—Ç:", assignment.id);
    return { success: true, assignment };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", error);
    return { success: false, error: String(error) };
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 */
export async function handleQuickReply({
  roomId,
  replyType,
  managerName = "–ú–µ–Ω–µ–¥–∂–µ—Ä Get2B",
  managerTelegramId
}: {
  roomId: string;
  replyType: 'ok' | 'clarify';
  managerName?: string;
  managerTelegramId?: string;
}) {
  console.log("üîÑ –û–ë–ù–û–í–õ–ï–ù–û: handleQuickReply - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π ChatBotService");

  try {
    const service = getChatBotService();
    const content = service.getQuickReplyResponse(replyType);
    
    return await addManagerMessageToChat({
      roomId,
      content,
      managerName,
      managerTelegramId
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:", error);
    return { success: false, error: String(error) };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export async function getProjectContextForChat(projectId: string) {
  try {
    const { data: project, error } = await supabase
      .from('projects')
      .select(`
        id,
        name,
        status,
        amount,
        currency,
        company_data,
        created_at
      `)
      .eq('id', projectId)
      .single();

    if (error) {
      throw new Error(`Database error: ${error.message}`);
    }

    return {
      projectId: project.id,
      projectName: project.name,
      projectStatus: project.status,
      amount: project.amount,
      currency: project.currency,
      companyName: project.company_data?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      companyEmail: project.company_data?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      createdAt: project.created_at
    };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞:", error);
    return null;
  }
}

/**
 * üìã –û–¢–ü–†–ê–í–ö–ê –î–ï–¢–ê–õ–ï–ô –ü–†–û–ï–ö–¢–ê –í TELEGRAM - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –° –ö–ê–ñ–î–û–ì–û –®–ê–ì–ê
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ —á—Ç–æ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ –∞–ø—Ä—É–≤–∞
 */
export async function sendProjectDetailsToTelegram(projectId: string, chatId?: string | number): Promise<void> {
  console.log("üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Telegram:", projectId);

  try {
    // üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const { data: project, error } = await supabase
      .from('projects')
      .select(`
        id,
        name,
        status,
        current_step,
        max_step_reached,
        company_data,
        amount,
        currency,
        payment_method,
        user_id,
        created_at,
        updated_at
      `)
      .eq('id', projectId)
      .single();

    if (error || !project) {
      throw new Error(`–ü—Ä–æ–µ–∫—Ç ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω: ${error?.message}`);
    }

    // üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã)
    const { data: projectSpecifications } = await supabase
      .from('project_specifications')
      .select('*')
      .eq('project_id', projectId)
      .order('created_at', { ascending: true });

    const { data: specifications } = await supabase
      .from('specifications')
      .select('*')
      .eq('project_id', projectId)
      .order('created_at', { ascending: true });

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
    const allSpecifications = [
      ...(projectSpecifications || []),
      ...(specifications || [])
    ];

    // üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
    const { data: requisites } = await supabase
      .from('project_requisites')
      .select('*')
      .eq('project_id', projectId)
      .order('created_at', { ascending: false })
      .limit(1);

    // üîç –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData } = await supabase.auth.getUser();
    const userEmail = userData?.user?.email || '–ù–µ —É–∫–∞–∑–∞–Ω';

    const service = getChatBotService();

    // üîß –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –æ—Ç –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram
    const cleanText = (text: string | null | undefined): string => {
      if (!text) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      return text
        .replace(/[*_`[\](){}|]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ Markdown —Å–∏–º–≤–æ–ª—ã
        .replace(/[<>]/g, '') // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        .replace(/\n+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
        .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        .trim();
    };

    // üì§ –§–û–†–ú–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –í –°–¢–ò–õ–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ë–û–¢–ê –ê–ü–†–£–í–ê
    let projectDetails = `–ü—Ä–æ–µ–∫—Ç: ${cleanText(project.name)}\n`;
    projectDetails += `–ö–ª–∏–µ–Ω—Ç –¥–æ—à—ë–ª –¥–æ —ç—Ç–∞–ø–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞.\n\n`;
    projectDetails += `–ü—Ä–æ–µ–∫—Ç: ${project.id}\n`;
    projectDetails += `–ö–æ–º–ø–∞–Ω–∏—è: ${cleanText(project.company_data?.name)}\n`;
    projectDetails += `Email –∫–ª–∏–µ–Ω—Ç–∞: ${cleanText(userEmail)}\n`;
    projectDetails += `–°—É–º–º–∞: ${project.amount || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ${project.currency || ''}\n`;
    projectDetails += `–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${cleanText(project.payment_method)}\n`;

    // üîç –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∫–∞–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö Step1)
    if (project.company_data) {
      projectDetails += `\n–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n`;
      projectDetails += `- –ù–∞–∑–≤–∞–Ω–∏–µ: ${cleanText(project.company_data.name)}\n`;
      projectDetails += `- –Æ—Ä. –Ω–∞–∑–≤–∞–Ω–∏–µ: ${cleanText(project.company_data.legalName)}\n`;
      projectDetails += `- –ò–ù–ù: ${cleanText(project.company_data.inn)}\n`;
      projectDetails += `- –ö–ü–ü: ${cleanText(project.company_data.kpp)}\n`;
      projectDetails += `- –û–ì–†–ù: ${cleanText(project.company_data.ogrn)}\n`;
      projectDetails += `- –ê–¥—Ä–µ—Å: ${cleanText(project.company_data.address)}\n`;
      projectDetails += `- –ë–∞–Ω–∫: ${cleanText(project.company_data.bankName)}\n`;
      projectDetails += `- –°—á—ë—Ç: ${cleanText(project.company_data.bankAccount)}\n`;
      projectDetails += `- –ö–æ—Ä—Ä. —Å—á—ë—Ç: ${cleanText(project.company_data.bankCorrAccount)}\n`;
      projectDetails += `- –ë–ò–ö: ${cleanText(project.company_data.bankBik)}\n`;
    }

    // üîç –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (–∫–∞–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö Step2)
    if (allSpecifications && allSpecifications.length > 0) {
      projectDetails += `\n–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è:\n`;
      
      let totalAmount = 0;
      let itemIndex = 1;
      
      allSpecifications.forEach((spec) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ items (JSON –º–∞—Å—Å–∏–≤)
        if (spec.items && Array.isArray(spec.items)) {
          spec.items.forEach((item: any) => {
            projectDetails += `${itemIndex}. ${cleanText(item.name) || 'undefined'} | –ö–æ–¥: ${cleanText(item.code) || 'undefined'} | –ö–æ–ª-–≤–æ: ${item.quantity || 1} —à—Ç | –¶–µ–Ω–∞: ${project.currency || 'USD'} ${item.price || 0} | –°—É–º–º–∞: ${project.currency || 'USD'} ${item.total || 0}\n`;
            totalAmount += (item.total || 0);
            itemIndex++;
          });
        } else {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ project_specifications
          projectDetails += `${itemIndex}. ${cleanText(spec.item_name) || 'undefined'} | –ö–æ–¥: ${cleanText(spec.item_code) || 'undefined'} | –ö–æ–ª-–≤–æ: ${spec.quantity || 1} —à—Ç | –¶–µ–Ω–∞: ${project.currency || 'USD'} ${spec.price || 0} | –°—É–º–º–∞: ${project.currency || 'USD'} ${spec.total || 0}\n`;
          totalAmount += (spec.total || 0);
          itemIndex++;
        }
      });
      
      projectDetails += `–ò—Ç–æ–≥–æ: ${project.currency || 'USD'} ${totalAmount}\n`;
    } else {
      // üîß –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
      projectDetails += `\n–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è:\n`;
      projectDetails += `1. –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä | –ö–æ–¥: TEST001 | –ö–æ–ª-–≤–æ: 5 —à—Ç | –¶–µ–Ω–∞: ${project.currency || 'USD'} 100 | –°—É–º–º–∞: ${project.currency || 'USD'} 500\n`;
      projectDetails += `2. –î–µ–º–æ –ø—Ä–æ–¥—É–∫—Ç | –ö–æ–¥: DEMO002 | –ö–æ–ª-–≤–æ: 3 —à—Ç | –¶–µ–Ω–∞: ${project.currency || 'USD'} 75 | –°—É–º–º–∞: ${project.currency || 'USD'} 225\n`;
      projectDetails += `–ò—Ç–æ–≥–æ: ${project.currency || 'USD'} 725\n`;
    }

    // üîç –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–∫–∞–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö Step6)
    if (requisites && requisites.length > 0 && requisites[0].data) {
      const req = requisites[0].data;
      const details = req.details || req;
      
      if (project.payment_method === 'bank-transfer') {
        projectDetails += `\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n`;
        projectDetails += `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${cleanText(details.recipientName)}\n`;
        projectDetails += `–ë–∞–Ω–∫: ${cleanText(details.bankName)}\n`;
        projectDetails += `–°—á–µ—Ç: ${cleanText(details.accountNumber)}\n`;
        projectDetails += `SWIFT/BIC: ${cleanText(details.swift || details.cnapsCode || details.iban)}\n`;
        projectDetails += `–í–∞–ª—é—Ç–∞: ${cleanText(details.transferCurrency) || 'USD'}\n`;
      } else if (project.payment_method === 'p2p') {
        projectDetails += `\n–ö–∞—Ä—Ç–∞ –¥–ª—è P2P:\n`;
        projectDetails += `–ë–∞–Ω–∫: ${cleanText(req.bank)}\n`;
        projectDetails += `–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${cleanText(req.card_number)}\n`;
        projectDetails += `–î–µ—Ä–∂–∞—Ç–µ–ª—å: ${cleanText(req.holder_name)}\n`;
      } else if (project.payment_method === 'crypto') {
        projectDetails += `\n–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫:\n`;
        projectDetails += `–ê–¥—Ä–µ—Å: ${cleanText(req.address)}\n`;
        projectDetails += `–°–µ—Ç—å: ${cleanText(req.network)}\n`;
      }
    } else {
      // üîß –¢–ï–°–¢–û–í–´–ï –†–ï–ö–í–ò–ó–ò–¢–´ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
      if (project.payment_method === 'p2p') {
        projectDetails += `\n–ö–∞—Ä—Ç–∞ –¥–ª—è P2P:\n`;
        projectDetails += `–ë–∞–Ω–∫: –°–±–µ—Ä–±–∞–Ω–∫\n`;
        projectDetails += `–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1234 5678 9012 3456\n`;
        projectDetails += `–î–µ—Ä–∂–∞—Ç–µ–ª—å: –ò–í–ê–ù –ò–í–ê–ù–û–í\n`;
      } else if (project.payment_method === 'crypto') {
        projectDetails += `\n–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫:\n`;
        projectDetails += `–ê–¥—Ä–µ—Å: 8888888888888\n`;
        projectDetails += `–°–µ—Ç—å: bep20\n`;
      } else {
        projectDetails += `\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n`;
        projectDetails += `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è\n`;
        projectDetails += `–ë–∞–Ω–∫: –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–Ω–∫\n`;
        projectDetails += `–°—á–µ—Ç: 12345678901234567890\n`;
        projectDetails += `SWIFT/BIC: TESTBIC123\n`;
        projectDetails += `–í–∞–ª—é—Ç–∞: USD\n`;
      }
    }

    // üîç –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    projectDetails += `\n–°—Ç–∞—Ç—É—Å: ${cleanText(project.status)}\n`;
    projectDetails += `–¢–µ–∫—É—â–∏–π —à–∞–≥: ${project.current_step || 1} –∏–∑ 7\n`;
    projectDetails += `–°–æ–∑–¥–∞–Ω: ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n`;
    projectDetails += `–û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(project.updated_at || project.created_at).toLocaleDateString('ru-RU')}`;
    
    // üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó —Ä–∞–∑–º–µ—Ç–∫–∏
    const targetChatId = chatId || process.env.TELEGRAM_CHAT_ID!;
    await service.sendMessage(targetChatId, projectDetails);

    console.log("‚úÖ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", projectId);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞:", error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
 */
export async function sendSystemMessageToChat({
  roomId,
  message,
  messageType = 'system'
}: {
  roomId: string;
  message: string;
  messageType?: 'system' | 'manager_joined' | 'status_change';
}) {
  try {
    const { data: systemMessage, error } = await supabase
      .from('chat_messages')
      .insert({
        room_id: roomId,
        content: message,
        sender_type: 'system',
        sender_name: '–°–∏—Å—Ç–µ–º–∞',
        message_type: 'system',
        is_delivered: true
      })
      .select()
      .single();

    if (error) {
      throw new Error(`Database error: ${error.message}`);
    }

    console.log("‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç:", systemMessage.id);
    return { success: true, message: systemMessage };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    return { success: false, error: String(error) };
  }
} 