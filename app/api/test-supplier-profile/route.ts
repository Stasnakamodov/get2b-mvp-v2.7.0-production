import { NextResponse } from 'next/server'
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function POST() {
  try {
    console.log('üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...')
    
    const cookieStore = await cookies()
    const supabaseServer = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return cookieStore.get(name)?.value
          },
        },
      }
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const { data: { user }, error: authError } = await supabaseServer.auth.getUser()
    if (authError || !user) {
      console.log('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    const testSupplierProfile = {
      user_id: user.id,
      name: '–û–û–û –¢–µ—Å—Ç–ü–æ—Å—Ç–∞–≤—â–∏–∫',
      company_name: '–û–û–û –¢–µ—Å—Ç–ü–æ—Å—Ç–∞–≤—â–∏–∫',
      category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
      country: '–†–æ—Å—Å–∏—è',
      city: '–ú–æ—Å–∫–≤–∞',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
      contact_email: 'test@supplier.ru',
      contact_phone: '+7 (495) 123-45-67',
      website: 'https://test-supplier.ru',
      contact_person: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
      min_order: 10000,
      response_time: 24,
      employees: 50,
      established: 2020,
      certifications: ['ISO 9001', 'CE'],
      specialties: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã'],
      payment_methods: ['bank-transfer', 'card'],
      recipient_name: '–û–û–û –¢–µ—Å—Ç–ü–æ—Å—Ç–∞–≤—â–∏–∫',
      bank_name: '–°–±–µ—Ä–±–∞–Ω–∫ –†–æ—Å—Å–∏–∏',
      account_number: '40702810123456789012',
      swift: 'SABRRUMM',
      iban: 'RU12345678901234567890',
      transfer_currency: 'USD',
      payment_purpose: '–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤',
      p2p_bank: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
      p2p_card_number: '1234567890123456',
      p2p_holder_name: 'IVAN IVANOV',
      crypto_name: 'Bitcoin',
      crypto_address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
      crypto_network: 'BTC',
      is_default: true,
      logo_url: ''
    }

    const { data: profile, error: insertError } = await supabaseServer
      .from('supplier_profiles')
      .insert(testSupplierProfile)
      .select()
      .single()

    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', insertError)
      return NextResponse.json({ error: insertError.message }, { status: 500 })
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å–æ–∑–¥–∞–Ω:', profile.id)
    return NextResponse.json({ 
      success: true, 
      profile: profile,
      message: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error)
    return NextResponse.json({ 
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
    }, { status: 500 })
  }
} 