import { type NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { text } = body;

    if (!text) {
      return NextResponse.json({ error: "text –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 });
    }

    console.log("üîç –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –ò–ù–í–û–ô–°–ê");
    console.log("üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:", text);
    console.log("üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:", text.length);

    const result = extractInvoiceDataDebug(text);

    return NextResponse.json({
      success: true,
      result,
      textLength: text.length,
      textPreview: text.substring(0, 500)
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
}

function extractInvoiceDataDebug(text: string) {
  const suggestions: any = {
    items: [],
    invoiceInfo: {}
  };

  console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞...");
  console.log("üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞:", text.substring(0, 500));

  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const lines = text.split('\n');
  console.log("üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:", lines.length);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
  console.log("üìÑ –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:");
  lines.slice(0, 10).forEach((line, index) => {
    console.log(`${index + 1}: "${line}"`);
  });

  // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∏–Ω–≤–æ–π—Å–∞
  const invoiceNumberPatterns = [
    /\b(–ò–Ω–≤–æ–π—Å|–°—á–µ—Ç|Invoice|‚Ññ|–ù–æ–º–µ—Ä)[:\s]*([A-Z0-9\-_\/]+)/i,
    /\b‚Ññ\s*([A-Z0-9\-_\/]+)/i,
    /\b–°—á–µ—Ç\s*‚Ññ\s*([A-Z0-9\-_\/]+)/i,
    /\bInvoice\s*#\s*([A-Z0-9\-_\/]+)/i
  ];

  console.log("üîç –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∏–Ω–≤–æ–π—Å–∞...");
  for (const pattern of invoiceNumberPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.number = match[2] || match[1];
      console.log("‚úÖ –ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞ –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.number, "–ø–∞—Ç—Ç–µ—Ä–Ω:", pattern.source);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞
  const datePatterns = [
    /\b(–î–∞—Ç–∞|Date)[:\s]*(\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4})/i,
    /\b(\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4})/i,
    /\b(\d{4}-\d{2}-\d{2})/i
  ];

  console.log("üîç –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞...");
  for (const pattern of datePatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.date = match[2] || match[1];
      console.log("‚úÖ –î–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ –Ω–∞–π–¥–µ–Ω–∞:", suggestions.invoiceInfo.date, "–ø–∞—Ç—Ç–µ—Ä–Ω:", pattern.source);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –æ–±—â–µ–π —Å—É–º–º—ã
  const totalPatterns = [
    /\b(–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–°—É–º–º–∞|Total|–ò–¢–û–ì–û)[:\s]*(\d+[.,]\d{2})\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)/i,
    /\b(–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–°—É–º–º–∞|Total|–ò–¢–û–ì–û)[:\s]*(\d+)\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)/i,
    /\b(\d+[.,]\d{2})\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)\s*(–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–°—É–º–º–∞|Total|–ò–¢–û–ì–û)/i
  ];

  console.log("üîç –ü–æ–∏—Å–∫ –æ–±—â–µ–π —Å—É–º–º—ã...");
  for (const pattern of totalPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.totalAmount = match[2];
      suggestions.invoiceInfo.currency = match[3];
      console.log("‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞:", match[2], match[3], "–ø–∞—Ç—Ç–µ—Ä–Ω:", pattern.source);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –ù–î–°
  const vatPatterns = [
    /\b(–ù–î–°|VAT)[:\s]*(\d+[.,]\d{2})\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)/i,
    /\b(–ù–î–°|VAT)[:\s]*(\d+)\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)/i,
    /\b(–ù–î–°|VAT)[:\s]*(\d+[.,]\d{2})%/i
  ];

  console.log("üîç –ü–æ–∏—Å–∫ –ù–î–°...");
  for (const pattern of vatPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.vat = match[2];
      console.log("‚úÖ –ù–î–° –Ω–∞–π–¥–µ–Ω:", match[2], "–ø–∞—Ç—Ç–µ—Ä–Ω:", pattern.source);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–ø—Ä–æ–¥–∞–≤—Ü–∞)
  const sellerPatterns = [
    /\b(–ü–æ—Å—Ç–∞–≤—â–∏–∫|–ü—Ä–æ–¥–∞–≤–µ—Ü|Seller|Provider)[:\s]*\n*([^\n]+)/i,
    /\b(–û–û–û|–ò–ü|–û–ê–û|–ó–ê–û)[\s]*["¬´]?([^¬ª"\n]+)["¬ª]?\s*(–ü–æ—Å—Ç–∞–≤—â–∏–∫|–ü—Ä–æ–¥–∞–≤–µ—Ü)/i,
    /–ü–æ—Å—Ç–∞–≤—â–∏–∫\s*\n\s*([^\n]+)/i
  ];

  console.log("üîç –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...");
  for (const pattern of sellerPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.seller = match[2] || match[1];
      console.log("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.seller, "–ø–∞—Ç—Ç–µ—Ä–Ω:", pattern.source);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  const buyerPatterns = [
    /\b(–ü–æ–∫—É–ø–∞—Ç–µ–ª—å|Buyer|–ó–∞–∫–∞–∑—á–∏–∫|Customer)[:\s]*\n*([^\n]+)/i,
    /\b(–û–û–û|–ò–ü|–û–ê–û|–ó–ê–û)[\s]*["¬´]?([^¬ª"\n]+)["¬ª]?\s*(–ü–æ–∫—É–ø–∞—Ç–µ–ª—å|Buyer)/i,
    /–ü–æ–∫—É–ø–∞—Ç–µ–ª—å\s*\n\s*([^\n]+)/i
  ];

  console.log("üîç –ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...");
  for (const pattern of buyerPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.buyer = match[2] || match[1];
      console.log("‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.buyer, "–ø–∞—Ç—Ç–µ—Ä–Ω:", pattern.source);
      break;
    }
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤
  console.log("üîç –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤...");
  let inItemsSection = false;
  let itemCount = 0;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if (line.match(/\b(–¢–æ–≤–∞—Ä—ã|–ü–æ–∑–∏—Ü–∏–∏|Items|–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|‚Ññ|‚Ññ–ø\/–ø)\b/i)) {
      inItemsSection = true;
      console.log("üìç –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ:", i + 1, "—Ç–µ–∫—Å—Ç:", line);
      continue;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if (inItemsSection && line.match(/\b(–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–°—É–º–º–∞|Total|–ò–¢–û–ì–û)\b/i)) {
      inItemsSection = false;
      console.log("üìç –ö–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ:", i + 1, "—Ç–µ–∫—Å—Ç:", line);
      continue;
    }

    if (inItemsSection && line.length > 5) {
      console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞:", i + 1, "—Ç–µ–∫—Å—Ç:", line);
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤
      const itemPatterns = [
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ | –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ | —Ü–µ–Ω–∞ | —Å—É–º–º–∞
        /^([^|]+)\s*\|\s*(\d+)\s*\|\s*(\d+[.,]\d{2})\s*\|\s*(\d+[.,]\d{2})/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ x –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = —Å—É–º–º–∞
        /^([^x]+)\s*x\s*(\d+)\s*=\s*(\d+[.,]\d{2})/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç. –ø–æ —Ü–µ–Ω–µ)
        /^([^(]+)\s*\((\d+)\s*—à—Ç\.?\s*–ø–æ\s*(\d+[.,]\d{2})\)/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç. - —Ü–µ–Ω–∞ —Ä—É–±. - —Å—É–º–º–∞
        /^([^-]+)\s*-\s*(\d+)\s*—à—Ç\.?\s*-\s*(\d+[.,]\d{2})\s*—Ä—É–±\.?\s*-\s*(\d+[.,]\d{2})/i,
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω–∞
        /^([^\d]+)\s+(\d+)\s+(\d+[.,]\d{2})/i
      ];

      for (const pattern of itemPatterns) {
        const match = line.match(pattern);
        if (match) {
          const item = {
            name: match[1].trim(),
            quantity: parseInt(match[2]),
            price: parseFloat(match[3].replace(',', '.')),
            total: match[4] ? parseFloat(match[4].replace(',', '.')) : parseInt(match[2]) * parseFloat(match[3].replace(',', '.')),
            code: `ITEM-${++itemCount}`
          };

          // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
          item.name = item.name.replace(/[^\w\s–∞-—è—ë–ê-–Ø–Å\-\.]/gi, '').trim();
          
          if (item.name.length > 2) {
            suggestions.items.push(item);
            console.log("‚úÖ –ü–æ–∑–∏—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:", item, "–ø–∞—Ç—Ç–µ—Ä–Ω:", pattern.source);
          }
          break;
        }
      }
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  if (suggestions.items.length === 0) {
    console.log("üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...");
    
    for (const line of lines) {
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
      const productKeywords = [
        '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–ø—Ä–∏–Ω—Ç–µ—Ä', '—Å–∫–∞–Ω–µ—Ä', '–º–æ–Ω–∏—Ç–æ—Ä', '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–º—ã—à—å',
        '–∫–∞–±–µ–ª—å', '–∞–¥–∞–ø—Ç–µ—Ä', '–±–ª–æ–∫', '–∑–∞—Ä—è–¥–∫–∞', '–Ω–∞—É—à–Ω–∏–∫–∏', '–¥–∏–Ω–∞–º–∏–∫', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', '–≤–µ–±-–∫–∞–º–µ—Ä–∞',
        '—Ñ–ª–µ—à–∫–∞', '–¥–∏—Å–∫', '–∫–∞—Ä—Ç–∞', '–ø–∞–º—è—Ç—å', '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è', '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', '–∂–µ—Å—Ç–∫–∏–π',
        '—Ç–æ–≤–∞—Ä', '–∏–∑–¥–µ–ª–∏–µ', '–ø—Ä–æ–¥—É–∫—Ç', '–º–∞—Ç–µ—Ä–∏–∞–ª', '–∫–æ–º–ø–ª–µ–∫—Ç', '–Ω–∞–±–æ—Ä', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–∞–ø–ø–∞—Ä–∞—Ç'
      ];

      const hasProductKeyword = productKeywords.some(keyword => 
        line.toLowerCase().includes(keyword)
      );

      if (hasProductKeyword) {
        console.log("üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ:", line);
        // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        const numbers = line.match(/\d+[.,]?\d*/g);
        if (numbers && numbers.length >= 2) {
          const item = {
            name: line.replace(/\d+[.,]?\d*/g, '').replace(/[^\w\s–∞-—è—ë–ê-–Ø–Å\-\.]/gi, '').trim(),
            quantity: parseInt(numbers[0]),
            price: parseFloat(numbers[1].replace(',', '.')),
            total: numbers[2] ? parseFloat(numbers[2].replace(',', '.')) : parseInt(numbers[0]) * parseFloat(numbers[1].replace(',', '.')),
            code: `ITEM-${++itemCount}`
          };

          if (item.name.length > 3) {
            suggestions.items.push(item);
            console.log("‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É:", item);
          }
        }
      }
    }
  }

  console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞:", suggestions);
  return suggestions;
} 