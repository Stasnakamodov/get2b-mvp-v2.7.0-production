import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// POST: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
export async function POST(request: NextRequest) {
  try {
    console.log('üñºÔ∏è [API] –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const { data: userProducts, error: productsError } = await supabase
      .from("catalog_user_products")
      .select(`
        id,
        name,
        supplier_id,
        images,
        catalog_user_suppliers!inner (
          source_supplier_id,
          name
        )
      `)
      .is("images", null)
      .not("catalog_user_suppliers.source_supplier_id", "is", null);

    if (productsError) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', productsError);
      return NextResponse.json({ error: productsError.message }, { status: 500 });
    }

    console.log(`üìä [API] –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${userProducts?.length || 0}`);

    const results = [];

    for (const userProduct of userProducts || []) {
      const sourceSupplierID = (userProduct.catalog_user_suppliers as any).source_supplier_id;
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ –∏–º–µ–Ω–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
      const { data: verifiedProducts, error: verifiedError } = await supabase
        .from("catalog_verified_products")
        .select("images, specifications")
        .eq("supplier_id", sourceSupplierID)
        .eq("name", userProduct.name)
        .limit(1);

      if (verifiedError || !verifiedProducts || verifiedProducts.length === 0) {
        console.log(`‚ö†Ô∏è [API] –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ: ${userProduct.name}`);
        continue;
      }

      const verifiedProduct = verifiedProducts[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä

      if (!verifiedProduct.images || verifiedProduct.images.length === 0) {
        console.log(`‚ö†Ô∏è [API] –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ: ${userProduct.name}`);
        continue;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const { data: updatedProduct, error: updateError } = await supabase
        .from("catalog_user_products")
        .update({
          images: verifiedProduct.images,
          specifications: verifiedProduct.specifications
        })
        .eq("id", userProduct.id)
        .select()
        .single();

      if (updateError) {
        console.error(`‚ùå [API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${userProduct.name}:`, updateError);
        results.push({
          product: userProduct.name,
          success: false,
          error: updateError.message
        });
      } else {
        console.log(`‚úÖ [API] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è: ${userProduct.name}`);
        results.push({
          product: userProduct.name,
          success: true,
          images_count: verifiedProduct.images?.length || 0
        });
      }
    }

    console.log('üéâ [API] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

    return NextResponse.json({
      message: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
      results: results,
      total_products_processed: results.length
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}