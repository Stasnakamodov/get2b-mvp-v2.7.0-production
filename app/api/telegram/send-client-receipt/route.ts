import { NextRequest, NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabaseAdmin'

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ [API] –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏')
    
    const { documentUrl, caption, projectRequestId } = await request.json()
    
    console.log('üì§ [API] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
      documentUrl: documentUrl?.substring(0, 100) + '...',
      caption: caption?.substring(0, 100) + '...',
      projectRequestId
    })
    
    if (!documentUrl || !caption || !projectRequestId) {
      return NextResponse.json({ 
        error: 'Document URL, caption and projectRequestId are required' 
      }, { status: 400 })
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL Supabase
    const urlParts = documentUrl.split('/')
    const bucketName = urlParts[urlParts.length - 3] // step7-client-confirmations
    const filePath = urlParts.slice(-2).join('/') // userId/filename
    
    console.log('üîç [API] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ URL:', {
      bucketName,
      filePath,
      originalUrl: documentUrl
    })
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Supabase Storage —á–µ—Ä–µ–∑ admin client
    console.log('‚¨áÔ∏è [API] –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Supabase Storage...')
    const { data: fileData, error: downloadError } = await supabaseAdmin.storage
      .from(bucketName)
      .download(filePath)
    
    if (downloadError) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', downloadError)
      throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${downloadError.message}`)
    }
    
    if (!fileData) {
      throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase Storage')
    }
    
    const fileName = filePath.split('/').pop() || 'client-receipt.pdf'
    
    console.log('üìÑ [API] –§–∞–π–ª —Å–∫–∞—á–∞–Ω:', {
      fileName,
      size: fileData.size,
      type: fileData.type
    })
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData()
    formData.append('chat_id', process.env.TELEGRAM_CHAT_ID || '')
    formData.append('document', fileData, fileName)
    formData.append('caption', caption)
    formData.append('reply_markup', JSON.stringify({
      inline_keyboard: [
        [
          { text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —á–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞", callback_data: `approve_client_receipt_${projectRequestId}` },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —á–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞", callback_data: `reject_client_receipt_${projectRequestId}` },
        ],
      ],
    }))
    
    console.log('üì§ [API] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram...')
    const telegramResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendDocument`, {
      method: 'POST',
      body: formData
    })
    
    const telegramResult = await telegramResponse.json()
    
    if (!telegramResponse.ok) {
      console.error('‚ùå [API] Telegram API –æ—à–∏–±–∫–∞:', telegramResult)
      throw new Error(`Telegram API error: ${telegramResult.description || telegramResponse.statusText}`)
    }
    
    console.log('‚úÖ [API] –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram —É—Å–ø–µ—à–Ω–æ:', telegramResult)
    
    return NextResponse.json({
      success: true,
      message: '–ß–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      result: telegramResult
    })
    
  } catch (error) {
    console.error('‚ùå [API] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error)
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
} 