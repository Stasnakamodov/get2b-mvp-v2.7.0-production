import { NextRequest, NextResponse } from "next/server";
import { supabaseService } from "@/lib/supabaseServiceClient";

export async function GET() {
  try {
    console.log("üß™ [TEST-BUCKETS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Storage –±–∞–∫–µ—Ç–æ–≤");
    
    const buckets = ['project-images', 'accreditation-certificates', 'accreditation-documents'];
    const results: any = {};

    for (const bucketName of buckets) {
      try {
        console.log(`üîç [TEST-BUCKETS] –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∫–µ—Ç: ${bucketName}`);
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π)
        const { data, error } = await supabaseService.storage
          .from(bucketName)
          .list('', { limit: 1 });

        if (error) {
          console.error(`‚ùå [TEST-BUCKETS] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∫–µ—Ç—É ${bucketName}:`, error);
          results[bucketName] = { 
            available: false, 
            error: error.message 
          };
        } else {
          console.log(`‚úÖ [TEST-BUCKETS] –ë–∞–∫–µ—Ç ${bucketName} –¥–æ—Å—Ç—É–ø–µ–Ω`);
          results[bucketName] = { 
            available: true, 
            files_count: data?.length || 0 
          };
        }
      } catch (error) {
        console.error(`‚ùå [TEST-BUCKETS] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∫–µ—Ç–∞ ${bucketName}:`, error);
        results[bucketName] = { 
          available: false, 
          error: error instanceof Error ? error.message : 'Unknown error' 
        };
      }
    }

    return NextResponse.json({
      success: true,
      message: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
      results
    });

  } catch (error) {
    console.error("‚ùå [TEST-BUCKETS] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 