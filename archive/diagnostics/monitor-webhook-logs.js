require('dotenv').config({ path: '.env.local' });

async function sendTestAndMonitorLogs() {
  console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä—é –ª–æ–≥–∏...\n');
  
  const testMessage = `MONITOR TEST ${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`;
  
  const webhookPayload = {
    update_id: Date.now(),
    message: {
      message_id: Date.now(),
      from: {
        id: 987654321,
        is_bot: false,
        first_name: "Monitor",
        last_name: "Test",
        username: "monitor_test"
      },
      chat: {
        id: parseInt(process.env.TELEGRAM_CHAT_ID),
        type: "private"
      },
      date: Math.floor(Date.now() / 1000),
      text: testMessage,
      reply_to_message: {
        message_id: 123,
        from: {
          id: 8195945436,
          is_bot: true,
          first_name: "Get2B ChatBot"
        },
        chat: {
          id: parseInt(process.env.TELEGRAM_CHAT_ID),
          type: "private"
        },
        date: Math.floor(Date.now() / 1000) - 60,
        text: `üÜî –ü—Ä–æ–µ–∫—Ç: 1570961b-ca64-4de4-8170-a7ef99b2ae5b`
      }
    }
  };

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é webhook...');
  
  try {
    const response = await fetch('http://localhost:3000/api/telegram-chat-webhook', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(webhookPayload)
    });

    const result = await response.text();
    console.log(`‚úÖ Webhook –æ—Ç–≤–µ—Ç (${response.status}):`, result);
    
    console.log('\n‚è≥ –û–∂–∏–¥–∞—é 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...\n');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('üí° –ü–û–°–ú–û–¢–†–ò–¢–ï –õ–û–ì–ò –°–ï–†–í–ï–†–ê Next.js –¥–ª—è ULTRA DEBUG —Å–æ–æ–±—â–µ–Ω–∏–π!');
    console.log('üí° –û–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook\'–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

sendTestAndMonitorLogs(); 