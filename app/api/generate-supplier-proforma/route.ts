import { NextRequest, NextResponse } from "next/server";
import ExcelJS from 'exceljs';
import { createClient } from '@supabase/supabase-js';

export async function POST(request: NextRequest) {
  try {
    console.log("üìä API /generate-supplier-proforma –≤—ã–∑–≤–∞–Ω");

    const body = await request.json();
    const { projectId, supplierId, supplierData, specificationItems, templatePath } = body;

    // Initialize Supabase client
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    if (!projectId || !supplierId || !supplierData) {
      return NextResponse.json(
        { error: "projectId, supplierId –∏ supplierData –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      );
    }

    console.log("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–æ—Ä–º—É –¥–ª—è:", {
      projectId,
      supplierId,
      supplierName: supplierData.name,
      itemsCount: (specificationItems && specificationItems.length) || 0,
      useTemplate: !!templatePath
    });

    let workbook = new ExcelJS.Workbook();

    // –ï—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω - –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (templatePath) {
      console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ ExcelJS:", templatePath);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ Storage
      const { data: templateData, error: templateError } = await supabase.storage
        .from('supplier-proformas')
        .download(templatePath);

      if (templateError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞:", templateError);
        // Fallback –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        workbook = new ExcelJS.Workbook();
        workbook.addWorksheet('–ü—Ä–æ—Ñ–æ—Ä–º–∞');
      } else {
        console.log("‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω, —á–∏—Ç–∞–µ–º —á–µ—Ä–µ–∑ ExcelJS...");
        // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const arrayBuffer = await templateData.arrayBuffer();
        workbook = new ExcelJS.Workbook();
        await workbook.xlsx.load(arrayBuffer);
        console.log("‚úÖ ExcelJS: –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É Excel
      workbook = new ExcelJS.Workbook();
      workbook.addWorksheet('–ü—Ä–æ—Ñ–æ—Ä–º–∞');
    }

    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω, –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ Step2 —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    if (templatePath && workbook.worksheets.length > 0) {
      console.log("üîÑ –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Step2 —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ (ExcelJS)");

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ –ë–î
      const { data: templateRecord, error: templateError } = await supabase
        .from('supplier_proforma_templates')
        .select('id, filling_rules, template_name, usage_count')
        .eq('file_path', templatePath)
        .eq('is_active', true)
        .single();

      if (templateError || !templateRecord) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞:", templatePath);
        console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
        // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –±–µ–∑ –ø—Ä–∞–≤–∏–ª
        const worksheet = workbook.worksheets[0];

        if (specificationItems && specificationItems.length > 0) {
          const maxItems = Math.min(specificationItems.length, 12);
          let totalAmount = 0;

          specificationItems.slice(0, maxItems).forEach((item: any, index: number) => {
            const quantity = Number(item.quantity) || Number(item.proforma_quantity) || 0;
            const price = Number(item.price) || Number(item.proforma_price) || 0;
            const total = quantity * price;
            totalAmount += total;
            const rowIndex = 13 + index; // ExcelJS uses 1-based indexing

            // –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –°–¢–ò–õ–ò! –¢–æ–ª—å–∫–æ –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            const nameCell = worksheet.getCell(rowIndex, 2); // B column
            const qtyCell = worksheet.getCell(rowIndex, 3);  // C column
            const priceCell = worksheet.getCell(rowIndex, 4); // D column
            const totalCell = worksheet.getCell(rowIndex, 5); // E column

            nameCell.value = item.item_name || '–¢–æ–≤–∞—Ä';
            qtyCell.value = quantity;
            priceCell.value = price;
            totalCell.value = total;

            console.log(`üìù ExcelJS: –°—Ç—Ä–æ–∫–∞ ${rowIndex} –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: ${item.item_name} - ${quantity} √ó ${price} = ${total}`);
          });

          // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
          const totalCell = worksheet.getCell(26, 5); // E26
          totalCell.value = totalAmount;

          console.log("‚úÖ ExcelJS Fallback –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å—Ç–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
        }
      } else {

      const rules = templateRecord.filling_rules;
      console.log("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ExcelJS:", rules);

      const worksheet = workbook.worksheets[0];

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
      if (specificationItems && specificationItems.length > 0) {
        console.log("üéØ –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω —Ç–æ–≤–∞—Ä–∞–º–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª");

        const maxItems = Math.min(
          specificationItems.length,
          rules.max_items || (rules.end_row - rules.start_row + 1)
        );
        let totalAmount = 0;

        specificationItems.slice(0, maxItems).forEach((item: any, index: number) => {
          const quantity = Number(item.quantity) || Number(item.proforma_quantity) || 0;
          const price = Number(item.price) || Number(item.proforma_price) || 0;
          const total = quantity * price;
          totalAmount += total;

          // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏: start_row - 1 + index (Excel rows 1-indexed, array 0-indexed)
          const rowIndex = (rules.start_row - 1) + index;

          console.log(`üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex + 1} (–ø—Ä–∞–≤–∏–ª–æ: –Ω–∞—á–∞–ª–æ —Å ${rules.start_row})`);

          // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º (ExcelJS)
          const columns = rules.columns;

          // ExcelJS: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É–∫–≤—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ —á–∏—Å–ª–∞ (A=1, B=2, C=3, D=4, E=5)
          const columnToNumber = (col: string): number => col.charCodeAt(0) - 64;

          if (columns.item_name) {
            const nameCell = worksheet.getCell(rowIndex + 1, columnToNumber(columns.item_name));
            nameCell.value = item.item_name || '–¢–æ–≤–∞—Ä –∏–∑ Step2';
          }

          if (columns.quantity) {
            const qtyCell = worksheet.getCell(rowIndex + 1, columnToNumber(columns.quantity));
            qtyCell.value = quantity;
          }

          if (columns.price) {
            const priceCell = worksheet.getCell(rowIndex + 1, columnToNumber(columns.price));
            priceCell.value = price;
          }

          if (columns.total) {
            const totalCell = worksheet.getCell(rowIndex + 1, columnToNumber(columns.total));
            totalCell.value = total;
          }

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
          if (columns.item_code && item.item_code) {
            const codeCell = worksheet.getCell(rowIndex + 1, columnToNumber(columns.item_code));
            codeCell.value = item.item_code;
          }

          if (columns.unit && item.unit) {
            const unitCell = worksheet.getCell(rowIndex + 1, columnToNumber(columns.unit));
            unitCell.value = item.unit;
          }

          console.log(`üìù –°—Ç—Ä–æ–∫–∞ ${rowIndex + 1}: ${item.item_name} - ${quantity} √ó ${price} = ${total}`);
        });

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º (ExcelJS)
        if (rules.total_row && rules.total_column) {
          const columnToNumber = (col: string): number => col.charCodeAt(0) - 64;
          const totalCell = worksheet.getCell(rules.total_row, columnToNumber(rules.total_column));
          totalCell.value = totalAmount;

          console.log(`üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ ${rules.total_column}${rules.total_row}: ${totalAmount}`);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        if (rules.additional_rules) {
          const additionalRules = rules.additional_rules;

          // –°—É–º–º–∞ –≤ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç–∞—Ö (ExcelJS)
          if (additionalRules.rub_total_row && additionalRules.exchange_rate) {
            const columnToNumber = (col: string): number => col.charCodeAt(0) - 64;
            const rubAmount = totalAmount * additionalRules.exchange_rate;
            const rubTotalColumn = additionalRules.rub_total_column || rules.total_column;
            const rubCell = worksheet.getCell(additionalRules.rub_total_row, columnToNumber(rubTotalColumn));
            rubCell.value = rubAmount;

            console.log(`üí± –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: ${rubAmount.toFixed(2)} (–∫—É—Ä—Å ${additionalRules.exchange_rate})`);
          }

          // –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (ExcelJS)
          if (additionalRules.date_cell) {
            const currentDate = new Date().toLocaleDateString('ru-RU');
            const dateCell = worksheet.getCell(additionalRules.date_cell);
            dateCell.value = currentDate;
          }

          // –ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–æ—Ä–º—ã/–∏–Ω–≤–æ–π—Å–∞ (ExcelJS)
          if (additionalRules.invoice_number_cell) {
            const invoiceNumber = `INV-${Date.now()}`;
            const invoiceCell = worksheet.getCell(additionalRules.invoice_number_cell);
            invoiceCell.value = invoiceNumber;
          }
        }

        console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${maxItems}/${specificationItems.length}`);
        console.log(`üí∞ –ò—Ç–æ–≥–æ: ${totalAmount} ${rules.currency || 'USD'}`);

        if (specificationItems.length > maxItems) {
          console.log(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ ${maxItems} –∏–∑ ${specificationItems.length}`);
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        await supabase.rpc('increment_template_usage', { p_template_id: templateRecord.id });
      }
      }

      console.log("‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Step2");

    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–æ—Ä–º—É —Å –Ω—É–ª—è
      console.log("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–æ—Ä–º—É —Å –Ω—É–ª—è");

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–æ—Ä–º—ã
      const currentDate = new Date().toLocaleDateString('ru-RU');
      const headerData = [
      ["–ü–†–û–§–û–†–ú–ê-–ò–ù–í–û–ô–°"],
      [""],
      [`–î–∞—Ç–∞: ${currentDate}`],
      [`–ü—Ä–æ–µ–∫—Ç: ${projectId}`],
      [""],
      ["–ü–û–°–¢–ê–í–©–ò–ö:"],
      [`–ù–∞–∑–≤–∞–Ω–∏–µ: ${supplierData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`],
      [`–ö–æ–º–ø–∞–Ω–∏—è: ${supplierData.company_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`],
      [`–°—Ç—Ä–∞–Ω–∞: ${supplierData.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`],
      [`–ì–æ—Ä–æ–¥: ${supplierData.city || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`],
      [`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${supplierData.category || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`],
      [`–¢–∏–ø: ${supplierData.room_type === 'verified' ? '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`],
      [""],
      ["–°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–í–ê–†–û–í:"],
      [""],
    ];

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
    const tableHeaders = [
      "‚Ññ", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ï–¥. –∏–∑–º.", "–¶–µ–Ω–∞ –∑–∞ –µ–¥. ($)", "–°—É–º–º–∞ ($)"
    ];

    // –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    let itemsData: any[][] = [];
    let totalAmount = 0;

    if (specificationItems && specificationItems.length > 0) {
      itemsData = specificationItems.map((item: any, index: number) => {
        const quantity = Number(item.quantity) || 0;
        const price = Number(item.price) || 0;
        const total = quantity * price;
        totalAmount += total;

        return [
          index + 1,
          item.item_name || '–¢–æ–≤–∞—Ä',
          item.item_code || '',
          quantity,
          item.unit || '—à—Ç',
          price.toFixed(2),
          total.toFixed(2)
        ];
      });
    } else {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º placeholder
      itemsData = [
        [1, "–¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ", "", 0, "—à—Ç", "0.00", "0.00"]
      ];
    }

    // –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const footerData = [
      [""],
      ["", "", "", "", "", "–ò–¢–û–ì–û:", `$${totalAmount.toFixed(2)}`],
      [""],
      ["–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´:"],
      [""]
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if (supplierData.bank_accounts && supplierData.bank_accounts.length > 0) {
      footerData.push(["–ë–ê–ù–ö–û–í–°–ö–ò–ï –†–ï–ö–í–ò–ó–ò–¢–´:"]);
      supplierData.bank_accounts.forEach((account: any, index: number) => {
        footerData.push([`–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç ${index + 1}:`]);
        if (account.account_number) footerData.push([`–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: ${account.account_number}`]);
        if (account.bank_name) footerData.push([`–ë–∞–Ω–∫: ${account.bank_name}`]);
        if (account.swift_code) footerData.push([`SWIFT: ${account.swift_code}`]);
        if (account.iban) footerData.push([`IBAN: ${account.iban}`]);
        if (account.routing_number) footerData.push([`Routing: ${account.routing_number}`]);
        footerData.push([""]);
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (supplierData.crypto_wallets && supplierData.crypto_wallets.length > 0) {
      footerData.push(["–ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–´–ï –ö–û–®–ï–õ–¨–ö–ò:"]);
      supplierData.crypto_wallets.forEach((wallet: any) => {
        footerData.push([`${wallet.currency || 'Crypto'}: ${wallet.address || ''}`]);
        if (wallet.network) footerData.push([`–°–µ—Ç—å: ${wallet.network}`]);
        footerData.push([""]);
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º P2P –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if (supplierData.p2p_cards && supplierData.p2p_cards.length > 0) {
      footerData.push(["P2P –ö–ê–†–¢–´:"]);
      supplierData.p2p_cards.forEach((card: any) => {
        footerData.push([`${card.platform || 'P2P'}: ${card.card_number || card.phone || ''}`]);
        if (card.card_holder) footerData.push([`–î–µ—Ä–∂–∞—Ç–µ–ª—å: ${card.card_holder}`]);
        footerData.push([""]);
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    footerData.push(["–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"]);
    footerData.push([`ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${supplierId}`]);
    footerData.push([`–°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}`]);
    footerData.push([""]);
    footerData.push(["–î–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Get2B"]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const allData = [
      ...headerData,
      tableHeaders,
      ...itemsData,
      ...footerData
    ];

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç (ExcelJS)
    const worksheet = workbook.addWorksheet('–ü—Ä–æ—Ñ–æ—Ä–º–∞');

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
    allData.forEach((row, rowIndex) => {
      row.forEach((cellValue, colIndex) => {
        const cell = worksheet.getCell(rowIndex + 1, colIndex + 1);
        cell.value = cellValue;
      });
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ (ExcelJS)
    worksheet.columns = [
      { width: 5 },   // ‚Ññ
      { width: 30 },  // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
      { width: 15 },  // –ö–æ–¥ —Ç–æ–≤–∞—Ä–∞
      { width: 10 },  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      { width: 10 },  // –ï–¥. –∏–∑–º.
      { width: 15 },  // –¶–µ–Ω–∞ –∑–∞ –µ–¥.
      { width: 15 }   // –°—É–º–º–∞
    ];
    } // –ó–∞–∫—Ä—ã—Ç–∏–µ else –±–ª–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ—Ñ–æ—Ä–º—ã

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ buffer (ExcelJS)
    const excelBuffer = await workbook.xlsx.writeBuffer();

    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const supplierName = (supplierData.name || 'supplier')
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '_');
    const fileName = `proforma_${supplierName}_${projectId}_${Date.now()}.xlsx`;

    // –ü—É—Ç—å –≤ Storage: supplier-proformas/{supplierId}/{projectId}/{fileName}
    const storagePath = `${supplierId}/${projectId}/${fileName}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase Storage
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–æ—Ä–º—É –≤ Storage:", storagePath);
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('supplier-proformas')
      .upload(storagePath, excelBuffer, {
        contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        upsert: true
      });

    if (uploadError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:", uploadError);
      // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    } else {
      console.log("‚úÖ –ü—Ä–æ—Ñ–æ—Ä–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Storage:", uploadData);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    return new NextResponse(excelBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="${fileName}"`,
        'Cache-Control': 'no-cache',
        'X-Storage-Path': storagePath, // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –¥–ª—è frontend
      }
    });

  } catch (error) {
    console.error('‚ùå [API] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–æ—Ä–º—ã:', error);
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–æ—Ä–º—ã',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}