const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  'https://ejkhdhexkadecpbjjmsz.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVqa2hkaGV4a2FkZWNwYmpqbXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwMzcxNDIsImV4cCI6MjA2MjYxMzE0Mn0.DHcfdHrQmPiG4AkwDaCa9AXYB7zQPJlK7VuXt-g1uUU'
);

async function testProductsAPI() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –¢–û–í–ê–†–û–í\n');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –∏—Ö ID
    const { data: suppliers, error: suppliersError } = await supabase
      .from('catalog_verified_suppliers')
      .select('id, name, category')
      .eq('is_active', true)
      .order('name');
      
    if (suppliersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', suppliersError);
      return;
    }
    
    console.log('üë• –ü–û–°–¢–ê–í–©–ò–ö–ò:');
    suppliers?.forEach((s, i) => {
      console.log(`${i + 1}. ${s.name} (${s.category})`);
      console.log(`   ID: ${s.id}\n`);
    });
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    console.log('üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –¢–û–í–ê–†–û–í:\n');
    
    for (const supplier of suppliers) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è ${supplier.name}:`);
      
      try {
        const response = await fetch(`http://localhost:3002/api/catalog/products?supplier_id=${supplier.id}&supplier_type=verified`);
        const data = await response.json();
        
        if (response.ok) {
          console.log(`‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª: ${data.products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤`);
          
          if (data.products && data.products.length > 0) {
            data.products.forEach(p => {
              console.log(`   - ${p.name} (${p.price} ${p.currency || 'RUB'})`);
            });
          }
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ API:`, data.error);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error.message);
      }
      console.log('');
    }
    
    // 3. –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–î:\n');
    
    for (const supplier of suppliers) {
      const { data: products, error: productsError } = await supabase
        .from('catalog_verified_products')
        .select('id, name, price, currency, is_active')
        .eq('supplier_id', supplier.id)
        .eq('is_active', true);
        
      if (productsError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ë–î –¥–ª—è ${supplier.name}:`, productsError);
        continue;
      }
      
      console.log(`üìã ${supplier.name}: ${products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î`);
      if (products && products.length > 0) {
        products.forEach(p => {
          console.log(`   - ${p.name} (${p.price} ${p.currency || 'RUB'}) [${p.is_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}]`);
        });
      }
      console.log('');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testProductsAPI();