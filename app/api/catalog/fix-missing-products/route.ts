import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// POST: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
export async function POST(request: NextRequest) {
  try {
    console.log('üîß [API] –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤
    const { data: importedSuppliers, error: suppliersError } = await supabase
      .from("catalog_user_suppliers")
      .select(`
        id,
        name,
        user_id,
        source_supplier_id
      `)
      .eq("source_type", "imported_from_catalog")
      .eq("is_active", true)
      .not("source_supplier_id", "is", null);

    if (suppliersError) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', suppliersError);
      return NextResponse.json({ error: suppliersError.message }, { status: 500 });
    }

    console.log(`üìä [API] –ù–∞–π–¥–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${importedSuppliers?.length || 0}`);

    const results = [];

    for (const supplier of importedSuppliers || []) {
      console.log(`\nüîç [API] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${supplier.name}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —Å–∏–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ
      const { data: userProducts, error: userProductsError } = await supabase
        .from("catalog_user_products")
        .select("id")
        .eq("supplier_id", supplier.id)
        .eq("is_active", true);

      if (userProductsError) {
        console.error(`‚ùå [API] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ ${supplier.name}:`, userProductsError);
        continue;
      }

      if (userProducts && userProducts.length > 0) {
        console.log(`‚úÖ [API] –£ ${supplier.name} —É–∂–µ –µ—Å—Ç—å ${userProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        continue;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
      const { data: verifiedProducts, error: verifiedProductsError } = await supabase
        .from("catalog_verified_products")
        .select("*")
        .eq("supplier_id", supplier.source_supplier_id);

      if (verifiedProductsError) {
        console.error(`‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è ${supplier.name}:`, verifiedProductsError);
        continue;
      }

      if (!verifiedProducts || verifiedProducts.length === 0) {
        console.log(`‚ö†Ô∏è [API] –£ ${supplier.name} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ`);
        continue;
      }

      console.log(`üì¶ [API] –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ${verifiedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è ${supplier.name}`);

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      const userProductsToInsert = verifiedProducts.map(product => ({
        user_id: supplier.user_id,
        supplier_id: supplier.id,
        name: product.name,
        price: product.price,
        currency: product.currency || 'USD',
        category: product.category,
        description: product.description,
        min_order: product.min_order,
        in_stock: product.in_stock,
        images: product.images, // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        specifications: product.specifications, // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        is_active: true
      }));

      const { data: insertedProducts, error: insertError } = await supabase
        .from("catalog_user_products")
        .insert(userProductsToInsert)
        .select();

      if (insertError) {
        console.error(`‚ùå [API] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è ${supplier.name}:`, insertError);
        results.push({
          supplier: supplier.name,
          success: false,
          error: insertError.message
        });
      } else {
        console.log(`‚úÖ [API] –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${insertedProducts?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è ${supplier.name}`);
        results.push({
          supplier: supplier.name,
          success: true,
          imported_products: insertedProducts?.length || 0
        });
      }
    }

    console.log('üéâ [API] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

    return NextResponse.json({
      message: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
      results: results,
      total_suppliers_processed: results.length
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// GET: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    const { data: importedSuppliers, error: suppliersError } = await supabase
      .from("catalog_user_suppliers")
      .select(`
        id,
        name,
        source_supplier_id,
        catalog_user_products (
          id
        )
      `)
      .eq("source_type", "imported_from_catalog")
      .eq("is_active", true)
      .not("source_supplier_id", "is", null);

    if (suppliersError) {
      return NextResponse.json({ error: suppliersError.message }, { status: 500 });
    }

    const analysis = [];

    for (const supplier of importedSuppliers || []) {
      const userProductsCount = supplier.catalog_user_products?.length || 0;

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
      const { count: verifiedProductsCount } = await supabase
        .from("catalog_verified_products")
        .select("*", { count: 'exact' })
        .eq("supplier_id", supplier.source_supplier_id);

      analysis.push({
        supplier_name: supplier.name,
        products_in_blue_room: userProductsCount,
        products_in_orange_room: verifiedProductsCount || 0,
        needs_fix: userProductsCount === 0 && (verifiedProductsCount || 0) > 0
      });
    }

    return NextResponse.json({
      suppliers_analysis: analysis,
      suppliers_needing_fix: analysis.filter(s => s.needs_fix).length
    });

  } catch (error) {
    console.error("‚ùå [API] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}