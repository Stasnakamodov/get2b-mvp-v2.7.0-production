import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

// üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–ò–ì–†–ê–¶–ò–ò
export async function POST(request: NextRequest) {
  const startTime = Date.now()
  
  try {
    console.log('üß™ [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –º–∏–≥—Ä–∞—Ü–∏—é...')
    
    // 1. –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data: categories, error: categoriesError } = await supabase
      .from('catalog_categories')
      .select('id, name')
      .eq('is_active', true)
      .limit(5)

    if (categoriesError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${categoriesError.message}`)
    }

    console.log(`‚úÖ [TEST] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK. –ù–∞–π–¥–µ–Ω–æ ${categories?.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`)

    // 2. –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bosch —Ç–æ–≤–∞—Ä–æ–≤
    const { data: boschSupplier } = await supabase
      .from('catalog_verified_suppliers')
      .select('id')
      .ilike('name', '%bosch%')
      .single()
      
    if (boschSupplier) {
      const { data: updatedProducts, error: updateError } = await supabase
        .from('catalog_verified_products')
        .update({ category_id: '68ea0904-ba73-4e7e-8ae0-9f9c468a2b18' })
        .eq('supplier_id', boschSupplier.id)
        .is('category_id', null)
        .select('id')
        
      if (updateError) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateError.message}`)
      }
      
      console.log(`üöó [TEST] –û–±–Ω–æ–≤–ª–µ–Ω–æ Bosch —Ç–æ–≤–∞—Ä–æ–≤: ${updatedProducts?.length || 0}`)
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: stats } = await supabase
      .from('catalog_verified_products')
      .select('category_id')
      
    const withCategories = stats?.filter(p => p.category_id !== null).length || 0
    const total = stats?.length || 0
    const percent = total > 0 ? Math.round((withCategories / total) * 100) : 0
    
    const executionTime = Date.now() - startTime
    
    console.log(`‚úÖ [TEST] –ì–æ—Ç–æ–≤–æ –∑–∞ ${executionTime}–º—Å. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: ${percent}%`)
    
    return NextResponse.json({
      success: true,
      message: '–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω!',
      stats: {
        total_products: total,
        with_categories: withCategories,
        categorization_percent: percent,
        execution_time_ms: executionTime
      }
    })

  } catch (error) {
    console.error('‚ùå [TEST] –û—à–∏–±–∫–∞:', error)
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      execution_time_ms: Date.now() - startTime
    }, { status: 500 })
  }
}

// GET: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
export async function GET() {
  try {
    const { data: stats } = await supabase
      .from('catalog_verified_products')
      .select('category_id')
      
    const withCategories = stats?.filter(p => p.category_id !== null).length || 0
    const total = stats?.length || 0
    
    return NextResponse.json({
      success: true,
      current_stats: {
        total_products: total,
        with_categories: withCategories,
        without_categories: total - withCategories,
        migration_percent: total > 0 ? ((withCategories / total) * 100).toFixed(1) + '%' : '0%'
      }
    })
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    }, { status: 500 })
  }
}