import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// POST: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export async function POST(request: NextRequest) {
  try {
    console.log("üé® [CREATE-SIMPLE-IMAGE] –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");

    const { searchParams } = new URL(request.url);
    const applicationId = searchParams.get('applicationId') || '05fdf6bd-7f27-4e54-9b3f-485b938e7c33';

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const svgContent = `
      <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
        <rect width="400" height="300" fill="#f0f0f0" stroke="#333" stroke-width="2"/>
        <text x="200" y="100" font-family="Arial" font-size="24" text-anchor="middle" fill="#333">–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</text>
        <text x="200" y="130" font-family="Arial" font-size="16" text-anchor="middle" fill="#333">–¥–ª—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏</text>
        <text x="200" y="160" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">ID: ${applicationId}</text>
        <text x="200" y="180" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}</text>
        <circle cx="200" cy="220" r="30" fill="#4CAF50"/>
        <text x="200" y="228" font-family="Arial" font-size="20" text-anchor="middle" fill="white">‚úì</text>
      </svg>
    `;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ Buffer
    const buffer = Buffer.from(svgContent, 'utf-8');
    
    console.log("‚úÖ [CREATE-SIMPLE-IMAGE] SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä:", buffer.length);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Storage
    const fileName = `test-svg-image-${Date.now()}.svg`;
    const storagePath = `accreditation/${applicationId}/products/0/images/${fileName}`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('project-images')
      .upload(storagePath, buffer, {
        contentType: 'image/svg+xml',
        cacheControl: '3600',
        upsert: false
      });

    if (uploadError) {
      console.error("‚ùå [CREATE-SIMPLE-IMAGE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", uploadError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        details: uploadError.message
      }, { status: 500 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabase.storage
      .from('project-images')
      .getPublicUrl(storagePath);

    console.log("‚úÖ [CREATE-SIMPLE-IMAGE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", urlData.publicUrl);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const { data: application, error: appError } = await supabase
      .from('accreditation_applications')
      .select('*')
      .eq('id', applicationId)
      .single();

    if (appError || !application) {
      return NextResponse.json({ 
        error: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" 
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    let productsData = [];
    try {
      productsData = typeof application.products_data === 'string' 
        ? JSON.parse(application.products_data) 
        : application.products_data;
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ products_data:', parseError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤" 
      }, { status: 500 });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É —Ç–æ–≤–∞—Ä—É
    if (productsData.length > 0) {
      if (!productsData[0].images_info) {
        productsData[0].images_info = [];
      }
      
      productsData[0].images_info.push({
        name: fileName,
        size: buffer.length,
        type: 'image/svg+xml',
        public_url: urlData.publicUrl
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
      const { error: updateError } = await supabase
        .from('accreditation_applications')
        .update({
          products_data: JSON.stringify(productsData),
          updated_at: new Date().toISOString()
        })
        .eq('id', applicationId);

      if (updateError) {
        console.error("‚ùå [CREATE-SIMPLE-IMAGE] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", updateError);
      } else {
        console.log("‚úÖ [CREATE-SIMPLE-IMAGE] –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º");
      }
    }

    return NextResponse.json({
      success: true,
      message: "–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
      image: {
        name: fileName,
        size: buffer.length,
        type: 'image/svg+xml',
        public_url: urlData.publicUrl,
        storage_path: storagePath
      }
    });

  } catch (error) {
    console.error("‚ùå [CREATE-SIMPLE-IMAGE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 