import { ProjectStatus } from '@/lib/types/project-status'
import { SMSService } from './SMSService'

export type NotificationType = 'telegram' | 'push' | 'sms' | 'email'

export interface NotificationChannel {
  type: NotificationType
  enabled: boolean
  config?: Record<string, any>
}

export interface NotificationRecipient {
  id: string
  name: string
  email?: string
  phone?: string
  telegramChatId?: string
  role: 'client' | 'manager' | 'supplier'
  preferences: {
    channels: NotificationChannel[]
    criticalOnly: boolean
    timezone: string
  }
}

export interface NotificationPayload {
  id: string
  type: 'project_status_change' | 'payment_reminder' | 'deadline_warning' | 'accreditation_request'
  priority: 'low' | 'medium' | 'high' | 'critical'
  title: string
  message: string
  projectId?: string
  data?: Record<string, any>
  scheduledAt?: Date
  expiresAt?: Date
}

export interface NotificationResult {
  success: boolean
  channel: NotificationType
  recipientId: string
  messageId?: string
  error?: string
  sentAt: Date
}

/**
 * üîî –ì–õ–ê–í–ù–´–ô –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - Telegram (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
 * - Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * - SMS —á–µ—Ä–µ–∑ SMS.ru
 * - Email (–±—É–¥—É—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
 */
export class NotificationService {
  private static instance: NotificationService
  private channels: Map<NotificationType, NotificationChannel> = new Map()

  constructor() {
    this.initializeChannels()
  }

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService()
    }
    return NotificationService.instance
  }

  private initializeChannels() {
    // Telegram - —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
    this.channels.set('telegram', {
      type: 'telegram',
      enabled: !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID),
      config: {
        botToken: process.env.TELEGRAM_BOT_TOKEN,
        chatId: process.env.TELEGRAM_CHAT_ID
      }
    })

    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.channels.set('push', {
      type: 'push',
      enabled: !!process.env.VAPID_PUBLIC_KEY,
      config: {
        vapidPublicKey: process.env.VAPID_PUBLIC_KEY,
        vapidPrivateKey: process.env.VAPID_PRIVATE_KEY,
        vapidEmail: process.env.VAPID_EMAIL
      }
    })

    // SMS —á–µ—Ä–µ–∑ SMS.ru
    this.channels.set('sms', {
      type: 'sms',
      enabled: !!process.env.SMS_RU_API_ID,
      config: {
        apiId: process.env.SMS_RU_API_ID,
        from: process.env.SMS_RU_FROM || 'Get2B'
      }
    })
  }

  /**
   * üéØ –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–ê –ü–û –°–¢–ê–¢–£–°–£
   */
  async sendProjectStatusNotification(
    projectId: string,
    oldStatus: ProjectStatus,
    newStatus: ProjectStatus,
    projectData: any,
    recipients: NotificationRecipient[]
  ): Promise<NotificationResult[]> {
    const notification = this.createStatusChangeNotification(
      projectId,
      oldStatus,
      newStatus,
      projectData
    )

    const results: NotificationResult[] = []

    for (const recipient of recipients) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
      if (recipient.preferences.criticalOnly && notification.priority !== 'critical') {
        continue
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      for (const channel of recipient.preferences.channels) {
        if (!channel.enabled) continue

        try {
          const result = await this.sendToChannel(
            channel.type,
            recipient,
            notification
          )
          results.push(result)
        } catch (error) {
          results.push({
            success: false,
            channel: channel.type,
            recipientId: recipient.id,
            error: String(error),
            sentAt: new Date()
          })
        }
      }
    }

    return results
  }

  /**
   * üìã –°–û–ó–î–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–û –ò–ó–ú–ï–ù–ï–ù–ò–Æ –°–¢–ê–¢–£–°–ê
   */
  private createStatusChangeNotification(
    projectId: string,
    oldStatus: ProjectStatus,
    newStatus: ProjectStatus,
    projectData: any
  ): NotificationPayload {
    const criticalStatuses: ProjectStatus[] = [
      'waiting_approval',
      'waiting_receipt', 
      'receipt_rejected',
      'waiting_manager_receipt',
      'waiting_client_confirmation'
    ]

    const priority = criticalStatuses.includes(newStatus) ? 'critical' : 'medium'

    return {
      id: `project_${projectId}_${newStatus}_${Date.now()}`,
      type: 'project_status_change',
      priority,
      title: this.getStatusChangeTitle(newStatus, projectData),
      message: this.getStatusChangeMessage(oldStatus, newStatus, projectData),
      projectId,
      data: {
        oldStatus,
        newStatus,
        companyName: projectData.companyName,
        amount: projectData.amount,
        currency: projectData.currency
      },
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π
    }
  }

  /**
   * üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–ì–û–õ–û–í–ö–û–í –ü–û –°–¢–ê–¢–£–°–ê–ú
   */
  private getStatusChangeTitle(status: ProjectStatus, projectData: any): string {
    const company = projectData.companyName || '–ü—Ä–æ–µ–∫—Ç'
    
    switch (status) {
      case 'waiting_approval':
        return `üü° –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ: ${company}`
      case 'waiting_receipt':
        return `üßæ –û–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: ${company}`
      case 'receipt_rejected':
        return `‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω: ${company}`
      case 'waiting_manager_receipt':
        return `üíº –û–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${company}`
      case 'waiting_client_confirmation':
        return `‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${company}`
      case 'completed':
        return `üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: ${company}`
      default:
        return `üìã –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω: ${company}`
    }
  }

  /**
   * üìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô –ü–û –°–¢–ê–¢–£–°–ê–ú  
   */
  private getStatusChangeMessage(
    oldStatus: ProjectStatus,
    newStatus: ProjectStatus, 
    projectData: any
  ): string {
    const company = projectData.companyName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
    const amount = projectData.amount ? `${projectData.amount} ${projectData.currency || 'USD'}` : ''
    
    switch (newStatus) {
      case 'waiting_approval':
        return `–ü—Ä–æ–µ–∫—Ç "${company}" (${amount}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.`
      
      case 'waiting_receipt':
        return `–ü—Ä–æ–µ–∫—Ç "${company}" –æ–¥–æ–±—Ä–µ–Ω! –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –Ω–∞ —Å—É–º–º—É ${amount}. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.`
      
      case 'receipt_rejected':
        return `‚ö†Ô∏è –ß–µ–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${company}" –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ ${amount}.`
      
      case 'waiting_manager_receipt':
        return `üí∞ –û–ø–ª–∞—Ç–∞ –æ—Ç "${company}" (${amount}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É.`
      
      case 'waiting_client_confirmation':
        return `üìã –ß–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${company}" –∑–∞–≥—Ä—É–∂–µ–Ω. –û–∂–∏–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.`
      
      case 'completed':
        return `üéâ –ü—Ä–æ–µ–∫—Ç "${company}" (${amount}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω—ã.`
      
      default:
        return `–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ "${company}" –∏–∑–º–µ–Ω—ë–Ω —Å "${oldStatus}" –Ω–∞ "${newStatus}".`
    }
  }

  /**
   * üì§ –û–¢–ü–†–ê–í–ö–ê –í –ö–û–ù–ö–†–ï–¢–ù–´–ô –ö–ê–ù–ê–õ
   */
  private async sendToChannel(
    channelType: NotificationType,
    recipient: NotificationRecipient,
    notification: NotificationPayload
  ): Promise<NotificationResult> {
    switch (channelType) {
      case 'telegram':
        return this.sendTelegramNotification(recipient, notification)
      case 'push':
        return this.sendPushNotification(recipient, notification)
      case 'sms':
        return this.sendSMSNotification(recipient, notification)
      default:
        throw new Error(`Unsupported channel type: ${channelType}`)
    }
  }

  /**
   * üì± –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM
   */
  private async sendTelegramNotification(
    recipient: NotificationRecipient,
    notification: NotificationPayload
  ): Promise<NotificationResult> {
    try {
      const channel = this.channels.get('telegram')
      if (!channel?.enabled || !channel.config) {
        throw new Error('Telegram channel not configured')
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const actions = this.getTelegramActions(notification)
      
      const url = `https://api.telegram.org/bot${channel.config.botToken}/sendMessage`
      const payload = {
        chat_id: recipient.telegramChatId || channel.config.chatId,
        text: `${notification.title}\n\n${notification.message}`,
        reply_markup: actions ? { inline_keyboard: actions } : undefined,
        parse_mode: 'HTML'
      }

      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(`Telegram API error: ${result.description}`)
      }

      return {
        success: true,
        channel: 'telegram',
        recipientId: recipient.id,
        messageId: result.result.message_id.toString(),
        sentAt: new Date()
      }
    } catch (error) {
      return {
        success: false,
        channel: 'telegram',
        recipientId: recipient.id,
        error: String(error),
        sentAt: new Date()
      }
    }
  }

  /**
   * üîî –û–¢–ü–†–ê–í–ö–ê PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
   */
  private async sendPushNotification(
    recipient: NotificationRecipient,
    notification: NotificationPayload
  ): Promise<NotificationResult> {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ push subscription –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ recipient.id
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      const subscription = {
        endpoint: 'https://fcm.googleapis.com/fcm/send/mock',
        keys: {
          p256dh: 'mock-p256dh-key',
          auth: 'mock-auth-key'
        }
      }

      const pushPayload = {
        title: notification.title,
        body: notification.message,
        icon: '/favicon-192x192.png',
        tag: `project_${notification.projectId}`,
        data: notification.data,
        requireInteraction: notification.priority === 'critical'
      }

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–ø–æ–∫–∞ web-push –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
      console.log('üì± Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å–∏–º—É–ª—è—Ü–∏—è):', {
        recipient: recipient.name,
        title: pushPayload.title,
        body: pushPayload.body
      })

      return {
        success: true,
        channel: 'push',
        recipientId: recipient.id,
        messageId: `push_${Date.now()}`,
        sentAt: new Date()
      }

    } catch (error) {
      return {
        success: false,
        channel: 'push',
        recipientId: recipient.id,
        error: String(error),
        sentAt: new Date()
      }
    }
  }

  /**
   * üí¨ –û–¢–ü–†–ê–í–ö–ê SMS
   */
  private async sendSMSNotification(
    recipient: NotificationRecipient,
    notification: NotificationPayload
  ): Promise<NotificationResult> {
    try {
      if (!recipient.phone) {
        throw new Error('Recipient phone number not provided')
      }

      const smsService = SMSService.getInstance()
      
      if (!smsService.isEnabled()) {
        throw new Error('SMS service not configured')
      }

      // –°–æ–∑–¥–∞–µ–º SMS —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      const smsMessage = smsService.createProjectSMS(
        notification.projectId || '',
        notification.data?.newStatus || '',
        notification.data,
        recipient.role
      )

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
      const result = await smsService.sendSMS(recipient.phone, smsMessage)

      if (result.success) {
        console.log('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
          phone: recipient.phone,
          smsId: result.sms_id,
          balance: result.balance
        })

        return {
          success: true,
          channel: 'sms',
          recipientId: recipient.id,
          messageId: result.sms_id,
          sentAt: new Date()
        }
      } else {
        throw new Error(result.error || 'SMS sending failed')
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error)
      return {
        success: false,
        channel: 'sms',
        recipientId: recipient.id,
        error: String(error),
        sentAt: new Date()
      }
    }
  }

  /**
   * üéÆ –ì–ï–ù–ï–†–ê–¶–ò–Ø TELEGRAM –ö–ù–û–ü–û–ö
   */
  private getTelegramActions(notification: NotificationPayload): any[] | null {
    if (!notification.projectId) return null

    switch (notification.data?.newStatus) {
      case 'waiting_approval':
        return [
          [
            { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: `approve_project_${notification.projectId}` },
            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: `reject_project_${notification.projectId}` }
          ],
          [
            { text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç', url: `${process.env.NEXT_PUBLIC_BASE_URL}/dashboard/project/${notification.projectId}` }
          ]
        ]
      
      case 'receipt_rejected':
        return [
          [
            { text: 'üìã –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç', url: `${process.env.NEXT_PUBLIC_BASE_URL}/dashboard/project/${notification.projectId}` }
          ]
        ]

      default:
        return [
          [
            { text: 'üìã –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç', url: `${process.env.NEXT_PUBLIC_BASE_URL}/dashboard/project/${notification.projectId}` }
          ]
        ]
    }
  }

  /**
   * ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ö–ê–ù–ê–õ–û–í
   */
  getAvailableChannels(): NotificationType[] {
    return Array.from(this.channels.entries())
      .filter(([_, channel]) => channel.enabled)
      .map(([type, _]) => type)
  }

  /**
   * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
   */
  async getNotificationStats(projectId?: string): Promise<{
    total: number
    successful: number
    failed: number
    byChannel: Record<NotificationType, number>
  }> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
    return {
      total: 0,
      successful: 0,
      failed: 0,
      byChannel: {
        telegram: 0,
        push: 0,
        sms: 0,
        email: 0
      }
    }
  }
} 