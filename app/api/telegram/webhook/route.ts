import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { ManagerBotService } from '@/lib/telegram/ManagerBotService';
import { changeProjectStatus } from '@/lib/supabaseProjectStatus';
import { ProjectStatus } from '@/lib/types/project-status';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(request: NextRequest) {
  try {
    console.log("üéØ [WEBHOOK] –ü–æ–ª—É—á–µ–Ω callback –æ—Ç Telegram");
    
    const body = await request.json();
    console.log("üìã [WEBHOOK] –î–∞–Ω–Ω—ã–µ:", JSON.stringify(body, null, 2));

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
    if (body.message?.photo || body.message?.document) {
      console.log("üìÅ [WEBHOOK] –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª");
      const message = body.message;
      const replyToMessage = message.reply_to_message;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞
      if (replyToMessage && replyToMessage.text?.includes("–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")) {
        console.log("‚úÖ [WEBHOOK] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞");
        
        const projectIdMatch = replyToMessage.text.match(/–ø—Ä–æ–µ–∫—Ç–∞ ([a-f0-9-]+)/);
        
        if (projectIdMatch) {
          const projectId = projectIdMatch[1];
          console.log("üéØ [WEBHOOK] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:", projectId);
          
          try {
            let fileId = "";
            let fileName = "receipt";
            
            if (message.photo) {
              const photo = message.photo[message.photo.length - 1];
              fileId = photo.file_id;
              fileName = "receipt.jpg";
            } else if (message.document) {
              fileId = message.document.file_id;
              fileName = message.document.file_name || "receipt";
            }
            
            console.log("üìÑ [WEBHOOK] –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª:", { fileId, fileName });
            
            // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –æ—Ç Telegram
            const botToken = process.env.TELEGRAM_BOT_TOKEN;
            const fileResponse = await fetch(`https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`);
            const fileData = await fileResponse.json();
            
            if (fileData.ok) {
              const fileUrl = `https://api.telegram.org/file/bot${botToken}/${fileData.result.file_path}`;
              console.log("üîó [WEBHOOK] URL —Ñ–∞–π–ª–∞ –æ—Ç Telegram:", fileUrl);
              
              // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase
              const fileDownloadResponse = await fetch(fileUrl);
              const fileBuffer = await fileDownloadResponse.arrayBuffer();
              const fileExtension = fileName.split('.').pop() || 'jpg';
              const supabaseFileName = `manager-receipt-${projectId}-${Date.now()}.${fileExtension}`;
              
              console.log("üìÅ [WEBHOOK] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage:", supabaseFileName);
              
              const { data: uploadData, error: uploadError } = await supabase.storage
                .from("step6-client-receipts")
                .upload(supabaseFileName, fileBuffer, {
                  contentType: message.document?.mime_type || 'image/jpeg',
                  upsert: false
                });
                
              if (uploadError) {
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Storage: " + uploadError.message);
              }
              
              // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
              const { data: urlData } = supabase.storage
                .from("step6-client-receipts")
                .getPublicUrl(supabaseFileName);
                
              const supabaseFileUrl = urlData.publicUrl;
              console.log("‚úÖ [WEBHOOK] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase:", supabaseFileUrl);
              
              // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
              const { data: currentProject, error: fetchError } = await supabase
                .from("projects")
                .select("receipts, status")
                .eq("id", projectId)
                .single();

              if (fetchError) {
                throw new Error("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
              }

              const receiptsData = {
                client_receipt: currentProject.receipts,
                manager_receipt: supabaseFileUrl,
                manager_uploaded_at: new Date().toISOString(),
                manager_file_name: supabaseFileName
              };

              // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–º–µ–Ω–æ–π —Å—Ç–∞—Ç—É—Å–∞
              await changeProjectStatus({
                projectId,
                newStatus: "in_work",
                changedBy: "telegram_bot",
                comment: "–ß–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω",
                extraFields: {
                  receipts: JSON.stringify(receiptsData),
                  updated_at: new Date().toISOString()
                }
              });

              console.log("‚úÖ [WEBHOOK] –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å —á–µ–∫–æ–º –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞");

              const managerBot = new ManagerBotService();
              await managerBot.sendMessage(
                `‚úÖ –ß–µ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.\nüìÅ –§–∞–π–ª: ${supabaseFileName}`
              );
              
              return NextResponse.json({ 
                ok: true, 
                message: `Receipt uploaded for project ${projectId}`,
                file_url: supabaseFileUrl
              });
              
            } else {
              throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –æ—Ç Telegram");
            }
          } catch (error: any) {
            console.error("‚ùå [WEBHOOK] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", error);
            
            const managerBot = new ManagerBotService();
            await managerBot.sendMessage(
              `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}: ${error.message}`
            );
            
            return NextResponse.json({ ok: false, error: error.message });
          }
        } else {
          console.log("‚ùå [WEBHOOK] Project ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
        }
      } else {
        console.log("‚ùå [WEBHOOK] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞");
      }
      
      return NextResponse.json({ ok: true, message: "File processed" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback_query
    if (!body.callback_query) {
      console.log("‚ÑπÔ∏è [WEBHOOK] –ù–µ callback query, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
      return NextResponse.json({ ok: true });
    }

    const callbackQuery = body.callback_query;
    const callbackData = callbackQuery.data;
    const callbackQueryId = callbackQuery.id;
    
    console.log("üîç [WEBHOOK] Callback data:", callbackData);
    
    const managerBot = new ManagerBotService();

    if (callbackData.startsWith('approve_')) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ projectId –∏–∑ callback_data
      let projectId: string;
      if (callbackData.includes('_')) {
        // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ approve_receipt_uuid –∏–ª–∏ approve_uuid
        const parts = callbackData.split('_');
        if (parts.length >= 3) {
          // approve_receipt_uuid -> –±–µ—Ä–µ–º uuid
          projectId = parts.slice(2).join('_');
        } else {
          // approve_uuid -> –±–µ—Ä–µ–º uuid  
          projectId = parts[1];
        }
      } else {
        // Fallback - —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ approve_
        projectId = callbackData.replace(/^approve_/, '');
      }
      console.log("‚úÖ [WEBHOOK] –û–î–û–ë–†–ï–ù–ò–ï –ø—Ä–æ–µ–∫—Ç–∞:", projectId);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
      let newStatus: ProjectStatus;
      let responseMessage: string;
      
      if (callbackData.includes('receipt')) {
        console.log("üìÑ [WEBHOOK] –û–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ–∫–∞");
        newStatus = 'receipt_approved';
        responseMessage = `‚úÖ –ß–µ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –æ–¥–æ–±—Ä–µ–Ω!`;
      } else if (callbackData.includes('invoice')) {
        console.log("üßæ [WEBHOOK] –û–¥–æ–±—Ä–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞");
        newStatus = 'in_work';
        responseMessage = `‚úÖ –ò–Ω–≤–æ–π—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –æ–¥–æ–±—Ä–µ–Ω!`;
      } else {
        console.log("üìã [WEBHOOK] –û–±—â–µ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞");
        newStatus = 'waiting_receipt';
        responseMessage = `‚úÖ –ü—Ä–æ–µ–∫—Ç ${projectId} –æ–¥–æ–±—Ä–µ–Ω! –ü–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥`;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
      try {
        const result = await changeProjectStatus({
          projectId,
          newStatus,
          changedBy: 'telegram_bot',
          comment: '–û–¥–æ–±—Ä–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram'
        });
        
        console.log(`‚úÖ [WEBHOOK] –ü—Ä–æ–µ–∫—Ç ${projectId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å ${newStatus}, —à–∞–≥ ${result.step}`);
        
        await managerBot.answerCallbackQuery(
          callbackQueryId,
          responseMessage
        );
      } catch (error: any) {
        console.error("‚ùå [WEBHOOK] –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞:", error);
        await managerBot.answerCallbackQuery(
          callbackQueryId,
          `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`
        );
      }
      
    } else if (callbackData.startsWith('reject_')) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ projectId –∏–∑ callback_data
      let projectId: string;
      if (callbackData.includes('_')) {
        // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ reject_receipt_uuid –∏–ª–∏ reject_uuid
        const parts = callbackData.split('_');
        if (parts.length >= 3) {
          // reject_receipt_uuid -> –±–µ—Ä–µ–º uuid
          projectId = parts.slice(2).join('_');
        } else {
          // reject_uuid -> –±–µ—Ä–µ–º uuid  
          projectId = parts[1];
        }
      } else {
        // Fallback - —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ reject_
        projectId = callbackData.replace(/^reject_/, '');
      }
      console.log("‚ùå [WEBHOOK] –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ø—Ä–æ–µ–∫—Ç–∞:", projectId);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      let newStatus: ProjectStatus;
      let responseMessage: string;
      
      if (callbackData.includes('receipt')) {
        console.log("üìÑ [WEBHOOK] –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ–∫–∞");
        newStatus = 'receipt_rejected';
        responseMessage = `‚ùå –ß–µ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`;
      } else if (callbackData.includes('invoice')) {
        console.log("üßæ [WEBHOOK] –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞");
        newStatus = 'waiting_manager_receipt';
        responseMessage = `‚ùå –ò–Ω–≤–æ–π—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`;
      } else {
        console.log("üìã [WEBHOOK] –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞");
        newStatus = 'receipt_rejected';
        responseMessage = `‚ùå –ü—Ä–æ–µ–∫—Ç ${projectId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
      try {
        const result = await changeProjectStatus({
          projectId,
          newStatus,
          changedBy: 'telegram_bot',
          comment: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram'
        });
        
        console.log(`‚ùå [WEBHOOK] –ü—Ä–æ–µ–∫—Ç ${projectId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å ${newStatus}, —à–∞–≥ ${result.step}`);
        
        await managerBot.answerCallbackQuery(
          callbackQueryId,
          responseMessage
        );
      } catch (error: any) {
        console.error("‚ùå [WEBHOOK] –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:", error);
        await managerBot.answerCallbackQuery(
          callbackQueryId,
          `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`
        );
      }
    } else if (callbackData.startsWith('upload_supplier_receipt_')) {
      const projectId = callbackData.replace('upload_supplier_receipt_', '');
      console.log("üì§ [WEBHOOK] –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:", projectId);
      
      try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await managerBot.answerCallbackQuery(
          callbackQueryId,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
          true
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        const text = `üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –§–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É.`;
        
        await managerBot.sendMessage(text);
        
        console.log("‚úÖ [WEBHOOK] –î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:", projectId);
      } catch (error: any) {
        console.error("‚ùå [WEBHOOK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        await managerBot.answerCallbackQuery(
          callbackQueryId,
          `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
        );
      }
    } else {
      console.log("‚ùì [WEBHOOK] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:", callbackData);
      await managerBot.answerCallbackQuery(
        callbackQueryId,
        "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"
      );
    }

    console.log("‚úÖ [WEBHOOK] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error("üí• [WEBHOOK] –û–®–ò–ë–ö–ê:", error);
    return NextResponse.json(
      { error: "Webhook processing failed" },
      { status: 500 }
    );
  }
}