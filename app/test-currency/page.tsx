'use client';

import { useState, useEffect } from 'react';

interface CurrencyRate {
  code: string;
  name: string;
  value: number;
  nominal: number;
  previous?: number;
  trend?: 'up' | 'down' | 'stable';
}

interface CurrencyRatesResponse {
  date: string;
  rates: Record<string, CurrencyRate>;
  source: 'cbr' | 'cache' | 'fallback';
  updated_at: string;
}

export default function TestCurrencyPage() {
  const [rates, setRates] = useState<CurrencyRatesResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [aiResponse, setAiResponse] = useState<string>('');
  const [conversionResult, setConversionResult] = useState<any>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
  const fetchRates = async (forceRefresh = false) => {
    setLoading(true);
    try {
      const url = `/api/currency/rates${forceRefresh ? '?refresh=true' : ''}`;
      const response = await fetch(url);
      const data = await response.json();
      setRates(data);
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã:', data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –¢–µ—Å—Ç AI –æ—Ç–≤–µ—Ç–∞ —Å –∫—É—Ä—Å–∞–º–∏
  const testAIResponse = async () => {
    try {
      const response = await fetch('/api/chat/ai-response', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: '–∫–∞–∫–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç?',
          context: 'general'
        })
      });
      
      const data = await response.json();
      setAiResponse(data.content || JSON.stringify(data, null, 2));
      console.log('ü§ñ AI –æ—Ç–≤–µ—Ç:', data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI –æ—Ç–≤–µ—Ç–∞:', error);
      setAiResponse('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –æ—Ç–≤–µ—Ç–∞');
    }
  };

  // –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
  const testConversion = async () => {
    try {
      const response = await fetch('/api/currency/rates', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          amount: 1000,
          from: 'USD',
          to: 'RUB'
        })
      });
      
      const data = await response.json();
      setConversionResult(data.conversion);
      console.log('üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:', data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchRates();
  }, []);

  const getTrendIcon = (trend?: string) => {
    switch (trend) {
      case 'up': return '‚ñ≤';
      case 'down': return '‚ñº';
      default: return '‚Üí';
    }
  };

  const getTrendColor = (trend?: string) => {
    switch (trend) {
      case 'up': return 'text-green-600';
      case 'down': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-6xl mx-auto space-y-8">
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            üí± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–≥–æ API
          </h1>
          <p className="text-gray-600">
            –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¶–ë –†–§ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Get2B
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex justify-center gap-4">
          <button
            onClick={() => fetchRates(false)}
            disabled={loading}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üìä –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã'}
          </button>
          
          <button
            onClick={() => fetchRates(true)}
            disabled={loading}
            className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50"
          >
            üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          </button>

          <button
            onClick={testAIResponse}
            className="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
          >
            ü§ñ –¢–µ—Å—Ç AI –æ—Ç–≤–µ—Ç–∞
          </button>

          <button
            onClick={testConversion}
            className="px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700"
          >
            üí± –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
          </button>
        </div>

        {/* –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç */}
        {rates && (
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-900">
                üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
              </h2>
              <div className="text-right">
                <div className="text-sm text-gray-500">–ò—Å—Ç–æ—á–Ω–∏–∫: {rates.source}</div>
                <div className="text-sm text-gray-500">–î–∞—Ç–∞: {rates.date}</div>
                <div className="text-sm text-gray-500">
                  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(rates.updated_at).toLocaleString('ru-RU')}
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {Object.entries(rates.rates).map(([code, rate]) => {
                const formattedRate = (rate.value / rate.nominal).toFixed(4);
                const currencyFlags: Record<string, string> = {
                  'USD': 'üá∫üá∏', 'EUR': 'üá™üá∫', 'CNY': 'üá®üá≥', 'TRY': 'üáπüá∑', 'AED': 'üá¶üá™'
                };
                
                return (
                  <div key={code} className="bg-gray-50 rounded-lg p-4 border">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <span className="text-2xl">{currencyFlags[code] || 'üí±'}</span>
                        <div>
                          <div className="font-bold text-lg">{code}</div>
                          <div className="text-sm text-gray-600 truncate">
                            {rate.name}
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-mono text-lg font-bold">
                          {formattedRate} ‚ÇΩ
                        </div>
                        <div className={`text-sm ${getTrendColor(rate.trend)}`}>
                          {getTrendIcon(rate.trend)} 
                          {rate.previous ? 
                            ((rate.value / rate.nominal - rate.previous / rate.nominal) * 100).toFixed(2) + '%'
                            : 'N/A'
                          }
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* AI –û—Ç–≤–µ—Ç */}
        {aiResponse && (
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              ü§ñ AI –û—Ç–≤–µ—Ç —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
            </h2>
            <div className="bg-gray-50 rounded-lg p-4">
              <pre className="whitespace-pre-wrap text-sm">{aiResponse}</pre>
            </div>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ */}
        {conversionResult && (
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              üí± –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            </h2>
            <div className="bg-green-50 rounded-lg p-4 border border-green-200">
              <div className="text-lg">
                <strong>1000 USD</strong> = <strong className="text-green-600">
                  {conversionResult.amount?.toLocaleString('ru-RU')} ‚ÇΩ
                </strong>
              </div>
              <div className="text-sm text-gray-600 mt-2">
                –ö—É—Ä—Å: 1 USD = {conversionResult.rate?.toFixed(4)} ‚ÇΩ
              </div>
            </div>
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
              <div className="text-blue-600 font-bold">–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö</div>
              <div className="text-lg">cbr-xml-daily.ru</div>
              <div className="text-sm text-gray-600">+ fallback –¶–ë –†–§</div>
            </div>
            <div className="bg-green-50 rounded-lg p-4 border border-green-200">
              <div className="text-green-600 font-bold">–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ</div>
              <div className="text-lg">1 —á–∞—Å</div>
              <div className="text-sm text-gray-600">—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º</div>
            </div>
            <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
              <div className="text-purple-600 font-bold">–í–∞–ª—é—Ç—ã Get2B</div>
              <div className="text-lg">5 –≤–∞–ª—é—Ç</div>
              <div className="text-sm text-gray-600">USD, EUR, CNY, TRY, AED</div>
            </div>
          </div>
        </div>

      </div>
    </div>
  );
} 