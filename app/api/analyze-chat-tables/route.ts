import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function GET(request: NextRequest) {
  try {
    console.log("üîç [API] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —á–∞—Ç–∞...");

    const analysis: any = {
      allTables: [],
      chatTables: [],
      messageTables: [],
      roomTables: [],
      oldTables: [],
      foreignKeys: [],
      indexes: [],
      data: {},
      summary: {}
    };

    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    try {
      const { data: allTables, error } = await supabase
        .from('information_schema.tables')
        .select('table_name, table_type')
        .eq('table_schema', 'public')
        .eq('table_type', 'BASE TABLE')
        .order('table_name');

      if (!error && allTables) {
        analysis.allTables = allTables.map((table: any) => table.table_name);
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Supabase API");
    }

    // 2. –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —Å "chat" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const chatRelatedTables = analysis.allTables.filter((name: string) => 
      name.toLowerCase().includes('chat')
    );
    analysis.chatTables = chatRelatedTables;

    // 3. –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —Å "message" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const messageRelatedTables = analysis.allTables.filter((name: string) => 
      name.toLowerCase().includes('message')
    );
    analysis.messageTables = messageRelatedTables;

    // 4. –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —Å "room" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const roomRelatedTables = analysis.allTables.filter((name: string) => 
      name.toLowerCase().includes('room')
    );
    analysis.roomTables = roomRelatedTables;

    // 5. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
    const oldTableKeywords = ['old', 'temp', 'backup', 'archive', 'legacy', 'deprecated'];
    const oldTables = analysis.allTables.filter((name: string) => 
      oldTableKeywords.some(keyword => name.toLowerCase().includes(keyword))
    );
    analysis.oldTables = oldTables;

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö —á–∞—Ç–∞
    const knownChatTables = ['chat_rooms', 'chat_messages'];
    
    for (const tableName of knownChatTables) {
      try {
        const { count, error } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });

        if (!error) {
          analysis.data[tableName] = count;
        } else {
          analysis.data[tableName] = 'TABLE_NOT_EXISTS';
        }
      } catch (err) {
        analysis.data[tableName] = 'TABLE_NOT_EXISTS';
      }
    }

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã chat_rooms
    try {
      const { data: roomSample, error } = await supabase
        .from('chat_rooms')
        .select('*')
        .limit(1);

      if (!error && roomSample && roomSample.length > 0) {
        analysis.structures = analysis.structures || {};
        analysis.structures.chat_rooms = Object.keys(roomSample[0]);
      }
    } catch (err) {
      analysis.structures = analysis.structures || {};
      analysis.structures.chat_rooms = 'ERROR';
    }

    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã chat_messages
    try {
      const { data: messageSample, error } = await supabase
        .from('chat_messages')
        .select('*')
        .limit(1);

      if (!error && messageSample && messageSample.length > 0) {
        analysis.structures = analysis.structures || {};
        analysis.structures.chat_messages = Object.keys(messageSample[0]);
      }
    } catch (err) {
      analysis.structures = analysis.structures || {};
      analysis.structures.chat_messages = 'ERROR';
    }

    // 9. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    const allChatRelated = [
      ...chatRelatedTables,
      ...messageRelatedTables,
      ...roomRelatedTables
    ];
    
    const duplicates = allChatRelated.filter((table: string, index: number) => 
      allChatRelated.indexOf(table) !== index
    );
    
    analysis.duplicates = duplicates;

    // 10. –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    analysis.summary = {
      totalTables: analysis.allTables.length,
      chatRelatedTables: chatRelatedTables.length,
      messageRelatedTables: messageRelatedTables.length,
      roomRelatedTables: roomRelatedTables.length,
      oldTables: oldTables.length,
      duplicates: duplicates.length,
      activeChatTables: Object.keys(analysis.data).filter(key => 
        analysis.data[key] !== 'TABLE_NOT_EXISTS'
      ).length,
      analysisDate: new Date().toISOString()
    };

    console.log("‚úÖ [API] –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω");
    console.log("üìä [API] –°–≤–æ–¥–∫–∞:", analysis.summary);

    return NextResponse.json({
      success: true,
      analysis,
      message: "–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü —á–∞—Ç–∞:", error);
    return NextResponse.json({ 
      error: "Internal server error",
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 