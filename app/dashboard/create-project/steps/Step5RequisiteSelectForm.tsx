import React, { useEffect, useState, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Plus, Trash2 } from "lucide-react";
import { useCreateProjectContext } from "../context/CreateProjectContext";
import { supabase } from "@/lib/supabaseClient";
import { sendTelegramMessageClient } from '@/lib/telegram-client';
import { useProjectSupabase } from "../hooks/useProjectSupabase";
import { useProjectSpecification } from '../hooks/useProjectSpecification';
import { changeProjectStatus } from "@/lib/supabaseProjectStatus";
import { ProjectStatus } from "@/lib/types/project-status";
import { toast } from "@/components/ui/use-toast";

const requisiteTypeMap = {
  "bank-transfer": { table: "bank_accounts", type: "bank", label: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç" },
  "p2p": { table: "supplier_cards", type: "p2p", label: "–ö–∞—Ä—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞" },
  "crypto": { table: "crypto_wallets", type: "crypto", label: "–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫" },
};

const countryOptions = [
  { id: "china", label: "–ö–∏—Ç–∞–π", flag: "üá®üá≥" },
  { id: "turkey", label: "–¢—É—Ä—Ü–∏—è", flag: "üáπüá∑" },
  { id: "other", label: "–î—Ä—É–≥–∞—è", flag: "üåç" },
];

// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è Telegram ---
function formatRequisiteForTelegram(requisite: any): string {
  const keyLabels: Record<string, string> = {
    name: '–ù–∞–∑–≤–∞–Ω–∏–µ',
    country: '–°—Ç—Ä–∞–Ω–∞',
    recipientName: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å',
    recipientAddress: '–Æ—Ä. –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
    bankName: '–ë–∞–Ω–∫',
    bankAddress: '–ê–¥—Ä–µ—Å –±–∞–Ω–∫–∞',
    cnapsCode: 'CNAPS –∫–æ–¥',
    iban: 'IBAN',
    swift: 'SWIFT/BIC',
    accountNumber: '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞',
    transferCurrency: '–í–∞–ª—é—Ç–∞',
    paymentPurpose: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞',
    otherDetails: '–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    card_number: '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
    holder_name: '–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã',
    expiry_date: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è',
    address: '–ê–¥—Ä–µ—Å',
    network: '–°–µ—Ç—å',
  };
  const details = requisite.details || requisite;
  let text = '';
  for (const [key, value] of Object.entries(details)) {
    if (["id", "user_id", "created_at", "project_id"].includes(key)) continue;
    if (value) text += `\n${keyLabels[key] || key}: ${value}`;
  }
  return text.trim();
}

export default function Step5RequisiteSelectForm() {
  const { projectId, paymentMethod, setCurrentStep, maxStepReached, setMaxStepReached, projectName, companyData, specificationItems, setSpecificationItems, supplierData } = useCreateProjectContext();
  
  // üîç –í–°–ï–ì–î–ê –õ–û–ì–ò–†–£–ï–ú –ü–†–ò –ö–ê–ñ–î–û–ú –†–ï–ù–î–ï–†–ï
  console.log("üö® [Step5] COMPONENT RENDER - –í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:");
  console.log("  projectId:", projectId);
  console.log("  paymentMethod:", paymentMethod);
  console.log("  supplierData:", supplierData);
  console.log("  supplierData type:", typeof supplierData);
  console.log("  supplierData keys:", supplierData ? Object.keys(supplierData) : "NO SUPPLIER DATA");
  if (supplierData?.crypto_wallets) {
    console.log("  ü™ô CRYPTO WALLETS FOUND:", supplierData.crypto_wallets);
  } else {
    console.log("  ‚ùå NO CRYPTO WALLETS IN SUPPLIER DATA");
  }
  const [requisites, setRequisites] = useState<any[]>([]);
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [addForm, setAddForm] = useState<any>({ country: "china" });
  const [addError, setAddError] = useState<string | null>(null);
  const [saveAsTemplate, setSaveAsTemplate] = useState(false);
  const [saveToBook, setSaveToBook] = useState(true);
  const { saveSpecification, updateStep, loadSpecification } = useProjectSupabase();
  const { items: specItems, fetchSpecification } = useProjectSpecification(projectId, 'client');
  const [debugLog, setDebugLog] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [initializing, setInitializing] = useState(true);

  const requisiteMeta = requisiteTypeMap[paymentMethod as keyof typeof requisiteTypeMap];

  // üéØ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
  const supplierRequisites = useMemo(() => {
    console.log("[Step5] üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –†–ï–ö–í–ò–ó–ò–¢–û–í –ü–û–°–¢–ê–í–©–ò–ö–ê");
    console.log("[Step5] supplierData:", supplierData);
    console.log("[Step5] paymentMethod:", paymentMethod);
    
    if (!supplierData) {
      console.log("[Step5] ‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –ü–û–°–¢–ê–í–©–ò–ö–ê");
      return [];
    }
    
    if (!paymentMethod) {
      console.log("[Step5] ‚ùå –ù–ï–¢ –í–´–ë–†–ê–ù–ù–û–ì–û –ú–ï–¢–û–î–ê –û–ü–õ–ê–¢–´");
      return [];
    }
    
    let result = [];
    switch (paymentMethod) {
      case 'bank-transfer':
        result = supplierData.bank_accounts || [];
        console.log("[Step5] üè¶ –ë–ê–ù–ö–û–í–°–ö–ò–ï –°–ß–ï–¢–ê –ü–û–°–¢–ê–í–©–ò–ö–ê:", result);
        break;
      case 'p2p':
        result = supplierData.p2p_cards || [];
        console.log("[Step5] üí≥ P2P –ö–ê–†–¢–´ –ü–û–°–¢–ê–í–©–ò–ö–ê:", result);
        break;
      case 'crypto':
        result = supplierData.crypto_wallets || [];
        console.log("[Step5] ü™ô –ö–†–ò–ü–¢–û–ö–û–®–ï–õ–¨–ö–ò –ü–û–°–¢–ê–í–©–ò–ö–ê:", result);
        break;
      default:
        console.log("[Step5] ‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –ú–ï–¢–û–î –û–ü–õ–ê–¢–´:", paymentMethod);
        result = [];
    }
    
    console.log("[Step5] ‚úÖ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–í–ò–ó–ò–¢–´ –ü–û–°–¢–ê–í–©–ò–ö–ê:", result);
    return result;
  }, [supplierData, paymentMethod]);

  useEffect(() => {
    if (!requisiteMeta || !projectId) return;
    setLoading(true);
    async function fetchRequisites() {
      const { data: userData } = await supabase.auth.getUser();
      const userId = userData?.user?.id;
      if (!userId) {
        setRequisites([]);
        setLoading(false);
        return;
      }
      const { data, error } = await supabase
        .from(requisiteMeta.table)
        .select("*")
        .eq("user_id", userId);
      if (error) setRequisites([]);
      else setRequisites(data || []);
      setLoading(false);
    }
    fetchRequisites();
  }, [paymentMethod, projectId, showAddForm]);

  useEffect(() => {
    if (!projectId) return;
    async function fetchSpecById() {
      // –ü–æ–ª—É—á–∞–µ–º specification_id –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
      const { data: projectData, error: projectError } = await supabase
        .from('projects')
        .select('specification_id')
        .eq('id', projectId)
        .single();
      const specId = projectData?.specification_id;
      if (specId) {
        // –ì—Ä—É–∑–∏–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ id
        const { data: specData, error: specError } = await supabase
          .from('project_specifications')
          .select('*')
          .eq('id', specId)
          .single();
        if (specData) {
          setSpecificationItems([specData]);
          return;
        }
      }
      // Fallback: –≥—Ä—É–∑–∏–º –ø–æ projectId/role (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
      fetchSpecification().then(() => {
        if (specItems && Array.isArray(specItems) && specItems.length > 0) {
          setSpecificationItems(specItems);
        }
      });
    }
    fetchSpecById();
  }, [projectId]);

  // üéØ –£–º–Ω–æ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–∫–≤–∏–∑–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  useEffect(() => {
    if (supplierRequisites.length === 1 && !selectedId) {
      console.log("[Step5] –ê–≤—Ç–æ–≤—ã–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", supplierRequisites[0]);
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      const supplierId = `supplier_${paymentMethod}_0`;
      setSelectedId(supplierId);
    }
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (initializing) {
      setInitializing(false);
    }
  }, [supplierRequisites, selectedId, paymentMethod, initializing]);

  const handleSave = async () => {
    if (!projectId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        variant: "destructive",
      });
      return;
    }

    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 6 —à–∞–≥...");
    setIsLoading(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData } = await supabase.auth.getUser();
      if (!userData?.user) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
          variant: "destructive",
        });
        return;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const totalAmount = specificationItems.reduce((sum, item) => sum + (item.total || item.totalPrice || 0), 0);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç (–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)
      let selectedRequisite = requisites.find(r => r.id === selectedId);
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ selectedId —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º startsWith
      const selectedIdString = typeof selectedId === 'string' ? selectedId : String(selectedId || '');
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö, –∏—â–µ–º —Å—Ä–µ–¥–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      if (!selectedRequisite && selectedIdString.startsWith('supplier_')) {
        const supplierIndex = parseInt(selectedIdString.split('_')[2]);
        selectedRequisite = supplierRequisites[supplierIndex];
        console.log("[Step5] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", selectedRequisite);
      }
      
      if (!selectedRequisite) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
          variant: "destructive",
        });
        return;
      }
      
      console.log("üíæ [STEP5] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç:", { 
        selectedId, 
        selectedRequisite, 
        paymentMethod,
        requisiteMeta,
        userId: userData.user.id
      });
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
      const cleanRequisiteData = selectedIdString.startsWith('supplier_') ? 
        // –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–ø—Ä—è–º—É—é
        {
          ...selectedRequisite,
          source: 'supplier' // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        } :
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        {
          name: selectedRequisite.name,
          country: selectedRequisite.country,
          details: selectedRequisite.details,
          // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–æ–ª—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API —ç—Ö–æ –∫–∞—Ä—Ç–æ—á–µ–∫)
          recipientName: selectedRequisite.details?.recipientName || selectedRequisite.recipientName,
          bankName: selectedRequisite.details?.bankName || selectedRequisite.bankName,
          accountNumber: selectedRequisite.details?.accountNumber || selectedRequisite.accountNumber,
          swift: selectedRequisite.details?.swift || selectedRequisite.swift,
          bankAddress: selectedRequisite.details?.bankAddress || selectedRequisite.bankAddress,
          recipientAddress: selectedRequisite.details?.recipientAddress || selectedRequisite.recipientAddress,
          cnapsCode: selectedRequisite.details?.cnapsCode || selectedRequisite.cnapsCode,
          // P2P –ø–æ–ª—è
          card_number: selectedRequisite.card_number,
          holder_name: selectedRequisite.holder_name,
          expiry_date: selectedRequisite.expiry_date,
          bank: selectedRequisite.bank,
          // Crypto –ø–æ–ª—è  
          address: selectedRequisite.address,
          network: selectedRequisite.network,
          source: 'user' // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        };

      console.log("‚úÖ [STEP5] –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", cleanRequisiteData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –≤ project_requisites
      const { error: requisiteError } = await supabase
        .from("project_requisites")
        .insert({
          user_id: userData.user.id,
          project_id: projectId,
          data: cleanRequisiteData,
          type: requisiteMeta.type
        });
        
      if (requisiteError) {
        console.error("‚ùå [STEP5] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", requisiteError);
        console.error("‚ùå [STEP5] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(requisiteError, null, 2));
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: " + (requisiteError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
          variant: "destructive",
        });
        return;
      }
      
      console.log("‚úÖ [STEP5] –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ project_requisites");
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É
      await saveSpecification({ 
        projectId, 
        currentStep: 5,
        paymentMethod: paymentMethod
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (totalAmount > 0) {
        console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –ë–î: ${totalAmount}`);
        await supabase
          .from("projects")
          .update({ amount: totalAmount })
          .eq("id", projectId);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      const { data: currentProject, error: fetchError } = await supabase
        .from("projects")
        .select("status")
        .eq("id", projectId)
        .single();
        
      if (fetchError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞:", fetchError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ —Å—Ç–∞—Ç—É—Å–µ
      }
      
      const currentStatus = currentProject?.status || "receipt_approved";
      console.log("üîÑ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:", currentStatus);
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–∞
      if (currentStatus === "receipt_approved") {
        console.log("üíæ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç receipt_approved –∫ filling_requisites");
        await changeProjectStatus({
          projectId,
          newStatus: "filling_requisites",
          changedBy: "client",
          comment: "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
        });
        
        // –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        console.log("üíæ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç filling_requisites –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      } else if (currentStatus === "filling_requisites") {
        console.log("üíæ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç filling_requisites –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      } else if (currentStatus === "waiting_manager_receipt") {
        console.log("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ waiting_manager_receipt, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞");
        // –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º
      } else {
        console.log("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      }

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ waiting_manager_receipt, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥ 6");

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
      setCurrentStep(6);
      if (6 > maxStepReached) setMaxStepReached(6);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
      console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(error, null, 2));
      console.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", typeof error);
      console.error("‚ùå –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—à–∏–±–∫–∏:", error?.constructor?.name);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: " + (error?.message || error?.toString() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ ---
  const handleAddBankRequisite = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!projectId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        variant: "destructive",
      });
      return;
    }

    console.log("üè¶ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...");
    setIsLoading(true);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData } = await supabase.auth.getUser();
      if (!userData?.user) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
          variant: "destructive",
        });
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
      if (!addForm.details?.recipientName || !addForm.details?.recipientAddress || !addForm.details?.bankName || !addForm.details?.accountNumber) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
          variant: "destructive",
        });
        return;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const totalAmount = specificationItems.reduce((sum, item) => sum + (item.total || item.totalPrice || 0), 0);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
      const requisiteData = {
        name: addForm.name,
        country: addForm.country,
        details: addForm.details
      };

      console.log("üíæ [STEP5] –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:", { 
        requisiteData, 
        projectId,
        paymentMethod: "bank-transfer",
        userId: userData.user.id
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç –≤ project_requisites
      const { error: requisiteError } = await supabase
        .from("project_requisites")
        .insert({
          user_id: userData.user.id,
          project_id: projectId,
          data: requisiteData,
          type: "bank"
        });
        
      if (requisiteError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", requisiteError);
        console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(requisiteError, null, 2));
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: " + (requisiteError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
          variant: "destructive",
        });
        return;
      }

      console.log("‚úÖ [STEP5] –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ project_requisites");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —à–∞–±–ª–æ–Ω—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
      if (saveAsTemplate) {
        await supabase
          .from("bank_accounts")
          .insert({
            user_id: userData.user.id,
            name: addForm.name,
            country: addForm.country,
            details: addForm.details
          });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      await saveSpecification({ 
        projectId, 
        currentStep: 5,
        paymentMethod: "bank-transfer"
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (totalAmount > 0) {
        console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –ë–î: ${totalAmount}`);
        await supabase
          .from("projects")
          .update({ amount: totalAmount })
          .eq("id", projectId);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      const { data: currentProject, error: fetchError } = await supabase
        .from("projects")
        .select("status")
        .eq("id", projectId)
        .single();
        
      if (fetchError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞:", fetchError);
      }
      
      const currentStatus = currentProject?.status || "receipt_approved";
      console.log("üîÑ [BANK] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:", currentStatus);
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
      if (currentStatus === "receipt_approved") {
        console.log("üíæ [BANK] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç receipt_approved –∫ filling_requisites");
        await changeProjectStatus({
          projectId,
          newStatus: "filling_requisites",
          changedBy: "client",
          comment: "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
        });
        
        console.log("üíæ [BANK] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç filling_requisites –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      } else if (currentStatus === "filling_requisites") {
        console.log("üíæ [BANK] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç filling_requisites –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      } else if (currentStatus === "waiting_manager_receipt") {
        console.log("‚ö†Ô∏è [BANK] –ü—Ä–æ–µ–∫—Ç —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ waiting_manager_receipt, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞");
      } else {
        console.log("‚ö†Ô∏è [BANK] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      }

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ waiting_manager_receipt, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥ 6");

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
      setCurrentStep(6);
      if (6 > maxStepReached) setMaxStepReached(6);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", error);
      console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(error, null, 2));
      console.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", typeof error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: " + (error?.message || error?.toString() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // --- –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ ---
  const handleDelete = async (id: string) => {
    await supabase.from("bank_accounts").delete().eq("id", id);
    setRequisites(requisites.filter((r) => r.id !== id));
    if (selectedId === id) setSelectedId(null);
  };

  // --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ ---
  const renderBankForm = () => {
    const country = addForm.country;
    return (
      <form onSubmit={handleAddBankRequisite} className="bg-white rounded-xl border p-6 mb-8 space-y-2">
        <h3 className="text-lg font-bold mb-3">–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞</h3>
        <div className="flex gap-4 mb-3">
          {countryOptions.map(opt => (
            <Button key={opt.id} type="button" variant={addForm.country === opt.id ? "default" : "outline"} onClick={() => setAddForm((f: any) => ({ ...f, country: opt.id }))}>
              <span className="text-2xl mr-2">{opt.flag}</span>{opt.label}
            </Button>
          ))}
        </div>
        <div className="space-y-1">
          <Label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</Label>
        <Input value={addForm.name || ""} onChange={e => setAddForm((f: any) => ({ ...f, name: e.target.value }))} required />
        </div>
        <div className="space-y-1">
          <Label className="text-sm font-medium">–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è</Label>
        <Input value={addForm.details?.recipientName || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, recipientName: e.target.value } }))} required />
        </div>
        <div className="space-y-1">
          <Label className="text-sm font-medium">–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è</Label>
        <Input value={addForm.details?.recipientAddress || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, recipientAddress: e.target.value } }))} required />
        </div>
        <div className="space-y-1">
          <Label className="text-sm font-medium">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞</Label>
        <Input value={addForm.details?.bankName || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, bankName: e.target.value } }))} required />
        </div>
        <div className="space-y-1">
          <Label className="text-sm font-medium">–ê–¥—Ä–µ—Å –±–∞–Ω–∫–∞</Label>
        <Input value={addForm.details?.bankAddress || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, bankAddress: e.target.value } }))} required />
        </div>
        {country === "china" && (
          <div className="space-y-1">
            <Label className="text-sm font-medium">CNAPS –∫–æ–¥</Label>
            <Input value={addForm.details?.cnapsCode || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, cnapsCode: e.target.value } }))} required />
          </div>
        )}
        {country === "turkey" && (
          <div className="space-y-1">
            <Label className="text-sm font-medium">IBAN</Label>
            <Input value={addForm.details?.iban || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, iban: e.target.value } }))} required />
          </div>
        )}
        {country === "other" && (
          <div className="space-y-1">
            <Label className="text-sm font-medium">SWIFT/BIC –∫–æ–¥</Label>
            <Input value={addForm.details?.swift || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, swift: e.target.value } }))} required />
          </div>
        )}
        <div className="space-y-1">
          <Label className="text-sm font-medium">–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞</Label>
        <Input value={addForm.details?.accountNumber || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, accountNumber: e.target.value } }))} required />
        </div>
        <div className="space-y-1">
          <Label className="text-sm font-medium">–í–∞–ª—é—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞</Label>
        <Input value={addForm.details?.transferCurrency || "USD"} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, transferCurrency: e.target.value } }))} required />
        </div>
        <div className="space-y-1">
          <Label className="text-sm font-medium">–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞</Label>
        <Input value={addForm.details?.paymentPurpose || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, paymentPurpose: e.target.value } }))} required />
        </div>
        <div className="space-y-1">
          <Label className="text-sm font-medium">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Label>
        <Input value={addForm.details?.otherDetails || ""} onChange={e => setAddForm((f: any) => ({ ...f, details: { ...f.details, otherDetails: e.target.value } }))} />
        </div>
        <div className="flex items-center gap-2 mt-3">
          <input type="checkbox" id="saveAsTemplate" checked={saveAsTemplate} onChange={e => setSaveAsTemplate(e.target.checked)} />
          <Label htmlFor="saveAsTemplate" className="text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω</Label>
        </div>
        {addError && <div className="text-red-500 text-sm">{addError}</div>}
        <div className="flex gap-4 mt-4">
          <Button type="button" variant="outline" onClick={() => setShowAddForm(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
        </div>
      </form>
    );
  };

  // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã (p2p) ---
  const handleAddCard = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!projectId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        variant: "destructive",
      });
      return;
    }

    console.log("üí≥ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...");
    setIsLoading(true);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData } = await supabase.auth.getUser();
      if (!userData?.user) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
          variant: "destructive",
        });
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
      if (!addForm.bank || !addForm.card_number || !addForm.holder_name || !addForm.expiry_date) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
          variant: "destructive",
        });
        return;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const totalAmount = specificationItems.reduce((sum, item) => sum + (item.total || item.totalPrice || 0), 0);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
      const requisiteData = {
        bank: addForm.bank,
        card_number: addForm.card_number,
        holder_name: addForm.holder_name,
        expiry_date: addForm.expiry_date
      };

      console.log("üíæ [STEP5] –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π P2P —Ä–µ–∫–≤–∏–∑–∏—Ç:", { 
        requisiteData, 
        projectId,
        paymentMethod: "p2p",
        userId: userData.user.id
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç –≤ project_requisites
      const { error: requisiteError } = await supabase
        .from("project_requisites")
        .insert({
          user_id: userData.user.id,
          project_id: projectId,
          data: requisiteData,
          type: "p2p"
        });
        
      if (requisiteError) {
        console.error("‚ùå [STEP5] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è P2P —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", requisiteError);
        console.error("‚ùå [STEP5] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(requisiteError, null, 2));
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: " + (requisiteError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
          variant: "destructive",
        });
        return;
      }

      console.log("‚úÖ [STEP5] P2P —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ project_requisites");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —à–∞–±–ª–æ–Ω—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
      if (saveToBook) {
        await supabase
          .from("supplier_cards")
          .insert({
            user_id: userData.user.id,
            bank: addForm.bank,
            card_number: addForm.card_number,
            holder_name: addForm.holder_name,
            expiry_date: addForm.expiry_date
          });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      await saveSpecification({ 
        projectId, 
        currentStep: 5,
        paymentMethod: "p2p"
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (totalAmount > 0) {
        console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –ë–î: ${totalAmount}`);
        await supabase
          .from("projects")
          .update({ amount: totalAmount })
          .eq("id", projectId);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      const { data: currentProject, error: fetchError } = await supabase
        .from("projects")
        .select("status")
        .eq("id", projectId)
        .single();
        
      if (fetchError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞:", fetchError);
      }
      
      const currentStatus = currentProject?.status || "receipt_approved";
      console.log("üîÑ [P2P] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:", currentStatus);
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è P2P —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
      if (currentStatus === "receipt_approved") {
        console.log("üíæ [P2P] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç receipt_approved –∫ filling_requisites");
        await changeProjectStatus({
          projectId,
          newStatus: "filling_requisites",
          changedBy: "client",
          comment: "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ P2P —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
        });
        
        console.log("üíæ [P2P] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç filling_requisites –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ö–∞—Ä—Ç–æ—á–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      } else if (currentStatus === "filling_requisites") {
        console.log("üíæ [P2P] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç filling_requisites –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ö–∞—Ä—Ç–æ—á–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      } else if (currentStatus === "waiting_manager_receipt") {
        console.log("‚ö†Ô∏è [P2P] –ü—Ä–æ–µ–∫—Ç —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ waiting_manager_receipt, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞");
      } else {
        console.log("‚ö†Ô∏è [P2P] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ö–∞—Ä—Ç–æ—á–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      }

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ waiting_manager_receipt, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥ 6");

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
      setCurrentStep(6);
      if (6 > maxStepReached) setMaxStepReached(6);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", error);
      console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(error, null, 2));
      console.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", typeof error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: " + (error?.message || error?.toString() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // --- –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (p2p) ---
  const renderCardForm = () => (
    <form onSubmit={handleAddCard} className="bg-white rounded-xl border p-6 mb-8 space-y-2">
      <h3 className="text-lg font-bold mb-3">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É</h3>
      <div className="space-y-1">
        <Label className="text-sm font-medium">–ë–∞–Ω–∫</Label>
      <Input value={addForm.bank || ""} onChange={e => setAddForm((f: any) => ({ ...f, bank: e.target.value }))} required />
      </div>
      <div className="space-y-1">
        <Label className="text-sm font-medium">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</Label>
      <Input value={addForm.card_number || ""} onChange={e => setAddForm((f: any) => ({ ...f, card_number: e.target.value }))} required />
      </div>
      <div className="space-y-1">
        <Label className="text-sm font-medium">–î–µ—Ä–∂–∞—Ç–µ–ª—å</Label>
      <Input value={addForm.holder_name || ""} onChange={e => setAddForm((f: any) => ({ ...f, holder_name: e.target.value }))} required />
      </div>
      <div className="space-y-1">
        <Label className="text-sm font-medium">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</Label>
      <Input value={addForm.expiry_date || ""} onChange={e => setAddForm((f: any) => ({ ...f, expiry_date: e.target.value }))} required />
      </div>
      <div className="flex items-center gap-2 mt-3">
        <input type="checkbox" id="saveToBookP2P" checked={saveToBook} onChange={e => setSaveToBook(e.target.checked)} />
        <Label htmlFor="saveToBookP2P" className="text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–ø–∏—Å–Ω—É—é –∫–Ω–∏–∂–∫—É</Label>
      </div>
      {addError && <div className="text-red-500 text-sm">{addError}</div>}
      <div className="flex gap-4 mt-4">
        <Button type="button" variant="outline" onClick={() => setShowAddForm(false)}>–û—Ç–º–µ–Ω–∞</Button>
        <Button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
      </div>
    </form>
  );

  // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (crypto) ---
  const handleAddWallet = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!projectId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        variant: "destructive",
      });
      return;
    }

    console.log("ü™ô –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...");
    setIsLoading(true);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData } = await supabase.auth.getUser();
      if (!userData?.user) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
          variant: "destructive",
        });
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
      if (!addForm.name || !addForm.address || !addForm.network) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
          variant: "destructive",
        });
        return;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const totalAmount = specificationItems.reduce((sum, item) => sum + (item.total || item.totalPrice || 0), 0);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
      const requisiteData = {
        name: addForm.name,
        address: addForm.address,
        network: addForm.network
      };

      console.log("üíæ [STEP5] –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:", { 
        requisiteData, 
        projectId,
        paymentMethod: "crypto",
        userId: userData.user.id
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç –≤ project_requisites
      const { error: requisiteError } = await supabase
        .from("project_requisites")
        .insert({
          user_id: userData.user.id,
          project_id: projectId,
          data: requisiteData,
          type: "crypto"
        });
        
      if (requisiteError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", requisiteError);
        console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(requisiteError, null, 2));
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: " + (requisiteError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
          variant: "destructive",
        });
        return;
      }

      console.log("‚úÖ [STEP5] –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ project_requisites");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —à–∞–±–ª–æ–Ω—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
      if (saveToBook) {
        await supabase
          .from("crypto_wallets")
          .insert({
            user_id: userData.user.id,
            name: addForm.name,
            address: addForm.address,
            network: addForm.network
          });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      await saveSpecification({ 
        projectId, 
        currentStep: 5,
        paymentMethod: "crypto"
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (totalAmount > 0) {
        console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –ë–î: ${totalAmount}`);
        await supabase
          .from("projects")
          .update({ amount: totalAmount })
          .eq("id", projectId);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      const { data: currentProject, error: fetchError } = await supabase
        .from("projects")
        .select("status")
        .eq("id", projectId)
        .single();
        
      if (fetchError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞:", fetchError);
      }
      
      const currentStatus = currentProject?.status || "receipt_approved";
      console.log("üîÑ [CRYPTO] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:", currentStatus);
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
      if (currentStatus === "receipt_approved") {
        console.log("üíæ [CRYPTO] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç receipt_approved –∫ filling_requisites");
        await changeProjectStatus({
          projectId,
          newStatus: "filling_requisites",
          changedBy: "client",
          comment: "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
        });
        
        console.log("üíæ [CRYPTO] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç filling_requisites –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      } else if (currentStatus === "filling_requisites") {
        console.log("üíæ [CRYPTO] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç filling_requisites –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      } else if (currentStatus === "waiting_manager_receipt") {
        console.log("‚ö†Ô∏è [CRYPTO] –ü—Ä–æ–µ–∫—Ç —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ waiting_manager_receipt, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞");
      } else {
        console.log("‚ö†Ô∏è [CRYPTO] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ waiting_manager_receipt");
        await changeProjectStatus({
          projectId,
          newStatus: "waiting_manager_receipt",
          changedBy: "client",
          comment: "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        });
      }

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ waiting_manager_receipt, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥ 6");

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
      setCurrentStep(6);
      if (6 > maxStepReached) setMaxStepReached(6);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", error);
      console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(error, null, 2));
      console.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", typeof error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: " + (error?.message || error?.toString() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // --- –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ (crypto) ---
  const renderWalletForm = () => (
    <form onSubmit={handleAddWallet} className="bg-white rounded-xl border p-6 mb-8 space-y-2">
      <h3 className="text-lg font-bold mb-3">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫</h3>
      <div className="space-y-1">
        <Label className="text-sm font-medium">–ò–º—è –∫–æ—à–µ–ª—å–∫–∞</Label>
      <Input value={addForm.name || ""} onChange={e => setAddForm((f: any) => ({ ...f, name: e.target.value }))} />
      </div>
      <div className="space-y-1">
        <Label className="text-sm font-medium">–ê–¥—Ä–µ—Å</Label>
      <Input value={addForm.address || ""} onChange={e => setAddForm((f: any) => ({ ...f, address: e.target.value }))} required />
      </div>
      <div className="space-y-1">
        <Label className="text-sm font-medium">–°–µ—Ç—å</Label>
      <Input value={addForm.network || ""} onChange={e => setAddForm((f: any) => ({ ...f, network: e.target.value }))} required placeholder="TRC20, ERC20 –∏ —Ç.–¥." />
      </div>
      <div className="flex items-center gap-2 mt-3">
        <input type="checkbox" id="saveToBookCrypto" checked={saveToBook} onChange={e => setSaveToBook(e.target.checked)} />
        <Label htmlFor="saveToBookCrypto" className="text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–ø–∏—Å–Ω—É—é –∫–Ω–∏–∂–∫—É</Label>
      </div>
      {addError && <div className="text-red-500 text-sm">{addError}</div>}
      <div className="flex gap-4 mt-4">
        <Button type="button" variant="outline" onClick={() => setShowAddForm(false)}>–û—Ç–º–µ–Ω–∞</Button>
        <Button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
      </div>
    </form>
  );

  // --- UI ---
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (initializing) {
    return (
      <div className="max-w-2xl mx-auto mt-24 text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
        <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤...</p>
      </div>
    );
  }

  if (paymentMethod === "p2p") {
    return (
      <div className="max-w-2xl mx-auto mt-24">
        <h2 className="text-3xl font-bold text-center mb-2">–ö–∞—Ä—Ç–∞ –¥–ª—è P2P –ø–µ—Ä–µ–≤–æ–¥–∞</h2>
        <p className="text-center text-muted-foreground text-base mb-8">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.</p>
        
        {/* –î–û–ë–ê–í–õ–Ø–ï–ú: –ë–ª–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è P2P */}
        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-600 rounded-lg p-4 mb-6">
          <div className="flex items-center gap-3">
            <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
              <span className="text-white text-sm">5</span>
            </div>
            <div>
              <div className="font-semibold text-blue-800 dark:text-blue-200">–í–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</div>
              <div className="text-sm text-blue-600 dark:text-blue-300">–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è P2P –æ–ø–ª–∞—Ç—ã.</div>
            </div>
          </div>
        </div>
        
        {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç */}
        {!showAddForm && requisites.length > 0 && (
          <div className="mb-8">
            <h3 className="text-lg font-semibold mb-4">–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {requisites.map((card) => (
                <Card
                  key={card.id}
                  className={`cursor-pointer transition-all border-2 ${selectedId === card.id ? "border-blue-600 shadow-lg bg-blue-50 dark:bg-blue-900/10" : "border-gray-200 dark:border-gray-700 hover:border-blue-400"}`}
                  onClick={() => setSelectedId(card.id)}
                >
                  <CardHeader className="flex flex-row justify-between items-center">
                    <div>
                      <CardTitle>{card.bank || "–ö–∞—Ä—Ç–∞"}</CardTitle>
                      <CardDescription className="break-all text-sm max-w-full overflow-hidden">{card.card_number}</CardDescription>
                    </div>
                    <Button variant="ghost" size="icon" onClick={e => { e.stopPropagation(); handleDelete(card.id); }}><Trash2 className="w-4 h-4 text-red-500" /></Button>
                  </CardHeader>
                  <CardContent>
                    <span className="text-xs text-gray-500">–í–ª–∞–¥–µ–ª–µ—Ü: {card.holder_name}</span><br />
                    <span className="text-xs text-gray-500">–°—Ä–æ–∫: {card.expiry_date}</span>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}
        
        {/* üéØ –†–ï–ö–í–ò–ó–ò–¢–´ –ü–û–°–¢–ê–í–©–ò–ö–ê –î–õ–Ø P2P */}
        {!showAddForm && supplierRequisites.length > 0 && (
          <div className="mb-8">
            <div className="flex items-center gap-2 mb-4">
              <h3 className="text-lg font-semibold">–ö–∞—Ä—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
              <div className="bg-green-100 text-green-700 px-2 py-1 rounded text-xs font-medium">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {supplierRequisites.map((card: any, index: number) => {
                const supplierId = `supplier_${paymentMethod}_${index}`;
                const isSelected = selectedId === supplierId;
                return (
                  <Card
                    key={supplierId}
                    className={`cursor-pointer transition-all border-2 ${isSelected ? "border-green-600 shadow-lg bg-green-50 dark:bg-green-900/10" : "border-gray-200 dark:border-gray-700 hover:border-green-400"}`}
                    onClick={() => setSelectedId(supplierId)}
                  >
                    <CardHeader className="flex flex-row justify-between items-center">
                      <div>
                        <CardTitle className="flex items-center gap-2">
                          {card.bank || "–ö–∞—Ä—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"}
                          <span className="text-green-600 text-sm">üè¢</span>
                        </CardTitle>
                        <CardDescription className="break-all text-sm max-w-full overflow-hidden">{card.card_number}</CardDescription>
                      </div>
                      {supplierRequisites.length === 1 && (
                        <div className="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs">
                          ‚úÖ –ê–≤—Ç–æ–≤—ã–±–æ—Ä
                        </div>
                      )}
                    </CardHeader>
                    <CardContent>
                      <span className="text-xs text-gray-500">–í–ª–∞–¥–µ–ª–µ—Ü: {card.holder_name}</span>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </div>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É */}
        {!showAddForm && (
          <Button variant="outline" className="w-full mb-8" onClick={() => setShowAddForm(true)}>
            <Plus className="w-4 h-4 mr-2" />–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
          </Button>
        )}
        {/* –§–æ—Ä–º–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã */}
        {showAddForm && renderCardForm()}
        <div className="flex justify-between items-center gap-4">
          <Button variant="outline" onClick={() => setCurrentStep(4)}>–ù–∞–∑–∞–¥</Button>
          {!showAddForm && (requisites.length > 0 || supplierRequisites.length > 0) && (
            <Button onClick={handleSave} disabled={!selectedId}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
          )}
        </div>
        {debugLog.length > 0 && (
          <div style={{ background: "#f9f9f9", padding: 12, marginTop: 24, fontSize: 12, borderRadius: 8 }}>
            <b>DEBUG:</b>
            <pre>{debugLog.join('\n')}</pre>
          </div>
        )}
      </div>
    );
  }

  if (paymentMethod === "crypto") {
    return (
      <div className="max-w-2xl mx-auto mt-24">
        <h2 className="text-3xl font-bold text-center mb-2">–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã</h2>
        <p className="text-center text-muted-foreground text-base mb-8">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.</p>
        
        {/* –î–û–ë–ê–í–õ–Ø–ï–ú: –ë–ª–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç */}
        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-600 rounded-lg p-4 mb-6">
          <div className="flex items-center gap-3">
            <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
              <span className="text-white text-sm">5</span>
            </div>
            <div>
              <div className="font-semibold text-blue-800 dark:text-blue-200">–í–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</div>
              <div className="text-sm text-blue-600 dark:text-blue-300">–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã.</div>
            </div>
          </div>
        </div>
        
        {/* –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ */}
        {!showAddForm && requisites.length > 0 && (
          <div className="mb-8">
            <h3 className="text-lg font-semibold mb-4">–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {requisites.map((wallet) => (
                <Card
                  key={wallet.id}
                  className={`cursor-pointer transition-all border-2 ${selectedId === wallet.id ? "border-blue-600 shadow-lg bg-blue-50 dark:bg-blue-900/10" : "border-gray-200 dark:border-gray-700 hover:border-blue-400"}`}
                  onClick={() => setSelectedId(wallet.id)}
                >
                  <CardHeader className="flex flex-row justify-between items-center">
                    <div>
                      <CardTitle>{wallet.name || "–ö–æ—à–µ–ª—ë–∫"}</CardTitle>
                      <CardDescription className="break-all text-sm max-w-full overflow-hidden">{wallet.address}</CardDescription>
                    </div>
                    <Button variant="ghost" size="icon" onClick={e => { e.stopPropagation(); handleDelete(wallet.id); }}><Trash2 className="w-4 h-4 text-red-500" /></Button>
                  </CardHeader>
                  <CardContent>
                    <span className="text-xs text-gray-500">–°–µ—Ç—å: {wallet.network}</span>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}
        
        {/* üéØ –†–ï–ö–í–ò–ó–ò–¢–´ –ü–û–°–¢–ê–í–©–ò–ö–ê –î–õ–Ø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ */}
        {!showAddForm && supplierRequisites.length > 0 && (
          <div className="mb-8">
            <div className="flex items-center gap-2 mb-4">
              <h3 className="text-lg font-semibold">–ö–æ—à–µ–ª—å–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
              <div className="bg-green-100 text-green-700 px-2 py-1 rounded text-xs font-medium">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {supplierRequisites.map((wallet: any, index: number) => {
                const supplierId = `supplier_${paymentMethod}_${index}`;
                const isSelected = selectedId === supplierId;
                return (
                  <Card
                    key={supplierId}
                    className={`cursor-pointer transition-all border-2 ${isSelected ? "border-green-600 shadow-lg bg-green-50 dark:bg-green-900/10" : "border-gray-200 dark:border-gray-700 hover:border-green-400"}`}
                    onClick={() => setSelectedId(supplierId)}
                  >
                    <CardHeader className="flex flex-row justify-between items-center">
                      <div>
                        <CardTitle className="flex items-center gap-2">
                          {wallet.network || "–ö–æ—à–µ–ª—ë–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"}
                          <span className="text-green-600 text-sm">üè¢</span>
                        </CardTitle>
                        <CardDescription className="break-all text-sm max-w-full overflow-hidden">{wallet.address}</CardDescription>
                      </div>
                      {supplierRequisites.length === 1 && (
                        <div className="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs">
                          ‚úÖ –ê–≤—Ç–æ–≤—ã–±–æ—Ä
                        </div>
                      )}
                    </CardHeader>
                    <CardContent>
                      <span className="text-xs text-gray-500">–í–∞–ª—é—Ç–∞: {wallet.currency}</span>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </div>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫ */}
        {!showAddForm && (
          <Button variant="outline" className="w-full mb-8" onClick={() => setShowAddForm(true)}>
            <Plus className="w-4 h-4 mr-2" />–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫
          </Button>
        )}
        {/* –§–æ—Ä–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ */}
        {showAddForm && renderWalletForm()}
        <div className="flex justify-between items-center gap-4">
          <Button variant="outline" onClick={() => setCurrentStep(4)}>–ù–∞–∑–∞–¥</Button>
          {!showAddForm && (requisites.length > 0 || supplierRequisites.length > 0) && (
            <Button onClick={handleSave} disabled={!selectedId}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
          )}
        </div>
        {debugLog.length > 0 && (
          <div style={{ background: "#f9f9f9", padding: 12, marginTop: 24, fontSize: 12, borderRadius: 8 }}>
            <b>DEBUG:</b>
            <pre>{debugLog.join('\n')}</pre>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto mt-24">
      <h2 className="text-3xl font-bold text-center mb-2">–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞</h2>
      <p className="text-center text-muted-foreground text-base mb-8">–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.</p>
      
      {/* –î–û–ë–ê–í–õ–Ø–ï–ú: –ë–ª–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
        <div className="flex items-center gap-3">
          <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
            <span className="text-white text-sm">5</span>
          </div>
          <div>
            <div className="font-semibold text-blue-800">–í–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</div>
            <div className="text-sm text-blue-600 dark:text-blue-300">–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.</div>
          </div>
        </div>
      </div>
      
      {/* –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ */}
      {!showAddForm && requisites.length > 0 && (
        <div className="mb-8">
          <h3 className="text-lg font-semibold mb-4">–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {requisites.map((req) => (
              <Card
                key={req.id}
                className={`cursor-pointer transition-all border-2 ${selectedId === req.id ? "border-blue-600 shadow-lg bg-blue-50 dark:bg-blue-900/10" : "border-gray-200 dark:border-gray-700 hover:border-blue-400"}`}
                onClick={() => setSelectedId(req.id)}
              >
                <CardHeader className="flex flex-row justify-between items-center">
                  <div>
                    <CardTitle>{req.name || "–®–∞–±–ª–æ–Ω —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"}</CardTitle>
                    <CardDescription>{req.country ? countryOptions.find(c => c.id === req.country)?.label : ""}</CardDescription>
                  </div>
                  <Button variant="ghost" size="icon" onClick={e => { e.stopPropagation(); handleDelete(req.id); }}><Trash2 className="w-4 h-4 text-red-500" /></Button>
                </CardHeader>
                <CardContent>
                  <span className="text-xs text-gray-500">ID: {req.id}</span>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )}
      
      {/* üéØ –†–ï–ö–í–ò–ó–ò–¢–´ –ü–û–°–¢–ê–í–©–ò–ö–ê */}
      {!showAddForm && supplierRequisites.length > 0 && (
        <div className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <h3 className="text-lg font-semibold">–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
            <div className="bg-green-100 text-green-700 px-2 py-1 rounded text-xs font-medium">
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {supplierRequisites.map((req: any, index: number) => {
              const supplierId = `supplier_${paymentMethod}_${index}`;
              const isSelected = selectedId === supplierId;
              return (
                <Card
                  key={supplierId}
                  className={`cursor-pointer transition-all border-2 ${isSelected ? "border-green-600 shadow-lg bg-green-50 dark:bg-green-900/10" : "border-gray-200 dark:border-gray-700 hover:border-green-400"}`}
                  onClick={() => setSelectedId(supplierId)}
                >
                  <CardHeader className="flex flex-row justify-between items-center">
                    <div>
                      <CardTitle className="flex items-center gap-2">
                        {paymentMethod === 'bank-transfer' && req.bank_name}
                        {paymentMethod === 'p2p' && req.bank}
                        {paymentMethod === 'crypto' && req.network}
                        <span className="text-green-600 text-sm">üè¢</span>
                      </CardTitle>
                      <CardDescription className="break-all text-sm max-w-full overflow-hidden">
                        {paymentMethod === 'bank-transfer' && req.account_number}
                        {paymentMethod === 'p2p' && req.card_number}
                        {paymentMethod === 'crypto' && req.address}
                      </CardDescription>
                    </div>
                    {supplierRequisites.length === 1 && (
                      <div className="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs">
                        ‚úÖ –ê–≤—Ç–æ–≤—ã–±–æ—Ä
                      </div>
                    )}
                  </CardHeader>
                  <CardContent>
                    <div className="text-xs text-gray-500">
                      {paymentMethod === 'bank-transfer' && (
                        <>
                          <div>SWIFT/BIC: {req.swift || req.bic}</div>
                          <div>–í–∞–ª—é—Ç–∞: {req.currency}</div>
                        </>
                      )}
                      {paymentMethod === 'p2p' && (
                        <>
                          <div>–í–ª–∞–¥–µ–ª–µ—Ü: {req.holder_name}</div>
                        </>
                      )}
                      {paymentMethod === 'crypto' && (
                        <>
                          <div>–í–∞–ª—é—Ç–∞: {req.currency}</div>
                        </>
                      )}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      )}
      
      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω */}
      {!showAddForm && (
        <Button variant="outline" className="w-full mb-8" onClick={() => setShowAddForm(true)}>
          <Plus className="w-4 h-4 mr-2" />–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        </Button>
      )}
      {/* –§–æ—Ä–º–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ */}
      {showAddForm && renderBankForm()}
      <div className="flex justify-between items-center gap-4">
        <Button variant="outline" onClick={() => setCurrentStep(4)}>–ù–∞–∑–∞–¥</Button>
        {!showAddForm && (requisites.length > 0 || supplierRequisites.length > 0) && (
          <Button onClick={handleSave} disabled={!selectedId}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
        )}
      </div>
      {debugLog.length > 0 && (
        <div style={{ background: "#f9f9f9", padding: 12, marginTop: 24, fontSize: 12, borderRadius: 8 }}>
          <b>DEBUG:</b>
          <pre>{debugLog.join('\n')}</pre>
        </div>
      )}
    </div>
  );
} 