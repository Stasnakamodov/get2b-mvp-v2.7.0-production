import { NextRequest, NextResponse } from "next/server";
import { supabaseService } from "@/lib/supabaseServiceClient";

// POST: –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
export async function POST(request: NextRequest) {
  try {
    // –í–†–ï–ú–ï–ù–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = { id: "86cc190d-0c80-463b-b0df-39a25b22365f" };
    
    console.log("üåü [API] –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)");

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = request.headers.get('content-type') || '';
    let supplier_id: string;
    let supplier_type: string;
    let profile_data: any;
    let products: any[];
    let legal_confirmation: any;
    let formData: FormData | null = null;

    if (contentType.includes('multipart/form-data')) {
      // FormData (—Å —Ñ–∞–π–ª–∞–º–∏)
      formData = await request.formData();
      supplier_id = formData.get('supplier_id') as string;
      supplier_type = formData.get('supplier_type') as string;
      profile_data = JSON.parse(formData.get('profile_data') as string);
      products = JSON.parse(formData.get('products') as string);
      legal_confirmation = JSON.parse(formData.get('legal_confirmation') as string);
    } else {
      // JSON (–±–µ–∑ —Ñ–∞–π–ª–æ–≤, –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      const jsonData = await request.json();
      supplier_id = jsonData.supplier_id;
      supplier_type = jsonData.supplier_type;
      profile_data = jsonData.profile_data;
      products = jsonData.products;
      legal_confirmation = jsonData.legal_confirmation;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!products) products = [];
    if (!profile_data) profile_data = {};
    if (!legal_confirmation) legal_confirmation = {};

    console.log("üìã [API] –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:", { 
      supplier_id, 
      supplier_type, 
      products_count: products.length,
      has_profile_data: !!profile_data,
      has_legal_confirmation: !!legal_confirmation
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!supplier_id || !supplier_type) {
      return NextResponse.json({ 
        error: "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ —Ç–∏–ø" 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if (!products || products.length < 1) {
      return NextResponse.json({ 
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º 1 —Ç–æ–≤–∞—Ä —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏" 
      }, { status: 400 });
    }

    if (!legal_confirmation || !legal_confirmation.isLegalEntity || !legal_confirmation.hasRightToRepresent || !legal_confirmation.confirmAccuracy) {
      return NextResponse.json({ 
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ —É—Å–ª–æ–≤–∏—è" 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: supplier, error: supplierError } = await supabaseService
      .from(supplier_type === 'profile' ? 'supplier_profiles' : 'catalog_user_suppliers')
      .select('*')
      .eq('id', supplier_id)
      .eq('user_id', user.id)
      .single();

    if (supplierError || !supplier) {
      return NextResponse.json({ 
        error: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" 
      }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
    const { data: existingApplication } = await supabaseService
      .from('accreditation_applications')
      .select('id, status')
      .eq('supplier_id', supplier_id)
      .eq('supplier_type', supplier_type)
      .in('status', ['pending', 'in_review'])
      .single();

    if (existingApplication) {
      return NextResponse.json({ 
        error: "–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é" 
      }, { status: 409 });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    const productImageFiles: any[] = [];
    const certificateFiles: any[] = [];
    const legalDocumentFiles: any[] = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å FormData
    if (formData) {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
      products.forEach((product: any, pIndex: number) => {
        const imageCount = product.images ? product.images.length : 0;
        for (let iIndex = 0; iIndex < imageCount; iIndex++) {
          const file = formData!.get(`product_${pIndex}_image_${iIndex}`) as File;
          if (file) {
            productImageFiles.push({
              product_index: pIndex,
              image_index: iIndex,
              file: file,
              name: file.name,
              size: file.size,
              type: file.type
            });
          }
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
      products.forEach((product: any, pIndex: number) => {
        const certCount = product.certificates.length;
        for (let cIndex = 0; cIndex < certCount; cIndex++) {
          const file = formData!.get(`product_${pIndex}_cert_${cIndex}`) as File;
          if (file) {
            certificateFiles.push({
              product_index: pIndex,
              cert_index: cIndex,
              file: file,
              name: file.name,
              size: file.size,
              type: file.type
            });
          }
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      console.log("üîç [API] –ü–æ–∏—Å–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ FormData...");
      for (const [key, value] of formData!.entries()) {
        console.log(`üìù [API] FormData –ø–æ–ª–µ: ${key} = ${value instanceof File ? `File(${value.name}, ${value.size} bytes)` : value}`);
        
        if (key.startsWith('legal_doc_') && !key.includes('_type') && !key.includes('_name')) {
          const index = key.split('_')[2];
          const type = formData!.get(`legal_doc_${index}_type`) as string;
          const name = formData!.get(`legal_doc_${index}_name`) as string;
          const file = value as File;
          
          console.log(`üìÑ [API] –ù–∞–π–¥–µ–Ω —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç: index=${index}, type=${type}, name=${name}, file=${file.name}, size=${file.size}`);
          
          if (file && file.size > 0) {
            legalDocumentFiles.push({
              index: parseInt(index),
              type: type,
              name: name,
              file: file,
              fileName: file.name,
              size: file.size,
              fileType: file.type
            });
            console.log(`‚úÖ [API] –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫`);
          } else {
            console.log(`‚ö†Ô∏è [API] –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file.name}, size=${file.size}`);
          }
        }
      }
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const tempFiles = {
      product_images: productImageFiles,
      certificates: certificateFiles,
      legal_documents: legalDocumentFiles
    };

    console.log("üìÅ [API] –§–∞–π–ª—ã:", { 
      product_images: productImageFiles.length,
      certificates: certificateFiles.length, 
      legal_docs: legalDocumentFiles.length 
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é (–±–µ–∑ —Ñ–∞–π–ª–æ–≤)
    const applicationData = {
      user_id: user.id,
      supplier_id: supplier_id,
      supplier_type: supplier_type,
      supplier_name: profile_data.name || supplier.name,
      company_name: profile_data.company_name || supplier.company_name,
      category: profile_data.category || supplier.category,
      country: profile_data.country || supplier.country,
      status: 'pending',
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
      application_data: JSON.stringify({
        ...supplier,
        ...profile_data,
        updated_fields: Object.keys(profile_data).filter(key => 
          profile_data[key] !== supplier[key]
        )
      }),
      
      // –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ —Ñ–∞–π–ª–æ–≤)
      products_data: JSON.stringify(products.map((product: any, index: number) => ({
        ...product,
        images_info: [],
        certificates_info: []
      }))),
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö (–±–µ–∑ —Ñ–∞–π–ª–æ–≤)
      legal_documents_data: JSON.stringify([]),
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      legal_confirmation: JSON.stringify(legal_confirmation),
      
      // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      products_count: products.length,
      certificates_count: 0,
      legal_documents_count: 0,
      
      submitted_at: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: application, error: applicationError } = await supabaseService
      .from('accreditation_applications')
      .insert([applicationData])
      .select()
      .single();

    if (applicationError) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", applicationError);
      console.error("‚ùå [API] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", {
        code: applicationError.code,
        message: applicationError.message,
        details: applicationError.details,
        hint: applicationError.hint
      });
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é",
        details: applicationError.message,
        code: applicationError.code,
        hint: applicationError.hint
      }, { status: 500 });
    }

    console.log("‚úÖ [API] –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∞:", application.id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ Supabase Storage –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    const savedFiles: any = {
      product_images: [],
      certificates: [],
      legal_documents: []
    };

    if (formData) {
      console.log("üìÅ [API] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ Supabase Storage...");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
      for (const imageFile of tempFiles.product_images) {
        try {
          const fileName = `accreditation/${application.id}/products/${imageFile.product_index}/images/${Date.now()}_${imageFile.name}`;
          const { data: uploadData, error: uploadError } = await supabaseService.storage
            .from('project-images')
            .upload(fileName, imageFile.file, {
              cacheControl: '3600',
              upsert: false
            });

          if (uploadError) {
            console.error("‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", uploadError);
            continue;
          }

          // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
          const { data: urlData } = supabaseService.storage
            .from('project-images')
            .getPublicUrl(fileName);

          savedFiles.product_images.push({
            ...imageFile,
            storage_path: fileName,
            public_url: urlData.publicUrl
          });

          console.log("‚úÖ [API] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", fileName);
        } catch (error) {
          console.error("‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
      for (const certFile of tempFiles.certificates) {
        try {
          const fileName = `accreditation/${application.id}/products/${certFile.product_index}/certificates/${Date.now()}_${certFile.name}`;
          const { data: uploadData, error: uploadError } = await supabaseService.storage
            .from('accreditation-certificates')
            .upload(fileName, certFile.file, {
              cacheControl: '3600',
              upsert: false
            });

          if (uploadError) {
            console.error("‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", uploadError);
            continue;
          }

          // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
          const { data: urlData } = supabaseService.storage
            .from('accreditation-certificates')
            .getPublicUrl(fileName);

          savedFiles.certificates.push({
            ...certFile,
            storage_path: fileName,
            public_url: urlData.publicUrl
          });

          console.log("‚úÖ [API] –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", fileName);
        } catch (error) {
          console.error("‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", error);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      for (const docFile of tempFiles.legal_documents) {
        try {
          const fileName = `accreditation/${application.id}/legal/${Date.now()}_${docFile.fileName}`;
          const { data: uploadData, error: uploadError } = await supabaseService.storage
            .from('accreditation-documents')
            .upload(fileName, docFile.file, {
              cacheControl: '3600',
              upsert: false
            });

          if (uploadError) {
            console.error("‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", uploadError);
            continue;
          }

          // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
          const { data: urlData } = supabaseService.storage
            .from('accreditation-documents')
            .getPublicUrl(fileName);

          savedFiles.legal_documents.push({
            ...docFile,
            storage_path: fileName,
            public_url: urlData.publicUrl
          });

          console.log("‚úÖ [API] –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", fileName);
        } catch (error) {
          console.error("‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å URL —Ñ–∞–π–ª–æ–≤
      const updatedProductsData = JSON.parse(application.products_data).map((product: any, index: number) => ({
        ...product,
        images_info: savedFiles.product_images
          .filter((img: any) => img.product_index === index)
          .map((img: any) => ({
            name: img.name,
            size: img.size,
            type: img.type,
            public_url: img.public_url
          })),
        certificates_info: savedFiles.certificates
          .filter((cert: any) => cert.product_index === index)
          .map((cert: any) => ({
            name: cert.name,
            size: cert.size,
            type: cert.type,
            public_url: cert.public_url
          }))
      }));

      const updatedLegalDocumentsData = savedFiles.legal_documents.map((doc: any) => ({
        type: doc.type,
        name: doc.name,
        fileName: doc.fileName,
        size: doc.size,
        fileType: doc.fileType,
        public_url: doc.public_url
      }));

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å URL —Ñ–∞–π–ª–æ–≤
      const { error: updateError } = await supabaseService
        .from('accreditation_applications')
        .update({
          products_data: JSON.stringify(updatedProductsData),
          legal_documents_data: JSON.stringify(updatedLegalDocumentsData),
          updated_at: new Date().toISOString()
        })
        .eq('id', application.id);

      if (updateError) {
        console.error("‚ùå [API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å URL —Ñ–∞–π–ª–æ–≤:", updateError);
      } else {
        console.log("‚úÖ [API] –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å URL —Ñ–∞–π–ª–æ–≤");
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Ñ–æ—Ä–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    if (supplier_type === 'profile') {
      const updatedFields: any = {};
      Object.keys(profile_data).forEach(key => {
        if (profile_data[key] && profile_data[key] !== supplier[key]) {
          updatedFields[key] = profile_data[key];
        }
      });

      if (Object.keys(updatedFields).length > 0) {
        await supabaseService
          .from('supplier_profiles')
          .update({
            ...updatedFields,
            accreditation_status: 'pending',
            accreditation_application_id: application.id,
            updated_at: new Date().toISOString()
          })
          .eq('id', supplier_id);
          
        console.log("üìù [API] –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è:", Object.keys(updatedFields));
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏
        await supabaseService
          .from('supplier_profiles')
          .update({
            accreditation_status: 'pending',
            accreditation_application_id: application.id,
            updated_at: new Date().toISOString()
          })
          .eq('id', supplier_id);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    try {
      await fetch(`${request.nextUrl.origin}/api/telegram/send-accreditation-request`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          applicationId: application.id,
          supplierName: profile_data.name || supplier.name,
          companyName: profile_data.company_name || supplier.company_name,
          category: profile_data.category || supplier.category,
          country: profile_data.country || supplier.country,
          productsCount: products.length,
          certificatesCount: certificateFiles.length,
          legalDocumentsCount: legalDocumentFiles.length
        })
      });
    } catch (telegramError) {
      console.error("‚ö†Ô∏è [API] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", telegramError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }

    return NextResponse.json({
      success: true,
      application_id: application.id,
      message: "–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞",
      details: {
        products_count: products.length,
        product_images_count: productImageFiles.length,
        certificates_count: certificateFiles.length,
        legal_documents_count: legalDocumentFiles.length,
        profile_updated: Object.keys(profile_data).length > 0
      }
    });

  } catch (error) {
    console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é" 
    }, { status: 500 });
  }
} 