import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// POST: –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export async function POST(request: NextRequest) {
  try {
    console.log("üß™ [TEST-LEGAL] –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testFileName = `test-legal-doc-${Date.now()}.pdf`;
    const testContent = Buffer.from('Test legal document content');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const testApplicationId = crypto.randomUUID();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ Storage
    const storagePath = `accreditation/${testApplicationId}/legal/${testFileName}`;
    
    console.log("üìÅ [TEST-LEGAL] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª:", storagePath);
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('project-images')
      .upload(storagePath, testContent, {
        contentType: 'application/pdf',
        cacheControl: '3600',
        upsert: false
      });

    if (uploadError) {
      console.error("‚ùå [TEST-LEGAL] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", uploadError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
        details: uploadError.message
      }, { status: 500 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabase.storage
      .from('project-images')
      .getPublicUrl(storagePath);

    console.log("‚úÖ [TEST-LEGAL] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", urlData.publicUrl);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ
    const testApplicationData = {
      user_id: "86cc190d-0c80-463b-b0df-39a25b22365f",
      supplier_id: crypto.randomUUID(),
      supplier_type: "profile",
      supplier_name: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å —é—Ä. –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
      company_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
      category: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
      country: "–†–æ—Å—Å–∏—è",
      status: 'pending',
      application_data: JSON.stringify({}),
      products_data: JSON.stringify([]),
      legal_documents_data: JSON.stringify([{
        type: "business_license",
        name: "–¢–µ—Å—Ç–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è",
        fileName: testFileName,
        size: testContent.length,
        fileType: "application/pdf",
        public_url: urlData.publicUrl
      }]),
      legal_confirmation: JSON.stringify({
        isLegalEntity: true,
        hasRightToRepresent: true,
        confirmAccuracy: true
      }),
      products_count: 0,
      certificates_count: 0,
      legal_documents_count: 1
    };

    const { data: application, error: appError } = await supabase
      .from('accreditation_applications')
      .insert([testApplicationData])
      .select()
      .single();

    if (appError) {
      console.error("‚ùå [TEST-LEGAL] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", appError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏",
        details: appError.message
      }, { status: 500 });
    }

    console.log("‚úÖ [TEST-LEGAL] –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:", application.id);

    return NextResponse.json({
      success: true,
      message: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞",
      data: {
        application_id: application.id,
        file_path: storagePath,
        public_url: urlData.publicUrl,
        legal_documents_count: 1
      }
    });

  } catch (error) {
    console.error("‚ùå [TEST-LEGAL] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 