import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// OPTIONS: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CORS –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PATCH, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}

// GET: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–Ω—è—è –∫–æ–º–Ω–∞—Ç–∞)
export async function GET(request: NextRequest) {
  try {
    console.log("üîß [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫ user-suppliers");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = request.headers.get('authorization');
    let userId: string;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
      const { data: { user }, error: authError } = await supabase.auth.getUser(token);
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        return NextResponse.json({ 
          error: "Unauthorized - –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω, user_id:", userId);
    } else {
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        return NextResponse.json({ 
          error: "Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, user_id:", userId);
    }

    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id"); // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    const category = searchParams.get("category");
    const source_type = searchParams.get("source_type");
    const search = searchParams.get("search");
    const sort_by = searchParams.get("sort_by") || "total_projects";

    console.log("üîç [DEBUG] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", { id, category, source_type, search, sort_by });

    // –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –°–õ–£–ß–ê–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ ID
    if (id) {
      console.log("üîç [DEBUG] –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ ID:", id);
      console.log("üîç [DEBUG] –¢–µ–∫—É—â–∏–π user_id:", userId);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –≤–æ–æ–±—â–µ
      const { data: allSuppliers, error: allError } = await supabase
        .from("catalog_user_suppliers")
        .select("id, name, user_id, is_active")
        .eq("id", id);
      
      console.log("üîç [DEBUG] –í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —Å —ç—Ç–∏–º ID:", allSuppliers);
      console.log("üîç [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Å–µ—Ö:", allError);
      
      const { data: supplier, error: supplierError } = await supabase
        .from("catalog_user_suppliers")
        .select(`
          *,
          catalog_user_products (
            id, name, description, price, currency, in_stock, min_order, sku, images, category
          )
        `)
        .eq("id", id)
        .eq("is_active", true)
        .eq("user_id", userId)
        .single();

      console.log("üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:");
      console.log("üîç [DEBUG] - supplier:", supplier);
      console.log("üîç [DEBUG] - supplierError:", supplierError);

      if (supplierError) {
        console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ ID:", supplierError);
        return NextResponse.json({ error: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
      }

      console.log("‚úÖ [API] –ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ ID –∑–∞–≥—Ä—É–∂–µ–Ω:", supplier?.name);
      return NextResponse.json({ supplier });
    }

    // –û–°–ù–û–í–ù–û–ô –ó–ê–ü–†–û–° - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let query = supabase
      .from("catalog_user_suppliers")
      .select(`
        *,
        catalog_user_products (
          id, name, price, currency, in_stock, min_order, images
        )
      `)
      .eq("is_active", true) // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
      .eq("user_id", userId); // üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù: —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    console.log("üîç [DEBUG] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: is_active=true, user_id=" + userId);

    // –§–∏–ª—å—Ç—Ä—ã
    if (category && category !== "all") {
      query = query.eq("category", category);
      console.log("üîç [DEBUG] –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", category);
    }

    if (source_type && source_type !== "all") {
      query = query.eq("source_type", source_type);
      console.log("üîç [DEBUG] –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É:", source_type);
    }

    if (search) {
      query = query.or(`name.ilike.%${search}%,company_name.ilike.%${search}%,description.ilike.%${search}%`);
      console.log("üîç [DEBUG] –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫:", search);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    switch (sort_by) {
      case "total_projects":
        query = query.order("total_projects", { ascending: false });
        break;
      case "last_project_date":
        query = query.order("last_project_date", { ascending: false, nullsFirst: false });
        break;
      case "created_at":
        query = query.order("created_at", { ascending: false });
        break;
      case "name":
        query = query.order("name", { ascending: true });
        break;
      default:
        query = query.order("total_projects", { ascending: false });
    }

    console.log("üîç [DEBUG] –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:", sort_by);

    const { data, error } = await query;

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", error);
      console.error("‚ùå [API] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(error, null, 2));
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    console.log(`‚úÖ [API] –õ–∏—á–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, data?.length);
    console.log("üìä [API] –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", JSON.stringify(data, null, 2));
    
    return NextResponse.json({ 
      suppliers: data,
      total: data?.length || 0,
      user_id: userId,
      debug: {
        filters_applied: { category, source_type, search, sort_by },
        query_executed: true,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    console.error("‚ùå [API] Stack trace:", error instanceof Error ? error.stack : 'No stack trace');
    return NextResponse.json({ 
      error: "Internal server error", 
      debug: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// POST: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = request.headers.get('authorization');
    let userId: string;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
      const { data: { user }, error: authError } = await supabase.auth.getUser(token);
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        return NextResponse.json({ 
          error: "Unauthorized - –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω, user_id:", userId);
    } else {
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        return NextResponse.json({ 
          error: "Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, user_id:", userId);
    }

    const supplierData = await request.json();
    console.log("üîß [DEBUG POST] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", JSON.stringify(supplierData, null, 2));
    console.log("üîß [DEBUG POST] Logo URL –≤ –¥–∞–Ω–Ω—ã—Ö:", supplierData.logo_url);
    console.log("üìä [DEBUG POST] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:", {
      total: supplierData.total_projects,
      successful: supplierData.successful_projects,
      cancelled: supplierData.cancelled_projects,
      spent: supplierData.total_spent
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ["name", "company_name", "category", "country"];
    for (const field of requiredFields) {
      if (!supplierData[field]) {
        return NextResponse.json({ 
          error: `–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ` 
        }, { status: 400 });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¢–û–õ–¨–ö–û —Å—Ä–µ–¥–∏ –ê–ö–¢–ò–í–ù–´–• –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    const { data: existingSupplier } = await supabase
      .from("catalog_user_suppliers")
      .select("id")
      .eq("user_id", userId)
      .eq("name", supplierData.name)
      .eq("company_name", supplierData.company_name)
      .eq("is_active", true) // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
      .single();

    if (existingSupplier) {
      return NextResponse.json({ 
        error: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ" 
      }, { status: 409 });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const insertData = {
      ...supplierData,
      user_id: userId,
      source_type: "user_added",
      is_active: true,
      // üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (—ç—Ö–æ –∫–∞—Ä—Ç–æ—á–∫–∏) –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      total_projects: supplierData.total_projects ?? 0,
      successful_projects: supplierData.successful_projects ?? 0,
      cancelled_projects: supplierData.cancelled_projects ?? 0,
      total_spent: supplierData.total_spent ?? 0
    };

    console.log("üîß [DEBUG POST] –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:", JSON.stringify(insertData, null, 2));
    console.log("üîß [DEBUG POST] Logo URL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:", insertData.logo_url);

    const { data, error } = await supabase
      .from("catalog_user_suppliers")
      .insert([insertData])
      .select()
      .single();

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    console.log("‚úÖ [API] –õ–∏—á–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω:", data.id);
    console.log("‚úÖ [API] –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å logo_url:", data.logo_url);
    console.log("üìä [API] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", {
      total: data.total_projects,
      successful: data.successful_projects,
      cancelled: data.cancelled_projects,
      spent: data.total_spent
    });
    return NextResponse.json({ supplier: data });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// PATCH: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
export async function PATCH(request: NextRequest) {
  try {
    console.log("üîß [DEBUG PATCH] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É PATCH –∑–∞–ø—Ä–æ—Å–∞");
    console.log("üîß [DEBUG PATCH] URL:", request.url);
    console.log("üîß [DEBUG PATCH] –ú–µ—Ç–æ–¥:", request.method);
    console.log("üîß [DEBUG PATCH] –ó–∞–≥–æ–ª–æ–≤–∫–∏:", Object.fromEntries(request.headers.entries()));

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = request.headers.get('authorization');
    let userId: string;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
      const { data: { user }, error: authError } = await supabase.auth.getUser(token);
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        return NextResponse.json({ 
          error: "Unauthorized - –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω, user_id:", userId);
    } else {
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        return NextResponse.json({ 
          error: "Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, user_id:", userId);
    }

    const requestBody = await request.json();
    console.log("üîß [DEBUG PATCH] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", JSON.stringify(requestBody, null, 2));
    
    const { id, ...updateData } = requestBody;
    
    if (!id) {
      console.error("‚ùå [DEBUG PATCH] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –≤ –∑–∞–ø—Ä–æ—Å–µ");
      return NextResponse.json({ 
        error: "–ü–æ–ª–µ id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" 
      }, { status: 400 });
    }

    console.log("üîß [DEBUG PATCH] –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å ID:", id);
    console.log("üîß [DEBUG PATCH] –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", JSON.stringify(updateData, null, 2));

    const { data, error } = await supabase
      .from("catalog_user_suppliers")
      .update({
        ...updateData,
        updated_at: new Date().toISOString()
      })
      .eq("id", id)
      .eq("user_id", userId) // –í–∞–∂–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
      .eq("is_active", true) // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      .select()
      .single();

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    if (!data) {
      return NextResponse.json({ 
        error: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" 
      }, { status: 404 });
    }

    console.log("‚úÖ [API] –õ–∏—á–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:", data.id);
    return NextResponse.json({ supplier: data });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// DELETE: –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
export async function DELETE(request: NextRequest) {
  try {
    console.log("üîß [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É DELETE –∑–∞–ø—Ä–æ—Å–∞ –∫ user-suppliers");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = request.headers.get('authorization');
    let userId: string;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
      const { data: { user }, error: authError } = await supabase.auth.getUser(token);
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        return NextResponse.json({ 
          error: "Unauthorized - –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω, user_id:", userId);
    } else {
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        return NextResponse.json({ 
          error: "Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, user_id:", userId);
    }

    const { id } = await request.json();
    
    if (!id) {
      return NextResponse.json({ 
        error: "–ü–æ–ª–µ id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" 
      }, { status: 400 });
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.log(`üîç [API] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ${id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const { data: existingSupplier, error: checkError } = await supabase
      .from("catalog_user_suppliers")
      .select("id, name, is_active")
      .eq("id", id)
      .eq("user_id", userId)
      .single();

    if (checkError || !existingSupplier) {
      console.error("‚ùå [API] –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", checkError);
      return NextResponse.json({ 
        error: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ" 
      }, { status: 404 });
    }

    if (!existingSupplier.is_active) {
      console.warn("‚ö†Ô∏è [API] –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É–∂–µ —É–¥–∞–ª–µ–Ω");
      return NextResponse.json({ 
        error: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ" 
      }, { status: 409 });
    }

    console.log(`‚úÖ [API] –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω: ${existingSupplier.name}`);

    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    console.log(`üîÑ [API] –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ${id}`);
    const { data: deletedProducts, error: productsError } = await supabase
      .from("catalog_user_products")
      .update({ 
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq("supplier_id", id)
      .eq("is_active", true)
      .select();

    if (productsError) {
      console.warn("‚ö†Ô∏è [API] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:", productsError);
    } else {
      console.log(`‚úÖ [API] –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${deletedProducts?.length || 0}`);
    }

    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    const { data, error } = await supabase
      .from("catalog_user_suppliers")
      .update({ 
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq("id", id)
      .eq("user_id", userId)
      .eq("is_active", true)
      .select()
      .single();

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    if (!data) {
      return NextResponse.json({ 
        error: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ" 
      }, { status: 404 });
    }

    console.log("‚úÖ [API] –õ–∏—á–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —É–¥–∞–ª–µ–Ω:", data.id);
    return NextResponse.json({ 
      message: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –∏ –µ–≥–æ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
      supplier: data,
      deleted_products_count: deletedProducts?.length || 0
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
} 