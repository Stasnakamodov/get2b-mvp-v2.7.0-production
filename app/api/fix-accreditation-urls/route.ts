import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// POST: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL —Ñ–∞–π–ª–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é
export async function POST(request: NextRequest) {
  try {
    console.log("üîß [FIX] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é");

    const { searchParams } = new URL(request.url);
    const applicationId = searchParams.get('applicationId');

    if (applicationId) {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É
      const result = await fixApplicationUrls(applicationId);
      if (result.success) {
        return NextResponse.json(result);
      } else {
        return NextResponse.json(result, { status: 400 });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏, –Ω–æ –±–µ–∑ URL
    const { data: applications, error } = await supabase
      .from('accreditation_applications')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error("‚ùå [FIX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    console.log("‚úÖ [FIX] –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫:", applications?.length || 0);

    let fixedCount = 0;
    let errorCount = 0;

    for (const application of applications || []) {
      try {
        const result = await fixApplicationUrls(application.id);
        if (result.success) {
          fixedCount++;
        } else {
          errorCount++;
        }
      } catch (error) {
        console.error(`‚ùå [FIX] –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ${application.id}:`, error);
        errorCount++;
      }
    }

    return NextResponse.json({
      success: true,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${fixedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`,
      summary: {
        total: applications?.length || 0,
        fixed: fixedCount,
        errors: errorCount
      }
    });

  } catch (error) {
    console.error("‚ùå [FIX] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

async function fixApplicationUrls(applicationId: string) {
  console.log(`üîß [FIX] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: ${applicationId}`);

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
  const { data: application, error } = await supabase
    .from('accreditation_applications')
    .select('*')
    .eq('id', applicationId)
    .single();

  if (error || !application) {
    return { success: false, error: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
  }

  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
  let productsData = [];
  try {
    productsData = typeof application.products_data === 'string' 
      ? JSON.parse(application.products_data) 
      : application.products_data;
  } catch (e) {
    return { success: false, error: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ products_data" };
  }

  let hasChanges = false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  for (let productIndex = 0; productIndex < productsData.length; productIndex++) {
    const product = productsData[productIndex];
    
    if (product.images_info && Array.isArray(product.images_info)) {
      for (let imageIndex = 0; imageIndex < product.images_info.length; imageIndex++) {
        const image = product.images_info[imageIndex];
        
        if (!image.public_url && image.name) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Storage
          const fileName = `accreditation/${applicationId}/products/${productIndex}/images/${image.name}`;
          
          try {
            // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
            const { data: urlData } = supabase.storage
              .from('project-images')
              .getPublicUrl(fileName);

            if (urlData.publicUrl) {
              // –î–æ–±–∞–≤–ª—è–µ–º URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
              product.images_info[imageIndex] = {
                ...image,
                public_url: urlData.publicUrl
              };
              hasChanges = true;
              console.log(`‚úÖ [FIX] –î–æ–±–∞–≤–ª–µ–Ω URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${image.name}`);
            } else {
              console.log(`‚ö†Ô∏è [FIX] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è: ${fileName}`);
            }
          } catch (urlError) {
            console.error(`‚ùå [FIX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è ${fileName}:`, urlError);
          }
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
    if (product.certificates_info && Array.isArray(product.certificates_info)) {
      for (let certIndex = 0; certIndex < product.certificates_info.length; certIndex++) {
        const cert = product.certificates_info[certIndex];
        
        if (!cert.public_url && cert.name) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Storage
          const fileName = `accreditation/${applicationId}/products/${productIndex}/certificates/${cert.name}`;
          
          try {
            // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
            const { data: urlData } = supabase.storage
              .from('project-images')
              .getPublicUrl(fileName);

            if (urlData.publicUrl) {
              // –î–æ–±–∞–≤–ª—è–µ–º URL –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
              product.certificates_info[certIndex] = {
                ...cert,
                public_url: urlData.publicUrl
              };
              hasChanges = true;
              console.log(`‚úÖ [FIX] –î–æ–±–∞–≤–ª–µ–Ω URL –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${cert.name}`);
            } else {
              console.log(`‚ö†Ô∏è [FIX] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è: ${fileName}`);
            }
          } catch (urlError) {
            console.error(`‚ùå [FIX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è ${fileName}:`, urlError);
          }
        }
      }
    }
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
  if (hasChanges) {
    const { error: updateError } = await supabase
      .from('accreditation_applications')
      .update({
        products_data: JSON.stringify(productsData),
        updated_at: new Date().toISOString()
      })
      .eq('id', applicationId);

    if (updateError) {
      console.error("‚ùå [FIX] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", updateError);
      return { success: false, error: updateError.message };
    }

    console.log(`‚úÖ [FIX] –ó–∞—è–≤–∫–∞ ${applicationId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å URL —Ñ–∞–π–ª–æ–≤`);
    return { success: true, message: "URL —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã" };
  } else {
    console.log(`‚ÑπÔ∏è [FIX] –ó–∞—è–≤–∫–∞ ${applicationId} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
    return { success: true, message: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è" };
  }
} 