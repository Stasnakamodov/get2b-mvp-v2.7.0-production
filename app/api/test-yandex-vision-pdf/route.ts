import { type NextRequest, NextResponse } from "next/server";
import { getYandexVisionService } from "@/lib/services/YandexVisionService";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { fileUrl } = body;

    if (!fileUrl) {
      return NextResponse.json({ error: "fileUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 });
    }

    console.log("üîç –¢–ï–°–¢ YANDEX VISION PDF");
    console.log("üìÑ URL —Ñ–∞–π–ª–∞:", fileUrl);

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Yandex Vision
    const visionService = getYandexVisionService();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
    const extractedText = await visionService.recognizeTextFromPdf(fileUrl);

    console.log("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù");
    console.log("üìÑ –î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:", extractedText.length);
    console.log("üìÑ –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞:", extractedText.substring(0, 500));

    return NextResponse.json({
      success: true,
      textLength: extractedText.length,
      textPreview: extractedText.substring(0, 500),
      fullText: extractedText
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Yandex Vision PDF:", error);
    return NextResponse.json(
      { 
        error: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
        details: error instanceof Error ? error.message : String(error) 
      },
      { status: 500 }
    );
  }
} 