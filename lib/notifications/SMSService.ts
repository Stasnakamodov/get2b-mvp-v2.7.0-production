/**
 * üí¨ –°–ï–†–í–ò–° SMS –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS.ru API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –≤ –†–æ—Å—Å–∏–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export class SMSService {
  private static instance: SMSService
  private apiId: string | null
  private from: string
  private isConfigured: boolean = false

  constructor() {
    this.apiId = process.env.SMS_RU_API_ID || null
    this.from = process.env.SMS_RU_FROM || 'Get2B'
    this.isConfigured = !!this.apiId
    
    if (!this.isConfigured) {
      console.warn('‚ö†Ô∏è SMS.ru API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.')
      console.log('üí° –ü–æ–ª—É—á–∏—Ç–µ API_ID –Ω–∞ https://sms.ru/')
    } else {
      console.log('‚úÖ SMS —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }
  }

  static getInstance(): SMSService {
    if (!SMSService.instance) {
      SMSService.instance = new SMSService()
    }
    return SMSService.instance
  }

  /**
   * üì§ –û–¢–ü–†–ê–í–ö–ê SMS –°–û–û–ë–©–ï–ù–ò–Ø
   */
  async sendSMS(
    phone: string,
    message: string,
    options?: {
      translit?: boolean
      test?: boolean
      partner_id?: string
    }
  ): Promise<{ success: boolean; sms_id?: string; error?: string; balance?: number }> {
    if (!this.isConfigured) {
      return {
        success: false,
        error: 'SMS service not configured'
      }
    }

    try {
      // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const cleanPhone = this.normalizePhoneNumber(phone)
      if (!this.isValidPhoneNumber(cleanPhone)) {
        return {
          success: false,
          error: 'Invalid phone number format'
        }
      }

      // –ì–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const params = new URLSearchParams({
        api_id: this.apiId!,
        to: cleanPhone,
        msg: message,
        from: this.from,
        json: '1'
      })

      if (options?.translit) {
        params.append('translit', '1')
      }

      if (options?.test) {
        params.append('test', '1')
      }

      if (options?.partner_id) {
        params.append('partner_id', options.partner_id)
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SMS.ru API
      const response = await fetch('https://sms.ru/sms/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: params.toString()
      })

      const result = await response.json()

      console.log('üì± SMS.ru API –æ—Ç–≤–µ—Ç:', result)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (result.status === 'OK') {
        // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        const smsIds = Object.keys(result.sms || {})
        const firstSmsId = smsIds[0]
        const smsInfo = result.sms?.[firstSmsId]

        if (smsInfo?.status === 'OK') {
          return {
            success: true,
            sms_id: firstSmsId,
            balance: result.balance
          }
        } else {
          return {
            success: false,
            error: `SMS error: ${smsInfo?.status_text || 'Unknown error'}`
          }
        }
      } else {
        // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        return {
          success: false,
          error: `API error: ${result.status_text || result.status}`
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown SMS error'
      }
    }
  }

  /**
   * üìã –°–û–ó–î–ê–ù–ò–ï SMS –î–õ–Ø –ü–†–û–ï–ö–¢–ê
   */
  createProjectSMS(
    projectId: string,
    status: string,
    projectData: any,
    recipientRole: 'client' | 'manager' | 'supplier'
  ): string {
    const company = projectData.companyName || '–ü—Ä–æ–µ–∫—Ç'
    const amount = projectData.amount ? `${projectData.amount} ${projectData.currency || 'USD'}` : ''

    // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è SMS (160 —Å–∏–º–≤–æ–ª–æ–≤ –ª–∏–º–∏—Ç)
    switch (status) {
      case 'waiting_approval':
        return recipientRole === 'manager'
          ? `Get2B: –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "${company}" (${amount}). –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`
          : `Get2B: –í–∞—à –ø—Ä–æ–µ–∫—Ç "${company}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.`

      case 'waiting_receipt':
        return `Get2B: –ü—Ä–æ–µ–∫—Ç "${company}" –æ–¥–æ–±—Ä–µ–Ω! –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ ${amount} –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`

      case 'receipt_rejected':
        return `Get2B: –ß–µ–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${company}" –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`

      case 'waiting_manager_receipt':
        return recipientRole === 'manager'
          ? `Get2B: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${company}" (${amount}).`
          : `Get2B: –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ "${company}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —á–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.`

      case 'waiting_client_confirmation':
        return `Get2B: –ß–µ–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${company}" –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`

      case 'completed':
        return `Get2B: –ü—Ä–æ–µ–∫—Ç "${company}" (${amount}) –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.`

      default:
        return `Get2B: –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ "${company}" –æ–±–Ω–æ–≤–ª—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.`
    }
  }

  /**
   * üìû –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê
   */
  private normalizePhoneNumber(phone: string): string {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    let cleaned = phone.replace(/\D/g, '')
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –†–æ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (cleaned.length === 10 && cleaned.startsWith('9')) {
      cleaned = '7' + cleaned
    } else if (cleaned.length === 11 && cleaned.startsWith('8')) {
      cleaned = '7' + cleaned.substring(1)
    } else if (cleaned.length === 11 && cleaned.startsWith('7')) {
      // –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    } else if (cleaned.length === 10) {
      cleaned = '7' + cleaned
    }
    
    return cleaned
  }

  /**
   * ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê
   */
  private isValidPhoneNumber(phone: string): boolean {
    // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä: 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7
    return /^7\d{10}$/.test(phone)
  }

  /**
   * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
   */
  async getBalance(): Promise<{ success: boolean; balance?: number; error?: string }> {
    if (!this.isConfigured) {
      return { success: false, error: 'SMS service not configured' }
    }

    try {
      const params = new URLSearchParams({
        api_id: this.apiId!,
        json: '1'
      })

      const response = await fetch('https://sms.ru/my/balance?' + params.toString())
      const result = await response.json()

      if (result.status === 'OK') {
        return {
          success: true,
          balance: parseFloat(result.balance)
        }
      } else {
        return {
          success: false,
          error: result.status_text || 'Failed to get balance'
        }
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }
    }
  }

  /**
   * üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò
   */
  async getSMSStats(smsId: string): Promise<{
    success: boolean
    status?: string
    statusText?: string
    error?: string
  }> {
    if (!this.isConfigured) {
      return { success: false, error: 'SMS service not configured' }
    }

    try {
      const params = new URLSearchParams({
        api_id: this.apiId!,
        sms_id: smsId,
        json: '1'
      })

      const response = await fetch('https://sms.ru/sms/status?' + params.toString())
      const result = await response.json()

      if (result.status === 'OK') {
        const smsInfo = result.sms?.[smsId]
        return {
          success: true,
          status: smsInfo?.status,
          statusText: smsInfo?.status_text
        }
      } else {
        return {
          success: false,
          error: result.status_text || 'Failed to get SMS status'
        }
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }
    }
  }

  /**
   * üîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
   */
  isEnabled(): boolean {
    return this.isConfigured
  }

  /**
   * üì± –¢–ï–°–¢–û–í–ê–Ø –û–¢–ü–†–ê–í–ö–ê
   */
  async testSMS(phone: string): Promise<{ success: boolean; error?: string }> {
    const message = 'Get2B: –¢–µ—Å—Ç–æ–≤–æ–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!'
    
    const result = await this.sendSMS(phone, message, { test: true })
    
    return {
      success: result.success,
      error: result.error
    }
  }
} 