import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// GET: –ü—Ä–æ–≤–µ—Ä–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞—è–≤–∫–∞—Ö
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const applicationId = searchParams.get('applicationId');

    console.log("üîç [LEGAL-DOCS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");

    if (applicationId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É
      const { data: application, error } = await supabase
        .from('accreditation_applications')
        .select('*')
        .eq('id', applicationId)
        .single();

      if (error || !application) {
        return NextResponse.json({ 
          error: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" 
        }, { status: 404 });
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      let legalDocumentsData = [];
      try {
        legalDocumentsData = typeof application.legal_documents_data === 'string' 
          ? JSON.parse(application.legal_documents_data) 
          : application.legal_documents_data || [];
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ legal_documents_data:', parseError);
      }

      return NextResponse.json({
        success: true,
        application: {
          id: application.id,
          supplier_name: application.supplier_name,
          legal_documents_count: application.legal_documents_count,
          legal_documents_data: legalDocumentsData,
          legal_confirmation: application.legal_confirmation ? JSON.parse(application.legal_confirmation) : null
        }
      });
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
      const { data: applications, error } = await supabase
        .from('accreditation_applications')
        .select('id, supplier_name, legal_documents_count, legal_documents_data, legal_confirmation')
        .order('created_at', { ascending: false })
        .limit(10);

      if (error) {
        return NextResponse.json({ 
          error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫" 
        }, { status: 500 });
      }

      const processedApplications = applications.map(app => {
        let legalDocumentsData = [];
        try {
          legalDocumentsData = typeof app.legal_documents_data === 'string' 
            ? JSON.parse(app.legal_documents_data) 
            : app.legal_documents_data || [];
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ legal_documents_data:', parseError);
        }

        return {
          id: app.id,
          supplier_name: app.supplier_name,
          legal_documents_count: app.legal_documents_count,
          legal_documents_data: legalDocumentsData,
          has_legal_confirmation: !!app.legal_confirmation
        };
      });

      return NextResponse.json({
        success: true,
        applications: processedApplications,
        summary: {
          total: processedApplications.length,
          with_legal_docs: processedApplications.filter(app => app.legal_documents_data.length > 0).length,
          total_legal_docs: processedApplications.reduce((sum, app) => sum + app.legal_documents_data.length, 0)
        }
      });
    }

  } catch (error) {
    console.error("‚ùå [LEGAL-DOCS] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" 
    }, { status: 500 });
  }
} 