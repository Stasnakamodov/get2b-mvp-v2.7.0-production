// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏
const fetch = require('node-fetch');

async function testAccreditationAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏...');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ /api/catalog/submit-accreditation...');
    
    const testData = new FormData();
    testData.append('supplier_id', 'test-supplier-id');
    testData.append('supplier_type', 'profile');
    testData.append('profile_data', JSON.stringify({
      name: 'Test Supplier',
      company_name: 'Test Company',
      category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
      country: '–ö–∏—Ç–∞–π'
    }));
    testData.append('products', JSON.stringify([
      {
        name: 'Test Product',
        description: 'Test Description',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        price: '100',
        currency: 'USD',
        certificates: ['cert1.pdf'],
        images: ['image1.jpg']
      }
    ]));
    testData.append('legal_confirmation', JSON.stringify({
      isLegalEntity: true,
      hasRightToRepresent: true,
      confirmAccuracy: true
    }));

    const response = await fetch('http://localhost:3000/api/catalog/submit-accreditation', {
      method: 'POST',
      body: testData
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(response.headers.entries()));
    
    const responseText = await response.text();
    console.log('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', responseText);

    if (response.ok) {
      console.log('‚úÖ API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ùå API endpoint –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testAccreditationAPI(); 