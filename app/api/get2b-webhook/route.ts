import { type NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// üöÄ GET2B WEBHOOK - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–∞–π—Ç–æ–º
// URL: https://945bbafbb0fd.ngrok-free.app

interface Get2BWebhookPayload {
  type: 'lead' | 'contact' | 'consultation' | 'project_request';
  data: {
    name?: string;
    email?: string; 
    phone?: string;
    company?: string;
    message?: string;
    project_details?: {
      product_type?: string;
      quantity?: string;
      budget?: string;
      timeline?: string;
    };
    source?: string; // –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞
    utm_params?: Record<string, string>;
  };
  timestamp: string;
  signature?: string; // –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —Å service role key (–æ–±—Ö–æ–¥–∏—Ç RLS)
let supabase: any = null;
try {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ service role key, –ø–æ—Ç–æ–º anon key
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  
  if (supabaseUrl && supabaseKey) {
    supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false,
      },
    });
    console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è webhook —Å', 
      process.env.SUPABASE_SERVICE_ROLE_KEY ? 'service role key (–æ–±—Ö–æ–¥–∏—Ç RLS)' : 'anon key');
  } else {
    console.warn('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ë–î');
  }
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
}

export async function POST(req: NextRequest) {
  try {
    console.log('üåê GET2B Webhook: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞');
    
    const body: Get2BWebhookPayload = await req.json();
    console.log('üì¶ Webhook payload:', JSON.stringify(body, null, 2));

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const signature = req.headers.get('x-get2b-signature');
    if (signature && !verifySignature(body, signature)) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook');
      return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ webhook'–æ–≤
    switch (body.type) {
      case 'lead':
        return handleLead(body.data);
      
      case 'contact':
        return handleContact(body.data);
      
      case 'consultation':
        return handleConsultation(body.data);
      
      case 'project_request':
        return handleProjectRequest(body.data);
      
      default:
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø webhook:', body.type);
        return NextResponse.json({ error: 'Unknown webhook type' }, { status: 400 });
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Get2B webhook:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: String(error) },
      { status: 500 }
    );
  }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ webhook
export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const test = url.searchParams.get('test');

  if (test === 'true') {
    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    return NextResponse.json({
      status: 'active',
      webhook_url: 'https://your-domain.com/api/get2b-webhook',
      supported_events: ['lead', 'contact', 'consultation', 'project_request'],
      supabase_connected: !!supabase,
      using_service_role: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
      timestamp: new Date().toISOString()
    });
  }

  return NextResponse.json({ message: 'Get2B Webhook is active' });
}

// üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤ (–∑–∞—è–≤–∫–∏ —Å –ª–µ–Ω–¥–∏–Ω–≥–∞)
async function handleLead(data: Get2BWebhookPayload['data']) {
  console.log('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞:', data);

  try {
    let leadId = null;
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω
    if (supabase) {
      try {
        const { data: lead, error: leadError } = await supabase
          .from('leads')
          .insert({
            user_id: null, // –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name: data.name,
            email: data.email,
            phone: data.phone,
            company: data.company,
            message: data.message,
            source: data.source || 'website',
            utm_params: data.utm_params,
            status: 'new',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .select()
          .single();

        if (leadError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞ –≤ –ë–î:', leadError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        } else {
          leadId = lead.id;
          console.log('‚úÖ –õ–∏–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', leadId);
        }
      } catch (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', dbError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    console.log('‚úÖ –õ–∏–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
      id: leadId,
      name: data.name,
      email: data.email,
      phone: data.phone,
      company: data.company,
      message: data.message,
      source: data.source || 'website'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    await notifyTelegramAboutLead({
      id: leadId,
      ...data,
      source: data.source || 'website'
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({
      success: true,
      lead_id: leadId,
      message: leadId ? '–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' : '–õ–∏–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)',
      received_data: data
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞:', error);
    throw error;
  }
}

// üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç
async function handleContact(data: Get2BWebhookPayload['data']) {
  console.log('üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –ª–∏–¥:', data);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ª–∏–¥
  return handleLead({ ...data, source: 'contact_form' });
}

// üíº –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
async function handleConsultation(data: Get2BWebhookPayload['data']) {
  console.log('üíº –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫–∞–∫ –ª–∏–¥:', data);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ª–∏–¥
  return handleLead({ ...data, source: 'consultation_form' });
}

// üèóÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
async function handleProjectRequest(data: Get2BWebhookPayload['data']) {
  console.log('üèóÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –ª–∏–¥:', data);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const projectMessage = [
    data.message || '',
    data.project_details?.product_type ? `–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: ${data.project_details.product_type}` : '',
    data.project_details?.quantity ? `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${data.project_details.quantity}` : '',
    data.project_details?.budget ? `–ë—é–¥–∂–µ—Ç: ${data.project_details.budget}` : '',
    data.project_details?.timeline ? `–°—Ä–æ–∫–∏: ${data.project_details.timeline}` : ''
  ].filter(Boolean).join('\n');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ª–∏–¥ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  return handleLead({ 
    ...data, 
    message: projectMessage,
    source: 'project_request_form' 
  });
}

// üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
function verifySignature(payload: any, signature: string): boolean {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ webhook
  // –í production –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–¥–ø–∏—Å—å
  const secret = process.env.GET2B_WEBHOOK_SECRET;
  if (!secret) return true; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å HMAC –ø—Ä–æ–≤–µ—Ä–∫—É
  return true;
}

// üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function notifyTelegramAboutLead(lead: any) {
  try {
    const message = `üéØ –ù–û–í–´–ô –õ–ò–î —Å —Å–∞–π—Ç–∞ Get2B!\n\n` +
      `üë§ –ò–º—è: ${lead.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +  
      `üìß Email: ${lead.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${lead.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${lead.company || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${lead.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}\n` +
      `üåê –ò—Å—Ç–æ—á–Ω–∏–∫: ${lead.source}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

    await sendTelegramMessage(message);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–¥–µ:', error);
  }
}

async function sendTelegramMessage(text: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!botToken || !chatId) {
    console.warn('‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML'
      })
    });

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
  }
} 