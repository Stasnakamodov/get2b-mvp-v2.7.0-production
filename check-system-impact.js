const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function checkSystemImpact() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∏—è–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–∏—Å—Ç–µ–º—É\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —è –∏—Å–ø—Ä–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
  console.log('üìã –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ:');
  const { data: modifiedProducts } = await supabase
    .from('catalog_user_products')
    .select('id, name, category, updated_at')
    .in('id', [
      '3bbb55df-193d-4cec-9067-efbf651be555',
      'f623e21b-0bd3-431e-be83-1514bef428a7', 
      '3fd129a2-6d34-4024-8a64-1b591eb2e0fe'
    ])
    .order('updated_at', { ascending: false });
    
  modifiedProducts?.forEach(p => {
    console.log(`   ‚úÖ ${p.name}: ${p.category} (–æ–±–Ω–æ–≤–ª–µ–Ω: ${p.updated_at})`);
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
  console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ:');
  const { data: allProducts } = await supabase
    .from('catalog_user_products')
    .select('category');
    
  if (allProducts) {
    const categoryStats = {};
    allProducts.forEach(p => {
      categoryStats[p.category] = (categoryStats[p.category] || 0) + 1;
    });
    
    console.log('   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:', allProducts.length);
    Object.entries(categoryStats)
      .sort(([,a], [,b]) => b - a)
      .forEach(([cat, count]) => {
        console.log(`   - ${cat}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
      });
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  console.log('\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:');
  
  try {
    const response = await fetch('http://localhost:3000/api/catalog/categories/hierarchical?room=user');
    const data = await response.json();
    
    if (data.success) {
      console.log('   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      
      // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
      const electronicsCategory = data.categoryTrees?.find(tree => 
        tree.main_category.name.toLowerCase().includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω')
      );
      
      if (electronicsCategory) {
        console.log(`   üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT: ${electronicsCategory.main_category.products_count || 0} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
      
      // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ—Ç–æ–≤–∞—Ä–æ–≤
      const automotiveCategory = data.categoryTrees?.find(tree => 
        tree.main_category.name.toLowerCase().includes('–∞–≤—Ç–æ')
      );
      
      if (automotiveCategory) {
        console.log(`   üöó –ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${automotiveCategory.main_category.products_count || 0} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
      
    } else {
      console.log('   ‚ùå API –æ—à–∏–±–∫–∞:', data.error);
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', error.message);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏–∫—É –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
  
  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const fs = require('fs');
  const path = require('path');
  
  try {
    const categoryMappingPath = path.join(process.cwd(), 'components/catalog-categories-and-certifications.js');
    if (fs.existsSync(categoryMappingPath)) {
      console.log('   ‚úÖ –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —Ç–∞–º automotive
      const content = fs.readFileSync(categoryMappingPath, 'utf8');
      if (content.includes('automotive') || content.includes('–ê–≤—Ç–æ')) {
        console.log('   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è automotive/–∞–≤—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–∞–ø–ø–∏–Ω–≥–µ');
      } else {
        console.log('   ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è automotive –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –º–∞–ø–ø–∏–Ω–≥–µ');
      }
    }
  } catch (error) {
    console.log('   ‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥:', error.message);
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª–∏ verified —Ç–æ–≤–∞—Ä—ã
  console.log('\nüß° –ü—Ä–æ–≤–µ—Ä—è–µ–º verified —Ç–æ–≤–∞—Ä—ã (–æ—Ä–∞–Ω–∂–µ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞):');
  const { data: verifiedProducts } = await supabase
    .from('catalog_verified_products')
    .select('category')
    .limit(10);
    
  if (verifiedProducts && verifiedProducts.length > 0) {
    const verifiedCategories = {};
    verifiedProducts.forEach(p => {
      verifiedCategories[p.category] = (verifiedCategories[p.category] || 0) + 1;
    });
    
    console.log('   ‚úÖ Verified —Ç–æ–≤–∞—Ä—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã');
    console.log('   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ verified —Ç–æ–≤–∞—Ä–æ–≤:', Object.keys(verifiedCategories).join(', '));
  } else {
    console.log('   ‚ÑπÔ∏è  Verified —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞');
  }
  
  console.log('\n‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  console.log('   üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞');
  console.log('   üîß –°–∏—Å—Ç–µ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞: –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç–∞');
  console.log('   üåê API: —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('   üöÄ –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: –±—É–¥—É—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–µ');
  console.log('   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

  process.exit(0);
}

checkSystemImpact().catch(console.error);