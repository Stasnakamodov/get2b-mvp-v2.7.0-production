import { type NextRequest, NextResponse } from "next/server"

const TELEGRAM_CHAT_BOT_TOKEN = process.env.TELEGRAM_CHAT_BOT_TOKEN

export async function POST(req: NextRequest) {
  if (!TELEGRAM_CHAT_BOT_TOKEN) {
    return NextResponse.json({ error: "TELEGRAM_CHAT_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" }, { status: 400 })
  }

  try {
    const { webhookUrl } = await req.json()

    if (!webhookUrl) {
      return NextResponse.json({ error: "webhookUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 })
    }

    console.log("ü§ñ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è ChatHub Assistant:", webhookUrl)
    console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Ç-–±–æ—Ç —Ç–æ–∫–µ–Ω:", TELEGRAM_CHAT_BOT_TOKEN ? "–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    const deleteResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_CHAT_BOT_TOKEN}/deleteWebhook`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
    })

    const deleteResult = await deleteResponse.json()
    console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —á–∞—Ç-–±–æ—Ç webhook:", deleteResult)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞
    const setResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_CHAT_BOT_TOKEN}/setWebhook`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        url: webhookUrl,
        allowed_updates: ["message", "callback_query"],
        drop_pending_updates: true, // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      }),
    })

    const setResult = await setResponse.json()
    console.log("üì° ChatHub Assistant setWebhook –æ—Ç–≤–µ—Ç:", setResult)

    if (setResult.ok) {
      return NextResponse.json({
        success: true,
        result: setResult,
        message: "Webhook –¥–ª—è ChatHub Assistant —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
      })
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", setResult)
      return NextResponse.json({ error: setResult.description || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }, { status: 400 })
    }
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç-–±–æ—Ç webhook:", error)
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
}

export async function GET() {
  if (!TELEGRAM_CHAT_BOT_TOKEN) {
    return NextResponse.json({ error: "TELEGRAM_CHAT_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" }, { status: 400 })
  }

  try {
    console.log("üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç-–±–æ—Ç webhook")

    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_CHAT_BOT_TOKEN}/getWebhookInfo`)
    const result = await response.json()

    console.log("üì° ChatHub Assistant getWebhookInfo –æ—Ç–≤–µ—Ç:", result)

    return NextResponse.json(result)
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç webhook info:", error)
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
} 