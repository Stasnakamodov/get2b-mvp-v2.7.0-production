/**
 * Bot Hub AI Service
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bot Hub API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–æ–π—Å–æ–≤ —á–µ—Ä–µ–∑ –ò–ò
 * –°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Bot Hub
 */

interface BotHubAIResponse {
  status: 'success' | 'error';
  ai_response?: string;
  error_message?: string;
}

interface InvoiceItem {
  name: string;
  quantity: number;
  price: number;
  total: number;
  code?: string;
  unit?: string;
}

interface ParsedInvoice {
  items: InvoiceItem[];
  invoiceInfo: {
    number?: string;
    date?: string;
    seller?: string;
    buyer?: string;
    totalAmount?: string;
    currency?: string;
  };
  bankInfo?: {
    bankName?: string;
    accountNumber?: string;
    swift?: string;
  };
}

export class BotHubAIService {
  private apiKey: string;
  private baseUrl: string;

  constructor() {
    this.apiKey = process.env.BOTHUB_API_KEY || '';
    this.baseUrl = 'https://api.bothub.chat'; // –ë–∞–∑–æ–≤—ã–π URL Bot Hub API
  }

  /**
   * ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Bot Hub AI API
   */
  async processInvoiceWithAI(ocrText: string, userId: string = 'invoice_parser'): Promise<ParsedInvoice> {
    console.log("ü§ñ –ó–∞–ø—É—Å–∫ Bot Hub AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–æ–π—Å–∞...");

    if (!this.apiKey) {
      throw new Error('BOTHUB_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–æ–π—Å–∞
    const prompt = `
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–æ–π—Å–æ–≤. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ OCR —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–¢–ï–ö–°–¢ –ò–ù–í–û–ô–°–ê:
${ocrText}

–¢–†–ï–ë–£–ï–ú–´–ô –§–û–†–ú–ê–¢ JSON (—Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ):
{
  "items": [
    {
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
      "quantity": 1,
      "price": 100.00,
      "total": 100.00,
      "code": "ITEM-001",
      "unit": "—à—Ç"
    }
  ],
  "invoiceInfo": {
    "number": "INV-2025-001",
    "date": "31/03/2025",
    "seller": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø—Ä–æ–¥–∞–≤—Ü–∞",
    "buyer": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
    "totalAmount": "1000.00",
    "currency": "RMB"
  },
  "bankInfo": {
    "bankName": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞",
    "accountNumber": "1234567890",
    "swift": "BANKCODE"
  }
}

–ü–†–ê–í–ò–õ–ê:
1. –ò–∑–≤–ª–µ–∫–∞–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
2. –¶–µ–Ω—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ —á–∏—Å–ª–∞ (—É–±–∏—Ä–∞–π –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ)
3. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π, –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º
4. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
5. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ - –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ items: []
`;

    try {
      console.log("üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Bot Hub AI API...");

      const response = await fetch(`${this.baseUrl}/apiai/process_message`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: userId,
          message_content: prompt
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå Bot Hub AI API –æ—à–∏–±–∫–∞:", response.status, errorText);
        throw new Error(`Bot Hub AI API error: ${response.status} - ${errorText}`);
      }

      const data: BotHubAIResponse = await response.json();
      console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç Bot Hub AI API:", data);

      if (data.status === 'error') {
        throw new Error(`Bot Hub AI error: ${data.error_message}`);
      }

      if (!data.ai_response) {
        throw new Error('Bot Hub AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç');
      }

      const aiResponse = data.ai_response;
      console.log("ü§ñ Bot Hub AI –æ—Ç–≤–µ—Ç:", aiResponse);

      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Bot Hub AI
      const parsedResult: ParsedInvoice = JSON.parse(aiResponse);

      console.log("‚úÖ Bot Hub AI –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:", {
        itemsFound: parsedResult.items.length,
        hasInvoiceInfo: !!parsedResult.invoiceInfo,
        hasBankInfo: !!parsedResult.bankInfo
      });

      return parsedResult;

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Bot Hub AI –ø–∞—Ä—Å–∏–Ω–≥–∞:", error);
      throw error;
    }
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Bot Hub API
   */
  async testConnection(): Promise<boolean> {
    try {
      console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Bot Hub AI...");

      const response = await fetch(`${this.baseUrl}/apiai/process_message`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: 'test_user',
          message_content: 'Test connection'
        }),
      });

      const isConnected = response.ok;
      console.log(`${isConnected ? '‚úÖ' : '‚ùå'} Bot Hub AI —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${isConnected ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ—É–¥–∞—á–Ω–æ'}`);

      return isConnected;

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bot Hub AI:", error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
export const botHubAIService = new BotHubAIService();