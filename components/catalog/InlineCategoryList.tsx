'use client'

import React, { useState, useEffect } from 'react'
import { Package, Search, Grid3X3, List } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"

interface InlineCategoryListProps {
  onCategorySelect: (category: any) => void
  selectedRoom?: 'orange' | 'blue'
}

export default function InlineCategoryList({ 
  onCategorySelect, 
  selectedRoom = 'orange'
}: InlineCategoryListProps) {
  const [categories, setCategories] = useState<any[]>([])
  const [categoriesWithCounts, setCategoriesWithCounts] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')

  // –¶–≤–µ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã
  const headerColors = selectedRoom === 'orange' 
    ? {
        primary: 'orange-600',
        light: 'orange-100',
        border: 'orange-300'
      }
    : {
        primary: 'blue-600', 
        light: 'blue-100',
        border: 'blue-300'
      }

  useEffect(() => {
    loadCategoriesWithCounts()
  }, [selectedRoom])

  const loadCategoriesWithCounts = async () => {
    try {
      setLoading(true)
      setError(null)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoriesResponse = await fetch('/api/catalog/categories', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const categoriesData = await categoriesResponse.json()

      if (!categoriesData.categories) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
      }

      console.log(`‚úÖ [InlineCategoryList] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesData.categories.length}`)
      
      // –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      const categoriesWithCounts = await Promise.all(
        categoriesData.categories.map(async (category: any) => {
          try {
            const productsResponse = await fetch(`/api/catalog/products?category=${encodeURIComponent(category.name)}&supplier_type=${selectedRoom === 'orange' ? 'verified' : 'user'}`, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json'
              }
            })

            const productsData = await productsResponse.json()
            const productCount = productsData.products ? productsData.products.length : 0

            return {
              ...category,
              productCount
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}:`, error)
            return {
              ...category,
              productCount: 0
            }
          }
        })
      )

      setCategoriesWithCounts(categoriesWithCounts)
      setCategories(categoriesData.categories)

    } catch (error) {
      console.error('‚ùå [InlineCategoryList] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
      setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    } finally {
      setLoading(false)
    }
  }

  const filteredCategories = React.useMemo(() => {
    if (!searchQuery.trim()) {
      return categoriesWithCounts
    }

    return categoriesWithCounts.filter(category => 
      category.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
  }, [categoriesWithCounts, searchQuery])

  if (loading) {
    return (
      <div className="bg-white rounded-lg border p-6 mb-6">
        <div className="flex items-center justify-center h-32">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
          <span className="ml-3 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</span>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg border p-6 mb-6">
        <div className="text-center text-red-600">
          <p>{error}</p>
          <Button onClick={loadCategoriesWithCounts} className="mt-4">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg border p-6 mb-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold">
          –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
          <span className="ml-2 text-sm font-normal text-gray-500">
            ({selectedRoom === 'orange' ? '–ê–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã–µ' : '–õ–∏—á–Ω—ã–µ'} –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏)
          </span>
        </h3>
        <div className="flex items-center space-x-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewMode('grid')}
            className={viewMode === 'grid' ? `bg-${headerColors.primary} hover:bg-${headerColors.primary}` : ''}
          >
            <Grid3X3 className="h-4 w-4" />
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewMode('list')}
            className={viewMode === 'list' ? `bg-${headerColors.primary} hover:bg-${headerColors.primary}` : ''}
          >
            <List className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <div className="mb-4">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <div>
        {filteredCategories.length === 0 ? (
          <div className="text-center text-gray-500 py-8">
            {searchQuery ? '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π'}
          </div>
        ) : (
          <div className={viewMode === 'grid' 
            ? "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4" 
            : "space-y-3"
          }>
            {filteredCategories.map((category) => {
              // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏ (–∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏)
              const getDecorativeSubcategories = (categoryName: string) => {
                const subcategories: { [key: string]: string[] } = {
                  '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã': ['üîß –ó–∞–ø—á–∞—Å—Ç–∏', 'üöó –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 'üõ¢Ô∏è –ú–∞—Å–ª–∞'],
                  '–î–æ–º –∏ –±—ã—Ç': ['ü™ë –ú–µ–±–µ–ª—å', 'üé® –î–µ–∫–æ—Ä', 'üè† –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞'],
                  '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞': ['üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã', 'üè• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'ü©π –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏'],
                  '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è': ['ü•¨ –°–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã', 'ü•´ –ö–æ–Ω—Å–µ—Ä–≤—ã', 'ü•§ –ù–∞–ø–∏—Ç–∫–∏'],
                  '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å': ['‚öôÔ∏è –°—Ç–∞–Ω–∫–∏', 'üî® –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'üè≠ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã'],
                  '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': ['üß± –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'üî® –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'üî© –ö—Ä–µ–ø–µ–∂'],
                  '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞': ['üßµ –¢–∫–∞–Ω–∏', 'üëï –û–¥–µ–∂–¥–∞', 'üëü –û–±—É–≤—å'],
                  '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã', 'üîå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã']
                }
                return subcategories[categoryName] || ['üì¶ –¢–æ–≤–∞—Ä—ã', 'üõ†Ô∏è –£—Å–ª—É–≥–∏', 'üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã']
              }

              const subcats = getDecorativeSubcategories(category.name)
              // –†–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
              const productCount = category.productCount || 0
              
              // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã
              const roomColors = selectedRoom === 'orange' 
                ? {
                    primary: 'orange-500',
                    primaryHover: 'orange-600', 
                    light: 'orange-100',
                    lightHover: 'orange-50',
                    border: 'orange-400',
                    gradient: 'from-orange-500 to-orange-600',
                    hoverGradient: 'hover:from-orange-50 hover:to-white'
                  }
                : {
                    primary: 'blue-500',
                    primaryHover: 'blue-600',
                    light: 'blue-100', 
                    lightHover: 'blue-50',
                    border: 'blue-400',
                    gradient: 'from-blue-500 to-blue-600',
                    hoverGradient: 'hover:from-blue-50 hover:to-white'
                  }

              return (
                <div
                  key={category.id || category.name}
                  className={`
                    group relative border border-gray-200 rounded-xl p-5 cursor-pointer 
                    transition-all duration-300 hover:border-${roomColors.border} hover:shadow-lg bg-white hover:bg-gradient-to-br ${roomColors.hoverGradient}
                    ${viewMode === 'list' ? 'flex items-center' : ''}
                  `}
                  onClick={() => onCategorySelect(category)}
                >
                  {viewMode === 'grid' ? (
                    <>
                      {/* –°—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
                      <div className={`absolute top-3 right-3 bg-${roomColors.primary} text-white text-xs font-semibold px-2.5 py-1 rounded-full shadow-sm`}>
                        {productCount}
                      </div>
                      
                      <div className="text-left">
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                        <div className="flex items-center mb-4">
                          <div className={`w-12 h-12 bg-gradient-to-br ${roomColors.gradient} rounded-xl flex items-center justify-center mr-4 shadow-md group-hover:shadow-lg transition-shadow`}>
                            <Package className="h-6 w-6 text-white" />
                          </div>
                          <div className="flex-1">
                            <h4 className="font-semibold text-gray-900 text-base">{category.name}</h4>
                            <p className="text-xs text-gray-500 mt-0.5">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</p>
                          </div>
                        </div>
                        
                        {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏ */}
                        <div className="space-y-1.5 ml-1">
                          {subcats.map((subcat, idx) => (
                            <div key={idx} className="flex items-center text-sm text-gray-600 hover:text-gray-800 transition-colors">
                              <span className="mr-2">{subcat.split(' ')[0]}</span>
                              <span className="text-gray-600">{subcat.split(' ').slice(1).join(' ')}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    </>
                  ) : (
                    <div className="flex items-center justify-between w-full">
                      <div className="flex items-center flex-1">
                        <div className={`w-12 h-12 bg-gradient-to-br ${roomColors.gradient} rounded-xl flex items-center justify-center mr-4 shadow-md`}>
                          <Package className="h-6 w-6 text-white" />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-semibold text-gray-900 text-base">{category.name}</h4>
                          <div className="flex items-center space-x-4 mt-1">
                            {subcats.map((subcat, idx) => (
                              <span key={idx} className="text-xs text-gray-600 bg-gray-100 px-2 py-1 rounded-md">
                                {subcat}
                              </span>
                            ))}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-3">
                        <div className={`bg-${roomColors.primary} text-white text-xs font-semibold px-2.5 py-1 rounded-full`}>
                          {productCount}
                        </div>
                        <div className={`text-gray-400 group-hover:text-${roomColors.primary} transition-colors`}>
                          ‚Üí
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        )}
      </div>
    </div>
  )
}