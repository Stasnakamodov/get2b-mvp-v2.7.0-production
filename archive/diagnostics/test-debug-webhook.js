require('dotenv').config({ path: '.env.local' });

async function testDebugWebhook() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π webhook...\n');
  
  const testMessage = `DEBUG TEST ${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`;
  
  const webhookPayload = {
    update_id: Date.now(),
    message: {
      message_id: Date.now(),
      from: {
        id: 987654321,
        is_bot: false,
        first_name: "Debug",
        last_name: "Test",
        username: "debug_test"
      },
      chat: {
        id: parseInt(process.env.TELEGRAM_CHAT_ID),
        type: "private"
      },
      date: Math.floor(Date.now() / 1000),
      text: testMessage,
      reply_to_message: {
        message_id: 123,
        from: {
          id: 8195945436,
          is_bot: true,
          first_name: "Get2B ChatBot"
        },
        chat: {
          id: parseInt(process.env.TELEGRAM_CHAT_ID),
          type: "private"
        },
        date: Math.floor(Date.now() / 1000) - 60,
        text: `üÜî –ü—Ä–æ–µ–∫—Ç: 1570961b-ca64-4de4-8170-a7ef99b2ae5b`
      }
    }
  };

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ debug endpoint...');
  
  try {
    const response = await fetch('http://localhost:3000/api/debug-webhook', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(webhookPayload)
    });

    const result = await response.json();
    console.log(`‚úÖ Debug webhook –æ—Ç–≤–µ—Ç (${response.status}):`);
    console.log(JSON.stringify(result, null, 2));
    
    if (result.analysis) {
      console.log('\nüìä –ê–ù–ê–õ–ò–ó:');
      console.log(`   –ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${result.analysis.hasMessage ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${result.analysis.messageText}"`);
      console.log(`   –ï—Å—Ç—å reply: ${result.analysis.hasReply ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –¢–µ–∫—Å—Ç reply: "${result.analysis.replyText || '–ù–ï–¢'}"`);
      console.log(`   –ï—Å—Ç—å ID –ø—Ä–æ–µ–∫—Ç–∞: ${result.analysis.hasProjectId ? '‚úÖ' : '‚ùå'}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testDebugWebhook(); 