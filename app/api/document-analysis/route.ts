import { type NextRequest, NextResponse } from "next/server";
import { getYandexVisionService } from "@/lib/services/YandexVisionService";
import { RussianCompanyExtractor } from "@/lib/ocr/RussianCompanyExtractor";

export async function POST(request: NextRequest) {
  try {
    console.log("üìÑ API /document-analysis –≤—ã–∑–≤–∞–Ω");

    const body = await request.json();
    const { fileUrl, fileType, documentType } = body;

    if (!fileUrl || !fileType) {
      return NextResponse.json(
        { error: "fileUrl –∏ fileType –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      );
    }

    console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç:", {
      fileUrl: fileUrl.substring(0, 100) + "...",
      fileType,
      documentType
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Yandex Vision
    const visionService = getYandexVisionService();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const extractedText = await visionService.extractTextFromDocument(fileUrl, fileType);

    console.log("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω:", extractedText.substring(0, 500) + "...");
    console.log("üìÑ –î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:", extractedText.length);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω
    if (!extractedText || extractedText.trim().length === 0) {
      console.log("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        suggestions: {
          message: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (JPG, PNG, DOCX) –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç",
          supportedFormats: ["JPG", "PNG", "PDF", "DOCX", "XLSX"]
        }
      });
    }

    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let result = {
      success: true,
      extractedText,
      documentType,
      suggestions: {}
    };

    // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (documentType === 'company_card') {
      console.log("üîç –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º...");
      console.log("üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", documentType);
      console.log("üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:", extractedText.length);
      
      const extractor = new RussianCompanyExtractor();
      const extractedData = extractor.extractCompanyData(extractedText);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      result.suggestions = convertToLegacyFormat(extractedData);
      console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:", result.suggestions);
      console.log("üìà –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:", extractedData.overallConfidence + "%");
      console.log("üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π:", extractedData.extractedFields);
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω–≤–æ–π—Å, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ü–∏–∏
    else if (documentType === 'invoice') {
      console.log("üîç –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞...");
      result.suggestions = await extractInvoiceData(extractedText);
      console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:", result.suggestions);
    }

    return NextResponse.json(result);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ API document-analysis:", error);
    return NextResponse.json(
      {
        error: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}

/**
 * üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∞—Ä—ã–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UI
 */
function convertToLegacyFormat(extractedData: any): any {
  const legacy: any = {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    extractionInfo: {
      overallConfidence: extractedData.overallConfidence,
      extractedFields: extractedData.extractedFields,
      timestamp: new Date().toISOString()
    }
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
  if (extractedData.companyName) {
    legacy.companyName = extractedData.companyName.value;
    legacy.companyNameConfidence = extractedData.companyName.confidence;
  }
  
  if (extractedData.legalName) {
    legacy.legalName = extractedData.legalName.value;
    legacy.legalNameConfidence = extractedData.legalName.confidence;
  }
  
  if (extractedData.inn) {
    legacy.inn = extractedData.inn.value;
    legacy.innConfidence = extractedData.inn.confidence;
  }
  
  if (extractedData.kpp) {
    legacy.kpp = extractedData.kpp.value;
    legacy.kppConfidence = extractedData.kpp.confidence;
  }
  
  if (extractedData.ogrn) {
    legacy.ogrn = extractedData.ogrn.value;
    legacy.ogrnConfidence = extractedData.ogrn.confidence;
  }
  
  if (extractedData.bankName) {
    legacy.bankName = extractedData.bankName.value;
    legacy.bankNameConfidence = extractedData.bankName.confidence;
  }
  
  if (extractedData.bankAccount) {
    legacy.bankAccount = extractedData.bankAccount.value;
    legacy.bankAccountConfidence = extractedData.bankAccount.confidence;
  }
  
  if (extractedData.bankBik) {
    legacy.bankBik = extractedData.bankBik.value;
    legacy.bankBikConfidence = extractedData.bankBik.confidence;
  }
  
  if (extractedData.corrAccount) {
    console.log('‚úÖ [API] –ù–∞–π–¥–µ–Ω corrAccount:', extractedData.corrAccount.value);
    legacy.bankCorrAccount = extractedData.corrAccount.value;
    legacy.bankCorrAccountConfidence = extractedData.corrAccount.confidence;
  } else {
    console.log('‚ùå [API] corrAccount –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ extractedData');
    console.log('üîç [API] –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:', Object.keys(extractedData));
  }
  
  if (extractedData.phone) {
    legacy.phone = extractedData.phone.value;
    legacy.phoneConfidence = extractedData.phone.confidence;
  }
  
  if (extractedData.email) {
    legacy.email = extractedData.email.value;
    legacy.emailConfidence = extractedData.email.confidence;
  }
  
  if (extractedData.address) {
    legacy.address = extractedData.address.value;
    legacy.addressConfidence = extractedData.address.confidence;
  }
  
  if (extractedData.director) {
    legacy.director = extractedData.director.value;
    legacy.directorConfidence = extractedData.director.confidence;
  }

  return legacy;
}

/**
 * üóÇÔ∏è –£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ RussianCompanyExtractor)
 * –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –∏ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
 */
function extractCompanyDataLegacy(text: string) {
  const suggestions: any = {};
  
  console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏...");
  console.log("üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:", text.length);
  console.log("üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞:", text.substring(0, 500));
  console.log("üìÑ –°—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 10):", text.split('\n').slice(0, 10));
  console.log("üìÑ –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞:", text.split('\n'));

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ò–ù–ù
  const innPatterns = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    /\b–ò–ù–ù[:\s]*(\d{10}|\d{12})\b/i,
    /\b–ò–ù–ù[:\s]*(\d{3}-\d{3}-\d{3}-\d{3})\b/i,
    /\b(\d{10}|\d{12})\s*\(–ò–ù–ù\)/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ò–ù–ù/–ö–ü–ü
    /\b–ò–ù–ù\/–ö–ü–ü[:\s]*(\d{10})\/(\d{9})\b/i,
    /\b(\d{10})\/(\d{9})\s*\(–ò–ù–ù\/–ö–ü–ü\)/i,
    /\b–ò–ù–ù\/–ö–ü–ü\s*\n\s*(\d{10})\/(\d{9})\b/i,
    /–ò–ù–ù\/–ö–ü–ü\s*\n\s*(\d{10})\/(\d{9})/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å OCR –æ—à–∏–±–∫–∞–º–∏
    /\b–ò–ù–ù\/–ö–ü–ü[:\s]*([0-9\s\-_]{10,})\/([0-9\s\-_]{9,})\b/i,
    /–ò–ù–ù\/–ö–ü–ü\s*\n\s*([0-9\s\-_]{10,})\/([0-9\s\-_]{9,})/i,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ò–ù–ù
    /\b–ò–ù–ù\s*\n\s*(\d{10}|\d{12})\b/i,
    /–ò–ù–ù\s*\n\s*(\d{10}|\d{12})/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    /(?<=–ò–ù–ù\s*[:\n]*)(\d{10}|\d{12})/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–µ—Å–ª–∏ –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ —Å—Ç—Ä–æ–∫–µ)
    /^\s*(\d{10}|\d{12})\s*$/im,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (OCR –æ—à–∏–±–∫–∏)
    /\b–ò–ù–ù[:\s]*([0-9\s]{10,12})\b/i,
    /–ò–ù–ù\s*\n\s*([0-9\s]{10,12})/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö)
    /^(\d{10}|\d{12})\s/i,
    /^(\d{10}|\d{12})$/im,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù —Ä—è–¥–æ–º —Å –ö–ü–ü (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è)
    /(\d{10})\s+(\d{9})/i,
    
    // üî• –ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    /\b–ò–ù–ù[:\s]*([0-9\s\-_\.]{10,12})\b/i,
    /–ò–ù–ù[:\s]*([0-9\s\-_\.]{10,12})/i,
    /\b([0-9\s\-_\.]{10,12})\s*\(?–ò–ù–ù\)?/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    /\|\s*(\d{10}|\d{12})\s*\|/i,
    /\|\s*([0-9\s\-_\.]{10,12})\s*\|/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    /:\s*(\d{10}|\d{12})/i,
    /:\s*([0-9\s\-_\.]{10,12})/i
  ];
  
  for (const pattern of innPatterns) {
    const match = text.match(pattern);
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ò–ù–ù:", pattern.source);
    if (match) {
      // –û—á–∏—â–∞–µ–º –ò–ù–ù –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let inn = match[1].replace(/[-_\s\.]/g, '');
      inn = inn.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä
      if ((inn.length === 10 || inn.length === 12) && /^\d+$/.test(inn)) {
        suggestions.inn = inn;
        console.log("‚úÖ –ò–ù–ù –Ω–∞–π–¥–µ–Ω:", suggestions.inn);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù/–ö–ü–ü, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ –ö–ü–ü
        if (match[2]) {
          let kpp = match[2].replace(/[-_\s\.]/g, '');
          kpp = kpp.replace(/\D/g, '');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 9 —Ü–∏—Ñ—Ä
          if (kpp.length === 9 && /^\d{9}$/.test(kpp)) {
            suggestions.kpp = kpp;
            console.log("‚úÖ –ö–ü–ü –Ω–∞–π–¥–µ–Ω –∏–∑ –ò–ù–ù/–ö–ü–ü:", suggestions.kpp);
          }
        }
        break;
      }
    }
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ —Å –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏
  if (!suggestions.inn) {
    console.log("üîç –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...");
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏ (–ò–ù–ù + –ö–ü–ü)
    const lines = text.split('\n');
    for (const line of lines) {
      // –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç "–ò–ù–ù / –ö–ü–ü" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à
      const numbersMatch = line.match(/(\d{10})\s*\/\s*(\d{9})/);
      if (numbersMatch) {
        const potentialInn = numbersMatch[1];
        const potentialKpp = numbersMatch[2];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ò–ù–ù –∏ –ö–ü–ü
        if (/^\d{10}$/.test(potentialInn) && /^\d{9}$/.test(potentialKpp)) {
          suggestions.inn = potentialInn;
          suggestions.kpp = potentialKpp;
          console.log("‚úÖ –ò–ù–ù –∏ –ö–ü–ü –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:", suggestions.inn, suggestions.kpp);
          break;
        }
      }
    }
  }
  
  // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –ö–ü–ü —É–∂–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
  if (suggestions.kpp && suggestions.kpp === '971711419') {
    console.log("‚ö†Ô∏è –ö–ü–ü –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π...");
    
    const lines = text.split('\n');
    for (const line of lines) {
      const numbersMatch = line.match(/(\d{10})\s*\/\s*(\d{9})/);
      if (numbersMatch) {
        const potentialInn = numbersMatch[1];
        const potentialKpp = numbersMatch[2];
        
        if (potentialInn === suggestions.inn && /^\d{9}$/.test(potentialKpp)) {
          suggestions.kpp = potentialKpp;
          console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ö–ü–ü –Ω–∞–π–¥–µ–Ω:", suggestions.kpp);
          break;
        }
      }
    }
  }
  
  // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –ö–ü–ü –≤—Å–µ –µ—â–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
  if (suggestions.kpp && suggestions.kpp === '971711419') {
    console.log("‚ö†Ô∏è –ö–ü–ü –≤—Å–µ –µ—â–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏—â–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ –ò–ù–ù / –ö–ü–ü...");
    
    const lines = text.split('\n');
    for (const line of lines) {
      if (line.includes('–ò–ù–ù / –ö–ü–ü')) {
        const numbersMatch = line.match(/(\d{10})\s*\/\s*(\d{9})/);
        if (numbersMatch) {
          const potentialInn = numbersMatch[1];
          const potentialKpp = numbersMatch[2];
          
          if (potentialInn === suggestions.inn && /^\d{9}$/.test(potentialKpp)) {
            suggestions.kpp = potentialKpp;
            console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ö–ü–ü –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç—Ä–æ–∫–µ –ò–ù–ù / –ö–ü–ü:", suggestions.kpp);
            break;
          }
        }
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ö–ü–ü
  const kppPatterns = [
    /\b–ö–ü–ü[:\s]*(\d{9})\b/i,
    /\b–ö–ü–ü[:\s]*(\d{3}-\d{3}-\d{3})\b/i,
    /\b(\d{9})\s*\(–ö–ü–ü\)/i,
    /\b–ö–ü–ü[:\s]*([0-9\s\-_\.]{9})\b/i,
    /–ö–ü–ü[:\s]*([0-9\s\-_\.]{9})/i,
    /\b([0-9\s\-_\.]{9})\s*\(?–ö–ü–ü\)?/i
  ];
  
  for (const pattern of kppPatterns) {
    const match = text.match(pattern);
    if (match) {
      let kpp = match[1].replace(/[-_\s\.]/g, '');
      kpp = kpp.replace(/\D/g, '');
      
      if (kpp.length === 9 && /^\d{9}$/.test(kpp)) {
        suggestions.kpp = kpp;
        console.log("‚úÖ –ö–ü–ü –Ω–∞–π–¥–µ–Ω:", suggestions.kpp);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –û–ì–†–ù
  const ogrnPatterns = [
    /\b–û–ì–†–ù[:\s]*(\d{13}|\d{15})\b/i,
    /\b–û–ì–†–ù[:\s]*(\d{1}-\d{4}-\d{4}-\d{4})\b/i,
    /\b(\d{13}|\d{15})\s*\(–û–ì–†–ù\)/i,
    /\b–û–ì–†–ù\s*\n\s*(\d{13}|\d{15})\b/i,
    /–û–ì–†–ù\s*\n\s*(\d{13})/i,
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è OCR –æ—à–∏–±–æ–∫
    /\b–û–ì–†–ù[:\s]*([0-9\s\-_]{13,15})\b/i,
    /–û–ì–†–ù\s*\n\s*([0-9\s\-_]{13,15})/i,
    /\b([0-9\s\-_\.]{13,15})\s*\(?–û–ì–†–ù\)?/i
  ];
  
  for (const pattern of ogrnPatterns) {
    const match = text.match(pattern);
    if (match) {
      // –û—á–∏—â–∞–µ–º –û–ì–†–ù –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let ogrn = match[1].replace(/[-_\s\.]/g, '');
      ogrn = ogrn.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä
      if ((ogrn.length === 13 || ogrn.length === 15) && /^\d+$/.test(ogrn)) {
        suggestions.ogrn = ogrn;
        console.log("‚úÖ –û–ì–†–ù –Ω–∞–π–¥–µ–Ω:", suggestions.ogrn);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ù–ê–ó–í–ê–ù–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò
  const companyPatterns = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –û–û–û, –û–ê–û, –ó–ê–û, –ò–ü
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*["¬´]?([^¬ª"\n\r]+)["¬ª]?/i,
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*([^,\n\r]+?)(?=\s*(?:–ò–ù–ù|–ö–ü–ü|–û–ì–†–ù|–ê–¥—Ä–µ—Å|–ë–∞–Ω–∫|$))/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    /\b–ù–∞–∑–≤–∞–Ω–∏–µ[:\s]*([^,\n\r]+)/i,
    /\b–ö–æ–º–ø–∞–Ω–∏—è[:\s]*([^,\n\r]+)/i,
    /\b–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è[:\s]*([^,\n\r]+)/i,
    /\b–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ[:\s]*\n*([^,\n\r]+)/i,
    /\b–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ[:\s]*\n*([^,\n\r]+)/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    /\b–û–±—â–µ—Å—Ç–≤–æ\s+—Å\s+–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π\s+–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é\s*["¬´]?([^¬ª"\n\r]+)["¬ª]?/i,
    /\b–ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ\s+–æ–±—â–µ—Å—Ç–≤–æ\s*["¬´]?([^¬ª"\n\r]+)["¬ª]?/i,
    /\b–ó–∞–∫—Ä—ã—Ç–æ–µ\s+–∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ\s+–æ–±—â–µ—Å—Ç–≤–æ\s*["¬´]?([^¬ª"\n\r]+)["¬ª]?/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    /\b–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s*\n\s*([^\n\r]+)/i,
    /\b–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s*\n\s*([^\n\r]+)/i,
    
    // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ)
    /^[^–ò–ù–ù–ö–ü–ü–û–ì–†–ù]*?(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*["¬´]?([^¬ª"\n\r]+)["¬ª]?/im,
    
    // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)
    /(?<=^|\n)([^–ò–ù–ù–ö–ü–ü–û–ì–†–ù\n\r]{5,50})(?=\s*\n\s*(?:–ò–ù–ù|–ö–ü–ü|–û–ì–†–ù|–ê–¥—Ä–µ—Å|–ë–∞–Ω–∫))/im,
    
    // üî• –ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*([^0-9\n\r]{3,100})/i,
    /^[^0-9]*?(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*([^0-9\n\r]{3,100})/im,
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*([^|0-9\n\r]{3,100})/i
  ];
  
  // –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
  const legalNamePatterns = [
    /–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s*\n\s*([^\n]+)/i,
    /\b–û–±—â–µ—Å—Ç–≤–æ\s+—Å\s+–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π\s+–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é\s*["¬´]?([^¬ª"\n]+)["¬ª]?/i
  ];
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
  let foundCompanyName = false;
  
  for (const pattern of companyPatterns) {
    const match = text.match(pattern);
    if (match) {
      let companyName = '';
      
      if (match[2]) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –û–û–û/–û–ê–û)
        companyName = match[1] + ' ' + match[2];
      } else if (match[1]) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞
        companyName = match[1];
      }
      
      // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      companyName = companyName.trim()
        .replace(/^["¬´]+/, '')  // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        .replace(/["¬ª]+$/, '')  // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        .replace(/\s+/g, ' ')   // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        .replace(/[^\w\s\-¬´¬ª]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –¥–µ—Ñ–∏—Å–∞ –∏ –∫–∞–≤—ã—á–µ–∫
        .trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      if (companyName.length >= 3 && companyName.length <= 200) {
        suggestions.companyName = companyName;
        console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ:", suggestions.companyName);
        foundCompanyName = true;
        break;
      }
    }
  }
  
  // üî• –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–û–ò–°–ö –ù–ê–ó–í–ê–ù–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò
  if (!foundCompanyName) {
    console.log("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –∏—â–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ...");
    
    const lines = text.split('\n');
    for (let i = 0; i < Math.min(lines.length, 15); i++) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –û–û–û/–û–ê–û/–ó–ê–û/–ò–ü
      const orgMatch = line.match(/\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)\s*["¬´]?([^¬ª"\n\r0-9]{3,100})["¬ª]?/i);
      if (orgMatch && orgMatch[2]) {
        const potentialName = orgMatch[1] + ' ' + orgMatch[2].trim();
        if (potentialName.length >= 5 && potentialName.length <= 200) {
          suggestions.companyName = potentialName;
          console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º:", suggestions.companyName);
          foundCompanyName = true;
          break;
        }
      }
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
      if (line.length > 5 && 
          line.length < 100 && 
          /^[–∞-—è—ëa-z\s\-¬´¬ª]+$/i.test(line) &&
          !line.includes('–ò–ù–ù') &&
          !line.includes('–ö–ü–ü') &&
          !line.includes('–û–ì–†–ù') &&
          !line.includes('–ê–¥—Ä–µ—Å') &&
          !line.includes('–ë–∞–Ω–∫') &&
          !line.includes('–ö–ê–†–¢–û–ß–ö–ê') &&
          !line.includes('–ü–†–ï–î–ü–†–ò–Ø–¢–ò–Ø') &&
          !line.includes('–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø')) {
        
        suggestions.companyName = line.trim();
        console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –±—É–∫–≤–µ–Ω–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É:", suggestions.companyName);
        foundCompanyName = true;
        break;
      }
    }
  }
  
  // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö: –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
  if (!foundCompanyName) {
    console.log("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö...");
    
    const lines = text.split('\n');
    for (let i = 0; i < Math.min(lines.length, 10); i++) {
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –û–û–û/–û–ê–û/–ó–ê–û/–ò–ü –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
      if (line.includes('–û–û–û') || line.includes('–û–ê–û') || line.includes('–ó–ê–û') || line.includes('–ò–ü')) {
        // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        let cleanLine = line.replace(/^[^–û–û–û–û–ê–û–ó–ê–û–ò–ü]*/, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ –û–û–û/–û–ê–û/–ó–ê–û/–ò–ü
        cleanLine = cleanLine.replace(/[^\w\s\-¬´¬ª]/g, '').trim(); // –û—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        
        if (cleanLine.length >= 5 && cleanLine.length <= 200) {
          suggestions.companyName = cleanLine;
          console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö:", suggestions.companyName);
          foundCompanyName = true;
          break;
        }
      }
    }
  }
  
  // üî• –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê: –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–∞–≤—ã—á–∫–∞–º–∏
  if (!foundCompanyName) {
    console.log("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–∞–≤—ã—á–∫–∞–º–∏...");
    
    const lines = text.split('\n');
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–∞–≤—ã—á–∫–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –û–û–û/–û–ê–û/–ó–ê–û/–ò–ü
      if (trimmedLine.includes('"') && 
          (trimmedLine.includes('–û–û–û') || trimmedLine.includes('–û–ê–û') || trimmedLine.includes('–ó–ê–û') || trimmedLine.includes('–ò–ü'))) {
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        const quoteMatch = trimmedLine.match(/(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)\s*["¬´]([^¬ª"]+)["¬ª]/i);
        if (quoteMatch) {
          const companyName = quoteMatch[1] + ' "' + quoteMatch[2] + '"';
          suggestions.companyName = companyName;
          console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–≤—ã—á–∫–∞—Ö:", suggestions.companyName);
          foundCompanyName = true;
          break;
        }
      }
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
  if (!foundCompanyName) {
    console.log("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...");
    
    const lines = text.split('\n');
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // –ò—â–µ–º –ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –±—É–∫–≤—ã –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
      if (trimmedLine.length > 3 && 
          trimmedLine.length < 100 && 
          /[–∞-—è—ëa-z]/i.test(trimmedLine) && 
          !/^\d+$/.test(trimmedLine.replace(/\s/g, '')) &&
          !trimmedLine.includes('–ò–ù–ù') &&
          !trimmedLine.includes('–ö–ü–ü') &&
          !trimmedLine.includes('–û–ì–†–ù') &&
          !trimmedLine.includes('–ê–¥—Ä–µ—Å') &&
          !trimmedLine.includes('–ë–∞–Ω–∫') &&
          !trimmedLine.includes('–ë–ò–ö') &&
          !trimmedLine.includes('–°—á–µ—Ç')) {
        
        suggestions.companyName = trimmedLine;
        console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º:", suggestions.companyName);
        foundCompanyName = true;
        break;
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (suggestions.companyName) {
    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ò–ù–ù/–ö–ü–ü
    const onlyNumbers = suggestions.companyName.replace(/\s/g, '').replace(/\D/g, '');
    if (onlyNumbers.length >= 15 && onlyNumbers.length <= 25) {
      console.log("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –ò–ù–ù/–ö–ü–ü:", suggestions.companyName);
      console.log("üîç –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∏—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ...");
      
      // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
      suggestions.companyName = '';
      foundCompanyName = false;
      
      // –ò—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
      const lines = text.split('\n');
      for (const line of lines) {
        const trimmedLine = line.trim();
        
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –û–û–û/–û–ê–û/–ó–ê–û/–ò–ü, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        const orgMatch = trimmedLine.match(/\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)\s*["¬´]?([^¬ª"\n\r0-9]+)["¬ª]?/i);
        if (orgMatch && orgMatch[2]) {
          const potentialName = orgMatch[1] + ' ' + orgMatch[2].trim();
          if (potentialName.length >= 5 && potentialName.length <= 200) {
            suggestions.companyName = potentialName;
            console.log("‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ:", suggestions.companyName);
            foundCompanyName = true;
            break;
          }
        }
      }
    }
  }
  
  // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö: –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–µ, –∏—â–µ–º –≤ –∫–∞–≤—ã—á–∫–∞—Ö
  if (!suggestions.companyName || suggestions.companyName === '') {
    console.log("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—É—Å—Ç–æ–µ, –∏—â–µ–º –≤ –∫–∞–≤—ã—á–∫–∞—Ö...");
    
    const lines = text.split('\n');
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–∞–≤—ã—á–∫–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –û–û–û/–û–ê–û/–ó–ê–û/–ò–ü
      if (trimmedLine.includes('"') && 
          (trimmedLine.includes('–û–û–û') || trimmedLine.includes('–û–ê–û') || trimmedLine.includes('–ó–ê–û') || trimmedLine.includes('–ò–ü'))) {
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        const quoteMatch = trimmedLine.match(/(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)\s*["¬´]([^¬ª"]+)["¬ª]/i);
        if (quoteMatch) {
          const companyName = quoteMatch[1] + ' "' + quoteMatch[2] + '"';
          suggestions.companyName = companyName;
          console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–≤—ã—á–∫–∞—Ö:", suggestions.companyName);
          foundCompanyName = true;
          break;
        }
      }
    }
  }
  
  // –ü–æ–∏—Å–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
  for (const pattern of legalNamePatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.legalName = match[1].trim();
      console.log("‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:", suggestions.legalName);
      break;
    }
  }
  
  // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö –Æ–†–ò–î–ò–ß–ï–°–ö–û–ì–û –ù–ê–ó–í–ê–ù–ò–Ø
  if (!suggestions.legalName) {
    console.log("üîç –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –∏—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ...");
    
    const lines = text.split('\n');
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
      if (line.includes('–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')) {
        // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        if (i + 1 < lines.length) {
          const nextLine = lines[i + 1].trim();
          if (nextLine.length > 5 && nextLine.length < 200) {
            suggestions.legalName = nextLine;
            console.log("‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ:", suggestions.legalName);
            break;
          }
        }
      }
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–û–ë–©–ï–°–¢–í–û –° –û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨–Æ"
      if (line.includes('–û–ë–©–ï–°–¢–í–û –° –û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨–Æ')) {
        suggestions.legalName = line.trim();
        console.log("‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É:", suggestions.legalName);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ë–ê–ù–ö–û–í–°–ö–ò–• –†–ï–ö–í–ò–ó–ò–¢–û–í
  const bankPatterns = [
    /\b–ë–∞–Ω–∫[:\s]*([^,\n\r–ë–ò–ö]+)/i,
    /\b–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞[:\s]*([^,\n\r]+)/i,
    /\b–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è[:\s]*([^,\n\r–ë–ò–ö]+)/i,
    /\b–ü–æ–ª—É—á–∞—Ç–µ–ª—å[:\s]*([^,\n\r]+)/i,
    /–ë–∞–Ω–∫\s*\n\s*([^\n\r]+)/i,
    /\b([^,\n\r]+)\s*–±–∞–Ω–∫/i,
    /\b–±–∞–Ω–∫\s+([^,\n\r]+)/i,
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞"
    /–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\s*\n\s*([^\n\r]+)/i,
    // –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    /–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\s*\n\s*([^0-9\n\r\/]+)/i
  ];
  
  for (const pattern of bankPatterns) {
    const match = text.match(pattern);
    if (match) {
      const bankName = match[1].trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ "–ë–ò–ö" –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      if (bankName && 
          bankName.toLowerCase() !== '–±–∏–∫' && 
          bankName.length > 2 && 
          bankName.length < 100 &&
          !/^\d+/.test(bankName) && // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä
          !/^\d+\s*\/\s*\d+/.test(bankName)) { // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ "123 / 456"
        suggestions.bankName = bankName;
        console.log("‚úÖ –ë–∞–Ω–∫ –Ω–∞–π–¥–µ–Ω:", suggestions.bankName);
        break;
      }
    }
  }
  
  // –ï—Å–ª–∏ –±–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
  if (!suggestions.bankName) {
    console.log("üîç –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...");
    
    const lines = text.split('\n');
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞"
      if (line.includes('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞')) {
        // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        if (i + 1 < lines.length) {
          const nextLine = lines[i + 1].trim();
          if (nextLine.length > 3 && 
              nextLine.length < 100 && 
              !/^\d+/.test(nextLine) && // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä
              !/^\d+\s*\/\s*\d+/.test(nextLine)) { // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ "123 / 456"
            suggestions.bankName = nextLine;
            console.log("‚úÖ –ë–∞–Ω–∫ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞:", suggestions.bankName);
            break;
          }
        }
      }
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–æ–≤–∞ "–±–∞–Ω–∫", "—Å–±–µ—Ä–±–∞–Ω–∫", "–≤—Ç–±" –∏ —Ç.–¥.
      if (line.length > 3 && 
          line.length < 100 && 
          /–±–∞–Ω–∫|—Å–±–µ—Ä–±–∞–Ω–∫|–≤—Ç–±|–∞–ª—å—Ñ–∞|—Ç–∏–Ω—å–∫–æ—Ñ—Ñ|—Ä–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω|–æ—Ç–∫—Ä—ã—Ç–∏–µ/i.test(line) &&
          !line.includes('–ë–ò–ö') &&
          !line.includes('–ò–ù–ù') &&
          !line.includes('–ö–ü–ü') &&
          !line.includes('–û–ì–†–ù') &&
          !/^\d+/.test(line)) { // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä
        
        suggestions.bankName = line;
        console.log("‚úÖ –ë–∞–Ω–∫ –Ω–∞–π–¥–µ–Ω –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º:", suggestions.bankName);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ë–ê–ù–ö–û–í–°–ö–û–ì–û –°–ß–ï–¢–ê
  const accountPatterns = [
    /\b(—Ä\/—Å|—Å—á–µ—Ç|—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç)[:\s]*(\d{20})\b/i,
    /\b(\d{20})\s*\(—Å—á–µ—Ç\)/i,
    /\b–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç[:\s]*(\d{20})\b/i,
    /\b–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç\s*\n\s*(\d{20})\b/i,
    /–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç\s*\n\s*(\d{20})/i,
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è OCR –æ—à–∏–±–æ–∫
    /\b–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç[:\s]*([0-9\s\-_\.]{20,})\b/i,
    /–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç\s*\n\s*([0-9\s\-_\.]{20,})/i,
    /\b([0-9\s\-_\.]{20})\s*\(?—Å—á–µ—Ç\)?/i
  ];
  
  for (const pattern of accountPatterns) {
    const match = text.match(pattern);
    if (match) {
      // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let account = match[2] || match[1];
      account = account.replace(/[-_\s\.]/g, '');
      account = account.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 20 —Ü–∏—Ñ—Ä
      if (account.length === 20 && /^\d{20}$/.test(account)) {
        suggestions.bankAccount = account;
        console.log("‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω:", suggestions.bankAccount);
        break;
      }
    }
  }
  
  // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö: –µ—Å–ª–∏ —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  if (!suggestions.bankAccount) {
    console.log("üîç –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...");
    
    const lines = text.split('\n');
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç"
      if (line.includes('–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç') || line.includes('–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç')) {
        // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        if (i + 1 < lines.length) {
          const nextLine = lines[i + 1].trim();
          const accountMatch = nextLine.match(/(\d{20})/);
          if (accountMatch) {
            suggestions.bankAccount = accountMatch[1];
            console.log("‚úÖ –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:", suggestions.bankAccount);
            break;
          }
        }
      }
    }
  }

  const corrAccountPatterns = [
    /\b(–∫–æ—Ä—Ä|–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç)[:\s]*(\d{20})\b/i,
    /\b–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç[:\s]*(\d{20})\b/i,
    /–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç\s*\n\s*(\d{20})/i,
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è OCR –æ—à–∏–±–æ–∫
    /\b–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç[:\s]*([0-9\s\-_]{20,})\b/i,
    /–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç\s*\n\s*([0-9\s\-_]{20,})/i
  ];
  
  for (const pattern of corrAccountPatterns) {
    const match = text.match(pattern);
    if (match) {
      // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let corrAccount = match[2] || match[1];
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
      corrAccount = corrAccount.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 20 —Ü–∏—Ñ—Ä
      if (corrAccount.length === 20 && /^\d{20}$/.test(corrAccount)) {
        suggestions.bankCorrAccount = corrAccount;
        console.log("‚úÖ –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω:", suggestions.bankCorrAccount);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ë–ò–ö
  const bikPatterns = [
    /\b–ë–ò–ö[:\s]*(\d{9})\b/i,
    /\b(\d{9})\s*\(–ë–ò–ö\)/i,
    /\b–ë–ò–ö –±–∞–Ω–∫–∞[:\s]*(\d{9})\b/i,
    /–ë–ò–ö –±–∞–Ω–∫–∞\s*\n\s*(\d{9})/i,
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è OCR –æ—à–∏–±–æ–∫
    /\b–ë–ò–ö[:\s]*([p—Ä]?\d{9})\b/i,
    /\b–ë–ò–ö –±–∞–Ω–∫–∞[:\s]*([p—Ä]?\d{9})\b/i,
    /–ë–ò–ö –±–∞–Ω–∫–∞\s*\n\s*([p—Ä]?\d{9})/i,
    // –ü–æ–∏—Å–∫ 9-–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ "–ë–ò–ö"
    /\b–ë–ò–ö[^0-9]*([p—Ä]?\d{9})\b/i,
    /\b([0-9\s\-_\.]{9})\s*\(?–ë–ò–ö\)?/i
  ];
  
  for (const pattern of bikPatterns) {
    const match = text.match(pattern);
    if (match) {
      // –û—á–∏—â–∞–µ–º –ë–ò–ö –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let bik = match[1];
      bik = bik.replace(/^[p—Ä]/, '');
      bik = bik.replace(/[-_\s\.]/g, '');
      bik = bik.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 9 —Ü–∏—Ñ—Ä
      if (bik.length === 9 && /^\d{9}$/.test(bik)) {
        suggestions.bankBik = bik;
        console.log("‚úÖ –ë–ò–ö –Ω–∞–π–¥–µ–Ω:", suggestions.bankBik);
        break;
      }
    }
  }
  
  // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö: –µ—Å–ª–∏ –ë–ò–ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  if (!suggestions.bankBik) {
    console.log("üîç –ë–ò–ö –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...");
    
    const lines = text.split('\n');
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–ë–ò–ö"
      if (line.includes('–ë–ò–ö')) {
        // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        if (i + 1 < lines.length) {
          const nextLine = lines[i + 1].trim();
          const bikMatch = nextLine.match(/(\d{9})/);
          if (bikMatch) {
            suggestions.bankBik = bikMatch[1];
            console.log("‚úÖ –ë–ò–ö –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:", suggestions.bankBik);
            break;
          }
        }
        
        // –ò–ª–∏ –∏—â–µ–º –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ "–ë–ò–ö"
        const bikMatch = line.match(/–ë–ò–ö[^0-9]*(\d{9})/i);
        if (bikMatch) {
          suggestions.bankBik = bikMatch[1];
          console.log("‚úÖ –ë–ò–ö –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ:", suggestions.bankBik);
          break;
        }
      }
    }
  }

  // –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞
  const addressPatterns = [
    /\b(–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å|–ê–¥—Ä–µ—Å)[:\s]*\n*([^,\n]+)/i,
    /\b(–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å)[:\s]*\n*([^,\n]+)/i,
    /–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å\s*\n\s*([^\n]+)/i,
    /–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å\s*\n\s*([^\n]+)/i
  ];
  
  for (const pattern of addressPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.address = match[2] || match[1];
      console.log("‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω:", suggestions.address);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phonePatterns = [
    /\b(–¢–µ–ª–µ—Ñ–æ–Ω|–¢–µ–ª)[:\s]*([+\d\s\-\(\)]+)/i,
    /\b([+7]\s*\(\d{3}\)\s*\d{3}-\d{2}-\d{2})/i,
    /–¢–µ–ª–µ—Ñ–æ–Ω\s*\n\s*([+\d\s\-\(\)]+)/i
  ];
  
  for (const pattern of phonePatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.phone = (match[2] || match[1]).trim();
      console.log("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞–π–¥–µ–Ω:", suggestions.phone);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ email
  const emailPatterns = [
    /\b(E-mail|Email)[:\s]*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i,
    /\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i
  ];
  
  for (const pattern of emailPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.email = match[2] || match[1];
      console.log("‚úÖ Email –Ω–∞–π–¥–µ–Ω:", suggestions.email);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ —Å–∞–π—Ç–∞
  const websitePatterns = [
    /\b(Website|–°–∞–π—Ç)[:\s]*([^\s\n]+)/i,
    /\b(https?:\/\/[^\s\n]+)/i
  ];
  
  for (const pattern of websitePatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.website = match[2] || match[1];
      console.log("‚úÖ –°–∞–π—Ç –Ω–∞–π–¥–µ–Ω:", suggestions.website);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
  const directorPatterns = [
    /\b(–î–∏—Ä–µ–∫—Ç–æ—Ä|–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä|–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)[:\s]*([^\n\r]+)/i,
    /\b(–ò–≤–∞–Ω–æ–≤|–ü–µ—Ç—Ä–æ–≤|–°–∏–¥–æ—Ä–æ–≤|–ö–æ–∑–ª–æ–≤|–°–º–∏—Ä–Ω–æ–≤|–ü–æ–ø–æ–≤|–°–æ–∫–æ–ª–æ–≤|–õ–µ–±–µ–¥–µ–≤|–ù–æ–≤–∏–∫–æ–≤|–ú–æ—Ä–æ–∑–æ–≤)\s+[–ê-–Ø]\.[–ê-–Ø]\./i
  ];
  
  for (const pattern of directorPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.director = match[2] || match[1];
      console.log("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω:", suggestions.director);
      break;
    }
  }
  
  // –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
  if (!suggestions.director) {
    console.log("üîç –î–∏—Ä–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...");
    
    const lines = text.split('\n');
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–∞–º–∏–ª–∏–µ–π –∏ –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
      if (trimmedLine.length > 5 && 
          trimmedLine.length < 50 && 
          /[–ê-–Ø][–∞-—è]+\s+[–ê-–Ø]\.[–ê-–Ø]\./.test(trimmedLine) &&
          !trimmedLine.includes('–ò–ù–ù') &&
          !trimmedLine.includes('–ö–ü–ü') &&
          !trimmedLine.includes('–û–ì–†–ù') &&
          !trimmedLine.includes('–ê–¥—Ä–µ—Å')) {
        
        suggestions.director = trimmedLine;
        console.log("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º:", suggestions.director);
        break;
      }
    }
  }

  console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", suggestions);
  return suggestions;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
async function extractInvoiceData(text: string) {
  const suggestions: any = {
    items: [],
    invoiceInfo: {}
  };

  console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞...");
  console.log("üìÑ –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞:", text.substring(0, 300));

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è XLSX –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–±–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
  if (text.includes('=== –õ–ò–°–¢:')) {
    console.log("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ XLSX, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...");
    return extractInvoiceDataFromXlsx(text);
  }

  // ü§ñ UNIVERSAL AI: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ç–∞–±–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
  if (text.length > 500) {
    console.log("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º Universal AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞...");
    try {
      const { universalAIService } = await import('../../../lib/services/UniversalAIService');

      const aiResult = await universalAIService.processInvoiceWithAI(text);

      if (aiResult.items && aiResult.items.length > 0) {
        console.log("‚úÖ Universal AI —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–Ω–≤–æ–π—Å!");

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç suggestions
        const convertedResult = {
          items: aiResult.items.map(item => ({
            name: item.name,
            quantity: item.quantity,
            price: item.price,
            total: item.total,
            code: item.code || '',
            unit: item.unit || '—à—Ç'
          })),
          invoiceInfo: aiResult.invoiceInfo || {},
          bankInfo: aiResult.bankInfo || {}
        };

        console.log("üìä Universal AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", convertedResult);
        return convertedResult;
      } else {
        console.log("‚ö†Ô∏è Universal AI –Ω–µ –Ω–∞—à–µ–ª —Ç–æ–≤–∞—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ regex –ø–∞—Ä—Å–∏–Ω–≥—É");
      }
    } catch (error) {
      console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ Universal AI, –∏—Å–ø–æ–ª—å–∑—É–µ–º regex –ø–∞—Ä—Å–∏–Ω–≥:", error);
    }
  } else {
    console.log("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è AI, –∏—Å–ø–æ–ª—å–∑—É–µ–º regex –ø–∞—Ä—Å–∏–Ω–≥");
  }

  // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∏–Ω–≤–æ–π—Å–∞
  const invoiceNumberPatterns = [
    /\b(–ò–Ω–≤–æ–π—Å|–°—á–µ—Ç|Invoice|‚Ññ|–ù–æ–º–µ—Ä)[:\s]*([A-Z0-9\-_\/]+)/i,
    /\b‚Ññ\s*([A-Z0-9\-_\/]+)/i,
    /\b–°—á–µ—Ç\s*‚Ññ\s*([A-Z0-9\-_\/]+)/i,
    /\bInvoice\s*#\s*([A-Z0-9\-_\/]+)/i
  ];

  for (const pattern of invoiceNumberPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.number = match[2] || match[1];
      console.log("‚úÖ –ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞ –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.number);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞
  const datePatterns = [
    /\b(–î–∞—Ç–∞|Date)[:\s]*(\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4})/i,
    /\b(\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4})/i,
    /\b(\d{4}-\d{2}-\d{2})/i
  ];

  for (const pattern of datePatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.date = match[2] || match[1];
      console.log("‚úÖ –î–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ –Ω–∞–π–¥–µ–Ω–∞:", suggestions.invoiceInfo.date);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –æ–±—â–µ–π —Å—É–º–º—ã
  const totalPatterns = [
    /\b(–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–°—É–º–º–∞|Total|–ò–¢–û–ì–û)[:\s]*(\d+[.,]\d{2})\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)/i,
    /\b(–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–°—É–º–º–∞|Total|–ò–¢–û–ì–û)[:\s]*(\d+)\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)/i,
    /\b(\d+[.,]\d{2})\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)\s*(–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–°—É–º–º–∞|Total|–ò–¢–û–ì–û)/i
  ];

  for (const pattern of totalPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.totalAmount = match[2];
      suggestions.invoiceInfo.currency = match[3];
      console.log("‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞:", match[2], match[3]);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –ù–î–°
  const vatPatterns = [
    /\b(–ù–î–°|VAT)[:\s]*(\d+[.,]\d{2})\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)/i,
    /\b(–ù–î–°|VAT)[:\s]*(\d+)\s*(—Ä—É–±|USD|EUR|‚ÇΩ|$|‚Ç¨)/i,
    /\b(–ù–î–°|VAT)[:\s]*(\d+[.,]\d{2})%/i
  ];

  for (const pattern of vatPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.vat = match[2];
      console.log("‚úÖ –ù–î–° –Ω–∞–π–¥–µ–Ω:", match[2]);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–ø—Ä–æ–¥–∞–≤—Ü–∞)
  const sellerPatterns = [
    /\b(–ü–æ—Å—Ç–∞–≤—â–∏–∫|–ü—Ä–æ–¥–∞–≤–µ—Ü|Seller|Provider)[:\s]*\n*([^\n]+)/i,
    /\b(–û–û–û|–ò–ü|–û–ê–û|–ó–ê–û)[\s]*["¬´]?([^¬ª"\n]+)["¬ª]?\s*(–ü–æ—Å—Ç–∞–≤—â–∏–∫|–ü—Ä–æ–¥–∞–≤–µ—Ü)/i,
    /–ü–æ—Å—Ç–∞–≤—â–∏–∫\s*\n\s*([^\n]+)/i
  ];

  for (const pattern of sellerPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.seller = match[2] || match[1];
      console.log("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.seller);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  const buyerPatterns = [
    /\b(–ü–æ–∫—É–ø–∞—Ç–µ–ª—å|Buyer|–ó–∞–∫–∞–∑—á–∏–∫|Customer)[:\s]*\n*([^\n]+)/i,
    /\b(–û–û–û|–ò–ü|–û–ê–û|–ó–ê–û)[\s]*["¬´]?([^¬ª"\n]+)["¬ª]?\s*(–ü–æ–∫—É–ø–∞—Ç–µ–ª—å|Buyer)/i,
    /–ü–æ–∫—É–ø–∞—Ç–µ–ª—å\s*\n\s*([^\n]+)/i
  ];

  for (const pattern of buyerPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.invoiceInfo.buyer = match[2] || match[1];
      console.log("‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.buyer);
      break;
    }
  }

  // üî• –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
  const bankRequisites = extractBankRequisitesFromInvoice(text);
  if (bankRequisites.hasRequisites) {
    suggestions.bankInfo = bankRequisites;
    console.log("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã:", bankRequisites);
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤
  const lines = text.split('\n');
  let inItemsSection = false;
  let itemCount = 0;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
    if (line.match(/\b(–¢–æ–≤–∞—Ä—ã|–ü–æ–∑–∏—Ü–∏–∏|Items|–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|‚Ññ|‚Ññ–ø\/–ø|Description|Product|Goods|Item)\b/i)) {
      inItemsSection = true;
      continue;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if (inItemsSection && line.match(/\b(–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–°—É–º–º–∞|Total|–ò–¢–û–ì–û|TOTAL|GRAND TOTAL)\b/i)) {
      inItemsSection = false;
      continue;
    }

    // –ï—Å–ª–∏ –º—ã –≤ —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
    if ((inItemsSection || line.match(/\d+/)) && line.length > 5) {
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤
      const itemPatterns = [
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ | –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ | —Ü–µ–Ω–∞ | —Å—É–º–º–∞
        /^([^|]+)\s*\|\s*(\d+)\s*\|\s*(\d+[.,]\d{2})\s*\|\s*(\d+[.,]\d{2})/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ x –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = —Å—É–º–º–∞
        /^([^x]+)\s*x\s*(\d+)\s*=\s*(\d+[.,]\d{2})/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç. –ø–æ —Ü–µ–Ω–µ)
        /^([^(]+)\s*\((\d+)\s*—à—Ç\.?\s*–ø–æ\s*(\d+[.,]\d{2})\)/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç. - —Ü–µ–Ω–∞ —Ä—É–±. - —Å—É–º–º–∞
        /^([^-]+)\s*-\s*(\d+)\s*—à—Ç\.?\s*-\s*(\d+[.,]\d{2})\s*—Ä—É–±\.?\s*-\s*(\d+[.,]\d{2})/i,
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω–∞
        /^([^\d]+)\s+(\d+)\s+(\d+[.,]\d{2})/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ*—Ü–µ–Ω–∞=—Å—É–º–º–∞
        /^([^*]+)\s*(\d+)\s*\*\s*(\d+[.,]\d{2})\s*=\s*(\d+[.,]\d{2})/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ Qty: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Price: —Ü–µ–Ω–∞
        /^([^Q]+)\s*Qty:\s*(\d+)\s*Price:\s*(\d+[.,]\d{2})/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞–Ω–∏–µ @ —Ü–µ–Ω–∞ x –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        /^([^@]+)\s*@\s*(\d+[.,]\d{2})\s*x\s*(\d+)/i,
        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —á–∏—Å–ª–∞–º–∏
        /^([A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-\.]+)\s+(\d+)\s+(\d+[.,]\d{2})/i
      ];

      for (const pattern of itemPatterns) {
        const match = line.match(pattern);
        if (match) {
          const item = {
            name: match[1].trim(),
            quantity: parseInt(match[2]),
            price: parseFloat(match[3].replace(',', '.')),
            total: match[4] ? parseFloat(match[4].replace(',', '.')) : parseInt(match[2]) * parseFloat(match[3].replace(',', '.')),
            code: `ITEM-${++itemCount}`
          };

          // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)
          item.name = item.name.replace(/[^\w\s–∞-—è—ë–ê-–Ø–Å\-\.\u4e00-\u9fff]/gi, '').trim();
          
          if (item.name.length > 2) {
            suggestions.items.push(item);
            console.log("‚úÖ –ü–æ–∑–∏—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:", item);
          }
          break;
        }
      }
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  if (suggestions.items.length === 0) {
    for (const line of lines) {
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–∏—Ç–∞–π—Å–∫–∏–µ)
      const productKeywords = [
        // –†—É—Å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
        '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–ø—Ä–∏–Ω—Ç–µ—Ä', '—Å–∫–∞–Ω–µ—Ä', '–º–æ–Ω–∏—Ç–æ—Ä', '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–º—ã—à—å',
        '–∫–∞–±–µ–ª—å', '–∞–¥–∞–ø—Ç–µ—Ä', '–±–ª–æ–∫', '–∑–∞—Ä—è–¥–∫–∞', '–Ω–∞—É—à–Ω–∏–∫–∏', '–¥–∏–Ω–∞–º–∏–∫', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', '–≤–µ–±-–∫–∞–º–µ—Ä–∞',
        '—Ñ–ª–µ—à–∫–∞', '–¥–∏—Å–∫', '–∫–∞—Ä—Ç–∞', '–ø–∞–º—è—Ç—å', '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è', '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', '–∂–µ—Å—Ç–∫–∏–π',
        '—Ç–æ–≤–∞—Ä', '–∏–∑–¥–µ–ª–∏–µ', '–ø—Ä–æ–¥—É–∫—Ç', '–º–∞—Ç–µ—Ä–∏–∞–ª', '–∫–æ–º–ø–ª–µ–∫—Ç', '–Ω–∞–±–æ—Ä', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–∞–ø–ø–∞—Ä–∞—Ç',
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
        'computer', 'laptop', 'phone', 'printer', 'scanner', 'monitor', 'keyboard', 'mouse',
        'cable', 'adapter', 'block', 'charger', 'headphones', 'speaker', 'microphone', 'webcam',
        'flash', 'disk', 'card', 'memory', 'processor', 'motherboard', 'graphics', 'hard',
        'product', 'item', 'goods', 'material', 'kit', 'set', 'device', 'equipment',
        // –ö–∏—Ç–∞–π—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã (–æ–±—â–∏–µ —Å–ª–æ–≤–∞)
        '‰∫ßÂìÅ', 'ÂïÜÂìÅ', 'Áâ©ÂìÅ', 'ËÆæÂ§á', 'Êú∫Âô®', 'Â∑•ÂÖ∑', 'ÈÖç‰ª∂', 'Èõ∂‰ª∂'
      ];

      const hasProductKeyword = productKeywords.some(keyword => 
        line.toLowerCase().includes(keyword.toLowerCase())
      );

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const hasChineseChars = /[\u4e00-\u9fff]/.test(line);

      if (hasProductKeyword || hasChineseChars) {
        
        // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        const numbers = line.match(/\d+[.,]?\d*/g);
        if (numbers && numbers.length >= 2) {
          const item = {
            name: line.replace(/\d+[.,]?\d*/g, '').replace(/[^\w\s–∞-—è—ë–ê-–Ø–Å\-\.\u4e00-\u9fff]/gi, '').trim(),
            quantity: parseInt(numbers[0]),
            price: parseFloat(numbers[1].replace(',', '.')),
            total: numbers[2] ? parseFloat(numbers[2].replace(',', '.')) : parseInt(numbers[0]) * parseFloat(numbers[1].replace(',', '.')),
            code: `ITEM-${++itemCount}`
          };

          if (item.name.length > 2) {
            suggestions.items.push(item);
            console.log("‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É:", item);
          }
        }
      }
    }
  }

  // üî• –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
  const extractedBankRequisites = extractBankRequisitesFromInvoice(text);
  if (extractedBankRequisites.hasRequisites) {
    suggestions.bankInfo = extractedBankRequisites;
    console.log("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:", extractedBankRequisites);
  }

  console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞:", suggestions);
  return suggestions;
}

function extractInvoiceDataFromXlsx(text: string) {
  const suggestions: any = {
    items: [],
    invoiceInfo: {}
  };

  console.log("üîç –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ XLSX –¥–∞–Ω–Ω—ã—Ö...");

  const lines = text.split('\n');
  let currentSheet = '';
  let inItemsSection = false;
  let itemCount = 0;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏—Å—Ç
    if (line.startsWith('=== –õ–ò–°–¢:')) {
      currentSheet = line.replace('=== –õ–ò–°–¢:', '').replace('===', '').trim();
      console.log("üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç:", currentSheet);
      continue;
    }

    // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∏–Ω–≤–æ–π—Å–∞
    if (line.includes('INV:') || line.includes('–°—á–µ—Ç') || line.includes('Invoice')) {
      const invMatch = line.match(/(?:INV:|–°—á–µ—Ç|Invoice)[:\s]*([A-Z0-9\-_\/]+)/i);
      if (invMatch && !suggestions.invoiceInfo.number) {
        suggestions.invoiceInfo.number = invMatch[1];
        console.log("‚úÖ –ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞ –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.number);
      }
    }

    // –ü–æ–∏—Å–∫ –¥–∞—Ç—ã
    if (line.includes('dd') && line.includes('2025')) {
      const dateMatch = line.match(/(\w+\s+\d{1,2}\s+\w+\s+\d{4})/);
      if (dateMatch && !suggestions.invoiceInfo.date) {
        suggestions.invoiceInfo.date = dateMatch[1];
        console.log("‚úÖ –î–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ –Ω–∞–π–¥–µ–Ω–∞:", suggestions.invoiceInfo.date);
      }
    }

    // –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    if (line.includes('Agent:') && line.includes('LLC')) {
      // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const sellerMatch = line.match(/Agent:\s*(.+?)(?:\s+based on|$)/);
      if (sellerMatch && !suggestions.invoiceInfo.seller) {
        suggestions.invoiceInfo.seller = sellerMatch[1].trim();
        console.log("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.seller);
      }
    }
    if (line.includes('Buyer:') && line.includes('LLC')) {
      // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const buyerMatch = line.match(/Buyer:\s*(.+?)(?:\s*$)/);
      if (buyerMatch && !suggestions.invoiceInfo.buyer) {
        suggestions.invoiceInfo.buyer = buyerMatch[1].trim();
        console.log("‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", suggestions.invoiceInfo.buyer);
      }
    }

      // –ü–æ–∏—Å–∫ –æ–±—â–µ–π —Å—É–º–º—ã
  if (line.includes('Total') || line.includes('–ò—Ç–æ–≥–æ') || line.includes('Total,RMB')) {
    const totalMatch = line.match(/(?:Total|–ò—Ç–æ–≥–æ)[:,]?\s*(\d+[.,]?\d*)/i);
    if (totalMatch && !suggestions.invoiceInfo.totalAmount) {
      suggestions.invoiceInfo.totalAmount = totalMatch[1];
      suggestions.invoiceInfo.currency = line.includes('RMB') ? 'RMB' : 'USD';
      console.log("‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞:", totalMatch[1], suggestions.invoiceInfo.currency);
    }
  }
  
  // –ü–æ–∏—Å–∫ –æ–±—â–µ–π —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö
  if (line.includes('Total,RUB')) {
    const totalMatch = line.match(/Total,RUB\s*(\d+[.,]?\d*)/i);
    if (totalMatch && !suggestions.invoiceInfo.totalAmountRUB) {
      suggestions.invoiceInfo.totalAmountRUB = totalMatch[1];
      console.log("‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö –Ω–∞–π–¥–µ–Ω–∞:", totalMatch[1]);
    }
  }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if (line.includes('Product description') || line.includes('ITEM NUMBER') || line.includes('QTY') || line.includes('Price,RMB') || line.includes('ITEM NUMBER |')) {
      inItemsSection = true;
      console.log("üìç –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤");
      continue;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if (inItemsSection && (line.includes('Total:') || line.includes('Deposit(RMB):') || line.includes('Payment terms:'))) {
      inItemsSection = false;
      console.log("üìç –ö–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤");
      continue;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ XLSX (–¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
    if (inItemsSection && line.includes('|')) {
      console.log("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞:", line);
      const parts = line.split('|').map(part => part.trim()).filter(part => part.length > 0);
      console.log("üìã –ß–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏:", parts);
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ã:");
      console.log("  - parts.length >= 3:", parts.length >= 3);
      console.log("  - parts.length >= 4:", parts.length >= 4);
      console.log("  - parts.length >= 6:", parts.length >= 6);
      console.log("  - line.match(/^\\d+\\s+\\|/):", line.match(/^\d+\s+\|/));
      
              // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –§–æ—Ä–º–∞—Ç 3 - –ù–æ–º–µ—Ä | –ö–æ–¥ | –ù–∞–∑–≤–∞–Ω–∏–µ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –¶–µ–Ω–∞ | –°—É–º–º–∞ (6 –∫–æ–ª–æ–Ω–æ–∫)
        if (parts.length >= 6 && line.match(/^\d+\s+\|/)) {
          console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç 3 (6+ –∫–æ–ª–æ–Ω–æ–∫)...");
          const itemNumber = parts[0];
          const itemCode = parts[1];
          const itemName = parts[2];
          const quantityStr = parts[3];
          const priceStr = parts[4];
          const totalStr = parts[5] || '';

          console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç 3):");
          console.log("  - itemNumber:", itemNumber, "isNaN:", isNaN(parseInt(itemNumber)));
          console.log("  - itemCode:", itemCode, "trimmed length:", itemCode?.trim().length);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–≤–∞—Ä (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ –∫–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π)
          if (itemNumber && !isNaN(parseInt(itemNumber)) && itemCode && itemCode.trim().length > 0) {
            const quantity = parseInt(quantityStr.replace(/[^\d]/g, ''));
            const price = parseFloat(priceStr.replace(/[^\d.,]/g, '').replace(',', '.'));
            const total = totalStr ? parseFloat(totalStr.replace(/[^\d.,]/g, '').replace(',', '.')) : quantity * price;

            console.log("üîç –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç 3):");
            console.log("  - quantity:", quantity);
            console.log("  - price:", price);
            console.log("  - total:", total);
            console.log("  - itemName length:", itemName?.trim().length);

            if (quantity && price && itemName && itemName.trim().length > 2) {
              const item = {
                name: itemName.trim(),
                quantity: quantity,
                price: price,
                total: total,
                code: itemCode || `ITEM-${++itemCount}`,
                unit: '—à—Ç'
              };
              suggestions.items.push(item);
              console.log("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∏–∑ XLSX –Ω–∞–π–¥–µ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç 3):", item);
            } else {
              console.log("‚ùå –§–æ—Ä–º–∞—Ç 3: –£—Å–ª–æ–≤–∏—è –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É");
            }
          } else {
            console.log("‚ùå –§–æ—Ä–º–∞—Ç 3: itemNumber –∏–ª–∏ itemCode –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É");
          }
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –§–æ—Ä–º–∞—Ç 1 - Product description | Quantity | Price | Total (3-4 –∫–æ–ª–æ–Ω–∫–∏)
        else if (parts.length >= 3 && parts.length < 6 && !line.match(/^(Product|ITEM|QTY|Price|Total)/i)) {
          console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç 1 (3-5 –∫–æ–ª–æ–Ω–æ–∫)...");
        const itemName = parts[0];
        const quantityStr = parts[1];
        const priceStr = parts[2];
        const totalStr = parts[3] || '';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–≤–∞—Ä (–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        if (itemName && itemName.length > 5 && !itemName.match(/^(Product|ITEM|QTY|Price|Total)/i)) {
          const quantity = parseInt(quantityStr.replace(/[^\d]/g, ''));
          const price = parseFloat(priceStr.replace(/[^\d.,]/g, '').replace(',', '.'));
          const total = totalStr ? parseFloat(totalStr.replace(/[^\d.,]/g, '').replace(',', '.')) : quantity * price;

          if (quantity && price && itemName.length > 5) {
            const item = {
              name: itemName.trim(),
              quantity: quantity,
              price: price,
              total: total,
              code: `ITEM-${++itemCount}`,
              unit: '—à—Ç'
            };

            suggestions.items.push(item);
            console.log("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∏–∑ XLSX –Ω–∞–π–¥–µ–Ω–∞:", item);
          }
        }
      }
      
              // –§–æ—Ä–º–∞—Ç 2: ITEM NUMBER | CODE | NAME | QTY | PRICE | TOTAL
        else if (parts.length >= 4 && line.match(/^\d+\s+\|/)) {
          console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç 2...");
        const itemNumber = parts[0];
        const itemCode = parts[1];
        const itemName = parts[2];
        const quantityStr = parts[3];
        const priceStr = parts[4];
        const totalStr = parts[5] || '';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–≤–∞—Ä (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã)
        if (itemNumber && !isNaN(parseInt(itemNumber))) {
          const quantity = parseInt(quantityStr.replace(/[^\d]/g, ''));
          const price = parseFloat(priceStr.replace(/[^\d.,]/g, '').replace(',', '.'));
          const total = totalStr ? parseFloat(totalStr.replace(/[^\d.,]/g, '').replace(',', '.')) : quantity * price;

          if (quantity && price && itemName && itemName.length > 2) {
            const item = {
              name: itemName.trim(),
              quantity: quantity,
              price: price,
              total: total,
              code: itemCode || `ITEM-${++itemCount}`,
              unit: '—à—Ç'
            };

            suggestions.items.push(item);
            console.log("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∏–∑ XLSX –Ω–∞–π–¥–µ–Ω–∞:", item);
          }
        }
      }
      
    }
  }

  // üî• –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
  const extractedBankRequisites = extractBankRequisitesFromInvoice(text);
  if (extractedBankRequisites.hasRequisites) {
    suggestions.bankInfo = extractedBankRequisites;
    console.log("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:", extractedBankRequisites);
  }

  console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ XLSX –∏–Ω–≤–æ–π—Å–∞:", suggestions);
  return suggestions;
}

/**
 * üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏–∑ –∏–Ω–≤–æ–π—Å–∞
 */
function extractBankRequisitesFromInvoice(text: string) {
  console.log("üè¶ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏–∑ –∏–Ω–≤–æ–π—Å–∞...");
  console.log("üìÑ –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", text.substring(0, 1000));
  
  const requisites = {
    bankName: '',
    accountNumber: '',
    swift: '',
    recipientName: '',
    recipientAddress: '',
    transferCurrency: '',
    hasRequisites: false
  };

  // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞ (USD A/C NO., EUR A/C NO., Account Number)
  const accountPatterns = [
    /USD\s*A\/C\s*NO\.?\s*\([^)]*\)\s*:?\s*(\d+)/i,  // USD A/C NO. (ÁæéÂÖÉË¥¶Êà∑Âè∑Á†Å): 397475795838
    /EUR\s*A\/C\s*NO\.?\s*\([^)]*\)\s*:?\s*(\d+)/i,  // EUR A/C NO. (Ê¨ßÂÖÉË¥¶Êà∑Âè∑Á†Å): ...
    /USD\s*A\/C\s*NO\.?\s*:?\s*(\d+)/i,
    /EUR\s*A\/C\s*NO\.?\s*:?\s*(\d+)/i,
    /Account\s*Number\s*:?\s*(\d+)/i,
    /A\/C\s*NO\.?\s*:?\s*(\d+)/i,
    /–ù–æ–º–µ—Ä\s*—Å—á–µ—Ç–∞\s*:?\s*(\d+)/i,
    /A\/C\s*No:\s*([A-Z0-9]+)/i,  // A/C No: NRA356011048100241768
    /Account\s*No:\s*([A-Z0-9]+)/i  // Account No: ...
  ];
  
  for (const pattern of accountPatterns) {
    const match = text.match(pattern);
    if (match) {
      requisites.accountNumber = match[1];
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞:", requisites.accountNumber);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ SWIFT –∫–æ–¥–∞
  const swiftPatterns = [
    /SWIF\s*CODE\s*\(\)\s*:?\s*([A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?)/i,  // SWIF CODE(): BKCHCNBJ92B
    /SWIFT\s*CODE\s*\(\)\s*:?\s*([A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?)/i,  // SWIFT CODE(): ...
    /SWIFT\s*CODE\s*:?\s*([A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?)/i,
    /SWIFT\s*:?\s*([A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?)/i,
    /BIC\s*:?\s*([A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?)/i,
    /SWIF\s*CODE\s*:?\s*([A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?)/i  // –î–ª—è –æ–ø–µ—á–∞—Ç–æ–∫
  ];
  
  for (const pattern of swiftPatterns) {
    const match = text.match(pattern);
    if (match) {
      requisites.swift = match[1];
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω SWIFT –∫–æ–¥:", requisites.swift);
      break;
    }
  }

  // üî• –ù–û–í–û–ï: –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
  const bankNamePatterns = [
    /BANK\s*NAME\s*\(Èì∂Ë°åÂêçÁß∞\)\s*:?\s*([^\n]+)/i,  // BANK NAME (Èì∂Ë°åÂêçÁß∞): BANK OF CHINA
    /BANK\s*NAME\s*:?\s*([^\n]+)/i,
    /BANK\s*OF\s*([^\n]+)/i,
    /([A-Z\s]+BANK[A-Z\s]*)/i,  // –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –±–∞–Ω–∫–æ–≤
    /([A-Z\s]+BANK\s+OF\s+[A-Z\s]+)/i,  // BANK OF CHINA, BANK OF AMERICA –∏ —Ç.–¥.
    /Sellers\s*Bank:\s*([^\n]+)/i,  // Sellers Bank:Industrial Bank Co., Ltd
    /Bank\s*address:\s*([^\n]+)/i  // Bank address: No., 158 Binwang Road
  ];
  
  for (const pattern of bankNamePatterns) {
    const match = text.match(pattern);
    if (match) {
      let bankName = match[1].trim();
      // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      bankName = bankName.replace(/^[^a-zA-Z]*/, '').replace(/[^a-zA-Z\s]*$/, '').trim();
      if (bankName.length > 3) {
        requisites.bankName = bankName;
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:", requisites.bankName);
        break;
      }
    }
  }

  // –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (ACCOUNT NAME, BENEFICIARY)
  const recipientPatterns = [
    /ACCOUNT\s*NAME\s*\(Ë¥¶Êà∑ÂêçÁß∞\)\s*:?\s*([^\n]+)/i,  // ACCOUNT NAME (Ë¥¶Êà∑ÂêçÁß∞): ZHEJIANG GAMMA TRADING CO.,LTD
    /ACCOUNT\s*NAME\s*:?\s*([^\n]+)/i,
    /BENEFICIARY\s*NAME\s*:?\s*([^\n]+)/i,
    /–ü–æ–ª—É—á–∞—Ç–µ–ª—å\s*:?\s*([^\n]+)/i
  ];
  
  for (const pattern of recipientPatterns) {
    const match = text.match(pattern);
    if (match) {
      requisites.recipientName = match[1].trim();
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", requisites.recipientName);
      break;
    }
  }

  // –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤)
  const addressPatterns = [
    /BENEFICIARY'?S?\s*ADDRESS\s*\(Êî∂Ê¨æ‰∫∫Âú∞ÂùÄ\)\s*:?\s*([^\n]+(?:\n[^\n]+){0,3})/i,  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 —Å—Ç—Ä–æ–∫–∞–º–∏
    /BENEFICIARY'?S?\s*ADDRESS\s*:?\s*([^\n]+(?:\n[^\n]+){0,3})/i,
    /ADDRESS\s*:?\s*([^\n]+(?:\n[^\n]+){0,3})/i,
    /–ê–¥—Ä–µ—Å\s*:?\s*([^\n]+(?:\n[^\n]+){0,3})/i
  ];
  
  for (const pattern of addressPatterns) {
    const match = text.match(pattern);
    if (match) {
      let address = match[1].trim();
      
      // üî• –û—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç —Ç–æ–≤–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      address = cleanAddressFromProductData(address);
      
      if (address) {
        requisites.recipientAddress = address;
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", requisites.recipientAddress);
        break;
      }
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
  if (text.includes('USD A/C NO.') || text.includes('USD')) {
    requisites.transferCurrency = 'USD';
  } else if (text.includes('EUR A/C NO.') || text.includes('EUR')) {
    requisites.transferCurrency = 'EUR';
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
  requisites.hasRequisites = !!(requisites.accountNumber || requisites.swift || requisites.recipientName);
  
  console.log("üè¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", requisites);
  return requisites;
}

/**
 * üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –æ—Ç —Ç–æ–≤–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function cleanAddressFromProductData(address: string): string {
  console.log("üßπ –û—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç —Ç–æ–≤–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", address);
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const lines = address.split('\n');
  const cleanLines = lines.filter(line => {
    const trimmedLine = line.trim();
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if (trimmedLine.includes('Product description') ||
        trimmedLine.includes('Quantity, psc') ||
        trimmedLine.includes('Price, RMB') ||
        trimmedLine.includes('Total, RMB') ||
        trimmedLine.includes('Carlic crusher') ||
        trimmedLine.includes('stainless steel') ||
        trimmedLine.includes('|') && trimmedLine.includes('RMB') ||
        trimmedLine.match(/^\d+[.,]\d+$/) ||  // –¶–µ–Ω—ã
        trimmedLine.match(/^\d+$/) && trimmedLine.length > 8) {  // –î–ª–∏–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
      console.log("‚ùå –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É:", trimmedLine);
      return false;
    }
    
    return true;
  });
  
  const cleanAddress = cleanLines.join('\n').trim();
  console.log("‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:", cleanAddress);
  
  return cleanAddress;
} 