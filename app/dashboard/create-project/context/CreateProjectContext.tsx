"use client"

import { createContext, useState, useContext, useMemo, useCallback, useEffect, type ReactNode } from "react"

// Create a context for project state
interface ProjectContextType {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  currentStep: number
  setCurrentStep: (step: number) => void
  maxStepReached: number
  setMaxStepReached: (step: number) => void
  projectId: string | null
  setProjectId: (id: string | null) => void
  
  // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
  projectName: string
  setProjectName: (name: string) => void
  companyData: any
  setCompanyData: (data: any) => void
  specificationItems: any[]
  setSpecificationItems: (items: any[]) => void
  paymentMethod: string | null
  setPaymentMethod: (method: string | null) => void
  bankDetails: any
  setBankDetails: (details: any) => void
  
  // –ú–µ—Ç–æ–¥—ã —Å—Ç–∞—Ä—Ç–∞
  startMethod: string | null
  setStartMethod: (method: string | null) => void
  
  // –®–∞–±–ª–æ–Ω—ã
  savedTemplates: any[]
  saveTemplate: (template: any) => void
  loadTemplate: (index: number) => any
  
  // –≠—Ö–æ –∫–∞—Ä—Ç–æ—á–∫–∏
  fillFromEchoCard: (echoCard: any, selectedSteps: any) => void
  
  // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  hasCartItems: boolean
  setHasCartItems: (value: boolean) => void
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  supplierData: any
  setSupplierData: (data: any) => void
}

const ProjectContext = createContext<ProjectContextType | undefined>(undefined)

function ProjectProvider({ children }: { children: ReactNode }) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [currentStep, setCurrentStep] = useState(1)
  const [maxStepReached, setMaxStepReached] = useState(1)
  const [projectId, setProjectId] = useState<string | null>(null)
  
  // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
  const [projectName, setProjectName] = useState("")
  const [companyData, setCompanyData] = useState(() => ({
    name: "",
    legalName: "",
    inn: "",
    kpp: "",
    ogrn: "",
    address: "",
    bankName: "",
    bankAccount: "",
    bankCorrAccount: "",
    bankBik: "",
    email: "",
    phone: "",
    website: "",
  }))
  const [specificationItems, setSpecificationItems] = useState<any[]>([])
  const [paymentMethod, setPaymentMethod] = useState<string | null>(null)
  const [bankDetails, setBankDetails] = useState<any>(null)
  
  // –ú–µ—Ç–æ–¥—ã —Å—Ç–∞—Ä—Ç–∞
  const [startMethod, setStartMethod] = useState<string | null>(null)
  
  // –®–∞–±–ª–æ–Ω—ã
  const [savedTemplates, setSavedTemplates] = useState<any[]>([])
  
  // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const [hasCartItems, setHasCartItems] = useState(false)
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  const [supplierData, setSupplierDataState] = useState<any>({})
  
  // –û–±–µ—Ä—Ç–∫–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π –¥–ª—è setSupplierData
  const setSupplierData = useCallback((data: any) => {
    console.log("üî• [CONTEXT] setSupplierData –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", data);
    console.log("üî• [CONTEXT] –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", typeof data);
    console.log("üî• [CONTEXT] –ö–ª—é—á–∏:", data ? Object.keys(data) : "NO DATA");
    if (data?.crypto_wallets) {
      console.log("üî• [CONTEXT] ‚úÖ CRYPTO_WALLETS –≤ –¥–∞–Ω–Ω—ã—Ö:", data.crypto_wallets);
    } else {
      console.log("üî• [CONTEXT] ‚ùå –ù–ï–¢ CRYPTO_WALLETS –≤ –¥–∞–Ω–Ω—ã—Ö");
    }
    setSupplierDataState(data);
  }, []);

  // Initialize templates from localStorage
  useEffect(() => {
    if (typeof window !== "undefined") {
      const stored = localStorage.getItem("projectTemplates")
      if (stored) {
        try {
          setSavedTemplates(JSON.parse(stored))
        } catch (error) {
          console.error("Failed to parse saved templates:", error)
        }
      }
    }
  }, [])

  const saveTemplate = useCallback((template: any) => {
    const updatedTemplates = [...savedTemplates, template]
    setSavedTemplates(updatedTemplates)

    if (typeof window !== "undefined") {
      localStorage.setItem("projectTemplates", JSON.stringify(updatedTemplates))
    }
  }, [savedTemplates])

  const loadTemplate = useCallback((index: number) => {
    return savedTemplates[index]
  }, [savedTemplates])
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ —ç—Ö–æ –∫–∞—Ä—Ç–æ—á–∫–∏
  const fillFromEchoCard = useCallback((echoCard: any, selectedSteps: any) => {
    console.log("[fillFromEchoCard] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ —ç—Ö–æ –∫–∞—Ä—Ç–æ—á–∫–∏:", { echoCard, selectedSteps });
    
    if (selectedSteps.step1 && echoCard.supplier_info) {
      setCompanyData({
        name: echoCard.supplier_info.company_name || "",
        legalName: echoCard.supplier_info.company_name || "",
        inn: echoCard.supplier_info.inn || "",
        kpp: echoCard.supplier_info.kpp || "",
        ogrn: echoCard.supplier_info.ogrn || "",
        address: echoCard.supplier_info.address || "",
        bankName: echoCard.supplier_info.bank_name || "",
        bankAccount: echoCard.supplier_info.bank_account || "",
        bankCorrAccount: echoCard.supplier_info.corr_account || "",
        bankBik: echoCard.supplier_info.bik || "",
        email: echoCard.supplier_info.contact_email || "",
        phone: echoCard.supplier_info.contact_phone || "",
        website: echoCard.supplier_info.website || "",
      })
    }
    
    if (selectedSteps.step2 && echoCard.products) {
      console.log("[fillFromEchoCard] –ó–∞–ø–æ–ª–Ω—è–µ–º Step 2 —Ç–æ–≤–∞—Ä–∞–º–∏:", echoCard.products);
      console.log("[fillFromEchoCard] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", echoCard.products[0]);
      
      const mappedProducts = echoCard.products.map((product: any, index: number) => {
        console.log(`[fillFromEchoCard] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${index}:`, product);
        
        const mappedProduct = {
          name: product.item_name || product.name || "",
          code: product.item_code || product.sku || "",
          quantity: parseInt(product.quantity) || 1,
          unit: product.unit || "—à—Ç",
          pricePerUnit: parseFloat(product.price) || 0,
          totalPrice: parseFloat(product.total) || 0,
          description: product.description || "",
          image_url: product.image_url || "",
        };
        
        console.log(`[fillFromEchoCard] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä ${index}:`, mappedProduct);
        return mappedProduct;
      });
      
      console.log("[fillFromEchoCard] –í—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", mappedProducts);
      setSpecificationItems(mappedProducts);
      
      // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Step 2
      if (projectId) {
        console.log("[fillFromEchoCard] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è projectId:", projectId);
        // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        fetch('/api/project-specifications/bulk-insert', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            projectId: projectId,
            items: mappedProducts,
            role: 'client'
          }),
        }).then(response => response.json())
        .then(data => {
          console.log("[fillFromEchoCard] –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î:", data);
        })
        .catch(error => {
          console.error("[fillFromEchoCard] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î:", error);
        });
      } else {
        console.log("[fillFromEchoCard] projectId –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–∑–∂–µ");
      }
    } else {
      console.log("[fillFromEchoCard] Step 2 –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è:", { 
        selectedSteps: selectedSteps.step2, 
        hasProducts: !!echoCard.products,
        productsCount: echoCard.products?.length,
        echoCardKeys: echoCard ? Object.keys(echoCard) : 'echoCard is null'
      });
    }
  }, [projectId, setCompanyData, setSpecificationItems])

  const contextValue: ProjectContextType = useMemo(() => ({
    currentStep,
    setCurrentStep,
    maxStepReached,
    setMaxStepReached,
    projectId,
    setProjectId,
    projectName,
    setProjectName,
    companyData,
    setCompanyData,
    specificationItems,
    setSpecificationItems,
    paymentMethod,
    setPaymentMethod,
    bankDetails,
    setBankDetails,
    startMethod,
    setStartMethod,
    savedTemplates,
    saveTemplate,
    loadTemplate,
    fillFromEchoCard,
    hasCartItems,
    setHasCartItems,
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    supplierData,
    setSupplierData,
  }), [
    currentStep,
    maxStepReached,
    projectId,
    projectName,
    companyData,
    specificationItems,
    paymentMethod,
    bankDetails,
    startMethod,
    savedTemplates,
    saveTemplate,
    loadTemplate,
    fillFromEchoCard,
    hasCartItems,
    setHasCartItems,
    supplierData,
    setSupplierData,
  ])

  return (
    <ProjectContext.Provider value={contextValue}>{children}</ProjectContext.Provider>
  )
}

export function useProject() {
  const context = useContext(ProjectContext)
  if (context === undefined) {
    throw new Error("useProject must be used within a ProjectProvider")
  }
  return context
}

// –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const CreateProjectProvider = ProjectProvider
export const useCreateProjectContext = useProject

export { ProjectProvider } 