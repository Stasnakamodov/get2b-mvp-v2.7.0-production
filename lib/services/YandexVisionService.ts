// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É xlsx –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏
import * as XLSX from 'xlsx';
import { supabase } from '@/lib/supabaseClient';

export class YandexVisionService {
  private apiKey: string;
  private folderId: string;
  private baseUrl = 'https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze';

  constructor() {
    this.apiKey = process.env.YANDEX_VISION_API_KEY || '';
    this.folderId = process.env.YANDEX_FOLDER_ID || '';
    
    console.log('üîß YandexVision: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    console.log('üîë API Key:', this.apiKey ? `${this.apiKey.substring(0, 8)}...` : '–ù–ï –ù–ê–ô–î–ï–ù');
    console.log('üìÅ Folder ID:', this.folderId ? this.folderId : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (!this.apiKey || !this.folderId) {
      throw new Error('Yandex Vision API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YANDEX_VISION_API_KEY –∏ YANDEX_FOLDER_ID');
    }
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async recognizeText(imageUrl: string): Promise<string> {
    try {
      console.log('üîç YandexVision: –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞');
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const imageResponse = await fetch(imageUrl);
      const imageBuffer = await imageResponse.arrayBuffer();
      const base64Image = Buffer.from(imageBuffer).toString('base64');
      
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Api-Key ${this.apiKey}`,
          'Content-Type': 'application/json',
          'X-Data-Center': 'ru-central1',
        },
        body: JSON.stringify({
          folderId: this.folderId,
          analyzeSpecs: [{
            content: base64Image,
            features: [{
              type: 'TEXT_DETECTION',
              textDetectionConfig: {
                languageCodes: ['ru', 'en']
              }
            }]
          }]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Yandex Vision API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ YandexVision: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìÑ –û—Ç–≤–µ—Ç –æ—Ç Yandex Vision API:', JSON.stringify(data, null, 2));

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const text = data.results?.[0]?.results?.[0]?.textDetection?.pages?.[0]?.blocks
        ?.map((block: any) => block.lines?.map((line: any) => line.words?.map((word: any) => word.text).join(' ')).join(' '))
        .join('\n') || '';

      console.log('üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', text);
      console.log('üìÑ –î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', text.length);

      return text;
    } catch (error) {
      console.error('‚ùå YandexVision –æ—à–∏–±–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  async recognizeTextFromPdf(pdfUrl: string): Promise<string> {
    try {
      console.log('üîç YandexVision: –Ω–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF');
      
      // –°–∫–∞—á–∏–≤–∞–µ–º PDF —Ñ–∞–π–ª
      const fileResponse = await fetch(pdfUrl);
      if (!fileResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF —Ñ–∞–π–ª–∞: ${fileResponse.status}`);
      }
      
      const arrayBuffer = await fileResponse.arrayBuffer();
      console.log('üìÑ PDF —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:', arrayBuffer.byteLength, '–±–∞–π—Ç');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ base64
      const base64Pdf = Buffer.from(arrayBuffer).toString('base64');
      
      console.log('üîç YandexVision: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –≤ Yandex Vision API');
      
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Api-Key ${this.apiKey}`,
          'Content-Type': 'application/json',
          'X-Data-Center': 'ru-central1',
        },
        body: JSON.stringify({
          folderId: this.folderId,
          analyzeSpecs: [{
            content: base64Pdf,
            mimeType: 'application/pdf',
            features: [{
              type: 'TEXT_DETECTION',
              textDetectionConfig: {
                languageCodes: ['ru', 'en']
              }
            }]
          }]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Yandex Vision API –æ—à–∏–±–∫–∞:', response.status, errorText);
        throw new Error(`Yandex Vision API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ YandexVision: PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const text = data.results?.[0]?.results?.[0]?.textDetection?.pages
        ?.map((page: any) => page.blocks
          ?.map((block: any) => block.lines?.map((line: any) => line.words?.map((word: any) => word.text).join(' ')).join(' '))
          .join('\n'))
        .join('\n') || '';

      console.log('üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ PDF:', text.substring(0, 200) + '...');
      console.log('üìÑ –î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', text.length);

      if (text.length === 0) {
        console.log('‚ö†Ô∏è YandexVision: PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG) –∏–ª–∏ DOCX —Ñ–∞–π–ª—ã');
      }

      return text;
    } catch (error) {
      console.error('‚ùå YandexVision PDF –æ—à–∏–±–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç
   */
  async extractTextFromDocument(fileUrl: string, fileType: string): Promise<string> {
    console.log(`üìÑ YandexVision: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Ç–∏–ø–∞ ${fileType}`);
    
    if (fileType.includes('pdf')) {
      return await this.recognizeTextFromPdf(fileUrl);
    } else if (fileType.includes('image') || fileType.includes('jpeg') || fileType.includes('png')) {
      return await this.recognizeText(fileUrl);
    } else if (fileType.includes('xlsx') || fileType.includes('xls') || fileType.includes('spreadsheetml') || fileType.includes('openxmlformats-officedocument.spreadsheetml')) {
      // –î–ª—è XLSX —Ñ–∞–π–ª–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
      console.log('üìÑ XLSX —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
      return await this.extractTextFromXlsx(fileUrl);
    } else if (fileType.includes('docx') || fileType.includes('doc') || fileType.includes('openxmlformats')) {
      // –î–ª—è DOCX —Ñ–∞–π–ª–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
      console.log('üìÑ DOCX —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...');
      return await this.extractTextFromDocx(fileUrl);
    } else {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${fileType}`);
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞
   */
  async extractTextFromDocx(docxUrl: string): Promise<string> {
    try {
      console.log('üìÑ YandexVision: –Ω–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX');
      
      // –°–∫–∞—á–∏–≤–∞–µ–º DOCX —Ñ–∞–π–ª
      const response = await fetch(docxUrl);
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status}`);
      }
      
      const arrayBuffer = await response.arrayBuffer();
      console.log('üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:', arrayBuffer.byteLength, '–±–∞–π—Ç');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º mammoth –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
      const mammoth = await import('mammoth');
      const result = await mammoth.default.extractRawText({ 
        buffer: Buffer.from(arrayBuffer)
      });
      
      console.log('‚úÖ YandexVision: —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ DOCX, –¥–ª–∏–Ω–∞:', result.value?.length || 0);
      return result.value || '';
    } catch (error) {
      console.error('‚ùå YandexVision DOCX –æ—à–∏–±–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ XLSX —Ñ–∞–π–ª–∞
   */
  async extractTextFromXlsx(xlsxUrl: string): Promise<string> {
    try {
      console.log('üîç YandexVision: –Ω–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ XLSX');
      console.log('üîó URL —Ñ–∞–π–ª–∞:', xlsxUrl);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º XLSX —Ñ–∞–π–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let fileResponse;
      let retries = 3;
      
      while (retries > 0) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XLSX —Ñ–∞–π–ª–∞ (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${retries})`);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
          
          fileResponse = await fetch(xlsxUrl, {
            signal: controller.signal,
            headers: {
              'User-Agent': 'Mozilla/5.0 (compatible; Get2B-OCR/1.0)'
            }
          });
          
          clearTimeout(timeoutId);
          
          if (fileResponse.ok) {
            break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏
          } else {
            throw new Error(`HTTP ${fileResponse.status}: ${fileResponse.statusText}`);
          }
        } catch (fetchError) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XLSX (–ø–æ–ø—ã—Ç–∫–∞ ${4-retries}/3):`, fetchError);
          retries--;
          
          if (retries === 0) {
            // üî• –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –°–ü–û–°–û–ë: –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Supabase...');
            
            try {
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
              const urlParts = xlsxUrl.split('/');
              const fileName = urlParts[urlParts.length - 1];
              const bucketName = 'step2-ready-invoices'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ bucket
              
              console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ Supabase Storage:', { bucketName, fileName });
              
              const { data, error } = await supabase.storage
                .from(bucketName)
                .download(fileName);
              
              if (error) {
                throw new Error(`Supabase Storage –æ—à–∏–±–∫–∞: ${error.message}`);
              }
              
              if (!data) {
                throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase Storage');
              }
              
              const arrayBuffer = await data.arrayBuffer();
              console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ Supabase, —Ä–∞–∑–º–µ—Ä:', arrayBuffer.byteLength, '–±–∞–π—Ç');
              
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
              const workbook = XLSX.read(arrayBuffer, { type: 'array' });
              console.log('üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤:', workbook.SheetNames.length);
              
              let extractedText = '';
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
              workbook.SheetNames.forEach((sheetName, index) => {
                console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: ${sheetName}`);
                const worksheet = workbook.Sheets[sheetName];
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
                extractedText += `=== –õ–ò–°–¢: ${sheetName} ===\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
                jsonData.forEach((row: any, rowIndex: number) => {
                  if (row && row.length > 0) {
                    const rowText = row.map((cell: any) => String(cell || '')).join(' | ');
                    extractedText += `${rowText}\n`;
                  }
                });
                
                extractedText += '\n';
              });
              
              console.log('‚úÖ YandexVision: –¥–∞–Ω–Ω—ã–µ –∏–∑ XLSX –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Supabase');
              return extractedText;
              
            } catch (supabaseError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Supabase:', supabaseError);
              throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª: ${fetchError}. Supabase –æ—à–∏–±–∫–∞: ${supabaseError}`);
            }
          }
          
          // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
      
      const arrayBuffer = await fileResponse!.arrayBuffer();
      console.log('üìÑ XLSX —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:', arrayBuffer.byteLength, '–±–∞–π—Ç');
      
      // –ß–∏—Ç–∞–µ–º XLSX —Ñ–∞–π–ª
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤:', workbook.SheetNames.length);
      
      let extractedText = '';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
      workbook.SheetNames.forEach((sheetName, index) => {
        console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: ${sheetName}`);
        const worksheet = workbook.Sheets[sheetName];
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
        extractedText += `=== –õ–ò–°–¢: ${sheetName} ===\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
        jsonData.forEach((row: any, rowIndex: number) => {
          if (row && row.length > 0) {
            const rowText = row.map((cell: any) => String(cell || '')).join(' | ');
            extractedText += `${rowText}\n`;
          }
        });
        
        extractedText += '\n';
      });
      
      console.log('‚úÖ YandexVision: –¥–∞–Ω–Ω—ã–µ –∏–∑ XLSX –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      console.log('üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', extractedText);
      console.log('üìÑ –î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', extractedText.length);
      
      return extractedText;
    } catch (error) {
      console.error('‚ùå YandexVision XLSX –æ—à–∏–±–∫–∞:', error);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
let yandexVisionService: YandexVisionService | null = null;

export function getYandexVisionService(): YandexVisionService {
  if (!yandexVisionService) {
    yandexVisionService = new YandexVisionService();
  }
  return yandexVisionService;
} 