import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function GET(request: NextRequest) {
  try {
    console.log("üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = request.headers.get('authorization');
    let userId: string;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
      const { data: { user }, error: authError } = await supabase.auth.getUser(token);
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        return NextResponse.json({ 
          error: "Unauthorized - –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω, user_id:", userId);
    } else {
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.error("‚ùå [SECURITY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        return NextResponse.json({ 
          error: "Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" 
        }, { status: 401 });
      }
      
      userId = user.id;
      console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, user_id:", userId);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –±–∞–∑–µ
    const { data: allSuppliers, error: allError } = await supabase
      .from("catalog_user_suppliers")
      .select("*");

    console.log("üîç [DEBUG] –í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –≤ –±–∞–∑–µ:", allSuppliers?.length);
    console.log("üîç [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", allError);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userSuppliers, error: userError } = await supabase
      .from("catalog_user_suppliers")
      .select("*")
      .eq("user_id", userId)
      .eq("is_active", true);

    console.log("üîç [DEBUG] –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userSuppliers?.length);
    console.log("üîç [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userError);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    const { data: verifiedSuppliers, error: verifiedError } = await supabase
      .from("catalog_verified_suppliers")
      .select("*")
      .eq("is_active", true);

    console.log("üîç [DEBUG] –ê–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏:", verifiedSuppliers?.length);
    console.log("üîç [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", verifiedError);

    return NextResponse.json({
      success: true,
      debug: {
        userId,
        allSuppliersCount: allSuppliers?.length || 0,
        userSuppliersCount: userSuppliers?.length || 0,
        verifiedSuppliersCount: verifiedSuppliers?.length || 0,
        allSuppliers: allSuppliers?.slice(0, 5), // –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        userSuppliers: userSuppliers?.slice(0, 5), // –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        verifiedSuppliers: verifiedSuppliers?.slice(0, 5), // –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        errors: {
          allError: allError?.message,
          userError: userError?.message,
          verifiedError: verifiedError?.message
        }
      }
    });

  } catch (error) {
    console.error("‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    }, { status: 500 });
  }
} 