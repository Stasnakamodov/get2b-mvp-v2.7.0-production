"use client"

// üî• FORCED UPDATE v2.0 - TIMESTAMP: 1734525000000
// üöÄ AI CHAT WITH BOTHUB API INTEGRATION

import React, { useState, useRef, useEffect, useCallback, memo } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { 
  MessageCircle, 
  Plus, 
  Search, 
  Bot,
  Building2,
  Send, 
  Paperclip,
  Smile,
  MessageSquare,
  ArrowRight,
  Calendar,
  DollarSign,
  Trash
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { supabase } from "@/lib/supabaseClient"
import { useChatRooms } from "@/hooks/useChatRooms"
import { useChat } from "@/hooks/useChat"
// import { useChatRoomsPolling } from "@/hooks/useChatRoomsPolling" // –û–¢–ö–õ–Æ–ß–ï–ù –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ lib
import type { ChatMessage, ChatRoom } from '@/lib/types/chat'

// üöÄ –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
const ChatRoomItem = memo(({ 
  room, 
  isSelected, 
  onSelect, 
  onDelete 
}: {
  room: any;
  isSelected: boolean;
  onSelect: (room: any) => void;
  onDelete: (room: any, e: React.MouseEvent) => void;
}) => {
  // üéØ –°–¢–ê–ë–ò–õ–¨–ù–´–ï KEYS: —É—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const stableKey = room.id 
    ? `room-${room.id}-${room.name}-${room.unread_count}-${room.last_message_content?.substring(0, 20) || 'empty'}`
    : `temp-room-${Date.now()}`;

  return (
    <div
      key={stableKey}
      className={`p-3 rounded-lg cursor-pointer transition-all duration-200 border
                ${isSelected 
                  ? 'bg-blue-50 border-blue-200 shadow-sm' 
                  : 'bg-white border-gray-200 hover:bg-gray-50 hover:border-gray-300'}`}
      onClick={() => onSelect(room)}
    >
      <div className="flex items-center space-x-3">
        <div className={`w-10 h-10 rounded-lg flex items-center justify-center
                      ${room.room_type === 'ai' 
                        ? 'bg-blue-100 text-blue-600' 
                        : 'bg-green-100 text-green-600'}`}>
          {room.room_type === 'ai' ? (
            <Bot className="w-5 h-5" />
          ) : (
            <Building2 className="w-5 h-5" />
          )}
        </div>
        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between">
            <h3 className="font-medium text-gray-900 truncate text-sm">{room.name}</h3>
            <div className="flex items-center space-x-1">
              {room.unread_count > 0 && (
                <Badge variant="destructive" className="px-1.5 py-0.5 text-xs">
                  {room.unread_count}
                </Badge>
              )}
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={(e) => onDelete(room, e)}
                    className="h-6 w-6 text-gray-400 hover:text-red-500 hover:bg-red-50"
                  >
                    <Trash className="w-3 h-3" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É</TooltipContent>
              </Tooltip>
            </div>
          </div>
          <p className="text-xs text-gray-500 truncate">
            {room.last_message_content 
              ? room.last_message_content.replace(/[üéØüí°üìãüí∞üåç‚öñÔ∏èüìä‚ùì‚Ä¢]/g, '').substring(0, 50) + (room.last_message_content.length > 50 ? '...' : '')
              : "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
            }
          </p>
        </div>
      </div>
    </div>
  );
}, (prevProps, nextProps) => {
  // –ì–ª—É–±–æ–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  return (
    prevProps.room.id === nextProps.room.id &&
    prevProps.room.name === nextProps.room.name &&
    prevProps.room.unread_count === nextProps.room.unread_count &&
    prevProps.room.last_message_content === nextProps.room.last_message_content &&
    prevProps.isSelected === nextProps.isSelected
  );
});

interface Project {
  id: string
  name: string
  status: string
  amount: number
  currency: string
  created_at: string
  displayInfo?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
const getStatusText = (status: string) => {
  const statusMap: Record<string, string> = {
    'draft': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
    'active': 'üöÄ –í —Ä–∞–±–æ—Ç–µ', 
    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
  };
  return statusMap[status] || 'üìã –ù–æ–≤—ã–π';
};

// AI –ø–æ–¥—Å–∫–∞–∑–∫–∏
const AI_SHORTCUTS = [
  { key: '1', title: '–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', prompt: '–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –º–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.' },
  { key: '2', title: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', prompt: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –¥–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.' },
  { key: '3', title: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', prompt: '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º. –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞—Ç—å –∏ –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ?' },
  { key: '4', title: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç', prompt: '–ü–æ–º–æ–≥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º. –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –∑–∞—â–∏—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤?' },
]

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
interface CreateRoomModalProps {
  isOpen: boolean
  onClose: () => void
  onCreateAI: () => void
  onCreateProject: (projectId: string) => void
  onQuickAIPrompt: (prompt: string) => void
  projects: Project[]
  isCreatingRoom: boolean
}

function CreateRoomModal({ isOpen, onClose, onCreateAI, onCreateProject, onQuickAIPrompt, projects, isCreatingRoom }: CreateRoomModalProps) {
  const [selectedProject, setSelectedProject] = useState<string>('')

  const handleCreateProject = () => {
    if (selectedProject) {
      onCreateProject(selectedProject)
      setSelectedProject('')
      onClose()
    }
  }

  const handleCreateAI = () => {
    onCreateAI()
    onClose()
  }

  const handleQuickPrompt = (prompt: string) => {
    onQuickAIPrompt(prompt)
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-gray-900">–ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! ü§ù</DialogTitle>
          <div className="text-base text-gray-700 mt-3 leading-relaxed">
            <p className="mb-2">
              <span className="font-semibold text-blue-600">–ù–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—Å –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏!</span> 
              –ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏.
            </p>
            <p>
              –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç AI –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. 
              <span className="text-green-600 font-medium">–ú—ã –∑–¥–µ—Å—å –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å–ø–µ—Ö–∞! ‚ú®</span>
            </p>
          </div>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* AI —á–∞—Ç */}
          <div className="border border-blue-200 rounded-xl p-8 bg-gradient-to-br from-blue-50 to-blue-100 relative overflow-hidden">
            <div className="absolute top-4 right-4 text-blue-200 text-sm font-medium bg-blue-600 text-white px-3 py-1 rounded-full">
              24/7 –æ–Ω–ª–∞–π–Ω ‚ö°
            </div>
            <div className="flex items-start space-x-6 mb-6">
              <div className="w-20 h-20 rounded-2xl bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center shadow-lg">
                <Bot className="w-10 h-10 text-white" />
              </div>
              <div className="flex-1">
                <h3 className="font-bold text-2xl text-gray-900 mb-2">AI –≠–∫—Å–ø–µ—Ä—Ç Get2B üß†</h3>
                <p className="text-base text-gray-700 mb-3">
                  <span className="font-semibold">–í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</span> ‚Äî –∑–Ω–∞–µ—Ç –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å –æ –∑–∞–∫—É–ø–∫–∞—Ö, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, –ø–ª–∞—Ç–µ–∂–∞—Ö
                </p>
                <div className="space-y-2">
                  <div className="flex items-center text-sm text-blue-700">
                    <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                    –û—Ç–≤–µ—á–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –¥–∞–∂–µ –Ω–æ—á—å—é
                  </div>
                  <div className="flex items-center text-sm text-blue-700">
                    <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                    –ü–æ–º–æ–≥–∞–µ—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
                  </div>
                  <div className="flex items-center text-sm text-blue-700">
                    <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                    –û–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                  </div>
                </div>
              </div>
            </div>
            <Button 
              onClick={handleCreateAI}
              disabled={isCreatingRoom}
              className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white text-lg py-4 font-semibold shadow-lg disabled:opacity-50"
            >
              {isCreatingRoom ? (
                <div className="flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>–°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É...</span>
                </div>
              ) : (
                "üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å AI"
              )}
            </Button>
          </div>

          {/* –ü—Ä–æ–µ–∫—Ç–Ω—ã–µ —á–∞—Ç—ã */}
          <div className="border border-green-200 rounded-xl p-8 bg-gradient-to-br from-green-50 to-green-100 relative overflow-hidden">
            <div className="absolute top-4 right-4 text-green-200 text-sm font-medium bg-green-600 text-white px-3 py-1 rounded-full">
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ üë§
            </div>
            <div className="flex items-start space-x-6 mb-6">
              <div className="w-20 h-20 rounded-2xl bg-gradient-to-br from-green-500 to-green-600 flex items-center justify-center shadow-lg">
                <Building2 className="w-10 h-10 text-white" />
              </div>
              <div className="flex-1">
                <h3 className="font-bold text-2xl text-gray-900 mb-2">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä üë®‚Äçüíº</h3>
                <p className="text-base text-gray-700 mb-3">
                  <span className="font-semibold">–ñ–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ –≤–µ–¥–µ—Ç –≤–∞—à –ø—Ä–æ–µ–∫—Ç</span> ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø, —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
                </p>
                <div className="space-y-2">
                  <div className="flex items-center text-sm text-green-700">
                    <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                    –û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ 2-3 –¥–Ω—è
                  </div>
                  <div className="flex items-center text-sm text-green-700">
                    <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                    –†–µ—à–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
                  </div>
                  <div className="flex items-center text-sm text-green-700">
                    <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                    –ü—Ä—è–º–∞—è —Å–≤—è–∑—å –ø–æ WhatsApp/Telegram
                  </div>
                </div>
              </div>
            </div>
            
            {projects.length > 0 ? (
              <div className="space-y-4">
                <select 
                  value={selectedProject}
                  onChange={(e) => setSelectedProject(e.target.value)}
                  className="w-full p-4 text-base border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç</option>
                  {projects.map(project => (
                    <option key={project.id} value={project.id}>
                      {project.name} ‚Äî {project.amount ? `${(project.amount / 1000).toFixed(0)}–∫ ${project.currency}` : getStatusText(project.status)}
                    </option>
                  ))}
                </select>
                <Button 
                  onClick={handleCreateProject}
                  disabled={!selectedProject || isCreatingRoom}
                  className="w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white text-lg py-4 font-semibold shadow-lg disabled:opacity-50"
                >
                  {isCreatingRoom ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>–°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É...</span>
                    </div>
                  ) : (
                    "ü§ù –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
                  )}
                </Button>
              </div>
            ) : (
              <div className="text-center py-6">
                <p className="text-base text-gray-600 mb-3">
                  üìã –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                </p>
                <p className="text-sm text-gray-500">
                  –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –∏ –º—ã —Å—Ä–∞–∑—É –Ω–∞–∑–Ω–∞—á–∏–º –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!
                </p>
              </div>
            )}
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–º–ø—Ç—ã */}
          <div className="border border-purple-200 rounded-xl p-8 bg-gradient-to-br from-purple-50 to-indigo-50">
            <div className="text-center mb-6">
              <h3 className="font-bold text-2xl text-gray-900 mb-2">üöÄ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h3>
              <p className="text-base text-gray-600">
                –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π ‚Äî AI —Å—Ä–∞–∑—É –¥–∞—Å—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏!
              </p>
            </div>
            <div className="grid grid-cols-2 gap-4">
              {AI_SHORTCUTS.map((shortcut) => (
                <Button
                  key={shortcut.key}
                  variant="outline"
                  onClick={() => handleQuickPrompt(shortcut.prompt)}
                  className="text-left justify-start h-auto p-5 text-base hover:bg-white hover:shadow-md border-purple-200 hover:border-purple-300 transition-all duration-200"
                >
                  <div className="flex items-start space-x-3">
                    <span className="font-bold text-xl text-purple-600 min-w-[24px]">{shortcut.key}</span>
                    <div>
                      <div className="font-medium text-gray-900 leading-tight">{shortcut.title}</div>
                      <div className="text-sm text-gray-500 mt-1">–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞</div>
                    </div>
                  </div>
                </Button>
              ))}
            </div>
            <div className="mt-6 text-center">
              <p className="text-sm text-purple-600 font-medium">
                üí° –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî AI –ø–æ–π–º–µ—Ç –∏ –ø–æ–º–æ–∂–µ—Ç!
              </p>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

export default function ChatHubPage() {
  const [selectedRoom, setSelectedRoom] = useState<any>(null)
  const [message, setMessage] = useState('')
  const [searchTerm, setSearchTerm] = useState('')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [projects, setProjects] = useState<Project[]>([])
  const [userId, setUserId] = useState<string | null>(null)
  const [userJustSentMessage, setUserJustSentMessage] = useState(false) // üö´ –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
  const [isRoomSwitching, setIsRoomSwitching] = useState(false) // üîÑ –§–ª–∞–≥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç
  const [isCreatingRoom, setIsCreatingRoom] = useState(false) // üö´ –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç
  // üî• –ù–û–í–´–ô —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition
  const [isManuallySelectingRoom, setIsManuallySelectingRoom] = useState(false)
  // üõ°Ô∏è –ù–û–í–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
  const [lastSentMessage, setLastSentMessage] = useState<string>("")
  const [lastSentTime, setLastSentTime] = useState<number>(0)
  // üöÄ –ù–û–í–û–ï: –ø–ª–∞–≤–Ω—ã–µ loading —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [isUpdatingRooms, setIsUpdatingRooms] = useState(false)
  const [showUpdateIndicator, setShowUpdateIndicator] = useState(false)
  const sendingTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const roomSwitchTimeoutRef = useRef<NodeJS.Timeout | null>(null)

  const { rooms, isLoading: roomsLoading, createRoom, deleteRoom, loadRooms } = useChatRooms(userId || undefined)
  
  // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è loadRooms —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
  const loadRoomsWithIndicator = useCallback(async () => {
    if (isUpdatingRooms) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    setIsUpdatingRooms(true);
    setShowUpdateIndicator(true);
    
    try {
      await loadRooms();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–∏–Ω–∏–º—É–º 500–º—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        setShowUpdateIndicator(false);
      }, 500);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
      setShowUpdateIndicator(false);
    } finally {
      setTimeout(() => {
        setIsUpdatingRooms(false);
      }, 700); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    }
  }, [loadRooms, isUpdatingRooms]);
  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: useChat —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã + –æ—Ç–∫–ª—é—á–∞–µ–º polling –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
  const { messages, isLoading: messagesLoading, sendMessage, sendMessageWithAI, isSending } = useChat(
    selectedRoom?.id, 
    userId || undefined
  )

  // üîÑ –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –ë–ï–ó —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
  const handleRoomSelect = useCallback((room: any, immediate: boolean = false) => {
    if (selectedRoom?.id === room.id) {
      console.log("üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ç—É –∂–µ –∫–æ–º–Ω–∞—Ç—É:", room.name);
      return;
    }
    
    console.log("üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ö–û–ú–ù–ê–¢–´:", {
      from: selectedRoom?.name || '–Ω–µ—Ç',
      to: room.name,
      immediate
    });
    
    // üõë –°–†–ê–ó–£ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    if (roomSwitchTimeoutRef.current) {
      clearTimeout(roomSwitchTimeoutRef.current);
      roomSwitchTimeoutRef.current = null;
    }
    
    // üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –≤—Å–µ—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    setIsManuallySelectingRoom(true);
    setIsRoomSwitching(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    
    // üöÄ –î–í–£–•–≠–¢–ê–ü–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
    setTimeout(() => {
      setSelectedRoom(room);
      setIsRoomSwitching(false);
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        setIsManuallySelectingRoom(false);
        console.log("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞:", room.name);
      }, 800); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      
    }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    
  }, [selectedRoom?.id]);

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (roomSwitchTimeoutRef.current) {
        clearTimeout(roomSwitchTimeoutRef.current);
        roomSwitchTimeoutRef.current = null;
      }
      if (sendingTimeoutRef.current) {
        clearTimeout(sendingTimeoutRef.current);
        sendingTimeoutRef.current = null;
      }
    };
  }, []);

  // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç —Å debounce –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  useEffect(() => {
    if (!userId) return;

    let focusDebounceTimer: NodeJS.Timeout | null = null;
    let lastFocusUpdate = 0;
    const FOCUS_DEBOUNCE_TIME = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ

    // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ —Å debounce
    const handleFocus = () => {
      const now = Date.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (now - lastFocusUpdate < FOCUS_DEBOUNCE_TIME) {
        console.log('üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ');
        return;
      }

      if (focusDebounceTimer) {
        clearTimeout(focusDebounceTimer);
      }

             focusDebounceTimer = setTimeout(() => {
         console.log('üîÑ Window focused - —É–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç');
         loadRoomsWithIndicator();
         lastFocusUpdate = Date.now();
       }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    };

    window.addEventListener('focus', handleFocus);
    
    // üÜï –ù–û–í–û–ï: –û—á–µ–Ω—å —Ä–µ–¥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ (2 –º–∏–Ω—É—Ç—ã)
    const interval = setInterval(() => {
             if (!document.hidden && Date.now() - lastFocusUpdate > 120000) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å
         console.log('üîÑ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç');
         loadRoomsWithIndicator();
       }
    }, 120000); // 2 –º–∏–Ω—É—Ç—ã

    return () => {
      window.removeEventListener('focus', handleFocus);
      clearInterval(interval);
      if (focusDebounceTimer) {
        clearTimeout(focusDebounceTimer);
      }
    };  
  }, [userId, loadRoomsWithIndicator]);

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
  const filteredRooms = rooms.filter(room => 
    room.name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–í–¢–û–°–ö–†–û–õ–õ - –ë–ï–ó –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò
  useEffect(() => {
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (messages.length === 0) return;

    console.log('üìú –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª:', { messageCount: messages.length, userJustSent: userJustSentMessage });
    
    // –ü—Ä–æ—Å—Ç–æ–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
    const scrollToBottom = () => {
      if (messagesEndRef.current) {
        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        setUserJustSentMessage(false);
        console.log('‚úÖ –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    };

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    setTimeout(scrollToBottom, 100);
  }, [messages.length, userJustSentMessage]) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º messages –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–æ–µ–∫—Ç—ã
  useEffect(() => {
    const fetchUserAndProjects = async () => {
      try {
        console.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
        const { data: { user }, error: userError } = await supabase.auth.getUser()
        
        if (userError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userError);
          return;
        }

        if (user) {
          setUserId(user.id);
          console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:", user.id);
          
          // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ inner join
          try {
            const { data: projectsData, error: projectsError } = await supabase
              .from('projects')
              .select('id, name, status, amount, currency, created_at')
              .eq('user_id', user.id)
              .order('created_at', { ascending: false });

            if (projectsError) {
              console.warn("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", projectsError.message);
              setProjects([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            } else if (projectsData) {
              const transformedProjects = projectsData.map(project => ({
                id: project.id,
                name: project.name,
                status: project.status || 'draft',
                amount: project.amount || 0,
                currency: project.currency || 'RUB',
                created_at: project.created_at,
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                displayInfo: project.amount 
                  ? `${(project.amount / 1000).toFixed(0)}–∫ ${project.currency || 'RUB'}`
                  : getStatusText(project.status || 'draft')
              }));
              setProjects(transformedProjects);
              console.log("‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", transformedProjects.length);
            }
          } catch (projectError) {
            console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫:", projectError);
            setProjects([]);
          }
        }
      } catch (error) {
        console.error("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
      }
    };

    fetchUserAndProjects();
  }, []);

  // –û–¢–ö–õ–Æ–ß–ê–Æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–º–Ω–∞—Ç - –£–ë–ò–†–ê–ï–¢ –î–£–ë–õ–ò–ö–ê–¢–´
  // useEffect(() => {
  //   const ensureAIRoomExists = async () => {
  //     if (!userId || !rooms || roomsLoading) return;
      
  //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ AI –∫–æ–º–Ω–∞—Ç—ã
  //     const hasAIRoom = rooms.some(room => room.room_type === 'ai');
      
  //     if (!hasAIRoom) {
  //       console.log("ü§ñ –°–æ–∑–¥–∞–µ–º AI –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ...");
  //       try {
  //         await createRoom({
  //           user_id: userId,
  //           room_type: 'ai',
  //           name: 'AI –ü–æ–º–æ—â–Ω–∏–∫',
  //           description: '–£–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–∫—É–ø–æ–∫'
  //         });
  //         console.log("‚úÖ AI –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞");
  //       } catch (error) {
  //         console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∫–æ–º–Ω–∞—Ç—ã:", error);
  //       }
  //     }
  //   };

  //   ensureAIRoomExists();
  // }, [userId, rooms, roomsLoading, createRoom]);

  // üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –∞–≤—Ç–æ–≤—ã–±–æ—Ä –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–Ω–∞—Ç (–ù–ï –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö)
  const [initialRoomsLoaded, setInitialRoomsLoaded] = useState(false);
  
  useEffect(() => {
    console.log("üîç Auto-select effect triggered:", {
      roomsCount: rooms.length,
      selectedRoom: selectedRoom?.id,
      initialLoaded: initialRoomsLoaded,
      isCreating: isCreatingRoom,
      isManuallySelecting: isManuallySelectingRoom
    });
    
    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞
    if (rooms.length > 0 && 
        !selectedRoom && 
        !initialRoomsLoaded && 
        !isCreatingRoom && 
        !isManuallySelectingRoom &&
        !roomsLoading // ‚ö° –ù–ï –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ–∫–∞ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
    ) {
      console.log("üéØ –ë–ï–ó–û–ü–ê–°–ù–´–ô –∞–≤—Ç–æ–≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:", rooms[0].name);
      
      // üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
      setIsManuallySelectingRoom(true);
      setSelectedRoom(rooms[0]);
      setInitialRoomsLoaded(true);
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
      setTimeout(() => {
        setIsManuallySelectingRoom(false);
      }, 500); // –£–≤–µ–ª–∏—á–∏–ª –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    }
  }, [rooms.length, selectedRoom, initialRoomsLoaded, isCreatingRoom, isManuallySelectingRoom, roomsLoading]); // –î–æ–±–∞–≤–∏–ª roomsLoading

  // –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
  const handleQuickTest = async () => {
    if (!selectedRoom) return;
    
    const testMessage = "–¢–ï–°–¢! –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞";
    setMessage(testMessage);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
      handleSendMessage();
    }, 100);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleSendMessage = useCallback(async () => {
    if (!message.trim() || !selectedRoom || !userId) return

    const messageToSend = message.trim();
    const currentTime = Date.now();
    
    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–´–• –û–¢–ü–†–ê–í–û–ö - debouncing 2 —Å–µ–∫—É–Ω–¥—ã
    const DEBOUNCE_TIME = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
    if (
      messageToSend === lastSentMessage && 
      currentTime - lastSentTime < DEBOUNCE_TIME
    ) {
      console.log('üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', messageToSend);
      return;
    }
    
    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ë–´–°–¢–†–´–• –ö–õ–ò–ö–û–í - –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (sendingTimeoutRef.current) {
      clearTimeout(sendingTimeoutRef.current);
      sendingTimeoutRef.current = null;
    }
    
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π:', messageToSend);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      setLastSentMessage(messageToSend);
      setLastSentTime(currentTime);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –°–†–ê–ó–£ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      setMessage('');
      
      // üöÄ –†–ê–ó–†–ï–®–ê–ï–ú –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
      setUserJustSentMessage(true);
      
      if (selectedRoom.room_type === 'ai') {
        // AI –∫–æ–º–Ω–∞—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ AI API
        await sendMessageWithAI(messageToSend);
      } else {
        // –û–±—ã—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ - –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendMessage(messageToSend);
      }
      
      // üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –∑–∞—â–∏—Ç—ã
      sendingTimeoutRef.current = setTimeout(() => {
        setLastSentMessage("");
        setLastSentTime(0);
        console.log('‚úÖ –°–±—Ä–æ—Å –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
      }, DEBOUNCE_TIME);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É
      setMessage(messageToSend);
      setLastSentMessage("");
      setLastSentTime(0);
    }
  }, [message, selectedRoom, userId, sendMessage, sendMessageWithAI, lastSentMessage, lastSentTime]);

  // –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–º–Ω–∞—Ç—ã - –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó RACE CONDITION
  const handleCreateAIRoom = useCallback(async () => {
    if (!userId || isCreatingRoom) {
      console.log("üö´ –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–º–Ω–∞—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
      return;
    }
    
    setIsCreatingRoom(true);
    setIsManuallySelectingRoom(true); // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–≤—ã–±–æ—Ä
    
    try {
      console.log("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–º–Ω–∞—Ç—ã...");
      
      const newRoom = await createRoom({
        user_id: userId,
        room_type: 'ai',
        name: 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
        description: '–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫—É–ø–æ–∫'
      });
      
      console.log("‚úÖ AI –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:", newRoom.name);
      
      // üöÄ –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ë–ï–ó –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º immediate=true)
      handleRoomSelect(newRoom, true);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∫–æ–º–Ω–∞—Ç—ã:', error);
      setIsManuallySelectingRoom(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setIsCreatingRoom(false);
    }
  }, [userId, createRoom, isCreatingRoom, handleRoomSelect]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã - –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó RACE CONDITION
  const handleCreateProjectRoom = useCallback(async (projectId: string) => {
    if (!userId || isCreatingRoom) {
      console.log("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
      return;
    }
    
    const project = projects.find(p => p.id === projectId);
    if (!project) return;
    
    setIsCreatingRoom(true);
    setIsManuallySelectingRoom(true); // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–≤—ã–±–æ—Ä
    
    try {
      console.log("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã...");
      
      const newRoom = await createRoom({
        user_id: userId,
        room_type: 'project',
        name: `–ü—Ä–æ–µ–∫—Ç: ${project.name}`,
        description: `–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}`,
        project_id: projectId
      });
      
      console.log("‚úÖ –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:", newRoom.name);
      
      // üöÄ –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ë–ï–ó –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º immediate=true)
      handleRoomSelect(newRoom, true);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã:', error);
      setIsManuallySelectingRoom(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setIsCreatingRoom(false);
    }
  }, [userId, projects, createRoom, isCreatingRoom, handleRoomSelect]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  const handleDeleteRoom = async (room: ChatRoom, event: React.MouseEvent) => {
    event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
    
    if (!userId) return;
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É "${room.name}"? –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.`)) {
      try {
        await deleteRoom(room.id);
        
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è –∫–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        if (selectedRoom?.id === room.id) {
          setSelectedRoom(null);
        }
        
        // –£–ë–ò–†–ê–ï–ú forceUpdateKey - —Ö—É–∫ useChatRooms —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫
        console.log("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞:", room.name);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
      }
    }
  };

  // –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è AI - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó RACE CONDITION
  const handleQuickAIPrompt = useCallback(async (prompt: string) => {
    if (!selectedRoom || selectedRoom.room_type !== 'ai') {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é AI –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –Ω–µ AI
      if (isCreatingRoom) {
        console.log("üö´ –£–∂–µ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É - –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω");
        return;
      }
      
      setIsCreatingRoom(true);
      setIsManuallySelectingRoom(true); // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–≤—ã–±–æ—Ä
      
      try {
        const newRoom = await createRoom({
          user_id: userId!,
          room_type: 'ai',
          name: 'AI –ü–æ–º–æ—â–Ω–∏–∫',
          description: '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI'
        });
        
        // üöÄ –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        handleRoomSelect(newRoom, true);
        
        setMessage(prompt);
        setUserJustSentMessage(true);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        setTimeout(() => handleSendMessage(), 200);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∫–æ–º–Ω–∞—Ç—ã:', error);
        setIsManuallySelectingRoom(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
      } finally {
        setIsCreatingRoom(false);
      }
    } else {
      setMessage(prompt);
      setUserJustSentMessage(true);
      setTimeout(() => handleSendMessage(), 100);
    }
  }, [selectedRoom, userId, createRoom, handleSendMessage, isCreatingRoom, handleRoomSelect]);

  // –ó–∞–≥—Ä—É–∑–∫–∞
  if (!userId) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  return (
    <TooltipProvider>
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞ */}
      <div className="flex h-screen bg-white border border-gray-200 rounded-lg overflow-hidden">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ */}
        <div className="w-80 border-r border-gray-200 flex flex-col bg-gray-50">
            {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
            <div className="p-4 border-b border-gray-200 bg-white">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-2">
                  <h2 className="text-lg font-semibold text-gray-900">–ß–∞—Ç-–∫–æ–º–Ω–∞—Ç—ã</h2>
                  {/* üöÄ –ò–ù–î–ò–ö–ê–¢–û–† –û–ë–ù–û–í–õ–ï–ù–ò–Ø */}
                  {showUpdateIndicator && (
                    <div className="flex items-center space-x-1 text-blue-600">
                      <div className="animate-spin rounded-full h-3 w-3 border-b border-blue-600"></div>
                      <span className="text-xs">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</span>
                    </div>
                  )}
                </div>
                <div className="flex gap-2">
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={handleQuickTest}
                        className="h-8 w-8 bg-green-50 hover:bg-green-100 border-green-200"
                      >
                        <Bot className="w-4 h-4 text-green-600" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç</TooltipContent>
                  </Tooltip>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => setShowCreateModal(true)}
                        className="h-8 w-8"
                      >
                        <Plus className="w-4 h-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</TooltipContent>
                  </Tooltip>
                </div>
              </div>
              
              {/* –ü–æ–∏—Å–∫ */}
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-9 text-sm"
                />
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç */}
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-2">
                {roomsLoading ? (
                  <div className="space-y-2">
                    {[...Array(4)].map((_, i) => (
                      <div key={`room-skeleton-${i}`} className="h-14 bg-gray-200 rounded-lg animate-pulse" />
                    ))}
                  </div>
                                  ) : (
                    <div className="space-y-1">
                      {filteredRooms.map((room, index) => (
                        <ChatRoomItem
                          key={room.id || `temp-room-${index}`}
                          room={room}
                          isSelected={selectedRoom?.id === room.id}
                          onSelect={(room) => handleRoomSelect(room, false)}
                          onDelete={handleDeleteRoom}
                        />
                      ))}
                    </div>
                )}
              </div>
            </ScrollArea>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
        {selectedRoom ? (
          <div className="flex-1 flex flex-col">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
            <div className="border-b border-gray-200 p-4 bg-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className={`w-8 h-8 rounded-lg flex items-center justify-center
                                ${selectedRoom.room_type === 'ai' 
                                  ? 'bg-blue-100 text-blue-600' 
                                  : 'bg-green-100 text-green-600'}`}>
                    {selectedRoom.room_type === 'ai' ? (
                      <Bot className="w-4 h-4" />
                    ) : (
                      <Building2 className="w-4 h-4" />
                    )}
                  </div>
                  <div>
                    <h2 className="font-semibold text-gray-900 text-sm">{selectedRoom.name}</h2>
                    <p className="text-xs text-gray-500">
                      {selectedRoom.room_type === 'ai' ? 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç' : '–ú–µ–Ω–µ–¥–∂–µ—Ä Get2B'}
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge variant="secondary" className="bg-green-100 text-green-800">
                    –ê–∫—Ç–∏–≤–µ–Ω
                  </Badge>
                </div>
              </div>
              
              {/* –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è AI */}
              {selectedRoom.room_type === 'ai' && (
                <div className="mt-3 flex space-x-2 overflow-x-auto">
                  {AI_SHORTCUTS.map((shortcut, index) => (
                    <Button
                      key={`ai-shortcut-${shortcut.key}`}
                      variant="outline"
                      size="sm"
                      onClick={() => handleQuickAIPrompt(shortcut.prompt)}
                      className="flex items-center space-x-2 whitespace-nowrap hover:bg-blue-50 hover:border-blue-300"
                    >
                      <span>{shortcut.key}</span>
                      <span>{shortcut.title}</span>
                    </Button>
                  ))}
                </div>
              )}
            </div>

            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <ScrollArea className="flex-1 p-6">
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç */}
              {isRoomSwitching && (
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg shadow-lg p-4 border border-gray-200 z-10">
                  <div className="flex items-center space-x-3">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                    <span className="text-sm text-gray-600">–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã...</span>
                  </div>
                </div>
              )}
              
              <div className={`space-y-4 ${isRoomSwitching ? 'opacity-50' : 'opacity-100'} transition-opacity duration-200`}>
                {messagesLoading ? (
                  <div className="space-y-4">
                    {[...Array(3)].map((_, i) => (
                      <div key={`msg-skeleton-${i}`} className="flex space-x-3">
                        <div className="w-8 h-8 bg-gray-200 rounded-full animate-pulse" />
                        <div className="flex-1 space-y-2">
                          <div className="h-4 bg-gray-200 rounded animate-pulse w-1/4" />
                          <div className="h-12 bg-gray-200 rounded-lg animate-pulse" />
                        </div>
                      </div>
                    ))}
                  </div>
                ) : messages && messages.length > 0 ? (
                  <div>
                    {/* üö® –ó–ê–©–ò–¢–ê –û–¢ –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã */}
                    {messages
                      .filter(msg => !selectedRoom || msg.room_id === selectedRoom.id) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–º–Ω–∞—Ç–µ
                      .map((msg, index) => {
                        // üöÄ –°–¢–ê–ë–ò–õ–¨–ù–´–ï KEYS –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π: —É—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        const msgStableKey = msg.id 
                          ? `msg-${msg.id}-${msg.content.substring(0, 20)}-${msg.created_at}`
                          : `temp-msg-${index}-${Date.now()}`;
                        
                        return (
                          <div
                            key={msgStableKey}
                            className={`flex space-x-3 mb-4 ${msg.sender_type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}
                          >
                          <Avatar className="w-8 h-8">
                            <AvatarFallback className={msg.sender_type === 'ai' ? "bg-blue-100 text-blue-600" : "bg-gray-100 text-gray-600"}>
                              {msg.sender_type === 'ai' ? <Bot className="w-4 h-4" /> : msg.sender_name?.[0] || "–ü"}
                            </AvatarFallback>
                          </Avatar>
                          <div className={`flex-1 max-w-3xl ${msg.sender_type === 'user' ? 'flex flex-col items-end' : ''}`}>
                            <div className="flex items-center space-x-2 mb-1">
                              <span className="text-sm font-medium text-gray-900">
                                {msg.sender_type === 'ai' ? "AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç" : msg.sender_name}
                              </span>
                              <span className="text-xs text-gray-500">
                                {new Date(msg.created_at).toLocaleTimeString()}
                              </span>
                            </div>
                            <div className={`rounded-lg px-3 py-2 text-sm ${
                              msg.sender_type === 'ai'
                                ? 'bg-blue-50 text-blue-900 border border-blue-200' 
                                : msg.sender_type === 'user'
                                ? 'bg-blue-600 text-white'
                                : 'bg-gray-100 text-gray-900'
                            }`}>
                              <p className="whitespace-pre-line">{
                                // üßπ –£–ë–ò–†–ê–ï–ú MARKDOWN –†–ê–ó–ú–ï–¢–ö–£ –∏–∑ AI —Å–æ–æ–±—â–µ–Ω–∏–π
                                msg.sender_type === 'ai' 
                                  ? msg.content
                                      .replace(/\*\*(.*?)\*\*/g, '$1') // **—Ç–µ–∫—Å—Ç** ‚Üí —Ç–µ–∫—Å—Ç
                                      .replace(/\*(.*?)\*/g, '$1')     // *—Ç–µ–∫—Å—Ç* ‚Üí —Ç–µ–∫—Å—Ç
                                      .replace(/`(.*?)`/g, '$1')       // `–∫–æ–¥` ‚Üí –∫–æ–¥
                                      .replace(/#{1,6}\s*(.*?)$/gm, '$1') // # –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –∑–∞–≥–æ–ª–æ–≤–æ–∫
                                  : msg.content
                              }</p>
                            </div>
                          </div>
                        </div>
                          );
                        })}
                    <div ref={messagesEndRef} />
                  </div>
                ) : (
                  <div className="flex-1 flex items-center justify-center py-12">
                    <div className="text-center">
                      <MessageCircle className="w-12 h-12 text-gray-300 mx-auto mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥</h3>
                      <p className="text-gray-500">–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="border-t border-gray-200 p-6 bg-white">
              {/* üõ°Ô∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
              {isSending && (
                <div className="mb-3 flex items-center justify-center">
                  <div className="bg-blue-50 border border-blue-200 rounded-lg px-3 py-2 text-sm text-blue-800">
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-blue-600"></div>
                      <span>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...</span>
                    </div>
                  </div>
                </div>
              )}
              
              <div className="flex items-end space-x-2">
                <div className="flex-1 relative">
                  <textarea
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault()
                        handleSendMessage()
                      }
                    }}
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    className="w-full resize-none rounded-lg border border-gray-300 px-3 py-2 pr-16 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                    rows={1}
                    style={{ minHeight: '38px', maxHeight: '100px' }}
                  />
                  <div className="absolute right-2 bottom-2 flex items-center space-x-1">
                    <Button variant="ghost" size="icon" className="w-6 h-6 hover:bg-gray-100">
                      <Paperclip className="w-4 h-4" />
                    </Button>
                    <Button variant="ghost" size="icon" className="w-6 h-6 hover:bg-gray-100">
                      <Smile className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
                <Button
                  onClick={handleSendMessage}
                  disabled={
                    !message.trim() || 
                    isSending || 
                    (message.trim() === lastSentMessage && Date.now() - lastSentTime < 2000)
                  }
                  className="px-4 h-9"
                  title={
                    isSending 
                      ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..." 
                        : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                  }
                >
                  {isSending ? (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ) : (
                    <Send className="w-4 h-4" />
                  )}
                </Button>
              </div>
            </div>
          </div>
        ) : (
          <div className="flex-1 flex items-center justify-center bg-gray-50">
            <div className="text-center">
              <MessageCircle className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h2 className="text-xl font-semibold text-gray-900 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É</h2>
              <p className="text-gray-500 mb-4">
                –í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é
              </p>
              <Button onClick={() => setShowCreateModal(true)}>
                <Plus className="w-4 h-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
              </Button>
            </div>
          </div>
        )}
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã */}
      <CreateRoomModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onCreateAI={handleCreateAIRoom}
        onCreateProject={handleCreateProjectRoom}
        onQuickAIPrompt={handleQuickAIPrompt}
        projects={projects}
        isCreatingRoom={isCreatingRoom}
      />
    </TooltipProvider>
  )

  // üßπ CLEANUP –ø—Ä–∏ unmount - –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –∏ —Ñ–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leaks
  useEffect(() => {
    return () => {
      if (roomSwitchTimeoutRef.current) {
        clearTimeout(roomSwitchTimeoutRef.current);
        roomSwitchTimeoutRef.current = null;
      }
    };
  }, []);
}