// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function testUpdate() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...\n');

  // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
  console.log('1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ payment_methods (–ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç):');
  const { data: test1, error: error1 } = await supabase
    .from('catalog_verified_suppliers')
    .update({ 
      payment_methods: ['bank-transfer', 'crypto'] 
    })
    .eq('name', '–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç')
    .select();

  if (error1) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error1.message);
  } else {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ payment_methods');
  }

  // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
  console.log('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ address (–ø–æ–ª–µ –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç):');
  const { data: test2, error: error2 } = await supabase
    .from('catalog_verified_suppliers')
    .update({ 
      address: 'Moscow, Test Street 123'
    })
    .eq('name', '–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç')
    .select();

  if (error2) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error2.message);
    console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error2.code);
  } else {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ address');
  }

  // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:');
  const { data: current } = await supabase
    .from('catalog_verified_suppliers')
    .select('name, payment_methods')
    .eq('name', '–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç')
    .single();

  console.log('–¢–µ–∫—É—â–∏–π –¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç:', current);
}

testUpdate();