import { NextRequest, NextResponse } from "next/server";

// POST: –¢–µ—Å—Ç callback query –¥–ª—è Telegram –±–æ—Ç–∞
export async function POST(request: NextRequest) {
  try {
    console.log("üß™ [TEST-CALLBACK] –¢–µ—Å—Ç callback query –¥–ª—è Telegram –±–æ—Ç–∞");

    const { searchParams } = new URL(request.url);
    const applicationId = searchParams.get('applicationId') || '05fdf6bd-7f27-4e54-9b3f-485b938e7c33';
    const productIndex = searchParams.get('productIndex') || '0';

    // –°–∏–º—É–ª–∏—Ä—É–µ–º callback query –æ—Ç Telegram
    const mockCallbackQuery = {
      id: "test-callback-" + Date.now(),
      from: {
        id: 6725753966,
        first_name: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        username: "testuser"
      },
      message: {
        chat: {
          id: 6725753966
        }
      },
      data: `accredit_product_images_${applicationId}_${productIndex}`
    };

    console.log("üìû [TEST-CALLBACK] –°–∏–º—É–ª–∏—Ä—É–µ–º callback query:", mockCallbackQuery.data);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    const webhookUrl = `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/telegram-chat-webhook`;
    
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        callback_query: mockCallbackQuery
      })
    });

    const result = await response.json();
    
    console.log("üì§ [TEST-CALLBACK] –û—Ç–≤–µ—Ç webhook:", result);

    return NextResponse.json({
      success: true,
      message: "Callback query –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
      webhook_response: result,
      callback_data: mockCallbackQuery.data
    });

  } catch (error) {
    console.error("‚ùå [TEST-CALLBACK] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 