import { type NextRequest, NextResponse } from "next/server";
import { getYandexVisionService } from "@/lib/services/YandexVisionService";

export async function POST(request: NextRequest) {
  try {
    console.log("üß™ API /test-yandex-vision –≤—ã–∑–≤–∞–Ω");

    const body = await request.json();
    const { imageUrl } = body;

    if (!imageUrl) {
      return NextResponse.json(
        { error: "imageUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" },
        { status: 400 }
      );
    }

    console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Yandex Vision —Å URL:", imageUrl.substring(0, 100) + "...");

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Yandex Vision
    const visionService = getYandexVisionService();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    const extractedText = await visionService.recognizeText(imageUrl);

    console.log("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", extractedText.substring(0, 200) + "...");

    return NextResponse.json({
      success: true,
      extractedText,
      message: "Yandex Vision API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Yandex Vision:", error);
    return NextResponse.json(
      {
        error: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Yandex Vision",
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
} 