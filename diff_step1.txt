diff --git a/Desktop/godplisgomvp-forvercel/app/dashboard/create-project/page.tsx b/Desktop/godplisgomvp-forvercel/app/dashboard/create-project/page.tsx
index 5359ad6..f03eb24 100644
--- a/Desktop/godplisgomvp-forvercel/app/dashboard/create-project/page.tsx
+++ b/Desktop/godplisgomvp-forvercel/app/dashboard/create-project/page.tsx
@@ -38,6 +38,9 @@ import {
   sendClientConfirmationRequestToTelegramClient,
 } from "@/lib/telegram-client"
 import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
+import { CreateProjectProvider, useCreateProjectContext } from "./context/CreateProjectContext"
+import Step1CompanyForm from "./steps/Step1CompanyForm"
+import ProjectTimeline from "@/components/ui/ProjectTimeline"
 
 // --- ДОБАВЬ: функция для отправки данных в Telegram ---
 async function sendCompanyDataToTelegram(companyData: any) {
@@ -54,7 +57,7 @@ async function sendCompanyDataToTelegram(companyData: any) {
     await sendTelegramMessageClient(text)
   } catch (error) {
     console.error("❌ Ошибка отправки данных компании в Telegram:", error)
-    alert("Ошибка отправки данных в Telegram: " + error.message)
+    alert("Ошибка отправки данных в Telegram: " + (error instanceof Error ? error.message : String(error)))
   }
 }
 
@@ -100,7 +103,7 @@ async function sendSpecificationToTelegram({
     console.log("✅ Спецификация отправлена в Telegram")
   } catch (error) {
     console.error("❌ Ошибка отправки спецификации в Telegram:", error)
-    alert("Ошибка отправки спецификации в Telegram: " + error.message)
+    alert("Ошибка отправки спецификации в Telegram: " + (error instanceof Error ? error.message : String(error)))
   }
 }
 
@@ -134,3752 +137,84 @@ async function sendReceiptApprovalRequestToTelegram(receiptUrl: string, projectN
   await sendTelegramProjectApprovalRequestClient(text + `\nЧек: ${receiptUrl}`, projectId, "receipt")
 }
 
-export default function CreateProjectPage() {
-  const [projectName, setProjectName] = useState("Новый проект")
-  const [currentStep, setCurrentStep] = useState(1)
-  const [isLoading, setIsLoading] = useState(true)
-  const [isVerifying, setIsVerifying] = useState(false)
-  const [isVerified, setIsVerified] = useState(false)
-  const [companyFormData, setCompanyFormData] = useState({
-    name: "",
-    legalName: "",
-    inn: "",
-    kpp: "",
-    ogrn: "",
-    address: "",
-    bankName: "",
-    bankAccount: "",
-    bankCorrAccount: "",
-    bankBik: "",
-    email: "",
-    phone: "",
-    website: "",
-  })
-
-  // Specification items state
-  const [specificationItems, setSpecificationItems] = useState([
-    {
-      id: 1,
-      name: "",
-      code: "",
-      image: null,
-      quantity: 0,
-      unit: "шт",
-      pricePerUnit: 0,
-      totalPrice: 0,
-    },
-  ])
-
-  const [currency, setCurrency] = useState("USD")
-  const fileInputRefs = useRef([])
-
-  // Добавим новые состояния для шагов ожидания одобрения и платежки
-  const [isWaitingApproval, setIsWaitingApproval] = useState(false)
-  const [isApproved, setIsApproved] = useState(false)
-  const [showPaymentInvoice, setShowPaymentInvoice] = useState(false)
-
-  // Добавляем состояние для выбора способа перевода
-  const [selectedTransferMethod, setSelectedTransferMethod] = useState("")
-  const [showTransferMethodSelection, setShowTransferMethodSelection] = useState(false)
-  const [isReceiptUploaded, setIsReceiptUploaded] = useState(false)
-  const [receiptFile, setReceiptFile] = useState<File | null>(null)
-  const [receiptUrl, setReceiptUrl] = useState<string | null>(null)
-
-  // Add these state variables with the other useState declarations
-  const [isSaveDialogOpen, setIsSaveDialogOpen] = useState(false)
-  const [templateName, setTemplateName] = useState("")
-  const [templateDescription, setTemplateDescription] = useState("")
-  const router = useRouter()
-  const searchParams = useSearchParams()
-
-  // Add state for invoice type and file
-  const [invoiceType, setInvoiceType] = useState("create")
-  const [invoiceFile, setInvoiceFile] = useState(null)
-
-  // Добавляем состояние для карт поставщиков
-  const [supplierCards, setSupplierCards] = useState<any[]>([])
-  const [selectedCard, setSelectedCard] = useState(null)
-
-  const [showBankSelector, setShowBankSelector] = useState(false)
-  const [availableBanks, setAvailableBanks] = useState([
-    { id: 1, name: "Bank of China" },
-    { id: 2, name: "Industrial and Commercial Bank of China" },
-    { id: 3, name: "China Construction Bank" },
-    { id: 4, name: "Agricultural Bank of China" },
-    { id: 5, name: "China Merchants Bank" },
-    { id: 6, name: "China CITIC Bank" },
-    { id: 7, name: "Shanghai Pudong Development Bank" },
-  ])
-  const [newCardDetails, setNewCardDetails] = useState({
-    bank: "",
-    cardNumber: "",
-    holderName: "",
-    expiryDate: "",
-  })
-
-  // Добавляем состояние для отображения формы новой карты
-  const [showNewCardForm, setShowNewCardForm] = useState(false)
-
-  // Состояние для подтверждения удаления карты
-  const [cardToDelete, setCardToDelete] = useState<number | null>(null)
-  const [showDeleteCardConfirm, setShowDeleteCardConfirm] = useState(false)
-
-  // Add these state variables after the other useState declarations
-  const [cryptoAddress, setCryptoAddress] = useState("")
-  const [cryptoNetwork, setCryptoNetwork] = useState("trc20")
-  const [cryptoNetworks, setCryptoNetworks] = useState([
-    { id: "trc20", name: "TRC20 (TRON)" },
-    { id: "bep20", name: "BEP20 (Binance Smart Chain)" },
-  ])
-
-  // Состояния для сохраненных криптокошельков
-  const [savedCryptoWallets, setSavedCryptoWallets] = useState<any[]>([])
-  const [selectedWallet, setSelectedWallet] = useState<string | null>(null)
-  const [showSavedWallets, setShowSavedWallets] = useState(false)
-  const [showAddWalletForm, setShowAddWalletForm] = useState(false)
-  const [newWalletDetails, setNewWalletDetails] = useState({
-    name: "",
-    address: "",
-    network: "trc20",
-  })
-  const [walletToDelete, setWalletToDelete] = useState<number | null>(null)
-  const [showDeleteWalletConfirm, setShowDeleteWalletConfirm] = useState(false)
-
-  const [methodLoadingState, setMethodLoadingState] = useState({})
-
-  // Состояние для банковских реквизитов
-  const [bankTransferDetails, setBankTransferDetails] = useState({
-    // Общие реквизиты
-    recipientName: "",
-    recipientAddress: "",
-    bankName: "",
-    bankAddress: "",
-    accountNumber: "",
-    swift: "",
-    paymentPurpose: "",
-    transferCurrency: "USD",
-
-    // Китайские реквизиты
-    cnapsCode: "",
-
-    // Турецкие реквизиты
-    iban: "",
-
-    // Другие реквизиты
-    otherDetails: "",
-  })
-
-  // Страна получателя
-  const [recipientCountry, setRecipientCountry] = useState("china")
-
-  // Сохранение реквизитов как шаблон
-  const [saveAsTemplate, setSaveAsTemplate] = useState(false)
-  const [templateBankName, setTemplateBankName] = useState("")
-
-  // Список поддерживаемых валют
-  const supportedCurrencies = ["USD", "EUR", "CNY", "TRY", "RUB"]
-
-  const [uploadingImageId, setUploadingImageId] = useState<number | null>(null)
-
-  // --- ДОБАВИТЬ состояния для банковских реквизитов
-  const [savedBankAccounts, setSavedBankAccounts] = useState<any[]>([])
-  const [selectedBankAccount, setSelectedBankAccount] = useState<number | null>(null)
-  const [showSavedBankAccounts, setShowSavedBankAccounts] = useState(false)
-  const [showAddBankAccountForm, setShowAddBankAccountForm] = useState(false)
-  const [newBankAccountDetails, setNewBankAccountDetails] = useState<{
-    name: string
-    country: string
-    details: { [key: string]: string }
-  }>({
-    name: "",
-    country: "china",
-    details: {
-      recipientName: "",
-      recipientAddress: "",
-      bankName: "",
-      bankAddress: "",
-      accountNumber: "",
-      swift: "",
-      paymentPurpose: "",
-      transferCurrency: "USD",
-      cnapsCode: "",
-      iban: "",
-      otherDetails: "",
-    },
-  })
-  const [bankAccountToDelete, setBankAccountToDelete] = useState<number | null>(null)
-  const [showDeleteBankAccountConfirm, setShowDeleteBankAccountConfirm] = useState(false)
-
-  // --- ДОБАВИТЬ состояние для выбранной страны
-  const [selectedBankCountry, setSelectedBankCountry] = useState<string | null>(null)
-
-  // --- ДОБАВИТЬ: Функция загрузки карт из Supabase
-  const fetchSupplierCards = useCallback(async () => {
-    try {
-      const {
-        data: { user },
-        error,
-      } = await supabase.auth.getUser()
-      if (error || !user) {
-        console.log("No authenticated user found")
-        return
-      }
-      const { data, error: fetchError } = await supabase
-        .from("supplier_cards")
-        .select("*")
-        .eq("user_id", user.id)
-        .order("created_at", { ascending: true })
-      if (!fetchError && data) {
-        setSupplierCards(data)
-      }
-    } catch (error) {
-      console.error("Error fetching supplier cards:", error)
-    }
-  }, [])
-
-  // --- ДОБАВИТЬ: useEffect для загрузки карт при монтировании
-  useEffect(() => {
-    fetchSupplierCards()
-  }, [fetchSupplierCards])
-
-  // --- ЗАМЕНИТЬ savedCryptoWallets на пустой массив по умолчанию
-  useEffect(() => {
-    const fetchWallets = async () => {
-      try {
-        const {
-          data: { user },
-          error,
-        } = await supabase.auth.getUser()
-        if (error || !user) return
-        const { data, error: fetchError } = await supabase
-          .from("crypto_wallets")
-          .select("*")
-          .eq("user_id", user.id)
-          .order("created_at", { ascending: false })
-        if (!fetchError && data) setSavedCryptoWallets(data)
-      } catch (error) {
-        console.error("Error fetching crypto wallets:", error)
-      }
-    }
-    fetchWallets()
-  }, [])
-
-  // --- ДОБАВИТЬ useEffect для загрузки банковских реквизитов из Supabase
-  useEffect(() => {
-    const fetchBankAccounts = async () => {
-      try {
-        const {
-          data: { user },
-          error,
-        } = await supabase.auth.getUser()
-        if (error || !user) return
-        const { data, error: fetchError } = await supabase
-          .from("bank_accounts")
-          .select("*")
-          .eq("user_id", user.id)
-          .order("created_at", { ascending: false })
-        if (!error && data) setSavedBankAccounts(data)
-      } catch (error) {
-        console.error("Error fetching bank accounts:", error)
-      }
-    }
-    fetchBankAccounts()
-  }, [])
-
-  // Handle image upload
-  const handleImageUpload = async (id: number, e: React.ChangeEvent<HTMLInputElement>) => {
-    if (e.target.files && e.target.files[0]) {
-      const file = e.target.files[0]
-      setUploadingImageId(id)
-      try {
-        const fileExt = file.name.split(".").pop()
-        const fileName = `${id}-${Date.now()}.${fileExt}`
-        const filePath = `project-images/${fileName}`
-        const { error: uploadError } = await supabase.storage.from("project-images").upload(filePath, file)
-        if (uploadError) throw uploadError
-        const { data } = supabase.storage.from("project-images").getPublicUrl(filePath)
-        if (!data?.publicUrl) throw new Error("Не удалось получить ссылку на изображение")
-        handleSpecificationItemChange(id, "image", data.publicUrl)
-      } catch (err: any) {
-        alert("Ошибка загрузки изображения: " + (err.message || err))
-      } finally {
-        setUploadingImageId(null)
-      }
-    }
-  }
-
-  // --- Исправленная функция загрузки инвойса ---
-  const [isInvoiceUploading, setIsInvoiceUploading] = useState(false)
-  const handleInvoiceUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
-    if (e.target.files && e.target.files[0]) {
-      setIsInvoiceUploading(true)
-      const file = e.target.files[0]
-      // Загрузка в Supabase Storage
-      const fileExt = file.name.split(".").pop()
-      const fileName = `invoice-${Date.now()}.${fileExt}`
-      const filePath = `${fileName}`
-      const uploadResult = await supabase.storage.from("invoices").upload(filePath, file)
-      if (uploadResult.error) {
-        alert("Ошибка загрузки инвойса: " + uploadResult.error.message)
-        setIsInvoiceUploading(false)
-        return
-      }
-      const { data } = supabase.storage.from("invoices").getPublicUrl(filePath)
-      if (data?.publicUrl) {
-        setInvoiceFile({ name: file.name, url: data.publicUrl })
-      } else {
-        alert("Не удалось получить ссылку на инвойс")
-      }
-      setIsInvoiceUploading(false)
-    }
-  }
-
-  // Добавляем функцию для обработки загрузки чека
-  const handleReceiptUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
-    if (e.target.files && e.target.files[0]) {
-      const file = e.target.files[0]
-      setReceiptFile(file as File | null)
-      // Загрузка в Supabase Storage
-      const fileExt = file.name.split(".").pop()
-      const fileName = `receipt-${Date.now()}.${fileExt}`
-      // Путь только имя файла, без папок
-      const uploadResult = await supabase.storage.from("receipts").upload(fileName, file)
-      if (uploadResult.error) {
-        alert("Ошибка загрузки чека: " + uploadResult.error.message)
-        return
-      }
-      const { data } = supabase.storage.from("receipts").getPublicUrl(fileName)
-      if (data?.publicUrl) {
-        setReceiptUrl(data.publicUrl as string)
-        // --- Сохраняем ссылку на чек в Supabase ---
-        if (projectId) {
-          const { error } = await supabase.from("projects").update({ receipt_url: data.publicUrl, status: "waiting_receipt_approval", currentStep: 3 }).eq("id", projectId)
-          if (error) {
-            alert("Ошибка сохранения чека в проект: " + error.message)
-            console.error("Ошибка сохранения receipt_url:", error)
-          }
-          await sendReceiptApprovalRequestToTelegram(data.publicUrl, projectName, projectId)
-          setIsWaitingReceiptApproval(true)
-        } else {
-          alert("Ошибка: projectId не определён, чек не сохранён в проект!")
-          console.error("projectId is null in handleReceiptUpload")
-        }
-      }
-      setIsReceiptUploaded(true)
-    }
-  }
-
-  // Функция для обработки изменений в форме новой карты
-  const handleNewCardChange = (e: React.ChangeEvent<HTMLInputElement>) => {
-    const { name, value } = e.target
-    setNewCardDetails((prev) => ({
-      ...prev,
-      [name]: value,
-    }))
-  }
-
-  // Функция для добавления новой карты
-  const handleAddNewCard = async () => {
-    if (
-      !newCardDetails.bank ||
-      !newCardDetails.cardNumber ||
-      !newCardDetails.holderName ||
-      !newCardDetails.expiryDate
-    ) {
-      alert("Пожалуйста, заполните все поля")
-      return
-    }
-    try {
-      const {
-        data: { user },
-        error: authError,
-      } = await supabase.auth.getUser()
-      if (authError || !user) {
-        alert("Необходимо войти в аккаунт")
-        return
-      }
-      const { data, error } = await supabase
-        .from("supplier_cards")
-        .insert([
-          {
-            user_id: user.id,
-            bank: newCardDetails.bank,
-            card_number: newCardDetails.cardNumber,
-            holder_name: newCardDetails.holderName,
-            expiry_date: newCardDetails.expiryDate,
-          },
-        ])
-        .select()
-      if (error) {
-        alert("Ошибка при сохранении карты: " + error.message)
-        return
-      }
-      setShowNewCardForm(false)
-      setNewCardDetails({ bank: "", cardNumber: "", holderName: "", expiryDate: "" })
-      if (data && data[0]) {
-        setSelectedCard(data[0].id) // Сразу выбираем новую карту
-        setSupplierCards((prev) => [data[0], ...prev])
-        // Отправляем реальные данные карты в Telegram
-        await sendPaymentDetailsToTelegram(
-          {
-            bank: data[0].bank,
-            card_number: data[0].card_number,
-            holder_name: data[0].holderName,
-            expiry_date: data[0].expiryDate,
-          },
-          projectName,
-        )
-      }
-      fetchSupplierCards()
-      setTimeout(() => {
-        setCurrentStep(6)
-      }, 1000)
-    } catch (error) {
-      console.error("Error adding new card:", error)
-      alert("Произошла ошибка при добавлении карты.")
-    }
-  }
-
-  // Функция для удаления карты
-  const handleDeleteCard = (cardId: number, e: React.MouseEvent<HTMLButtonElement>) => {
-    e.stopPropagation()
-    setCardToDelete(cardId as number)
-    setShowDeleteCardConfirm(true)
-  }
-
-  // Функция для подтверждения удаления карты
-  const confirmDeleteCard = async () => {
-    if (cardToDelete) {
-      await supabase.from("supplier_cards").delete().eq("id", cardToDelete)
-      fetchSupplierCards()
-      if (selectedCard === cardToDelete) {
-        setSelectedCard(null)
-      }
-      setCardToDelete(null)
-      setShowDeleteCardConfirm(false)
-    }
-  }
-
-  // Функция для обработки изменений в форме нового кошелька
-  const handleNewWalletChange = (e: React.ChangeEvent<HTMLInputElement>) => {
-    const { name, value } = e.target
-    setNewWalletDetails((prev) => ({
-      ...prev,
-      [name]: value,
-    }))
-  }
-
-  // Функция для добавления нового кошелька
-  const handleAddNewWallet = async () => {
-    if (!newWalletDetails.name || !newWalletDetails.address) {
-      alert("Пожалуйста, заполните все поля")
-      return
-    }
-    try {
-      const {
-        data: { user },
-        error: authError,
-      } = await supabase.auth.getUser()
-      if (authError || !user) {
-        alert("Необходимо войти в аккаунт")
-        return
-      }
-      const { data, error } = await supabase
-        .from("crypto_wallets")
-        .insert([
-          {
-            user_id: user.id,
-            name: newWalletDetails.name,
-            address: newWalletDetails.address,
-            network: newWalletDetails.network,
-          },
-        ])
-        .select()
-      if (!error && data && data[0]) {
-        setSavedCryptoWallets((prev) => [data[0], ...prev])
-        setCryptoAddress(data[0].address)
-        setCryptoNetwork(data[0].network)
-        setSelectedWallet(data[0].id)
-        setNewWalletDetails({ name: "", address: "", network: "trc20" })
-        setShowAddWalletForm(false)
-        setShowSavedWallets(false)
-      } else {
-        alert("Ошибка при добавлении кошелька")
-      }
-      if (!error && data && data[0]) {
-        setSavedCryptoWallets((prev) => [data[0], ...prev])
-        setShowAddWalletForm(false)
-        setNewWalletDetails({
-          name: "",
-          address: "",
-          network: "trc20",
-        })
-        await sendPaymentDetailsToTelegram(newWalletDetails, projectName)
-      } else {
-        alert("Ошибка при добавлении кошелька")
-      }
-    } catch (error) {
-      console.error("Error adding new wallet:", error)
-      alert("Произошла ошибка при добавлении кошелька.")
-    }
-  }
-
-  // Функция для выбора сохраненного кошелька
-  const handleSelectWallet = async (wallet: any) => {
-    setCryptoAddress(wallet.address)
-    setCryptoNetwork(wallet.network)
-    setSelectedWallet(wallet.id)
-    setShowSavedWallets(false)
-    await sendPaymentDetailsToTelegram(
-      {
-        name: wallet.name,
-        address: wallet.address,
-        network: wallet.network,
-      },
-      projectName,
-    )
-  }
-
-  // Функция для переключения избранного статуса кошелька
-  const toggleFavoriteWallet = (walletId: number, e: React.MouseEvent<HTMLButtonElement>) => {
-    e.stopPropagation()
-    setSavedCryptoWallets(
-      savedCryptoWallets.map((wallet) =>
-        wallet.id === walletId ? { ...wallet, isFavorite: !wallet.isFavorite } : wallet,
-      ),
-    )
-  }
-
-  // Функция для удаления кошелька
-  const handleDeleteWallet = (walletId: number, e: React.MouseEvent<HTMLButtonElement>) => {
-    e.stopPropagation()
-    setWalletToDelete(walletId as number)
-    setShowDeleteWalletConfirm(true)
-  }
-
-  // Функция для подтверждения удаления кошелька
-  const confirmDeleteWallet = async () => {
-    if (walletToDelete) {
-      const { error } = await supabase.from("crypto_wallets").delete().eq("id", walletToDelete)
-      if (!error) {
-        setSavedCryptoWallets(savedCryptoWallets.filter((wallet) => wallet.id !== walletToDelete))
-        setWalletToDelete(null)
-        setShowDeleteWalletConfirm(false)
-      } else {
-        alert("Ошибка при удалении кошелька")
-      }
-    }
-  }
-
-  // Обработка изменений в форме банковских реквизитов
-  const handleBankDetailsChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
-    const { name, value } = e.target
-    setBankTransferDetails((prev) => ({
-      ...prev,
-      [name]: value,
-    }))
-  }
-
-  // Проверка и отправка банковских реквизитов
-  const handleSubmitBankTransfer = () => {
-    // Базовая валидация в зависимости от страны
-    let isValid = true
-    const requiredFields = ["recipientName", "bankName", "accountNumber", "paymentPurpose", "transferCurrency"]
-
-    // Добавляем специфичные для страны поля
-    if (recipientCountry === "china") {
-      requiredFields.push("cnapsCode")
-    } else if (recipientCountry === "turkey") {
-      requiredFields.push("iban")
-    } else {
-      requiredFields.push("swift")
-    }
-
-    // Проверка заполнения обязательных полей
-    for (const field of requiredFields) {
-      if (!bankTransferDetails[field]) {
-        isValid = false
-        break
-      }
-    }
-
-    if (!isValid) {
-      alert("Пожалуйста, заполните все обязательные поля")
-      return
-    }
-
-    // Сохраняем как шаблон, если выбрана опция
-    if (saveAsTemplate && templateBankName) {
-      const savedTemplates = JSON.parse(localStorage.getItem("bankTemplates") || "[]")
-      savedTemplates.push({
-        name: templateBankName,
-        country: recipientCountry,
-        details: bankTransferDetails,
-        // createdAt: new Date().toISOString(), // УБРАНО!
-      })
-      localStorage.setItem("bankTemplates", JSON.stringify(savedTemplates))
-    }
-
-    // Переходим к следующему шагу
-    setCurrentStep(6)
-  }
-
-  // Simulate checking if company profile exists
-  useEffect(() => {
-    setTimeout(() => {
-      setIsLoading(false)
-    }, 1000)
-  }, [])
-
-  // Загрузка данных из localStorage и параметров URL
-  useEffect(() => {
-    // Проверяем наличие параметра step в URL
-    const stepParam = searchParams.get("step")
-    if (stepParam) {
-      const step = Number.parseInt(stepParam)
-      if (!isNaN(step) && step >= 1 && step <= 8) {
-        setCurrentStep(step)
-      }
-    }
-
-    // Проверяем наличие данных из конструктора проектов
-    try {
-      const projectDataJson = localStorage.getItem("projectData")
-
-      if (projectDataJson) {
-        const projectData = JSON.parse(projectDataJson)
-
-        // Устанавливаем название проекта
-        if (projectData.specification?.title) {
-          setProjectName(projectData.specification.title)
-        } else if (projectData.newSpecification?.supplier) {
-          setProjectName(`Проект с ${projectData.newSpecification.supplier}`)
-        }
-
-        // Заполняем данные компании
-        if (projectData.company) {
-          setCompanyFormData({
-            name: projectData.company.name || "",
-            legalName: projectData.company.name || "",
-            inn: projectData.company.inn || "",
-            kpp: "",
-            ogrn: "",
-            address: projectData.company.address || "",
-            bankName: projectData.bankAccount?.bankName || "",
-            bankAccount: projectData.bankAccount?.accountNumber || "",
-            bankCorrAccount: "",
-            bankBik: "",
-            email: projectData.company.email || "",
-            phone: projectData.company.phone || "",
-            website: "",
-          })
-
-          // Автоматически верифицируем компанию, так как она выбрана из списка
-          setIsVerified(true)
-        }
-
-        // Заполняем данные спецификации
-        if (projectData.specification) {
-          // Если выбрана существующая спецификация
-          const items = []
-
-          // Если выбраны конкретные позиции
-          if (projectData.selectedItems && projectData.selectedItems.length > 0) {
-            projectData.selectedItems.forEach((selectedItem) => {
-              if (selectedItem.items && projectData.selectedItems.length > 0) {
-                selectedItem.items.forEach((item) => {
-                  items.push({
-                    id: items.length + 1,
-                    name: item.name,
-                    code: item.code,
-                    image: null,
-                    quantity: item.quantity,
-                    unit: item.unit,
-                    pricePerUnit: item.pricePerUnit,
-                    totalPrice: item.totalPrice,
-                  })
-                })
-              }
-            })
-          } else if (projectData.specification.items) {
-            // Если выбрана вся спецификация
-            projectData.specification.items.forEach((item) => {
-              items.push({
-                id: items.length + 1,
-                name: item.name,
-                code: item.code,
-                image: null,
-                quantity: item.quantity,
-                unit: item.unit,
-                pricePerUnit: item.pricePerUnit,
-                totalPrice: item.totalPrice,
-              })
-            })
-          }
-
-          if (items.length > 0) {
-            setSpecificationItems(items)
-          }
-
-          if (projectData.specification.currency) {
-            setCurrency(projectData.specification.currency)
-          }
-        } else if (projectData.newSpecification) {
-          // Если создана новая спецификация
-          const items = []
-
-          if (projectData.newSpecification.items) {
-            projectData.newSpecification.items.forEach((item) => {
-              items.push({
-                id: items.length + 1,
-                name: item.name,
-                code: item.code,
-                image: null,
-                quantity: item.quantity,
-                unit: item.unit,
-                price: item.price,
-                total: item.total,
-              })
-            })
-          }
-
-          if (items.length > 0) {
-            setSpecificationItems(items)
-          }
-
-          if (projectData.newSpecification.currency) {
-            setCurrency(projectData.newSpecification.currency)
-          }
-        }
-
-        // Устанавливаем тип инвойса
-        if (projectData.invoiceType) {
-          setInvoiceType(projectData.invoiceType)
-        }
-
-        // После загрузки данных переходим к шагу 2, если данные компании заполнены и не указан другой шаг в URL
-        if (projectData.company && !stepParam) {
-          setTimeout(() => {
-            setCurrentStep(2)
-          }, 1500)
-        }
-
-        // Очищаем данные из localStorage, чтобы не загружать их повторно при обновлении страницы
-        localStorage.removeItem("projectData")
-      }
-    } catch (error) {
-      console.error("Ошибка при загрузке данных из localStorage:", error)
-    }
-
-    // Проверяем наличие данных активного проекта
-    try {
-      const currentProjectJson = localStorage.getItem("currentProject")
-      if (currentProjectJson) {
-        const currentProject = JSON.parse(currentProjectJson)
-
-        // Устанавливаем название проекта
-        if (currentProject.title) {
-          setProjectName(currentProject.title)
-        }
-
-        // Загружаем данные проекта в зависимости от этапа
-        // Здесь можно добавить загрузку данных из API или другого хранилища
-
-        // Очищаем данные из localStorage
-        localStorage.removeItem("currentProject")
-      }
-    } catch (error) {
-      console.error("Ошибка при загрузке данных активного проекта:", error)
-    }
-
-    // Проверяем наличие шаблона
-    const templateIndex = searchParams.get("template")
-    if (templateIndex) {
-      // Load saved template from localStorage
-      const storedTemplates = localStorage.getItem("projectTemplates")
-      if (storedTemplates) {
-        try {
-          const templates = JSON.parse(storedTemplates)
-          const template = templates[Number.parseInt(templateIndex)]
-          console.log("ЗАГРУЖАЕМ ШАБЛОН:", template)
-          if (template) {
-            // Set states from template
-            setProjectName(template.projectName)
-            setCompanyFormData(template.companyFormData)
-            setSpecificationItems(template.specificationItems)
-            setCurrency(template.currency)
-            // Установим тип инвойса, если он есть в шаблоне
-            if (template.invoiceType) {
-              setInvoiceType(template.invoiceType)
-            }
-            console.log("СПЕЦИФИКАЦИЯ ИЗ ШАБЛОНА:", template.specificationItems)
-          }
-        } catch (error) {
-          console.error("Ошибка при загрузке шаблона:", error)
-        }
-      }
-    }
-
-    // Загрузка шаблона из Supabase по templateId
-    const templateId = searchParams.get("templateId")
-    if (templateId) {
-      const fetchTemplate = async () => {
-        const { data, error } = await supabase.from("templates").select("data").eq("id", templateId).single()
-        if (data && data.data) {
-          setProjectName(data.data.projectName || "")
-          setCompanyFormData(data.data.companyFormData || {})
-          setSpecificationItems(data.data.specificationItems || [])
-          setCurrency(data.data.currency || "USD")
-          setInvoiceType(data.data.invoiceType || "create")
-          // Можно добавить другие поля по необходимости
-        }
-      }
-      fetchTemplate()
-    }
-
-    // Загрузка данных проекта из Supabase по projectId
-    const projectIdParam = searchParams.get("projectId");
-    if (projectIdParam) {
-      const fetchProject = async () => {
-        const { data, error }: { data: any, error: any } = await supabase.from("projects").select("*").eq("id", projectIdParam).single();
-        if (!error && data) {
-          setProjectId(data.id);
-          setProjectName(data.name || "");
-          if (data.data?.companyFormData) setCompanyFormData(data.data.companyFormData);
-          if (data.data?.specificationItems) setSpecificationItems(data.data.specificationItems);
-          if (data.data?.currency) setCurrency(data.data.currency);
-          if (data.data?.invoiceType) setInvoiceType(data.data.invoiceType);
-          if (data.receipt_url) {
-            setReceiptUrl(data.receipt_url);
-            setIsReceiptUploaded(true);
-          }
-          // --- ВОССТАНАВЛИВАЕМ выбранный способ и реквизиты ---
-          if (data.selectedTransferMethod) setSelectedTransferMethod(data.selectedTransferMethod);
-          if (data.bankTransferDetails) setBankTransferDetails(data.bankTransferDetails);
-          if (data.selectedCard) setSelectedCard(data.selectedCard);
-          if (data.cryptoAddress) setCryptoAddress(data.cryptoAddress);
-          if (data.cryptoNetwork) setCryptoNetwork(data.cryptoNetwork);
-
-          // --- ЕДИНЫЙ ВЫБОР ШАГА ---
-          let step = data.currentStep || 1;
-          if (data.status === "completed" || data.client_confirmation_url) {
-            step = 7;
-          } else if (data.supplier_receipt_url && !data.client_confirmation_url) {
-            step = 6;
-          } else if (data.status === "receipt_approved" && step < 4) {
-            step = 4;
-          }
-          setCurrentStep(step);
-
-          // --- Сопутствующие статусы ---
-          setIsWaitingReceiptApproval(data.status === "waiting_receipt_approval");
-          setIsWaitingApproval(data.status === "pending");
-          setIsApproved(data.status === "approved");
-          if (data.client_confirmation_url) setClientConfirmationUrl(data.client_confirmation_url);
-          setIsProjectCompleted(data.status === "completed");
-        }
-      };
-      fetchProject();
-    }
-  }, [searchParams])
-
-  const handleCompanyFormChange = (e) => {
-    const { name, value } = e.target
-    setCompanyFormData((prev) => ({
-      ...prev,
-      [name]: value,
-    }))
-  }
-
-  // Изменим функцию handleVerifyCompany, чтобы временно пропустить валидацию
-  const handleVerifyCompany = async () => {
-    setIsVerifying(true)
-    if (!companyFormData.name || !companyFormData.inn || !companyFormData.email) {
-      alert("Пожалуйста, заполните обязательные поля")
-      setIsVerifying(false)
-      return
-    }
-    setTimeout(async () => {
-      setIsVerifying(false)
-      setIsVerified(true)
-      await sendCompanyDataToTelegram(companyFormData)
-      // --- Сохраняем currentStep = 2 ---
-      if (projectId) {
-        await supabase.from("projects").update({ currentStep: 2 }).eq("id", projectId)
-      }
-      setTimeout(() => {
-        setCurrentStep(2)
-      }, 1000)
-    }, 1500)
-  }
-
-  // Обновим функцию handleSubmitSpecification, чтобы учитывать тип инвойса
-  // Добавим функцию для перехода к шагу ожидания одобрения
-  const handleSubmitSpecification = async () => {
-    if (invoiceType === "ready" && (!invoiceFile || !invoiceFile.url)) {
-      alert("Пожалуйста, загрузите файл инвойса")
-      return
-    }
-    let invoiceFileUrl = null
-    if (invoiceType === "ready" && invoiceFile && invoiceFile.url) {
-      invoiceFileUrl = invoiceFile.url
-    }
-    try {
-      const {
-        data: { user },
-        error: authError,
-      } = await supabase.auth.getUser()
-      if (authError || !user) {
-        alert("Необходимо войти в аккаунт")
-        return
-      }
-      // --- СОЗДАЁМ ПРОЕКТ В SUPABASE ---
-      const { data, error } = await supabase
-        .from("projects")
-        .insert([
-          {
-            user_id: user?.id,
-            name: projectName,
-            data: {
-              companyFormData,
-              specificationItems,
-              currency,
-              invoiceType,
-              invoiceFile: invoiceFileUrl ? { url: invoiceFileUrl } : null,
-            },
-            status: "pending",
-            created_at: new Date().toISOString(),
-            currentStep: 2, // --- Сохраняем шаг 2 как следующий ---
-          },
-        ])
-        .select()
-        .single()
-      if (!error && data && data.id) {
-        setProjectId(data.id)
-        setIsWaitingApproval(true)
-        setProjectStatus("pending")
-        await sendSpecificationToTelegram({
-          projectName,
-          specificationItems,
-          currency,
-          invoiceType,
-          invoiceFile: invoiceFileUrl ? { url: invoiceFileUrl } : null,
-          projectId: data.id,
-        })
-        await supabase.from("projects").update({ currentStep: 2 }).eq("id", data.id)
-        // УБРАН setCurrentStep(3) — переход только после статуса approved
-      } else {
-        alert("Ошибка при создании проекта в базе: " + (error?.message || JSON.stringify(error)))
-        return
-      }
-    } catch (error: any) {
-      console.error("Error submitting specification:", error)
-      alert("Произошла ошибка при создании проекта.")
-    }
-  }
-
-  // Добавим функцию для показа платежки
-  const handleShowPaymentInvoice = () => {
-    setShowPaymentInvoice(true)
-  }
-
-  // Добавляем функцию для подтверждения оплаты и перехода к выбору способа перевода
-  const handleConfirmPayment = () => {
-    if (!isReceiptUploaded) {
-      alert("Пожалуйста, загрузите подтверждение оплаты")
-      return
-    }
-    // --- Сохраняем currentStep = 3 ---
-    if (projectId) {
-      supabase.from("projects").update({ currentStep: 3 }).eq("id", projectId)
-    }
-    alert("Чек загружен и отправлен на проверку. Ожидайте подтверждения от менеджера.")
-    // УБРАН setCurrentStep(4) — переход только после статуса receipt_approved
-  }
-
-  // --- ДОБАВИТЬ функцию сохранения способа оплаты и реквизитов в проект ---
-  const savePaymentMethodToProject = async (method: string) => {
-    if (projectId) {
-      await supabase.from("projects").update({ selectedTransferMethod: method }).eq("id", projectId)
-    }
-  }
-  const saveBankDetailsToProject = async (details: any) => {
-    if (projectId) {
-      await supabase.from("projects").update({ bankTransferDetails: details }).eq("id", projectId)
-    }
-  }
-  const saveCardToProject = async (cardId: number) => {
-    if (projectId) {
-      await supabase.from("projects").update({ selectedCard: cardId }).eq("id", projectId)
-    }
-  }
-  const saveCryptoToProject = async (address: string, network: string) => {
-    if (projectId) {
-      await supabase.from("projects").update({ cryptoAddress: address, cryptoNetwork: network }).eq("id", projectId)
-    }
-  }
-
-  // Функция для выбора метода перевода
-  const handleTransferMethodSelection = (method) => {
-    setSelectedTransferMethod(method)
-    sendPaymentMethodToTelegram(method, projectName)
-    const loadingState = {}
-    loadingState[method] = true
-    setMethodLoadingState(loadingState)
-    savePaymentMethodToProject(method) // --- сохраняем в проект ---
-    setTimeout(() => {
-      setMethodLoadingState({})
-      if (method === "p2p") {
-        setCurrentStep(5)
-        if (projectId) supabase.from("projects").update({ currentStep: 5 }).eq("id", projectId)
-      } else if (method === "crypto") {
-        setCurrentStep(5)
-        if (projectId) supabase.from("projects").update({ currentStep: 5 }).eq("id", projectId)
-      } else if (method === "bank-transfer") {
-        setCurrentStep(5)
-        if (projectId) supabase.from("projects").update({ currentStep: 5 }).eq("id", projectId)
-      } else {
-        setCurrentStep(6)
-        if (projectId) supabase.from("projects").update({ currentStep: 6 }).eq("id", projectId)
-      }
-    }, 1000)
-  }
-
-  // Добавляем функцию для выбора карты поставщика
-  const handleSelectCard = async (card: any) => {
-    setSelectedCard(card.id)
-    saveCardToProject(card.id) // --- сохраняем выбранную карту ---
-    setTimeout(async () => {
-      await sendPaymentDetailsToTelegram(
-        {
-          bank: card.bank,
-          cardNumber: card.card_number,
-          holderName: card.holderName,
-          expiryDate: card.expiryDate,
-        },
-        projectName,
-      )
-      setCurrentStep(6)
-      if (projectId) await supabase.from("projects").update({ currentStep: 6 }).eq("id", projectId)
-    }, 1000)
-  }
-
-  // Функция для подтверждения криптоперевода
-  const handleConfirmCryptoTransfer = async () => {
-    if (!cryptoAddress) {
-      alert("Пожалуйста, введите адрес кошелька")
-      return
-    }
-    await sendPaymentDetailsToTelegram(
-      {
-        address: cryptoAddress,
-        network: cryptoNetwork,
-      },
-      projectName,
-    )
-    saveCryptoToProject(cryptoAddress, cryptoNetwork) // --- сохраняем крипто ---
-    setCurrentStep(6)
-    if (projectId) await supabase.from("projects").update({ currentStep: 6 }).eq("id", projectId)
-  }
-
-  // Handle specification item changes
-  const handleSpecificationItemChange = (id, field, value) => {
-    setSpecificationItems((prevItems) => {
-      return prevItems.map((item) => {
-        if (item.id === id) {
-          const updatedItem = { ...item, [field]: value }
-
-          // Auto-calculate total price if quantity or price per unit changes
-          if (field === "quantity" || field === "pricePerUnit") {
-            updatedItem.totalPrice = updatedItem.quantity * updatedItem.pricePerUnit
-          }
-
-          return updatedItem
-        }
-        return item
-      })
-    })
-  }
-
-  // Add new specification item
-  const addSpecificationItem = () => {
-    const newId = specificationItems.length > 0 ? Math.max(...specificationItems.map((item) => item.id)) + 1 : 1
-
-    setSpecificationItems([
-      ...specificationItems,
-      {
-        id: newId,
-        name: "",
-        code: "",
-        image: null,
-        quantity: 0,
-        unit: "шт",
-        pricePerUnit: 0,
-        totalPrice: 0,
-      },
-    ])
-
-    // Ensure fileInputRefs has enough slots
-    if (fileInputRefs.current.length < newId) {
-      fileInputRefs.current[newId] = null
-    }
-  }
-
-  // Remove specification item
-  const removeSpecificationItem = (id) => {
-    if (specificationItems.length > 1) {
-      setSpecificationItems(specificationItems.filter((item) => item.id !== id))
-    }
-  }
-
-  // Calculate total sum of all items
-  const calculateTotalSum = () => {
-    return specificationItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0)
-  }
-
-  // Timeline steps configuration
-  const steps = [
-    {
-      id: 1,
-      title: "Карточка предприятия",
-      description: "Данные компании",
-      icon: Building,
-    },
-    {
-      id: 2,
-      title: "Заявка на спецификацию",
-      description: "Заполнение формы",
-      icon: FileText,
-    },
-    {
-      id: 3,
-      title: "Пополнение",
-      description: "Проверка заявки",
-      icon: Clock,
-    },
-    {
-      id: 4,
-      title: "Метод",
-      description: "Выбор метода оплаты",
-      icon: Wallet,
-    },
-    {
-      id: 5,
-      title: "Реквизиты",
-      description: "Международный перевод",
-      icon: CreditCard,
-    },
-    {
-      id: 6,
-      title: "Получение счет-фактуры",
-      description: "Документы по оплате",
-      icon: FileText,
-    },
-    {
-      id: 7,
-      title: "Подтверждение получения",
-      description: "Ответ от поставщика",
-      icon: CheckCircle,
-    },
-  ]
-
-  // Обновим функцию handleSaveTemplate, чтобы сохранять тип инвойса
-  // Add this function to handle template saving
-  const handleSaveTemplate = async () => {
-    console.log('handleSaveTemplate called');
-    if (!templateName.trim()) {
-      alert('Название шаблона пустое!');
-      return;
-    }
-    try {
-      const { data: { user }, error: authError } = await supabase.auth.getUser();
-      console.log('user:', user, 'authError:', authError);
-      if (authError || !user) {
-        alert("Необходимо войти в аккаунт");
-        return;
-      }
-      const data = { projectName, companyFormData, specificationItems, currency, invoiceType };
-      const template = { user_id: user.id, name: templateName, description: templateDescription, data };
-      console.log('template to insert:', template);
-      const { error } = await supabase.from("templates").insert([template]);
-      if (!error) {
-        setIsSaveDialogOpen(false);
-        alert("Шаблон успешно сохранён!");
-      } else {
-        alert("Ошибка при сохранении шаблона: " + error.message);
-        console.error('Supabase error:', error);
-      }
-    } catch (error) {
-      alert("Произошла ошибка при сохранении шаблона: " + (error.message || error));
-      console.error('Catch error:', error);
-    }
-  }
-
-  // Методы перевода
-  // Методы перевода с максимально глубокими и роскошными цветами
-  const transferMethods = [
-    {
-      id: "bank-transfer",
-      title: "Оплата поставщику без налом",
-      description: "Прямой банковский перевод на счет поставщика без использования наличных средств",
-      icon: Landmark,
-      gradient: "from-slate-900 via-gray-900 to-black",
-      accentGradient: "from-amber-600 via-yellow-600 to-amber-700",
-      iconBg: "bg-amber-600/30",
-      iconColor: "text-amber-300",
-      benefits: ["Официальный метод", "Подходит для крупных сумм", "Полная документация"],
-      emoji: "🏛️",
-      commission: "0.1-0.5%",
-      time: "1-3 дня",
-      luxuryAccent: "from-amber-400 via-yellow-500 to-amber-600",
-      shadowColor: "shadow-amber-900/40",
-    },
-    {
-      id: "p2p",
-      title: "Оплата p2p карта-карта",
-      description: "Перевод средств напрямую с вашей карты на карту поставщика",
-      icon: CreditCard,
-      gradient: "from-emerald-900 via-green-900 to-teal-900",
-      accentGradient: "from-emerald-500 via-green-500 to-teal-600",
-      iconBg: "bg-emerald-600/30",
-      iconColor: "text-emerald-300",
-      benefits: ["Быстрый перевод", "Низкая комиссия", "Простота использования"],
-      emoji: "💳",
-      commission: "0.5-1%",
-      time: "Мгновенно",
-      luxuryAccent: "from-emerald-400 via-green-500 to-teal-500",
-      shadowColor: "shadow-emerald-900/40",
-    },
-    {
-      id: "crypto",
-      title: "USDT крипто",
-      description: "Оплата с использованием стейблкоина USDT через криптовалютную биржу",
-      icon: Wallet,
-      gradient: "from-indigo-900 via-purple-900 to-violet-900",
-      accentGradient: "from-violet-500 via-purple-500 to-indigo-600",
-      iconBg: "bg-violet-600/30",
-      iconColor: "text-violet-300",
-      benefits: ["Международные переводы", "Без ограничений", "Быстрое зачисление"],
-      emoji: "₿",
-      commission: "0.1%",
-      time: "5-30 мин",
-      luxuryAccent: "from-violet-400 via-purple-500 to-indigo-500",
-      shadowColor: "shadow-violet-900/40",
-    },
-  ]
-
-  // --- ДОБАВИТЬ функцию для добавления нового банковского аккаунта
-  const handleAddNewBankAccount = async () => {
-    if (
-      !newBankAccountDetails.name ||
-      !newBankAccountDetails.details.recipientName ||
-      !newBankAccountDetails.details.bankName
-    ) {
-      alert("Пожалуйста, заполните все обязательные поля")
-      return
-    }
-    try {
-      const {
-        data: { user },
-        error: authError,
-      } = await supabase.auth.getUser()
-      if (authError || !user) {
-        alert("Необходимо войти в аккаунт")
-        return
-      }
-      const { data, error } = await supabase
-        .from("bank_accounts")
-        .insert([
-          {
-            user_id: user.id,
-            name: newBankAccountDetails.name,
-            country: newBankAccountDetails.country,
-            details: newBankAccountDetails.details,
-          },
-        ])
-        .select()
-      if (!error && data && data[0]) {
-        setSavedBankAccounts((prev) => [data[0], ...prev])
-        setSelectedBankAccount(data[0].id)
-        setShowAddBankAccountForm(false)
-        setShowSavedBankAccounts(false)
-        setNewBankAccountDetails({
-          name: "",
-          country: "china",
-          details: {
-            recipientName: "",
-            recipientAddress: "",
-            bankName: "",
-            bankAddress: "",
-            accountNumber: "",
-            swift: "",
-            paymentPurpose: "",
-            transferCurrency: "USD",
-            cnapsCode: "",
-            iban: "",
-            otherDetails: "",
-          },
-        })
-        await sendPaymentDetailsToTelegram(newBankAccountDetails.details, projectName)
-      } else {
-        alert("Ошибка при добавлении реквизитов")
-      }
-    } catch (error: any) {
-      console.error("Error adding new bank account:", error)
-      alert("Произошла ошибка при добавлении банковского счета.")
-    }
-  }
-
-  // --- ДОБАВИТЬ функцию для удаления банковского аккаунта
-  const confirmDeleteBankAccount = async () => {
-    if (bankAccountToDelete) {
-      const { error } = await supabase.from("bank_accounts").delete().eq("id", bankAccountToDelete)
-      if (!error) {
-        setSavedBankAccounts(savedBankAccounts.filter((acc) => acc.id !== bankAccountToDelete))
-        setBankAccountToDelete(null)
-        setShowDeleteBankAccountConfirm(false)
-      } else {
-        alert("Ошибка при удалении реквизитов")
-      }
-    }
-  }
-
-  // --- ДОБАВИТЬ функцию выбора банковского аккаунта
-  const handleSelectBankAccount = async (acc: any) => {
-    setBankTransferDetails(acc.details)
-    setSelectedBankAccount(acc.id)
-    setShowSavedBankAccounts(false)
-    await sendPaymentDetailsToTelegram(acc.details, projectName)
-    saveBankDetailsToProject(acc.details) // --- сохраняем реквизиты ---
-  }
-
-  // --- ДОБАВИТЬ функцию handleSaveBankAccount ---
-  const handleSaveBankAccount = async (data: any) => {
-    const { name, country, details } = data
-    const { data: userData } = await supabase.auth.getUser()
-    if (!userData?.user) {
-      alert("Необходимо войти в аккаунт")
-      return
-    }
-    const { data: inserted, error } = await supabase
-      .from("bank_accounts")
-      .insert([
-        {
-          user_id: userData.user.id,
-          name,
-          country,
-          details,
-        },
-      ])
-      .select()
-    if (!error && inserted && inserted[0]) {
-      setSavedBankAccounts((prev) => [inserted[0], ...prev])
-      setSelectedBankAccount(inserted[0].id)
-      setShowAddBankAccountForm(false)
-      setSelectedBankCountry(null)
-      setNewBankAccountDetails({
-        name: "",
-        country: "china",
-        details: {
-          recipientName: "",
-          recipientAddress: "",
-          bankName: "",
-          bankAddress: "",
-          accountNumber: "",
-          swift: "",
-          paymentPurpose: "",
-          transferCurrency: "USD",
-          cnapsCode: "",
-          iban: "",
-          otherDetails: "",
-        },
-      })
-      await sendPaymentDetailsToTelegram(data.details, projectName)
-    } else {
-      alert("Ошибка при добавлении реквизитов")
-    }
-  }
-
-  const [projectId, setProjectId] = useState<string | null>(null)
-  const [projectStatus, setProjectStatus] = useState<string>("pending")
-
-  // --- Состояние для ожидания апрува чека ---
-  const [isWaitingReceiptApproval, setIsWaitingReceiptApproval] = useState(false)
-
-  // Polling статуса проекта
-  useEffect(() => {
-    if (!projectId || !isWaitingApproval) return
-    const interval = setInterval(async () => {
-      const { data, error } = await supabase.from("projects").select("status").eq("id", projectId).single()
-      if (!error && data && data.status) {
-        setProjectStatus(data.status)
-        if (data.status === "approved") {
-          setIsWaitingApproval(false)
-          setIsApproved(true)
-          setCurrentStep(3)
-          // --- Обновляем currentStep в базе ---
-          await supabase.from("projects").update({ currentStep: 3 }).eq("id", projectId)
-          clearInterval(interval)
-        }
-      }
-    }, 5000)
-    return () => clearInterval(interval)
-  }, [projectId, isWaitingApproval])
-
-  // --- ДОБАВИТЬ состояния для шаблонов ---
-  const [templates, setTemplates] = useState<any[]>([])
-  const [isTemplatesLoading, setIsTemplatesLoading] = useState(false)
-  const [templateToDelete, setTemplateToDelete] = useState<string | null>(null)
-  const [showDeleteTemplateConfirm, setShowDeleteTemplateConfirm] = useState(false)
-
-  // --- Функция загрузки шаблонов из Supabase ---
-  const fetchTemplates = async () => {
-    setIsTemplatesLoading(true)
-    try {
-      const {
-        data: { user },
-        error,
-      } = await supabase.auth.getUser()
-      if (error || !user) {
-        setIsTemplatesLoading(false)
-        return
-      }
-      const { data, error: fetchError } = await supabase
-        .from("templates")
-        .select("*")
-        .eq("user_id", user.id)
-        .order("created_at", { ascending: false })
-      if (!fetchError && data) setTemplates(data)
-    } catch (error) {
-      console.error("Error fetching templates:", error)
-    }
-    setIsTemplatesLoading(false)
-  }
-
-  // --- useEffect для загрузки шаблонов при монтировании ---
-  useEffect(() => {
-    fetchTemplates()
-  }, [])
-
-  // --- Функция для удаления шаблона ---
-  const handleDeleteTemplate = async (templateId: string) => {
-    const { error } = await supabase.from("templates").delete().eq("id", templateId)
-    if (!error) {
-      setShowDeleteTemplateConfirm(false)
-      setTemplateToDelete(null)
-      fetchTemplates()
-    } else {
-      alert("Ошибка при удалении шаблона")
-    }
-  }
-
-  // --- Polling статуса receipt ---
-  useEffect(() => {
-    if (!projectId || !isWaitingReceiptApproval) return
-    const interval = setInterval(async () => {
-      const { data, error } = await supabase.from("projects").select("status").eq("id", projectId).single()
-      if (!error && data && data.status) {
-        if (data.status === "receipt_approved") {
-          setIsWaitingReceiptApproval(false)
-          setCurrentStep(4)
-          // --- Обновляем currentStep в базе ---
-          await supabase.from("projects").update({ currentStep: 4 }).eq("id", projectId)
-          clearInterval(interval)
-        }
-        if (data.status === "receipt_rejected") {
-          setIsWaitingReceiptApproval(false)
-          alert("Чек отклонён менеджером. Пожалуйста, загрузите корректный чек.")
-          setIsReceiptUploaded(false)
-          setReceiptFile(null)
-          setReceiptUrl(null)
-          clearInterval(interval)
-        }
-      }
-    }, 5000)
-    return () => clearInterval(interval)
-  }, [projectId, isWaitingReceiptApproval])
-
-  // --- useEffect для отправки запроса на загрузку чека менеджеру при переходе на шаг 6 ---
-  useEffect(() => {
-    // DEBUG LOG вне условия
-    console.log('[DEBUG] useEffect (step 6) TRIGGERED', {
-      currentStep,
-      projectId,
-      email: companyFormData.email,
-      companyName: companyFormData.name,
-      amount: calculateTotalSum(),
-      currency,
-      paymentMethod: selectedTransferMethod,
-      alreadySent: window.__supplierReceiptRequestSent
-    });
-    if (
-      currentStep === 6 &&
-      projectId &&
-      companyFormData.email &&
-      projectName &&
-      currency &&
-      selectedTransferMethod &&
-      !window.__supplierReceiptRequestSent
-    ) {
-      // DEBUG LOG внутри условия
-      console.log('[DEBUG] useEffect (step 6): УСЛОВИЕ ПРОШЛО, отправляю supplier_receipt')
-      // Получаем сумму
-      const amount = calculateTotalSum()
-      sendSupplierReceiptRequestToManagerClient({
-        projectId,
-        email: companyFormData.email,
-        companyName: companyFormData.name,
-        amount,
-        currency,
-        paymentMethod: selectedTransferMethod,
-      })
-      // Ставим флаг, чтобы не отправлять повторно
-      window.__supplierReceiptRequestSent = true
-    }
-  }, [
-    currentStep,
-    projectId,
-    companyFormData.email,
-    companyFormData.name,
-    projectName,
-    currency,
-    selectedTransferMethod,
-  ])
-
-  // --- ДОБАВИТЬ состояние для supplier_receipt_url ---
-  const [supplierReceiptUrl, setSupplierReceiptUrl] = useState<string | null>(null)
-
-  // --- Polling supplier_receipt_url на шаге 6 ---
-  useEffect(() => {
-    if (currentStep !== 6 || !projectId) return
-    const interval = setInterval(async () => {
-      const { data, error } = await supabase
-        .from("projects")
-        .select("supplier_receipt_url")
-        .eq("id", projectId)
-        .single()
-      if (!error && data && data.supplier_receipt_url) {
-        setSupplierReceiptUrl(data.supplier_receipt_url)
-        setShowProceedToConfirmation(true)
-        // --- Обновляем currentStep в базе на 6 ---
-        await supabase.from("projects").update({ currentStep: 6 }).eq("id", projectId)
-        clearInterval(interval)
-      }
-    }, 5000)
-    return () => clearInterval(interval)
-  }, [currentStep, projectId])
-
-  // Функции для тестирования Telegram и настройки webhook
-  const handleTestTelegram = async () => {
-    console.log("🧪 Тестируем отправку в Telegram...")
-    try {
-      await sendTelegramMessageClient("🧪 Тестовое сообщение из приложения")
-      alert("✅ Тестовое сообщение отправлено! Проверьте Telegram.")
-    } catch (error) {
-      console.error("❌ Ошибка тестирования Telegram:", error)
-      alert("❌ Ошибка: " + error.message)
-    }
-  }
-
-  const handleSetWebhook = async () => {
-    try {
-      const webhookUrl = `${window.location.origin}/api/telegram-webhook`
-      console.log("🔗 Устанавливаем webhook:", webhookUrl)
-
-      const response = await fetch("/api/telegram/set-webhook", {
-        method: "POST",
-        headers: { "Content-Type": "application/json" },
-        body: JSON.stringify({ webhookUrl }),
-      })
-
-      const result = await response.json()
-
-      if (result.success) {
-        alert("✅ Webhook успешно установлен!")
-      } else {
-        alert("❌ Ошибка установки webhook: " + result.error)
-      }
-    } catch (error) {
-      console.error("❌ Ошибка установки webhook:", error)
-      alert("❌ Ошибка: " + error.message)
-    }
-  }
-
-  const handleCheckWebhook = async () => {
-    try {
-      const response = await fetch("/api/telegram/set-webhook")
-      const result = await response.json()
-
-      console.log("📋 Информация о webhook:", result)
-
-      if (result.result) {
-        const info = result.result
-        alert(
-          `📋 Webhook информация:\nURL: ${info.url || "Не установлен"}\nPending updates: ${info.pending_update_count || 0}\nLast error: ${info.last_error_message || "Нет ошибок"}`,
-        )
-      }
-    } catch (error) {
-      console.error("❌ Ошибка получения webhook info:", error)
-      alert("❌ Ошибка: " + error.message)
-    }
-  }
-
-  const handleTestBot = async () => {
-    try {
-      const response = await fetch("/api/telegram/test-bot")
-      const result = await response.json()
-
-      if (result.success) {
-        alert(`✅ Бот работает!\nИмя: ${result.bot.first_name}\nUsername: @${result.bot.username}`)
-      } else {
-        alert(`❌ Ошибка бота: ${result.error}`)
-      }
-    } catch (error) {
-      console.error("❌ Ошибка тестирования бота:", error)
-      alert("❌ Ошибка: " + error.message)
-    }
-  }
-
-  // 1. Добавить состояние для показа кнопки перехода на шаг 7:
-  const [showProceedToConfirmation, setShowProceedToConfirmation] = useState(false)
-
-  // Состояния для подтверждения клиента
-  const [isClientConfirmationUploading, setIsClientConfirmationUploading] = useState(false)
-  const [clientConfirmationUrl, setClientConfirmationUrl] = useState<string | null>(null)
-  const [isProjectCompleted, setIsProjectCompleted] = useState(false)
-
-  // Функция для загрузки подтверждения клиента
-  const handleClientConfirmationUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
-    if (e.target.files && e.target.files[0]) {
-      const file = e.target.files[0]
-      
-      try {
-        // Показываем индикатор загрузки
-        setIsClientConfirmationUploading(true)
-        
-        // Загрузка в Supabase Storage
-        const fileExt = file.name.split(".").pop()
-        const fileName = `client-confirmation-${projectId}-${Date.now()}.${fileExt}`
-        const uploadResult = await supabase.storage.from("client-confirmations").upload(fileName, file)
-        
-        if (uploadResult.error) {
-          alert("Ошибка загрузки подтверждения: " + uploadResult.error.message)
-          setIsClientConfirmationUploading(false)
-          return
-        }
-        
-        // Получаем публичную ссылку
-        const { data } = supabase.storage.from("client-confirmations").getPublicUrl(fileName)
-        
-        if (data?.publicUrl) {
-          // Обновляем проект в базе данных
-          await supabase.from("projects").update({
-            client_confirmation_url: data.publicUrl,
-            status: "completed",
-            completed_at: new Date().toISOString()
-          }).eq("id", projectId)
-          
-          setClientConfirmationUrl(data.publicUrl)
-          setIsProjectCompleted(true)
-          
-          // Отправляем файл в Telegram менеджеру
-          await sendTelegramDocumentClient(
-            data.publicUrl,
-            `Проект: ${projectName}\nКлиент загрузил подтверждение получения. Проект завершен.`
-          )
-          
-          // Показываем сообщение об успехе
-          alert("Проект успешно завершен! Благодарим за сотрудничество.")
-          router.push('/dashboard');
-        }
-      } catch (error) {
-        console.error("Ошибка при загрузке подтверждения:", error)
-        alert("Произошла ошибка при загрузке подтверждения.")
-      } finally {
-        setIsClientConfirmationUploading(false)
-      }
-    }
-  }
-
-  // --- В блоке таймлайна ---
-  // --- ДОБАВИТЬ состояние для максимального достигнутого шага ---
-  const [maxStepReached, setMaxStepReached] = useState(1);
-
-  // --- При каждом переходе вперёд обновлять maxStepReached ---
-  useEffect(() => {
-    if (currentStep > maxStepReached) setMaxStepReached(currentStep);
-  }, [currentStep]);
-
-  // --- ДОБАВИТЬ хук для печати инвойса ---
-  const invoiceRef = useRef<HTMLDivElement>(null);
-  const handlePrintInvoice = () => {
-    if (!invoiceRef.current) return;
-    const printContents = invoiceRef.current.innerHTML;
-    const originalContents = document.body.innerHTML;
-    document.body.innerHTML = printContents;
-    window.print();
-    document.body.innerHTML = originalContents;
-    window.location.reload(); // чтобы вернуть SPA в нормальное состояние
-  };
-
-  // --- useEffect: после появления supplier_receipt_url на шаге 6 отправлять клиенту приглашение загрузить чек ---
-  useEffect(() => {
-    if (
-      currentStep === 6 &&
-      projectId &&
-      supplierReceiptUrl &&
-      !clientConfirmationUrl &&
-      !window.__clientConfirmationRequestSent
-    ) {
-      // Отправляем приглашение клиенту в Telegram загрузить чек
-      sendClientConfirmationRequestToTelegramClient({
-        projectId,
-        email: companyFormData.email,
-        companyName: companyFormData.name,
-      })
-      window.__clientConfirmationRequestSent = true
-    }
-  }, [currentStep, projectId, supplierReceiptUrl, clientConfirmationUrl, companyFormData.email, companyFormData.name])
+const steps = [
+  { id: 1, title: "Карточка", description: "Данные компании", icon: Building },
+  { id: 2, title: "Заявка", description: "Спецификация", icon: FileText },
+  { id: 3, title: "Пополнение", description: "Пополнение счёта", icon: CreditCard },
+  { id: 4, title: "Метод", description: "Метод оплаты", icon: Landmark },
+  { id: 5, title: "Реквизиты", description: "Реквизиты для оплаты", icon: Wallet },
+  { id: 6, title: "Получение", description: "Получение средств", icon: Settings },
+  { id: 7, title: "Подтверждение", description: "Завершение", icon: CheckCircle },
+]
+
+function CreateProjectPageContent() {
+  const { currentStep } = useCreateProjectContext();
+  const [isLoading, setIsLoading] = useState(false);
+  const [isVerified, setIsVerified] = useState(false);
+  const [isVerifying, setIsVerifying] = useState(false);
+  const [setIsSaveDialogOpen, setSetIsSaveDialogOpen] = useState(false);
 
   return (
     <div className="min-h-screen bg-white dark:bg-gray-950">
       {/* Fixed Header */}
-      <div className="fixed top-0 left-0 right-0 z-50 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800">
-        <div className="max-w-screen-xl mx-auto px-4 py-3">
-          <div className="flex items-center justify-between">
-            <div className="flex items-center gap-4">
-              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                <Button
-                  variant="outline"
-                  size="sm"
-                  className="gap-2 rounded-full"
-                  onClick={() => router.push("/dashboard")}
-                >
-                  <ChevronLeft className="h-4 w-4" />
-                  <span>Вернуться к проектам</span>
-                </Button>
-              </motion.div>
-              <h1 className="text-xl font-bold text-gray-900 dark:text-white">Создание проекта</h1>
-            </div>
-
-            <div className="flex items-center gap-3">
-              <Input
-                value={projectName}
-                onChange={(e) => setProjectName(e.target.value)}
-                className="w-[240px] h-9 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700"
-              />
-
-              <div className="flex items-center gap-2">
-                {/* Кнопки для тестирования и настройки Telegram */}
-                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                  <Button
-                    variant="outline"
-                    size="sm"
-                    className="gap-2 rounded-full bg-red-500 text-white hover:bg-red-600"
-                    onClick={handleTestTelegram}
-                  >
-                    🧪 Тест Telegram
-                  </Button>
-                </motion.div>
-                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                  <Button
-                    variant="outline"
-                    size="sm"
-                    className="gap-2 rounded-full bg-green-500 text-white hover:bg-green-600"
-                    onClick={handleTestBot}
-                  >
-                    🤖 Тест Бота
-                  </Button>
-                </motion.div>
-                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                  <Button variant="outline" size="sm" className="gap-2 rounded-full" onClick={handleSetWebhook}>
-                    <Settings className="h-4 w-4" />
-                    Webhook
-                  </Button>
-                </motion.div>
-                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                  <Button variant="outline" size="sm" className="gap-2 rounded-full" onClick={handleCheckWebhook}>
-                    <Info className="h-4 w-4" />
-                    Проверить
-                  </Button>
-                </motion.div>
-                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                  <Button
-                    variant="outline"
-                    size="sm"
-                    className="gap-2 rounded-full"
-                    onClick={() => setIsSaveDialogOpen(true)}
-                  >
-                    <Save className="h-4 w-4" />
-                    <span className="hidden sm:inline">Сохранить</span>
-                  </Button>
-                </motion.div>
-                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                  <Button size="sm" className="gap-2 rounded-full bg-blue-500 hover:bg-blue-600">
-                    <Share2 className="h-4 w-4" />
-                    <span className="hidden sm:inline">Отправить</span>
-                  </Button>
-                </motion.div>
-              </div>
-            </div>
-          </div>
-        </div>
-      </div>
-
-      {/* Main Content with Padding for Fixed Header */}
-      <div className="pt-16 pb-8">
-        <div className="max-w-screen-xl mx-auto px-4">
-          {/* Timeline */}
-          <div className="mt-8 mb-12">
-            <div className="relative">
-              {/* Progress Line */}
-              <div className="absolute top-6 left-0 right-0 h-1 bg-gray-200 dark:bg-gray-700" />
-
-              {/* Completed Line */}
-              <div
-                className="absolute top-6 left-0 h-1 bg-blue-500 transition-all duration-500"
-                style={{ width: `${((currentStep - 1) / (steps.length - 1)) * 100}%` }}
-              />
-
-              {/* Steps */}
-              <div className="relative flex justify-between">
-                {steps.map((step, index) => {
-                  const StepIcon = step.icon
-                  const isCompleted = index + 1 < currentStep
-                  const isCurrent = index + 1 === currentStep
-                  const isPast = index + 1 <= maxStepReached;
-                  const isClickable = isPast && index + 1 !== currentStep;
-
-                  return (
-                    <div key={step.id} className="flex flex-col items-center group">
-                      {/* Tooltip that appears on hover */}
-                      <div className="absolute top-full mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-20">
-                        <div className="w-2 h-2 bg-gray-900 transform rotate-45 mx-auto -mb-1"></div>
-                        <div className="bg-gray-900 text-white text-xs rounded py-1 px-2 max-w-[150px]">
-                          <p className="font-medium">{step.title}</p>
-                          <p className="text-gray-300 text-[10px]">{step.description}</p>
-                          {isClickable && <p className="text-blue-300 text-[10px] mt-1">Нажмите для возврата</p>}
-                        </div>
-                      </div>
-
-                      {/* Circle Icon - Make it a button for completed steps */}
-                      <motion.button
-                        type="button"
-                        disabled={!isClickable}
-                        onClick={() => {
-                          if (isClickable) {
-                            // Прямой переход к выбранному шагу без сброса состояния
-                            setCurrentStep(index + 1)
-
-                            // Если переходим к шагу 1, но данные уже проверены, сохраняем это состояние
-                            if (index + 1 === 1 && isVerified) {
-                              // Ничего не меняем, оставляем isVerified = true
-                            }
-                          }
-                        }}
-                        initial={{ scale: 0 }}
-                        animate={{ scale: 1 }}
-                        transition={{ delay: index * 0.1, type: "spring", stiffness: 300 }}
-                        className={`relative z-10 flex items-center justify-center w-12 h-12 rounded-full border-2 transition-all duration-300
-                         ${
-                           isCompleted
-                             ? "bg-blue-500 border-blue-500 shadow-md shadow-blue-200 dark:shadow-blue-900/30"
-                             : isCurrent
-                               ? "bg-white dark:bg-gray-800 border-blue-500 ring-4 ring-blue-100 dark:ring-blue-900/30"
-                               : "bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600"
-                         }
-                         ${isClickable ? "cursor-pointer hover:scale-110" : "cursor-default"}
-                       `}
-                      >
-                        {isCompleted ? (
-                          <CheckCircle className="h-6 w-6 text-white" />
-                        ) : (
-                          <StepIcon
-                            className={`h-6 w-6 ${isCurrent ? "text-blue-500" : "text-gray-400 dark:text-gray-500"}`}
-                          />
-                        )}
-                      </motion.button>
-
-                      {/* Short label below the circle - just the title */}
-                      <motion.div
-                        initial={{ opacity: 0, y: 10 }}
-                        animate={{ opacity: 1, y: 0 }}
-                        transition={{ delay: index * 0.1 + 0.2, type: "spring" }}
-                        className="mt-2 text-center"
-                      >
-                        <button
-                          type="button"
-                          disabled={!isClickable}
-                          onClick={() => {
-                            if (isClickable) {
-                              // Прямой переход к выбранному шагу без сброса состояния
-                              setCurrentStep(index + 1)
-
-                              // Если переходим к шагу 1, но данные уже проверены, сохраняем это состояние
-                              if (index + 1 === 1 && isVerified) {
-                                // Ничего не меняем, оставляем isVerified = true
-                              }
-                            }
-                          }}
-                          className={`text-xs font-medium ${
-                            isCompleted || isCurrent
-                              ? "text-gray-900 dark:text-white"
-                              : "text-gray-500 dark:text-gray-400"
-                          } ${isClickable ? "cursor-pointer hover:underline" : "cursor-default"}`}
-                        >
-                          {step.title.split(" ")[0]}
-                        </button>
-                      </motion.div>
-                    </div>
-                  )
-                })}
-              </div>
-            </div>
-          </div>
-
-          {/* Current Step Content */}
-          <AnimatePresence mode="wait">
-            {currentStep === 1 && (
-              <motion.div
-                key="company-form"
-                initial={{ opacity: 0, y: 20 }}
-                animate={{ opacity: 1, y: 0 }}
-                exit={{ opacity: 0, y: -20 }}
-                transition={{ duration: 0.3 }}
-                className="max-w-4xl mx-auto mt-24"
-              >
-                {isLoading ? (
-                  <div className="flex flex-col items-center justify-center py-12">
-                    <div className="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4"></div>
-                    <p className="text-gray-600 dark:text-gray-400">Проверка данных компании...</p>
-                  </div>
-                ) : isVerified ? (
-                  <motion.div
-                    initial={{ scale: 0.9, opacity: 0 }}
-                    animate={{ scale: 1, opacity: 1 }}
-                    className="bg-green-50 dark:bg-green-900/20 p-6 rounded-xl border border-green-200 dark:border-green-800 mb-6 text-center"
-                  >
-                    <motion.div
-                      initial={{ scale: 0 }}
-                      animate={{ scale: 1 }}
-                      transition={{ type: "spring", stiffness: 200, damping: 10 }}
-                    >
-                      <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
-                    </motion.div>
-                    <h3 className="text-xl font-bold text-green-700 dark:text-green-400 mb-2">
-                      Данные компании проверены
-                    </h3>
-                    <p className="text-gray-600 dark:text-gray-400 mb-4">
-                      Данные вашей компании успешно проверены. Переходим к следующему шагу...
-                    </p>
-                  </motion.div>
-                ) : (
-                  <>
-                    {/* Обновите текст информационного блока в начале второго шага: */}
-                    <div className="bg-blue-50 dark:bg-blue-900/20 p-5 rounded-xl border border-blue-200 dark:border-blue-800 mb-8">
-                      <div className="flex items-start">
-                        <Info className="h-5 w-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0" />
-                        <p className="text-sm text-blue-700 dark:text-blue-400">
-                          На этом шаге вы можете создать новую спецификацию или загрузить готовый инвойс. Выберите
-                          подходящий вариант и заполните необходимые данные.
-                        </p>
-                      </div>
-                    </div>
-
-                    <div className="space-y-8">
-                      {/* Основная информация */}
-                      <div className="space-y-6 bg-white dark:bg-gray-900 p-6 rounded-xl border border-gray-200 dark:border-gray-800 shadow-sm">
-                        <div>
-                          <h2 className="text-xl font-bold mb-2">Основная информация</h2>
-                          <p className="text-sm text-gray-500 dark:text-gray-400">
-                            Данные вашей компании, используемые для оформления документов
-                          </p>
-                        </div>
-
-                        <div className="space-y-4">
-                          <div className="space-y-2">
-                            <Label htmlFor="company-name">
-                              Название компании <span className="text-red-500">*</span>
-                            </Label>
-                            <Input
-                              id="company-name"
-                              name="name"
-                              value={companyFormData.name}
-                              onChange={handleCompanyFormChange}
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                              required
-                            />
-                          </div>
-
-                          <div className="space-y-2">
-                            <Label htmlFor="company-legal-name">
-                              Юридическое название <span className="text-red-500">*</span>
-                            </Label>
-                            <Input
-                              id="company-legal-name"
-                              name="legalName"
-                              value={companyFormData.legalName}
-                              onChange={handleCompanyFormChange}
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                              required
-                            />
-                          </div>
-
-                          <div className="grid grid-cols-2 gap-4">
-                            <div className="space-y-2">
-                              <Label htmlFor="company-inn">
-                                ИНН <span className="text-red-500">*</span>
-                              </Label>
-                              <Input
-                                id="company-inn"
-                                name="inn"
-                                value={companyFormData.inn}
-                                onChange={handleCompanyFormChange}
-                                className="bg-gray-50 dark:bg-gray-800/50"
-                                required
-                              />
-                            </div>
-
-                            <div className="space-y-2">
-                              <Label htmlFor="company-kpp">
-                                КПП <span className="text-red-500">*</span>
-                              </Label>
-                              <Input
-                                id="company-kpp"
-                                name="kpp"
-                                value={companyFormData.kpp}
-                                onChange={handleCompanyFormChange}
-                                className="bg-gray-50 dark:bg-gray-800/50"
-                                required
-                              />
-                            </div>
-                          </div>
-
-                          <div className="space-y-2">
-                            <Label htmlFor="company-ogrn">
-                              ОГРН <span className="text-red-500">*</span>
-                            </Label>
-                            <Input
-                              id="company-ogrn"
-                              name="ogrn"
-                              value={companyFormData.ogrn}
-                              onChange={handleCompanyFormChange}
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                              required
-                            />
-                          </div>
-
-                          <div className="space-y-2">
-                            <Label htmlFor="company-address">
-                              Юридический адрес <span className="text-red-500">*</span>
-                            </Label>
-                            <Input
-                              id="company-address"
-                              name="address"
-                              value={companyFormData.address}
-                              onChange={handleCompanyFormChange}
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                              required
-                            />
-                          </div>
-                        </div>
-                      </div>
-
-                      {/* Банковские реквизиты */}
-                      <div className="space-y-6 bg-white dark:bg-gray-900 p-6 rounded-xl border border-gray-200 dark:border-gray-800 shadow-sm">
-                        <div>
-                          <h2 className="text-xl font-bold mb-2">Банковские реквизиты</h2>
-                          <p className="text-sm text-gray-500 dark:text-gray-400">Данные для проведения платежей</p>
-                        </div>
-
-                        <div className="space-y-4">
-                          <div className="space-y-2">
-                            <Label htmlFor="bank-name">
-                              Название банка <span className="text-red-500">*</span>
-                            </Label>
-                            <Input
-                              id="bank-name"
-                              name="bankName"
-                              value={companyFormData.bankName}
-                              onChange={handleCompanyFormChange}
-                              placeholder="АО «Сбербанк»"
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                              required
-                            />
-                          </div>
-
-                          <div className="space-y-2">
-                            <Label htmlFor="bank-account">
-                              Расчетный счет <span className="text-red-500">*</span>
-                            </Label>
-                            <Input
-                              id="bank-account"
-                              name="bankAccount"
-                              value={companyFormData.bankAccount}
-                              onChange={handleCompanyFormChange}
-                              placeholder="40702810123450101230"
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                              required
-                            />
-                          </div>
-
-                          <div className="grid grid-cols-2 gap-4">
-                            <div className="space-y-2">
-                              <Label htmlFor="bank-corr-account">
-                                Корреспондентский счет <span className="text-red-500">*</span>
-                              </Label>
-                              <Input
-                                id="bank-corr-account"
-                                name="bankCorrAccount"
-                                value={companyFormData.bankCorrAccount}
-                                onChange={handleCompanyFormChange}
-                                placeholder="30101810400000000225"
-                                className="bg-gray-50 dark:bg-gray-800/50"
-                                required
-                              />
-                            </div>
-
-                            <div className="space-y-2">
-                              <Label htmlFor="bank-bik">
-                                БИК <span className="text-red-500">*</span>
-                              </Label>
-                              <Input
-                                id="bank-bik"
-                                name="bankBik"
-                                value={companyFormData.bankBik}
-                                onChange={handleCompanyFormChange}
-                                placeholder="044525225"
-                                className="bg-gray-50 dark:bg-gray-800/50"
-                                required
-                              />
-                            </div>
-                          </div>
-                        </div>
-                      </div>
-
-                      {/* Контактная информация */}
-                      <div className="space-y-6 bg-white dark:bg-gray-900 p-6 rounded-xl border border-gray-200 dark:border-gray-800 shadow-sm">
-                        <div>
-                          <h2 className="text-xl font-bold mb-2">Контактная информация</h2>
-                          <p className="text-sm text-gray-500 dark:text-gray-400">
-                            Контактные данные для связи и уведомлений
-                          </p>
-                        </div>
-
-                        <div className="space-y-4">
-                          <div className="space-y-2">
-                            <Label htmlFor="company-email">
-                              Email <span className="text-red-500">*</span>
-                            </Label>
-                            <Input
-                              id="company-email"
-                              type="email"
-                              name="email"
-                              value={companyFormData.email}
-                              onChange={handleCompanyFormChange}
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                              required
-                            />
-                          </div>
-
-                          <div className="space-y-2">
-                            <Label htmlFor="company-phone">
-                              Телефон <span className="text-red-500">*</span>
-                            </Label>
-                            <Input
-                              id="company-phone"
-                              name="phone"
-                              value={companyFormData.phone}
-                              onChange={handleCompanyFormChange}
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                              required
-                            />
-                          </div>
-
-                          <div className="space-y-2">
-                            <Label htmlFor="company-website">Веб-сайт</Label>
-                            <Input
-                              id="company-website"
-                              name="website"
-                              value={companyFormData.website}
-                              onChange={handleCompanyFormChange}
-                              className="bg-gray-50 dark:bg-gray-800/50"
-                            />
-                          </div>
-                        </div>
-                      </div>
-
-                      {/* Примечание о обязательных полях */}
-                      <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800">
-                        <div className="flex items-start">
-                          <AlertCircle className="h-5 w-5 text-yellow-500 mr-3 mt-0.5 flex-shrink-0" />
-                          <p className="text-sm text-yellow-700 dark:text-yellow-400">
-                            Поля, отмеченные звездочкой (<span className="text-red-500">*</span>), обязательны для
-                            заполнения.
-                          </p>
-                        </div>
-                      </div>
-                    </div>
-
-                    <div className="flex justify-end gap-4 mt-8">
-                      <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                        <Button
-                          variant="outline"
-                          disabled={isVerifying}
-                          className="rounded-full"
-                          onClick={() => setIsSaveDialogOpen(true)}
-                        >
-                          <Save className="h-4 w-4 mr-2" />
-                          Сохранить шаблон
-                        </Button>
-                      </motion.div>
-                      <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                        <Button
-                          onClick={handleVerifyCompany}
-                          disabled={isVerifying}
-                          className="gap-2 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
-                        >
-                          {isVerifying ? (
-                            <>
-                              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
-                              Проверка данных...
-                            </>
-                          ) : (
-                            <>
-                              Проверить и продолжить
-                              <ArrowRight className="h-4 w-4" />
-                            </>
-                          )}
-                        </Button>
-                      </motion.div>
-                    </div>
-                  </>
-                )}
-              </motion.div>
-            )}
-
-            {/* Остальные шаги остаются без изменений */}
-            {currentStep === 2 && (
-              <motion.div
-                key="specification-form"
-                initial={{ opacity: 0, y: 20 }}
-                animate={{ opacity: 1, y: 0 }}
-                exit={{ opacity: 0, y: -20 }}
-                transition={{ duration: 0.3 }}
-                className="max-w-4xl mx-auto mt-24"
-              >
-                {/* Обновим текст информационного блока в начале второго шага: */}
-                <div className="bg-blue-50 dark:bg-blue-900/20 p-5 rounded-xl border border-blue-200 dark:border-blue-800 mb-8">
-                  <div className="flex items-start">
-                    <Info className="h-5 w-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0" />
-                    <p className="text-sm text-blue-700 dark:text-blue-400">
-                      На этом шаге заполните данные спецификации. Добавьте необходимые позиции, укажите количество и
-                      цену.
-                    </p>
-                  </div>
-                </div>
-
-                <div className="space-y-6">
-                  {/* Выбор типа инвойса */}
-                  <div className="bg-white dark:bg-gray-900 p-6 rounded-xl border border-gray-200 dark:border-gray-800 shadow-sm">
-                    <h2 className="text-xl font-bold mb-4">Тип инвойса</h2>
-                    <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
-                      Выберите, какой инвойс вы хотите использовать: создать новый или загрузить готовый.
-                    </p>
-
-                    <div className="flex items-center space-x-6">
-                      <div className="flex items-center">
-                        <Input
-                          id="invoice-create"
-                          type="radio"
-                          value="create"
-                          name="invoiceType"
-                          checked={invoiceType === "create"}
-                          onChange={() => setInvoiceType("create")}
-                          className="mr-2"
-                        />
-                        <Label htmlFor="invoice-create">Создать новый</Label>
-                      </div>
-
-                      <div className="flex items-center">
-                        <Input
-                          id="invoice-ready"
-                          type="radio"
-                          value="ready"
-                          name="invoiceType"
-                          checked={invoiceType === "ready"}
-                          onChange={() => setInvoiceType("ready")}
-                          className="mr-2"
-                        />
-                        <Label htmlFor="invoice-ready">Загрузить готовый</Label>
-                      </div>
-                    </div>
-
-                    {invoiceType === "ready" && (
-                      <div className="mt-6">
-                        <Label htmlFor="invoice-file">Файл инвойса</Label>
-                        <Input
-                          id="invoice-file"
-                          type="file"
-                          accept=".pdf,.doc,.docx"
-                          onChange={handleInvoiceUpload}
-                          className="mt-2"
-                          disabled={isInvoiceUploading}
-                        />
-                        {isInvoiceUploading && <div className="text-blue-500 text-sm mt-2">Загрузка файла...</div>}
-                        {invoiceFile && invoiceFile.name && (
-                          <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
-                            Выбран файл: {invoiceFile.name}
-                          </p>
-                        )}
-                      </div>
-                    )}
-                  </div>
-
-                  {/* Форма спецификации */}
-                  {invoiceType === "create" && (
-                    <div className="bg-white dark:bg-gray-900 p-6 rounded-xl border border-gray-200 dark:border-gray-800 shadow-sm">
-                      <h2 className="text-xl font-bold mb-4">Спецификация</h2>
-                      <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
-                        Заполните данные спецификации. Добавьте необходимые позиции, укажите количество и цену.
-                      </p>
-
-                      <div className="overflow-x-auto">
-                        <table className="w-full whitespace-nowrap">
-                          <thead>
-                            <tr className="text-left">
-                              <th className="py-2 px-3 font-semibold text-gray-500 dark:text-gray-400">Наименование</th>
-                              <th className="py-2 px-3 font-semibold text-gray-500 dark:text-gray-400">Код</th>
-                              <th className="py-2 px-3 font-semibold text-gray-500 dark:text-gray-400">Изображение</th>
-                              <th className="py-2 px-3 font-semibold text-gray-500 dark:text-gray-400">Кол-во</th>
-                              <th className="py-2 px-3 font-semibold text-gray-500 dark:text-gray-400">Ед. изм.</th>
-                              <th className="py-2 px-3 font-semibold text-gray-500 dark:text-gray-400">Цена за ед.</th>
-                              <th className="py-2 px-3 font-semibold text-gray-500 dark:text-gray-400">Сумма</th>
-                              <th className="py-2 px-3 font-semibold text-gray-500 dark:text-gray-400"></th>
-                            </tr>
-                          </thead>
-                          <tbody>
-                            {specificationItems.map((item, index) => (
-                              <tr key={item.id} className="group">
-                                <td className="py-2 px-3">
-                                  <Input
-                                    type="text"
-                                    value={item.name}
-                                    onChange={(e) => handleSpecificationItemChange(item.id, "name", e.target.value)}
-                                    className="bg-gray-50 dark:bg-gray-800/50"
-                                  />
-                                </td>
-                                <td className="py-2 px-3">
-                                  <Input
-                                    type="text"
-                                    value={item.code}
-                                    onChange={(e) => handleSpecificationItemChange(item.id, "code", e.target.value)}
-                                    className="bg-gray-50 dark:bg-gray-800/50"
-                                  />
-                                </td>
-                                <td className="py-2 px-3">
-                                  <input
-                                    type="file"
-                                    id={`image-upload-${item.id}`}
-                                    accept="image/*"
-                                    style={{ display: "none" }}
-                                    onChange={(e) => handleImageUpload(item.id, e)}
-                                    ref={(el) => (fileInputRefs.current[index] = el)}
-                                  />
-                                  <Button
-                                    variant="outline"
-                                    size="sm"
-                                    className="rounded-full"
-                                    onClick={() => fileInputRefs.current[index]?.click()}
-                                  >
-                                    Загрузить
-                                  </Button>
-                                  {item.image && (
-                                    <img
-                                      src={item.image || "/placeholder.svg"}
-                                      alt="Preview"
-                                      className="mt-2 w-20 h-20 object-cover rounded-md"
-                                    />
-                                  )}
-                                  {uploadingImageId === item.id && (
-                                    <div className="mt-2 text-xs text-blue-500">Загрузка...</div>
-                                  )}
-                                </td>
-                                <td className="py-2 px-3">
-                                  <Input
-                                    type="number"
-                                    value={item.quantity}
-                                    onChange={(e) =>
-                                      handleSpecificationItemChange(item.id, "quantity", Number(e.target.value))
-                                    }
-                                    className="w-24 bg-gray-50 dark:bg-gray-800/50"
-                                  />
-                                </td>
-                                <td className="py-2 px-3">
-                                  <Input
-                                    type="text"
-                                    value={item.unit}
-                                    onChange={(e) => handleSpecificationItemChange(item.id, "unit", e.target.value)}
-                                    className="w-16 bg-gray-50 dark:bg-gray-800/50"
-                                  />
-                                </td>
-                                <td className="py-2 px-3">
-                                  <Input
-                                    type="number"
-                                    value={item.pricePerUnit}
-                                    onChange={(e) =>
-                                      handleSpecificationItemChange(item.id, "pricePerUnit", Number(e.target.value))
-                                    }
-                                    className="w-24 bg-gray-50 dark:bg-gray-800/50"
-                                  />
-                                </td>
-                                <td className="py-2 px-3">
-                                  {currency} {item.totalPrice?.toFixed(2)}
-                                </td>
-                                <td className="py-2 px-3 text-right">
-                                  <motion.button
-                                    whileHover={{ scale: 1.1 }}
-                                    whileTap={{ scale: 0.9 }}
-                                    onClick={() => removeSpecificationItem(item.id)}
-                                    className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-red-500 hover:text-red-700"
-                                  >
-                                    Удалить
-                                  </motion.button>
-                                </td>
-                              </tr>
-                            ))}
-                          </tbody>
-                        </table>
-                      </div>
-
-                      <div className="flex justify-between items-center mt-4">
-                        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                          <Button variant="outline" className="rounded-full" onClick={addSpecificationItem}>
-                            Добавить позицию
-                          </Button>
-                        </motion.div>
-                        <div className="text-lg font-semibold">
-                          Итого: {currency} {calculateTotalSum().toFixed(2)}
-                        </div>
-                      </div>
-                    </div>
-                  )}
-
-                  <div className="flex justify-end gap-4 mt-8">
-                    \
-                    <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                      <Button variant="outline" className="rounded-full" onClick={() => setIsSaveDialogOpen(true)}>
-                        <Save className="h-4 w-4 mr-2" />
-                        Сохранить шаблон
-                      </Button>
-                    </motion.div>
-                    <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
-                      <Button
-                        onClick={handleSubmitSpecification}
-                        className="gap-2 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
-                        disabled={isInvoiceUploading || (invoiceType === "ready" && (!invoiceFile || !invoiceFile.url))}
-                      >
-                        {isWaitingApproval ? (
-                          <>
-                            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
-                            Отправка данных...
-                          </>
-                        ) : (
-                          <>
-                            Отправить на проверку
-                            <ArrowRight className="h-4 w-4" />
-                          </>
-                        )}
-                      </Button>
-                    </motion.div>
-                  </div>
-                </div>
-              </motion.div>
-            )}
-
-            {/* Шаг 3: Пополнение/чек */}
-            {currentStep === 3 && (
-              <>
-                {/* Красивая платёжка-инвойс, если чек ещё не загружен */}
-                {!receiptUrl ? (
-                  <div className="bg-white dark:bg-gray-900 p-8 rounded-xl border border-gray-200 dark:border-gray-800 shadow-xl max-w-3xl mx-auto">
-                    <div className="mb-6">
-                      <div className="flex items-center gap-3 mb-4">
-                        <CheckCircle className="h-8 w-8 text-green-500" />
-                        <span className="text-lg font-bold text-green-700 dark:text-green-400">Заявка одобрена!</span>
-                  </div>
-                      <div className="text-gray-600 dark:text-gray-400">Ваша заявка успешно одобрена. Теперь необходимо произвести оплату.</div>
-                    </div>
-                    {/* --- Оборачиваю инвойс в ref --- */}
-                    <div ref={invoiceRef} className="bg-gray-50 dark:bg-gray-800 p-6 rounded-xl border border-gray-200 dark:border-gray-700 mb-6 print:!block print:!bg-white print:!text-black">
-                      <div className="flex flex-col md:flex-row md:justify-between md:items-center mb-4">
-                        <div>
-                          <div className="font-bold text-lg mb-1">Счёт на оплату</div>
-                          <div className="text-sm text-gray-500 dark:text-gray-400">Счёт №{projectId} от {new Date().toLocaleDateString()}</div>
-                        </div>
-                        <Button variant="outline" size="sm" className="mt-2 md:mt-0 print:hidden" onClick={handlePrintInvoice}>Печать</Button>
-                      </div>
-                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
-                        <div>
-                          <div className="font-semibold mb-1">Поставщик:</div>
-                          <div className="text-sm">{companyFormData.name}</div>
-                          <div className="text-sm">ИНН: {companyFormData.inn}</div>
-                          <div className="text-sm">КПП: {companyFormData.kpp}</div>
-                          <div className="text-sm">Адрес: {companyFormData.address}</div>
-                          <div className="text-sm">Email: {companyFormData.email}</div>
-                          </div>
-                        <div>
-                          <div className="font-semibold mb-1">Покупатель:</div>
-                          <div className="text-sm">{bankTransferDetails.recipientName}</div>
-                          <div className="text-sm">ИНН: {bankTransferDetails.inn || '—'}</div>
-                          <div className="text-sm">КПП: {bankTransferDetails.kpp || '—'}</div>
-                          <div className="text-sm">Адрес: {bankTransferDetails.recipientAddress || '—'}</div>
-                          <div className="text-sm">Email: {companyFormData.email}</div>
-                          </div>
-                        </div>
-                      <div className="overflow-x-auto mb-6">
-                        <table className="w-full text-sm border rounded-xl overflow-hidden">
-                          <thead className="bg-gray-100 dark:bg-gray-700">
-                            <tr>
-                              <th className="p-2 font-semibold">№</th>
-                              <th className="p-2 font-semibold">Наименование</th>
-                              <th className="p-2 font-semibold">Код</th>
-                              <th className="p-2 font-semibold">Кол-во</th>
-                              <th className="p-2 font-semibold">Ед. изм.</th>
-                              <th className="p-2 font-semibold">Цена</th>
-                              <th className="p-2 font-semibold">Сумма</th>
-                            </tr>
-                          </thead>
-                          <tbody>
-                            {specificationItems.map((item, idx) => (
-                              <tr key={item.id} className="border-b last:border-b-0">
-                                <td className="p-2 text-center">{idx + 1}</td>
-                                <td className="p-2">{item.name}</td>
-                                <td className="p-2">{item.code}</td>
-                                <td className="p-2 text-center">{item.quantity}</td>
-                                <td className="p-2 text-center">{item.unit}</td>
-                                <td className="p-2 text-right">{currency} {item.pricePerUnit?.toFixed(2)}</td>
-                                <td className="p-2 text-right">{currency} {item.totalPrice?.toFixed(2)}</td>
-                              </tr>
-                            ))}
-                          </tbody>
-                        </table>
-                      </div>
-                      <div className="flex flex-col md:flex-row md:justify-between gap-4 mb-2">
-                        <div className="text-sm text-gray-500 dark:text-gray-400">Подытог: {currency} {specificationItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0).toFixed(2)}</div>
-                        <div className="text-sm text-gray-500 dark:text-gray-400">НДС (20%): {currency} {(specificationItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0) * 0.2).toFixed(2)}</div>
-                        <div className="font-bold text-lg">Итого к оплате: <span className="text-blue-600">{currency} {(specificationItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0) * 1.2).toFixed(2)}</span></div>
-                          </div>
-                      <div className="mt-4 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg text-sm text-gray-700 dark:text-gray-300">
-                        <div className="font-semibold mb-1">Реквизиты для оплаты:</div>
-                        <div>Получатель: {bankTransferDetails.recipientName}</div>
-                        <div>Р/с: {bankTransferDetails.accountNumber}</div>
-                        <div>К/с: {bankTransferDetails.korAccount || '—'}</div>
-                        <div>Банк: {bankTransferDetails.bankName}</div>
-                        <div>БИК: {bankTransferDetails.bik || '—'}</div>
-                        <div>Назначение: {bankTransferDetails.paymentPurpose}</div>
-                          </div>
-                      <div className="mt-4 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg text-yellow-800 dark:text-yellow-200 text-sm">
-                        Условия оплаты: Оплата в течение 3 банковских дней с момента выставления счета. После оплаты загрузите подтверждающий документ (чек, выписку) в форме ниже.
-                          </div>
-                        </div>
-                    <div className="mt-8">
-                      <h3 className="text-lg font-semibold mb-2">Загрузка подтверждения оплаты</h3>
-                      <input
-                            type="file"
-                        accept="image/*,application/pdf"
-                            onChange={handleReceiptUpload}
-                        className="mb-4"
-                          />
-                        <Button
-                        className="px-6 py-2 bg-blue-500 text-white rounded-lg font-semibold hover:bg-blue-600 transition"
-                        onClick={handleClientConfirmationUpload}
-                        disabled={!receiptFile}
-                        >
-                          Подтвердить оплату
-                        </Button>
-                      </div>
-                    </div>
-                ) : (
-                  isWaitingReceiptApproval ? (
-                    <div className="bg-yellow-50 dark:bg-yellow-900/20 p-8 rounded-xl border border-yellow-200 dark:border-yellow-800 text-center max-w-2xl mx-auto">
-                      <a href={receiptUrl} target="_blank" rel="noopener noreferrer" className="underline text-blue-600 mb-2 block">Посмотреть чек</a>
-                      <img src={receiptUrl} alt="Чек" className="max-h-64 rounded-lg border mx-auto mb-6" />
-                        <motion.div
-                          animate={{ rotate: 360 }}
-                          transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
-                        className="w-16 h-16 mx-auto mb-4"
-                        >
-                        <Clock className="h-16 w-16 text-yellow-500" />
-                        </motion.div>
-                      <h2 className="text-xl font-bold mb-4 text-yellow-800 dark:text-yellow-200">Ожидание подтверждения чека</h2>
-                      <p className="text-gray-700 dark:text-yellow-100 mb-2">Чек отправлен менеджеру на проверку. Ожидайте подтверждения в Telegram.</p>
-                      </div>
-                  ) : (
-                    <div className="bg-white dark:bg-gray-900 p-6 rounded-xl border border-gray-200 dark:border-gray-800 shadow-sm text-center max-w-2xl mx-auto">
-                      <h2 className="text-xl font-bold mb-4">Чек загружен</h2>
-                      <a href={receiptUrl} target="_blank" rel="noopener noreferrer" className="underline text-blue-600 mb-2">Посмотреть чек</a>
-                      <img src={receiptUrl} alt="Чек" className="max-h-64 rounded-lg border mx-auto" />
-                      <Button
-                        className="mt-4 px-6 py-2 bg-blue-500 text-white rounded-lg font-semibold hover:bg-blue-600 transition"
-                        onClick={() => setCurrentStep(4)}
-                        disabled={projectStatus !== "receipt_approved"}
-                      >
-                        Продолжить
-                      </Button>
-                  </div>
-                  )
-                )}
-              </>
-            )}
-
-            {/* Шаг 4: Выбор метода перевода */}
-            {currentStep === 4 && (
-              <motion.div
-                key="transfer-method"
-                initial={{ opacity: 0, y: 20 }}
-                animate={{ opacity: 1, y: 0 }}
-                exit={{ opacity: 0, y: -20 }}
-                transition={{ duration: 0.3 }}
-                className="max-w-4xl mx-auto mt-24"
-              >
-                <div className="bg-blue-50 dark:bg-blue-900/20 p-5 rounded-xl border border-blue-200 dark:border-blue-800 mb-8">
-                  <div className="flex items-start">
-                    <Info className="h-5 w-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0" />
-                    <p className="text-sm text-blue-700 dark:text-blue-400">
-                      Выберите удобный для вас способ международного перевода средств.
-                    </p>
-                  </div>
-                </div>
-
-                <div className="space-y-6">
-                  <h2 className="text-2xl font-bold text-center mb-8">Выберите способ перевода</h2>
-
-                  <div className="grid gap-8">
-                    {transferMethods.map((method) => {
-                      const Icon = method.icon
-                      const isLoading = methodLoadingState[method.id]
-
-                      return (
-                        <motion.div
-                          key={method.id}
-                          whileHover={{ scale: 1.02, y: -8 }}
-                          whileTap={{ scale: 0.98 }}
-                          className={`relative overflow-hidden rounded-3xl border transition-all duration-700 cursor-pointer group ${
-                            selectedTransferMethod === method.id
-                              ? `border-white/30 shadow-2xl ${method.shadowColor}`
-                              : "border-gray-800/60 hover:border-white/20 hover:shadow-xl hover:shadow-black/30"
-                          }`}
-                          onClick={() => handleTransferMethodSelection(method.id)}
-                        >
-                          {/* Роскошный градиентный фон */}
-                          <div className={`relative bg-gradient-to-br ${method.gradient} overflow-hidden`}>
-                            {/* Множественные декоративные элементы для глубины */}
-                            <div className="absolute top-0 right-0 w-48 h-48 bg-white/3 rounded-full blur-3xl -translate-y-24 translate-x-24" />
-                            <div className="absolute bottom-0 left-0 w-40 h-40 bg-white/2 rounded-full blur-3xl translate-y-20 -translate-x-20" />
-                            <div className="absolute top-1/3 right-1/3 w-32 h-32 bg-white/1 rounded-full blur-2xl" />
-                            <div className="absolute bottom-1/3 left-1/4 w-24 h-24 bg-white/1 rounded-full blur-xl" />
-
-                            {/* Роскошная акцентная полоска */}
-                            <div className={`h-2 w-full bg-gradient-to-r ${method.luxuryAccent} shadow-lg`} />
-
-                            {/* Дополнительное внутреннее свечение */}
-                            <div className={`absolute inset-0 bg-gradient-to-br ${method.accentGradient} opacity-5`} />
-
-                            <div className="relative z-10 p-10">
-                              <div className="flex items-start justify-between mb-10">
-                                <div className="flex items-start space-x-8">
-                                  {/* Максимально роскошная иконка */}
-                                  <div className="relative group/icon">
-                                    <div
-                                      className={`relative flex items-center justify-center w-24 h-24 ${method.iconBg} backdrop-blur-2xl rounded-3xl border-2 border-white/20 shadow-2xl`}
-                                    >
-                                      <Icon className={`h-12 w-12 ${method.iconColor} drop-shadow-lg`} />
-                                      {/* Множественные слои свечения */}
-                                      <div
-                                        className={`absolute inset-0 bg-gradient-to-br ${method.luxuryAccent} opacity-30 rounded-3xl blur-md`}
-                                      />
-                                      <div
-                                        className={`absolute inset-2 bg-gradient-to-br ${method.luxuryAccent} opacity-20 rounded-2xl blur-sm`}
-                                      />
-                                    </div>
-                                    {/* Внешнее кольцо свечения */}
-                                    <div
-                                      className={`absolute -inset-2 bg-gradient-to-br ${method.luxuryAccent} opacity-20 rounded-full blur-xl group-hover/icon:opacity-40 transition-opacity duration-500`}
-                                    />
-                                  </div>
-
-                                  <div className="flex-1">
-                                    <div className="flex items-center gap-4 mb-4">
-                                      <h3 className="text-3xl font-bold text-white group-hover:text-white/95 transition-colors drop-shadow-lg">
-                                        {method.title}
-                                      </h3>
-                                      <span className="text-3xl drop-shadow-lg">{method.emoji}</span>
-                                    </div>
-
-                                    <p className="text-white/90 text-xl mb-8 leading-relaxed max-w-2xl drop-shadow-sm">
-                                      {method.description}
-                                    </p>
-
-                                    {/* Роскошные бейджи с максимальной глубиной */}
-                                    <div className="flex flex-wrap gap-4">
-                                      {method.benefits.map((benefit, index) => (
-                                        <motion.div
-                                          key={index}
-                                          initial={{ opacity: 0, scale: 0.8, y: 30 }}
-                                          animate={{ opacity: 1, scale: 1, y: 0 }}
-                                          transition={{ delay: index * 0.15 + 0.3, type: "spring", stiffness: 200 }}
-                                          className="group/badge relative"
-                                        >
-                                          {/* Множественные слои для глубины */}
-                                          <div className="absolute inset-0 bg-white/30 rounded-full blur-lg" />
-                                          <div className="absolute inset-0 bg-white/20 rounded-full blur-md" />
-                                          <div
-                                            className={`absolute inset-0 bg-gradient-to-r ${method.luxuryAccent} opacity-30 rounded-full blur-sm`}
-                                          />
-
-                                          <div className="relative px-6 py-3 text-sm font-bold bg-white/90 backdrop-blur-2xl text-gray-900 rounded-full border-2 border-white shadow-2xl hover:bg-white hover:shadow-3xl transition-all duration-400 hover:scale-105">
-                                            <span className="mr-3 text-lg">✨</span>
-                                            {benefit}
-                                          </div>
-                                        </motion.div>
-                                      ))}
-                                    </div>
-                                  </div>
-                                </div>
-
-                                {/* Роскошный индикатор состояния */}
-                                <div className="flex items-center justify-center">
-                                  {isLoading ? (
-                                    <div className="relative">
-                                      <div className="w-12 h-12 border-4 border-white/20 border-t-white rounded-full animate-spin" />
-                                      <div className="absolute inset-0 bg-white/10 rounded-full blur-lg animate-pulse" />
-                                      <div
-                                        className={`absolute inset-0 bg-gradient-to-r ${method.luxuryAccent} opacity-30 rounded-full blur-md`}
-                                      />
-                                    </div>
-                                  ) : selectedTransferMethod === method.id ? (
-                                    <motion.div
-                                      initial={{ scale: 0, rotate: -180 }}
-                                      animate={{ scale: 1, rotate: 0 }}
-                                      transition={{ type: "spring", stiffness: 200, damping: 15 }}
-                                      className="relative"
-                                    >
-                                      <div className="w-12 h-12 bg-white/20 backdrop-blur-2xl rounded-full flex items-center justify-center border-2 border-white/40 shadow-2xl">
-                                        <CheckCircle className="h-7 w-7 text-emerald-300 drop-shadow-lg" />
-                                      </div>
-                                      <div className="absolute inset-0 bg-emerald-400/30 rounded-full blur-xl animate-pulse" />
-                                      <div className="absolute -inset-2 bg-emerald-400/20 rounded-full blur-2xl" />
-                                    </motion.div>
-                                  ) : (
-                                    <div className="w-12 h-12 border-3 border-white/40 rounded-full group-hover:border-white/60 transition-all duration-500 backdrop-blur-xl bg-white/5 shadow-xl" />
-                                  )}
-                                </div>
-                              </div>
-
-                              {/* Роскошная информационная панель */}
-                              <div className="flex items-center justify-between">
-                                <div className="flex items-center gap-8 text-white/80">
-                                  <div className="flex items-center gap-3 group/info">
-                                    <div
-                                      className={`w-3 h-3 rounded-full bg-gradient-to-r ${method.luxuryAccent} shadow-lg`}
-                                    />
-                                    <span className="text-base font-medium drop-shadow-sm group-hover/info:text-white transition-colors">
-                                      💰 Комиссия: {method.commission}
-                                    </span>
-                                  </div>
-                                  <div className="flex items-center gap-3 group/info">
-                                    <div
-                                      className={`w-3 h-3 rounded-full bg-gradient-to-r ${method.luxuryAccent} shadow-lg animate-pulse`}
-                                    />
-                                    <span className="text-base font-medium drop-shadow-sm group-hover/info:text-white transition-colors">
-                                      ⚡ Время: {method.time}
-                                    </span>
-                                  </div>
-                                </div>
-
-                                <motion.div
-                                  className="flex items-center text-white/80 group-hover:text-white transition-colors"
-                                  whileHover={{ x: 8 }}
-                                >
-                                  <span className="text-base font-semibold mr-4 drop-shadow-sm">Выбрать метод</span>
-                                  <ArrowRight className="h-6 w-6 drop-shadow-sm" />
-                                </motion.div>
-                              </div>
-                            </div>
-
-                            {/* Роскошный эффект выбора */}
-                            {selectedTransferMethod === method.id && (
-                              <motion.div
-                                initial={{ opacity: 0 }}
-                                animate={{ opacity: 1 }}
-                                transition={{ duration: 0.8 }}
-                                className="absolute inset-0"
-                              >
-                                <div className="absolute inset-0 bg-white/8 backdrop-blur-sm" />
-                                <div
-                                  className={`absolute inset-0 bg-gradient-to-br ${method.luxuryAccent} opacity-15`}
-                                />
-                                <div
-                                  className={`absolute inset-0 bg-gradient-to-t ${method.luxuryAccent} opacity-10`}
-                                />
-                              </motion.div>
-                            )}
-                          </div>
-
-                          {/* Максимально роскошная нижняя панель */}
-                          <div className="bg-black/95 backdrop-blur-2xl border-t-2 border-white/20">
-                            <div className="px-10 py-6">
-                              <div className="flex items-center justify-between">
-                                <div className="flex items-center gap-8 text-sm text-gray-300">
-                                  <div className="flex items-center gap-3">
-                                    <div
-                                      className={`w-2 h-2 rounded-full bg-gradient-to-r ${method.luxuryAccent} shadow-lg`}
-                                    />
-                                    <span className="font-medium">Безопасность: Максимальная</span>
-                                  </div>
-                                  <div className="flex items-center gap-3">
-                                    <div
-                                      className={`w-2 h-2 rounded-full bg-gradient-to-r ${method.luxuryAccent} shadow-lg`}
-                                    />
-                                    <span className="font-medium">Поддержка: 24/7</span>
-                                  </div>
-                                  <div className="flex items-center gap-3">
-                                    <div
-                                      className={`w-2 h-2 rounded-full bg-gradient-to-r ${method.luxuryAccent} shadow-lg`}
-                                    />
-                                    <span className="font-medium">Гарантия: 100%</span>
-                                  </div>
-                                </div>
-
-                                <div className="flex items-center gap-3">
-                                  <div
-                                    className={`w-4 h-4 rounded-full bg-gradient-to-r ${method.luxuryAccent} animate-pulse shadow-lg`}
-                                  />
-                                  <span className="text-sm text-gray-300 font-semibold tracking-wide">ПРЕМИУМ</span>
-                                </div>
-                              </div>
-                            </div>
-                          </div>
-                        </motion.div>
-                      )
-                    })}
-                  </div>
-                </div>
-              </motion.div>
-            )}
-
-            {/* Шаг 5: Реквизиты */}
-            {currentStep === 5 && (
-              <motion.div
-                key="payment-details"
-                initial={{ opacity: 0, y: 20 }}
-                animate={{ opacity: 1, y: 0 }}
-                exit={{ opacity: 0, y: -20 }}
-                transition={{ duration: 0.3 }}
-                className="max-w-4xl mx-auto mt-24"
-              >
-                <div className="bg-blue-50 dark:bg-blue-900/20 p-5 rounded-xl border border-blue-200 dark:border-blue-800 mb-8">
-                  <div className="flex items-start">
-                    <Info className="h-5 w-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0" />
-                    <p className="text-sm text-blue-700 dark:text-blue-400">
-                      Заполните реквизиты для выбранного способа перевода.
-                    </p>
-                  </div>
-                </div>
-
-                <div className="space-y-6">
-                  <h2 className="text-2xl font-bold text-center mb-8">
-                    Реквизиты для{" "}
-                    {selectedTransferMethod === "p2p"
-                      ? "P2P перевода"
-                      : selectedTransferMethod === "crypto"
-                        ? "криптоперевода"
-                        : "банковского перевода"}
-                  </h2>
-
-                  {selectedTransferMethod === "p2p" && (
-                    <div className="bg-white dark:bg-gray-900 p-6 rounded-xl border border-gray-200 dark:border-gray-800 shadow-sm">
-                      <h3 className="text-lg font-semibold mb-4">Выберите карту поставщика</h3>
-
-                      <div className="space-y-4">
-                        {supplierCards.map((card) => (
-                          <motion.div
-                            key={card.id}
-                            whileHover={{ scale: 1.02 }}
-                            whileTap={{ scale: 0.98 }}
-                            className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
-                              selectedCard === card.id
-                                ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
-                                : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
-                            }`}
-                            onClick={() => handleSelectCard(card)}
-                          >
-                            <div className="flex justify-between items-start">
-                              <div>
-                                <p className="font-medium">{card.bank}</p>
-                                <p className="text-sm text-gray-500">**** **** **** {card.card_number.slice(-4)}</p>
-                                <p className="text-sm text-gray-500">{card.holder_name}</p>
-                              </div>
-                              <Button
-                                variant="ghost"
-                                size="sm"
-                                onClick={(e) => handleDeleteCard(card.id, e)}
-                                className="text-red-500 hover:text-red-700"
-                              >
-                                Удалить
-                              </Button>
-                            </div>
-                          </motion.div>
-                        ))}
-
-                        <Button variant="outline" className="w-full" onClick={() => setShowNewCardForm(true)}>
-                          Добавить новую карту
-                        </Button>
-                      </div>
-                    </div>
-                  )}
-
-                  {selectedTransferMethod === "crypto" && (
-                    <div className="bg-white dark:bg-gray-900 p-6 rounded-xl border border-gray-200 dark:border-gray-800 shadow-sm">
-                      <h3 className="text-lg font-semibold mb-4">Криптокошелек</h3>
-                      <div className="space-y-4">
-                        {/* Список сохранённых кошельков */}
-                        <div>
-                          <Label htmlFor="saved-crypto-wallet">Выберите сохранённый кошелек</Label>
-                          <select
-                            id="saved-crypto-wallet"
-                            value={selectedWallet || ""}
-                            onChange={e => {
-                              const wallet = savedCryptoWallets.find(w => w.id === e.target.value)
-                              setSelectedWallet(e.target.value)
-                              if (wallet) {
-                                setNewWalletDetails({
-                                  name: wallet.name || "",
-                                  address: wallet.address || "",
-                                  network: wallet.network || "trc20",
-                                })
-                              }
-                            }}
-                            className="mt-2 w-full p-2 border border-gray-300 rounded-md"
-                          >
-                            <option value="">— Выберите —</option>
-                            {savedCryptoWallets.map(wallet => (
-                              <option key={wallet.id} value={wallet.id}>
-                                {wallet.name} ({wallet.address})
-                              </option>
-                            ))}
-                          </select>
-                          <Button
-                            variant="outline"
-                            className="mt-2"
-                            onClick={() => {
-                              setSelectedWallet(null)
-                              setNewWalletDetails({ name: "", address: "", network: "trc20" })
-                            }}
-                          >
-                            Добавить новый кошелек
-                          </Button>
-                        </div>
-                        {/* Удалено поле для названия */}
-                        <div>
-                          <Label htmlFor="crypto-address">Адрес кошелька</Label>
-                          <Input
-                            id="crypto-address"
-                            name="address"
-                            value={newWalletDetails.address}
-                            onChange={handleNewWalletChange}
-                            placeholder="Введите адрес USDT кошелька"
-                            className="mt-2"
-                          />
-                        </div>
-                        <div>
-                          <Label htmlFor="crypto-network">Сеть</Label>
-                          <select
-                            id="crypto-network"
-                            name="network"
-                            value={newWalletDetails.network}
-                            onChange={handleNewWalletChange}
-                            className="mt-2 w-full p-2 border border-gray-300 rounded-md"
-                          >
-                            {cryptoNetworks.map((network) => (
-                              <option key={network.id} value={network.id}>
-                                {network.name}
-                              </option>
-                            ))}
-                          </select>
-                        </div>
-                        <Button onClick={handleAddNewWallet} className="w-full">
-                          Сохранить кошелек
-                        </Button>
-                      </div>
-                    </div>
-                  )}
-
-                  {selectedTransferMethod === "bank-transfer" && (
-                    <div className="space-y-8">
-                      {/* Красивый заголовок */}
-                      <div className="text-center">
-                        <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full mb-4">
-                          <Landmark className="h-8 w-8 text-white" />
-                        </div>
-                        <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">Банковские реквизиты</h3>
-                        <p className="text-gray-600 dark:text-gray-400">
-                          Выберите существующие реквизиты или добавьте новые
-                        </p>
-                      </div>
-
-                      {/* Стильные переключатели */}
-                      <div className="flex bg-gray-100 dark:bg-gray-800 p-1 rounded-xl">
-                        <button
-                          onClick={() => {
-                            setShowSavedBankAccounts(true)
-                            setShowAddBankAccountForm(false)
-                            setSelectedBankCountry(null)
-                          }}
-                          className={`flex-1 py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
-                            showSavedBankAccounts
-                              ? "bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow-sm"
-                              : "text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
-                          }`}
-                        >
-                          <div className="flex items-center justify-center gap-2">
-                            <CreditCard className="h-4 w-4" />
-                            Сохраненные
-                          </div>
-                        </button>
-                        <button
-                          onClick={() => {
-                            setShowAddBankAccountForm(true)
-                            setShowSavedBankAccounts(false)
-                            setSelectedBankCountry(null)
-                          }}
-                          className={`flex-1 py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
-                            showAddBankAccountForm
-                              ? "bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow-sm"
-                              : "text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
-                          }`}
-                        >
-                          <div className="flex items-center justify-center gap-2">
-                            <Plus className="h-4 w-4" />
-                            Добавить новые
-                          </div>
-                        </button>
-                      </div>
-
-                      {/* Список сохраненных банковских аккаунтов */}
-                      {showSavedBankAccounts && (
-                        <div className="space-y-4">
-                          {savedBankAccounts.length > 0 ? (
-                            <div className="grid gap-4">
-                              {savedBankAccounts.map((account) => (
-                                <motion.div
-                                  key={account.id}
-                                  whileHover={{ scale: 1.02, y: -2 }}
-                                  whileTap={{ scale: 0.98 }}
-                                  className={`relative overflow-hidden rounded-xl border-2 transition-all duration-300 cursor-pointer group ${
-                                    selectedBankAccount === account.id
-                                      ? "border-blue-500 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 shadow-lg shadow-blue-200/50 dark:shadow-blue-900/30"
-                                      : "border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-md"
-                                  }`}
-                                  onClick={() => handleSelectBankAccount(account)}
-                                >
-                                  {/* Градиентная полоска сверху */}
-                                  <div
-                                    className={`h-1 w-full ${
-                                      selectedBankAccount === account.id
-                                        ? "bg-gradient-to-r from-blue-500 to-indigo-500"
-                                        : "bg-gradient-to-r from-gray-300 to-gray-400 dark:from-gray-600 dark:to-gray-700"
-                                    }`}
-                                  />
-
-                                  <div className="p-6">
-                                    <div className="flex items-start justify-between">
-                                      <div className="flex items-start space-x-4">
-                                        {/* Иконка страны */}
-                                        <div
-                                          className={`flex items-center justify-center w-12 h-12 rounded-full ${
-                                            account.country === "china"
-                                              ? "bg-red-100 dark:bg-red-900/30"
-                                              : account.country === "turkey"
-                                                ? "bg-red-100 dark:bg-red-900/30"
-                                                : "bg-blue-100 dark:bg-blue-900/30"
-                                          }`}
-                                        >
-                                          <span className="text-2xl">
-                                            {account.country === "china"
-                                              ? "🇨🇳"
-                                              : account.country === "turkey"
-                                                ? "🇹🇷"
-                                                : "🌍"}
-                                          </span>
-                                        </div>
-
-                                        <div className="flex-1">
-                                          <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">
-                                            {account.name}
-                                          </h4>
-                                          <div className="space-y-1">
-                                            <p className="text-sm text-gray-600 dark:text-gray-400 flex items-center gap-2">
-                                              <Landmark className="h-4 w-4" />
-                                              {account.details.bankName}
-                                            </p>
-                                            <p className="text-sm text-gray-600 dark:text-gray-400 flex items-center gap-2">
-                                              <CreditCard className="h-4 w-4" />
-                                              •••• •••• •••• {account.details.accountNumber?.slice(-4)}
-                                            </p>
-                                            <div className="flex items-center gap-2">
-                                              <span
-                                                className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
-                                                  account.country === "china"
-                                                    ? "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300"
-                                                    : account.country === "turkey"
-                                                      ? "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300"
-                                                      : "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300"
-                                                }`}
-                                              >
-                                                {account.country === "china"
-                                                  ? "Китай"
-                                                  : account.country === "turkey"
-                                                    ? "Турция"
-                                                    : "Другая страна"}
-                                              </span>
-                                              {selectedBankAccount === account.id && (
-                                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300">
-                                                  <CheckCircle className="h-3 w-3 mr-1" />
-                                                  Выбрано
-                                                </span>
-                                              )}
-                                            </div>
-                                          </div>
-                                        </div>
-                                      </div>
-
-                                      {/* Кнопка удаления */}
-                                      <motion.button
-                                        whileHover={{ scale: 1.1 }}
-                                        whileTap={{ scale: 0.9 }}
-                                        onClick={(e) => {
-                                          e.stopPropagation()
-                                          setBankAccountToDelete(account.id)
-                                          setShowDeleteBankAccountConfirm(true)
-                                        }}
-                                        className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-2 text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg"
-                                      >
-                                        <Trash2 className="h-4 w-4" />
-                                      </motion.button>
-                                    </div>
-                                  </div>
-
-                                  {/* Анимированная граница при выборе */}
-                                  {selectedBankAccount === account.id && (
-                                    <motion.div
-                                      initial={{ scale: 0 }}
-                                      animate={{ scale: 1 }}
-                                      className="absolute top-4 right-4 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center"
-                                    >
-                                      <CheckCircle className="h-4 w-4 text-white" />
-                                    </motion.div>
-                                  )}
-                                </motion.div>
-                              ))}
-                            </div>
-                          ) : (
-                            <motion.div
-                              initial={{ opacity: 0, y: 20 }}
-                              animate={{ opacity: 1, y: 0 }}
-                              className="text-center py-12 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 rounded-xl border-2 border-dashed border-gray-300 dark:border-gray-600"
-                            >
-                              <div className="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
-                                <Landmark className="h-8 w-8 text-gray-400" />
-                              </div>
-                              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
-                                Нет сохраненных реквизитов
-                              </h3>
-                              <p className="text-gray-500 dark:text-gray-400 mb-6">
-                                Добавьте первые банковские реквизиты для быстрого доступа в будущем
-                              </p>
-                              <Button
-                                onClick={() => {
-                                  setShowAddBankAccountForm(true)
-                                  setShowSavedBankAccounts(false)
-                                }}
-                                className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
-                              >
-                                <Plus className="h-4 w-4 mr-2" />
-                                Добавить реквизиты
-                              </Button>
-                            </motion.div>
-                          )}
-                        </div>
-                      )}
-
-                      {/* Форма добавления новых реквизитов */}
-                      {showAddBankAccountForm && (
-                        <div className="space-y-8">
-                          {/* Выбор страны */}
-                          {!selectedBankCountry && (
-                            <motion.div
-                              initial={{ opacity: 0, y: 20 }}
-                              animate={{ opacity: 1, y: 0 }}
-                              className="space-y-6"
-                            >
-                              <div className="text-center">
-                                <h4 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
-                                  Выберите страну получателя
-                                </h4>
-                                <p className="text-gray-600 dark:text-gray-400">
-                                  Это поможет нам показать правильные поля для заполнения
-                                </p>
-                              </div>
-
-                              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
-                                {[
-                                  {
-                                    id: "china",
-                                    name: "Китай",
-                                    flag: "🇨🇳",
-                                    description: "CNAPS код, юани",
-                                    gradient: "from-red-500 to-yellow-500",
-                                  },
-                                  {
-                                    id: "turkey",
-                                    name: "Турция",
-                                    flag: "🇹🇷",
-                                    description: "IBAN, лиры",
-                                    gradient: "from-red-600 to-red-500",
-                                  },
-                                  {
-                                    id: "other",
-                                    name: "Другая страна",
-                                    flag: "🌍",
-                                    description: "SWIFT код, различные валюты",
-                                    gradient: "from-blue-500 to-purple-500",
-                                  },
-                                ].map((country) => (
-                                  <motion.div
-                                    key={country.id}
-                                    whileHover={{ scale: 1.05, y: -5 }}
-                                    whileTap={{ scale: 0.95 }}
-                                    className="relative overflow-hidden bg-white dark:bg-gray-800 rounded-xl border-2 border-gray-200 dark:border-gray-700 cursor-pointer hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-300 group"
-                                    onClick={() => {
-                                      setSelectedBankCountry(country.id)
-                                      setNewBankAccountDetails((prev) => ({
-                                        ...prev,
-                                        country: country.id,
-                                      }))
-                                    }}
-                                  >
-                                    {/* Градиентная полоска сверху */}
-                                    <div className={`h-1 w-full bg-gradient-to-r ${country.gradient}`} />
-
-                                    <div className="p-6 text-center">
-                                      <div className="text-4xl mb-4">{country.flag}</div>
-                                      <h5 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
-                                        {country.name}
-                                      </h5>
-                                      <p className="text-sm text-gray-600 dark:text-gray-400">{country.description}</p>
-                                    </div>
-
-                                    {/* Hover эффект */}
-                                    <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
-                                  </motion.div>
-                                ))}
-                              </div>
-                            </motion.div>
-                          )}
-
-                          {/* Форма реквизитов */}
-                          {selectedBankCountry && (
-                            <motion.div
-                              initial={{ opacity: 0, y: 20 }}
-                              animate={{ opacity: 1, y: 0 }}
-                              className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 overflow-hidden"
-                            >
-                              {/* Заголовок формы */}
-                              <div
-                                className={`p-6 bg-gradient-to-r ${
-                                  selectedBankCountry === "china"
-                                    ? "from-red-500 to-yellow-500"
-                                    : selectedBankCountry === "turkey"
-                                      ? "from-red-600 to-red-500"
-                                      : "from-blue-500 to-purple-500"
-                                }`}
-                              >
-                                <div className="flex items-center justify-between">
-                                  <div className="flex items-center gap-4">
-                                    <Button
-                                      variant="ghost"
-                                      size="sm"
-                                      onClick={() => {
-                                        setSelectedBankCountry(null)
-                                        setNewBankAccountDetails((prev) => ({
-                                          ...prev,
-                                          country: "china",
-                                          details: {
-                                            recipientName: "",
-                                            recipientAddress: "",
-                                            bankName: "",
-                                            bankAddress: "",
-                                            accountNumber: "",
-                                            swift: "",
-                                            paymentPurpose: "",
-                                            transferCurrency: "USD",
-                                            cnapsCode: "",
-                                            iban: "",
-                                            otherDetails: "",
-                                          },
-                                        }))
-                                      }}
-                                      className="text-white hover:bg-white/20"
-                                    >
-                                      <ChevronLeft className="h-4 w-4 mr-1" />
-                                      Назад
-                                    </Button>
-                                    <div>
-                                      <h4 className="text-xl font-semibold text-white">
-                                        Реквизиты для{" "}
-                                        {selectedBankCountry === "china"
-                                          ? "Китая 🇨🇳"
-                                          : selectedBankCountry === "turkey"
-                                            ? "Турции 🇹🇷"
-                                            : "другой страны 🌍"}
-                                      </h4>
-                                      <p className="text-white/80 text-sm">Заполните все обязательные поля</p>
-                                    </div>
-                                  </div>
-                                </div>
-                              </div>
-
-                              {/* Поля формы */}
-                              <div className="p-6 space-y-6">
-                                {/* Название шаблона */}
-                                <div className="space-y-2">
-                                  <Label
-                                    htmlFor="template-name"
-                                    className="text-sm font-medium text-gray-700 dark:text-gray-300"
-                                  >
-                                    Название шаблона *
-                                  </Label>
-                                  <Input
-                                    id="template-name"
-                                    value={newBankAccountDetails.name}
-                                    onChange={(e) =>
-                                      setNewBankAccountDetails((prev) => ({
-                                        ...prev,
-                                        name: e.target.value,
-                                      }))
-                                    }
-                                    placeholder="Например: Основной поставщик в Китае"
-                                    className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                  />
-                                </div>
-
-                                {/* Основные поля в красивой сетке */}
-                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
-                                  <div className="space-y-2">
-                                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                      Получатель *
-                                    </Label>
-                                    <Input
-                                      value={newBankAccountDetails.details.recipientName}
-                                      onChange={(e) =>
-                                        setNewBankAccountDetails((prev) => ({
-                                          ...prev,
-                                          details: { ...prev.details, recipientName: e.target.value },
-                                        }))
-                                      }
-                                      className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                    />
-                                  </div>
-                                  <div className="space-y-2">
-                                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                      Название банка *
-                                    </Label>
-                                    <Input
-                                      value={newBankAccountDetails.details.bankName}
-                                      onChange={(e) =>
-                                        setNewBankAccountDetails((prev) => ({
-                                          ...prev,
-                                          details: { ...prev.details, bankName: e.target.value },
-                                        }))
-                                      }
-                                      className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                    />
-                                  </div>
-                                </div>
-
-                                <div className="space-y-2">
-                                  <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                    Номер счета *
-                                  </Label>
-                                  <Input
-                                    value={newBankAccountDetails.details.accountNumber}
-                                    onChange={(e) =>
-                                      setNewBankAccountDetails((prev) => ({
-                                        ...prev,
-                                        details: { ...prev.details, accountNumber: e.target.value },
-                                      }))
-                                      }
-                                    className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                  />
-                                </div>
-
-                                {/* Специфичные поля для каждой страны */}
-                                {selectedBankCountry === "china" && (
-                                  <div className="space-y-2">
-                                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                      CNAPS код *
-                                    </Label>
-                                    <Input
-                                      value={newBankAccountDetails.details.cnapsCode}
-                                      onChange={(e) =>
-                                        setNewBankAccountDetails((prev) => ({
-                                          ...prev,
-                                          details: { ...prev.details, cnapsCode: e.target.value },
-                                        }))
-                                      }
-                                      placeholder="Например: 102100099996"
-                                      className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                    />
-                                  </div>
-                                )}
-
-                                {selectedBankCountry === "turkey" && (
-                                  <div className="space-y-2">
-                                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                      IBAN *
-                                    </Label>
-                                    <Input
-                                      value={newBankAccountDetails.details.iban}
-                                      onChange={(e) =>
-                                        setNewBankAccountDetails((prev) => ({
-                                          ...prev,
-                                          details: { ...prev.details, iban: e.target.value },
-                                        }))
-                                      }
-                                      placeholder="TR33 0006 1005 1978 6457 8413 26"
-                                      className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                    />
-                                  </div>
-                                )}
-
-                                {selectedBankCountry === "other" && (
-                                  <div className="space-y-2">
-                                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                      SWIFT код *
-                                    </Label>
-                                    <Input
-                                      value={newBankAccountDetails.details.swift}
-                                      onChange={(e) =>
-                                        setNewBankAccountDetails((prev) => ({
-                                          ...prev,
-                                          details: { ...prev.details, swift: e.target.value },
-                                        }))
-                                      }
-                                      placeholder="Например: DEUTDEFF"
-                                      className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                    />
-                                  </div>
-                                )}
-
-                                {/* Дополнительные поля */}
-                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
-                                  <div className="space-y-2">
-                                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                      Валюта перевода
-                                    </Label>
-                                    <select
-                                      value={newBankAccountDetails.details.transferCurrency}
-                                      onChange={(e) =>
-                                        setNewBankAccountDetails((prev) => ({
-                                          ...prev,
-                                          details: { ...prev.details, transferCurrency: e.target.value },
-                                        }))
-                                      }
-                                      className="w-full p-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg focus:border-blue-500 focus:ring-blue-500"
-                                    >
-                                      {supportedCurrencies.map((curr) => (
-                                        <option key={curr} value={curr}>
-                                          {curr}
-                                        </option>
-                                      ))}
-                                    </select>
-                                  </div>
-                                  <div className="space-y-2">
-                                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                      Назначение платежа *
-                                    </Label>
-                                    <Input
-                                      value={newBankAccountDetails.details.paymentPurpose}
-                                      onChange={(e) =>
-                                        setNewBankAccountDetails((prev) => ({
-                                          ...prev,
-                                          details: { ...prev.details, paymentPurpose: e.target.value },
-                                        }))
-                                      }
-                                      placeholder="Оплата за товары по договору"
-                                      className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                    />
-                                  </div>
-                                </div>
-
-                                <div className="space-y-2">
-                                  <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">
-                                    Дополнительная информация
-                                  </Label>
-                                  <Textarea
-                                    value={newBankAccountDetails.details.otherDetails}
-                                    onChange={(e) =>
-                                      setNewBankAccountDetails((prev) => ({
-                                        ...prev,
-                                        details: { ...prev.details, otherDetails: e.target.value },
-                                      }))
-                                    }
-                                    placeholder="Любая дополнительная информация для перевода"
-                                    rows={3}
-                                    className="bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500"
-                                  />
-                                </div>
-
-                                {/* Кнопка сохранения */}
-                                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
-                                  <Button
-                                    onClick={handleAddNewBankAccount}
-                                    className="w-full py-3 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-medium rounded-lg shadow-lg hover:shadow-xl transition-all duration-200"
-                                  >
-                                    <Save className="h-4 w-4 mr-2" />
-                                    Сохранить и использовать реквизиты
-                                  </Button>
-                                </motion.div>
-                              </div>
-                            </motion.div>
-                          )}
-                        </div>
-                      )}
-
-                      {/* Кнопка подтверждения для выбранных реквизитов */}
-                      {selectedBankAccount && !showAddBankAccountForm && (
-                        <motion.div
-                          initial={{ opacity: 0, y: 20 }}
-                          animate={{ opacity: 1, y: 0 }}
-                          className="text-center"
-                        >
-                          <Button
-                            onClick={() => setCurrentStep(6)}
-                            className="px-8 py-3 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-medium rounded-lg shadow-lg hover:shadow-xl transition-all duration-200"
-                          >
-                            <CheckCircle className="h-4 w-4 mr-2" />
-                            Подтвердить выбранные реквизиты
-                          </Button>
-                        </motion.div>
-                      )}
-                    </div>
-                  )}
-                </div>
-              </motion.div>
-            )}
-
-            {/* Шаг 6: Получение счет-фактуры */}
-            {currentStep === 6 && (
-              <motion.div
-                key="invoice-receipt"
-                initial={{ opacity: 0, y: 20 }}
-                animate={{ opacity: 1, y: 0 }}
-                exit={{ opacity: 0, y: -20 }}
-                transition={{ duration: 0.3 }}
-                className="max-w-4xl mx-auto mt-24"
-              >
-                <div className="bg-blue-50 dark:bg-blue-900/20 p-5 rounded-xl border border-blue-200 dark:border-blue-800 mb-8">
-                  <div className="flex items-start">
-                    <Info className="h-5 w-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0" />
-                    <p className="text-sm text-blue-700 dark:text-blue-400">
-                      Ожидайте получения счет-фактуры от поставщика.
-                    </p>
-                  </div>
-                </div>
+      <ProjectTimeline steps={steps} currentStep={currentStep} />
+      <AnimatePresence mode="wait">
+        {currentStep === 1 && (
+          <Step1CompanyForm
+            isLoading={isLoading}
+            isVerified={isVerified}
+            isVerifying={isVerifying}
+            setIsSaveDialogOpen={setSetIsSaveDialogOpen}
+          />
+        )}
+        {/* Здесь будут остальные шаги: currentStep === 2 и т.д. */}
+      </AnimatePresence>
+    </div>
+  );
+}
 
-                <div className="space-y-6">
-                  <div className="text-center">
-                    <h2 className="text-2xl font-bold mb-4">Ожидание счет-фактуры</h2>
-                    <p className="text-gray-600 dark:text-gray-400">
-                      Запрос отправлен поставщику. Ожидайте получения документов.
-                    </p>
-                  </div>
+export default function CreateProjectPage() {
+  return (
+    <CreateProjectProvider>
+      <TemplateLoader />
+      <CreateProjectPageContent />
+    </CreateProjectProvider>
+  );
+}
 
-                  {supplierReceiptUrl ? (
-                    <motion.div
-                      initial={{ scale: 0.9, opacity: 0 }}
-                      animate={{ scale: 1, opacity: 1 }}
-                      className="bg-green-50 dark:bg-green-900/20 p-6 rounded-xl border border-green-200 dark:border-green-800 text-center"
-                    >
-                      <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
-                      <h3 className="text-xl font-bold text-green-700 dark:text-green-400 mb-2">
-                        Счет-фактура получена!
-                      </h3>
-                      <p className="text-gray-600 dark:text-gray-400 mb-4">Документы от поставщика успешно получены.</p>
-                      <Button onClick={() => window.open(supplierReceiptUrl, "_blank")} className="gap-2">
-                        <FileText className="h-4 w-4" />
-                        Просмотреть документы
-                      </Button>
-                    </motion.div>
-                  ) : (
-                    <div className="bg-yellow-50 dark:bg-yellow-900/20 p-8 rounded-xl border border-yellow-200 dark:border-yellow-800 text-center">
-                      <motion.div
-                        animate={{ rotate: 360 }}
-                        transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
-                        className="w-16 h-16 mx-auto mb-4"
-                      >
-                        <Clock className="h-16 w-16 text-yellow-500" />
-                      </motion.div>
-                      <h3 className="text-xl font-bold text-yellow-700 dark:text-yellow-400 mb-2">
-                        Ожидание документов
-                      </h3>
-                      <p className="text-gray-600 dark:text-gray-400">
-                        Запрос отправлен поставщику. Документы будут доступны после их получения.
-                      </p>
-                    </div>
-                  )}
-                  {supplierReceiptUrl && (
-                    <motion.div
-                      initial={{ opacity: 0, y: 10 }}
-                      animate={{ opacity: 1, y: 0 }}
-                      transition={{ delay: 0.2 }}
-                      className="mt-8 text-center"
-                    >
-                      <Button
-                        onClick={() => setCurrentStep(7)}
-                        size="lg"
-                        className="px-8 py-6 text-lg gap-3 rounded-xl bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-lg hover:shadow-xl transition-all duration-300"
-                      >
-                        Перейти к подтверждению получения
-                        <ArrowRight className="h-5 w-5" />
-                      </Button>
-                    </motion.div>
-                  )}
-                </div>
-              </motion.div>
-            )}
-            {/* Шаг 7: Подтверждение получения */}
-            {currentStep === 7 && (
-              <motion.div
-                key="client-confirmation-step"
-                initial={{ opacity: 0, y: 20 }}
-                animate={{ opacity: 1, y: 0 }}
-                exit={{ opacity: 0, y: -20 }}
-                transition={{ duration: 0.3 }}
-                className="max-w-2xl mx-auto mt-24"
-              >
-                <div className="bg-white dark:bg-gray-900 p-8 rounded-xl border border-gray-200 dark:border-gray-800 shadow-xl">
-                  {isProjectCompleted ? (
-                    <div className="text-center">
-                      <motion.div
-                        initial={{ scale: 0 }}
-                        animate={{ scale: 1 }}
-                        transition={{ type: "spring", stiffness: 200, damping: 12 }}
-                        className="w-20 h-20 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg"
-                      >
-                        <CheckCircle className="h-12 w-12 text-white" />
-                      </motion.div>
-                      <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-3">Проект завершен!</h2>
-                      <p className="text-gray-600 dark:text-gray-400 max-w-md mx-auto mb-6">
-                        Благодарим за сотрудничество. Ваш проект успешно завершен.
-                      </p>
-                      <Button 
-                        onClick={() => router.push('/dashboard/active-projects')}
-                        className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-indigo-600 hover:to-blue-500"
-                      >
-                        Вернуться к проектам
-                      </Button>
-                    </div>
-                  ) : (
-                    <>
-                      <div className="text-center mb-8">
-                        <motion.div
-                          initial={{ scale: 0 }}
-                          animate={{ scale: 1 }}
-                          transition={{ type: "spring", stiffness: 200, damping: 12, delay: 0.1 }}
-                          className="w-20 h-20 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg"
-                        >
-                          <CheckCircle className="h-12 w-12 text-white" />
-                        </motion.div>
-                        <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-3">Подтверждение получения</h2>
-                        <p className="text-gray-600 dark:text-gray-400 max-w-md mx-auto">
-                          Пожалуйста, загрузите документ (чек, скриншот), подтверждающий получение товара от
-                          поставщика по данному проекту.
-                        </p>
-                      </div>
+// Компонент для загрузки шаблона и автозаполнения контекста
+function TemplateLoader() {
+  const searchParams = useSearchParams();
+  const templateId = searchParams.get("templateId");
+  const { setProjectName, setCompanyFormData } = useCreateProjectContext();
+  const [isTemplateLoading, setIsTemplateLoading] = useState(false);
 
-                      <div className="space-y-6">
-  <Label className="text-sm font-medium text-gray-700 dark:text-gray-300 block mb-3">
-    Файл подтверждения (PDF, JPG, PNG)
-  </Label>
-  <input
-    id="client-confirmation-upload"
-    type="file"
-    accept=".pdf,.jpg,.jpeg,.png"
-    onChange={handleClientConfirmationUpload}
-    disabled={isClientConfirmationUploading}
-    className="hidden"
-  />
-  <label
-    htmlFor="client-confirmation-upload"
-                          className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-lg p-8 cursor-pointer hover:border-blue-500 transition-colors"
-                        >
-                          {isClientConfirmationUploading ? (
-                            <div className="text-blue-500">Загрузка файла...</div>
-                          ) : clientConfirmationUrl ? (
-                            <div className="text-green-600 dark:text-green-400">Файл успешно загружен! <a href={clientConfirmationUrl} target="_blank" rel="noopener noreferrer" className="underline">Посмотреть</a></div>
-                          ) : (
-                            <>
-                              <span className="text-gray-500 dark:text-gray-400">Нажмите для выбора файла</span>
-                            </>
-                          )}
-                        </label>
-                        <div className="flex justify-end mt-6">
-                          <Button
-                            onClick={() => router.push('/dashboard/active-projects')}
-                            disabled={!clientConfirmationUrl}
-                            className="gap-2 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
-                          >
-                            Завершить проект
-                          </Button>
-                        </div>
-                      </div>
-                    </>
-                  )}
-                </div>
-              </motion.div>
-            )}
-          </AnimatePresence>
-        </div>
+  useEffect(() => {
+    async function fetchTemplate() {
+      if (!templateId) return;
+      setIsTemplateLoading(true);
+      const { data, error } = await supabase
+        .from("templates")
+        .select("data")
+        .eq("id", templateId)
+        .single();
+      if (!error && data && data.data) {
+        if (data.data.projectName) setProjectName(data.data.projectName);
+        if (data.data.companyFormData) setCompanyFormData(data.data.companyFormData);
+      }
+      setIsTemplateLoading(false);
+    }
+    fetchTemplate();
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [templateId]);
+
+  if (isTemplateLoading) {
+    return (
+      <div className="flex flex-col items-center justify-center min-h-screen">
+        <div className="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4"></div>
+        <p className="text-gray-600 dark:text-gray-400">Загрузка шаблона...</p>
       </div>
-
-      {/* --- Модальное окно для сохранения шаблона --- */}
-      <Dialog open={isSaveDialogOpen} onOpenChange={setIsSaveDialogOpen}>
-        <DialogContent>
-          <DialogHeader>
-            <DialogTitle>Сохранить шаблон</DialogTitle>
-          </DialogHeader>
-          <div className="space-y-4">
-            <Input
-              placeholder="Название шаблона"
-              value={templateName}
-              onChange={e => setTemplateName(e.target.value)}
-            />
-            <Textarea
-              placeholder="Описание (необязательно)"
-              value={templateDescription}
-              onChange={e => setTemplateDescription(e.target.value)}
-            />
-          </div>
-          <DialogFooter>
-            <Button onClick={handleSaveTemplate} disabled={!templateName.trim()}>
-              Сохранить
-            </Button>
-          </DialogFooter>
-        </DialogContent>
-      </Dialog>
-    </div>
-  )
+    );
+  }
+  return null;
 }
