/**
 * üí± –°–ï–†–í–ò–° –ö–£–†–°–û–í –í–ê–õ–Æ–¢ GET2B
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¶–ë –†–§ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
 */

export interface CurrencyRate {
  code: string;
  name: string;
  value: number;
  nominal: number;
  previous?: number;
  trend?: 'up' | 'down' | 'stable';
}

export interface CurrencyRatesResponse {
  date: string;
  rates: Record<string, CurrencyRate>;
  source: 'cbr' | 'cache' | 'fallback';
  updated_at: string;
}

class CurrencyService {
  private static instance: CurrencyService;
  private cache: Map<string, { data: CurrencyRatesResponse; timestamp: number }> = new Map();
  private readonly CACHE_DURATION = 60 * 60 * 1000; // 1 —á–∞—Å
  private readonly CBR_API_URL = 'https://www.cbr-xml-daily.ru/daily_json.js';
  private readonly FALLBACK_URL = 'http://www.cbr.ru/scripts/XML_daily.asp';

  // –ö—É—Ä—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (fallback)
  private readonly DEFAULT_RATES: Record<string, CurrencyRate> = {
    'USD': { code: 'USD', name: '–î–æ–ª–ª–∞—Ä –°–®–ê', value: 92.50, nominal: 1 },
    'EUR': { code: 'EUR', name: '–ï–≤—Ä–æ', value: 101.20, nominal: 1 },
    'CNY': { code: 'CNY', name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', value: 12.80, nominal: 1 },
    'TRY': { code: 'TRY', name: '–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞', value: 2.85, nominal: 10 },
    'AED': { code: 'AED', name: '–î–∏—Ä—Ö–∞–º –û–ê–≠', value: 25.20, nominal: 1 },
  };

  static getInstance(): CurrencyService {
    if (!CurrencyService.instance) {
      CurrencyService.instance = new CurrencyService();
    }
    return CurrencyService.instance;
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
   */
  async getRates(forceRefresh = false): Promise<CurrencyRatesResponse> {
    const cacheKey = 'current_rates';
    const cached = this.cache.get(cacheKey);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (!forceRefresh && cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {
      console.log('üì¶ –ö—É—Ä—Å—ã –∏–∑ –∫–µ—à–∞');
      return cached.data;
    }

    try {
      console.log('üåê –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –æ—Ç –¶–ë –†–§...');
      const response = await this.fetchFromCBR();
      
      // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, {
        data: response,
        timestamp: Date.now()
      });

      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (cached) {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à');
        return { ...cached.data, source: 'cache' };
      }

      // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫—É—Ä—Å—ã
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫—É—Ä—Å—ã');
      return this.getFallbackRates();
    }
  }

  /**
   * üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –æ—Ç –¶–ë –†–§ —á–µ—Ä–µ–∑ cbr-xml-daily
   */
  private async fetchFromCBR(): Promise<CurrencyRatesResponse> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    try {
      const response = await fetch(this.CBR_API_URL, {
        signal: controller.signal,
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'Get2B-Platform/1.0'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      clearTimeout(timeoutId);

      return this.parseCBRResponse(data);
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  }

  /**
   * üîß –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –¶–ë –†–§
   */
  private parseCBRResponse(data: any): CurrencyRatesResponse {
    const rates: Record<string, CurrencyRate> = {};

    // –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å –≤–∞–ª—é—Ç—ã Get2B
    const targetCurrencies = ['USD', 'EUR', 'CNY', 'TRY', 'AED'];

    for (const [code, rateData] of Object.entries(data.Valute || {})) {
      if (targetCurrencies.includes(code)) {
        const rate = rateData as any;
        const current = Number(rate.Value);
        const previous = Number(rate.Previous || current);
        
        rates[code] = {
          code,
          name: rate.Name || `–í–∞–ª—é—Ç–∞ ${code}`,
          value: current,
          nominal: Number(rate.Nominal || 1),
          previous,
          trend: current > previous ? 'up' : current < previous ? 'down' : 'stable'
        };
      }
    }

    return {
      date: data.Date || new Date().toISOString().split('T')[0],
      rates,
      source: 'cbr',
      updated_at: new Date().toISOString()
    };
  }

  /**
   * üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫—É—Ä—Å—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
   */
  private getFallbackRates(): CurrencyRatesResponse {
    return {
      date: new Date().toISOString().split('T')[0],
      rates: { ...this.DEFAULT_RATES },
      source: 'fallback',
      updated_at: new Date().toISOString()
    };
  }

  /**
   * üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
   */
  async convert(
    amount: number, 
    fromCurrency: string, 
    toCurrency: string = 'RUB'
  ): Promise<{ amount: number; rate: number; fromCurrency: string; toCurrency: string }> {
    if (fromCurrency === toCurrency) {
      return { amount, rate: 1, fromCurrency, toCurrency };
    }

    const rates = await this.getRates();
    
    if (toCurrency === 'RUB' && rates.rates[fromCurrency]) {
      const rate = rates.rates[fromCurrency];
      const convertedAmount = (amount * rate.value) / rate.nominal;
      
      return {
        amount: Math.round(convertedAmount * 100) / 100,
        rate: rate.value / rate.nominal,
        fromCurrency,
        toCurrency
      };
    }

    throw new Error(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${fromCurrency} ‚Üí ${toCurrency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
  }

  /**
   * üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatRate(currency: string, rate: CurrencyRate): string {
    const trendIcon = rate.trend === 'up' ? ' ‚ñ≤' : rate.trend === 'down' ? ' ‚ñº' : '';
    const rateValue = (rate.value / rate.nominal).toFixed(4);
    
    return `${currency} = ${rateValue} ‚ÇΩ${trendIcon}`;
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
   */
  clearCache(): void {
    this.cache.clear();
    console.log('üßπ –ö–µ—à –∫—É—Ä—Å–æ–≤ –æ—á–∏—â–µ–Ω');
  }
}

export default CurrencyService; 