import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// GET: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error("‚ùå [SECURITY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      return NextResponse.json({ 
        error: "Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" 
      }, { status: 401 });
    }
    
    console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, user_id:", user.id);
    
    const { data, error } = await supabase
      .from("supplier_profiles")
      .select("*")
      .eq("user_id", user.id)
      .eq("is_active", true)
      .order("created_at", { ascending: false });

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    return NextResponse.json({ profiles: data });
  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// POST: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error("‚ùå [SECURITY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      return NextResponse.json({ 
        error: "Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" 
      }, { status: 401 });
    }
    
    console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, user_id:", user.id);
    
    const supplierData = await request.json();
    console.log("üîß [DEBUG POST] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", JSON.stringify(supplierData, null, 2));

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ["name", "company_name", "category", "country"];
    for (const field of requiredFields) {
      if (!supplierData[field]) {
        return NextResponse.json({ 
          error: `–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ` 
        }, { status: 400 });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const { data: existingProfile } = await supabase
      .from("supplier_profiles")
      .select("id")
      .eq("user_id", user.id)
      .eq("name", supplierData.name)
      .eq("company_name", supplierData.company_name)
      .eq("is_active", true)
      .single();

    if (existingProfile) {
      return NextResponse.json({ 
        error: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
      }, { status: 409 });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const insertData = {
      ...supplierData,
      user_id: user.id,
      is_active: true,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    console.log("üîß [DEBUG POST] –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ supplier_profiles:", JSON.stringify(insertData, null, 2));

    const { data, error } = await supabase
      .from("supplier_profiles")
      .insert([insertData])
      .select()
      .single();

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    console.log("‚úÖ [API] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å–æ–∑–¥–∞–Ω:", data.id);
    return NextResponse.json({ profile: data });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
} 