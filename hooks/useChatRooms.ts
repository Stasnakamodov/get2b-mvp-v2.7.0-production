import { useState, useEffect, useCallback } from 'react';
import { 
  ChatRoom, 
  ChatRoomWithStats,
  CreateRoomRequest,
  UpdateRoomRequest,
  ChatFilters,
  ChatRoomType
} from '@/lib/types/chat';

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ —á–∞—Ç–∞ (–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø)
export function useChatRooms(userId?: string) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
  const [rooms, setRooms] = useState<ChatRoomWithStats[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isCreating, setIsCreating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –§–∏–ª—å—Ç—Ä—ã
  const [filters, setFilters] = useState<ChatFilters>({});

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç - –£–õ–¨–¢–†–ê-–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
  const loadRooms = useCallback(async () => {
    if (!userId) {
      console.log("‚ö†Ô∏è No userId provided, skipping loadRooms");
      return;
    }

    console.log("üì• SAFE loadRooms called for userId:", userId);
    
    try {
      setIsLoading(true);
      setError(null);

      console.log("üîç Attempting to fetch rooms...");

      const params = new URLSearchParams({
        user_id: userId
      });

      // –ë–ï–ó–û–ü–ê–°–ù–´–ô –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥

      const response = await fetch(`/api/chat/rooms?${params}`, {
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);

      console.log("üì° Rooms API response status:", response.status);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log("üì¶ Rooms API data:", data);

      if (data.success) {
        // –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ ChatRoomWithStats
        const safeRooms = (data.rooms || []).map((room: any) => ({
          ...room,
          unread_count: room.unread_count || 0,
          participants: room.participants || [],
          assigned_managers: room.assigned_managers || [],
          stats: room.stats || {
            total_messages: 0,
            user_messages: 0,
            ai_messages: 0,
            manager_messages: 0
          }
        }));

        setRooms(safeRooms);
        console.log("‚úÖ Rooms loaded successfully:", safeRooms.length);
      } else {
        const errorMsg = data.error || 'Failed to load rooms';
        setError(errorMsg);
        console.error('‚ùå API returned error:', errorMsg);
        
        // FALLBACK: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        setRooms([]);
      }
    } catch (error: any) {
      const errorMessage = error.name === 'AbortError' 
        ? 'Request timeout' 
        : `Error loading rooms: ${String(error)}`;
      
      setError(errorMessage);
      console.error('üí• loadRooms error:', errorMessage);
      
      // FALLBACK: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setRooms([]);
    } finally {
      setIsLoading(false);
    }
  }, [userId, filters]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
  const createRoom = useCallback(async (roomRequest: CreateRoomRequest) => {
    if (!userId || !roomRequest.name?.trim()) {
      throw new Error('User ID and room name are required');
    }

    try {
      setIsCreating(true);
      setError(null);

      const roomData: CreateRoomRequest = {
        user_id: userId,
        name: roomRequest.name.trim(),
        room_type: roomRequest.room_type || 'ai',
        project_id: roomRequest.room_type === 'project' ? roomRequest.project_id : undefined,
        description: roomRequest.description || (roomRequest.room_type === 'ai' ? `AI –∫–æ–º–Ω–∞—Ç–∞: ${roomRequest.name.trim()}` : `–ö–æ–º–Ω–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${roomRequest.name.trim()}`)
      };

      console.log('üèóÔ∏è SAFE Creating room:', roomData);

      const response = await fetch('/api/chat/rooms', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(roomData)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();

      if (data.success) {
        // –ë–ï–ó–û–ü–ê–°–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ ChatRoomWithStats
        const newRoomWithStats: ChatRoomWithStats = {
          ...data.room,
          unread_count: 0,
          participants: [],
          assigned_managers: [],
          stats: {
            total_messages: 0,
            user_messages: 0,
            ai_messages: 0,
            manager_messages: 0
          }
        };

        // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ë–ï–ó –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
        setRooms(prev => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
          const exists = prev.some(room => room.id === newRoomWithStats.id);
          if (exists) {
            console.log('‚ÑπÔ∏è Room already exists in list, skipping add');
            return prev;
          }
          console.log('‚úÖ Adding new room to list:', data.room.name);
          return [newRoomWithStats, ...prev];
        });
        console.log('‚úÖ Room created successfully:', data.room.name);
        return data.room;
      } else {
        const errorMsg = data.error || 'Failed to create room';
        setError(errorMsg);
        console.error('‚ùå Failed to create room:', errorMsg);
        throw new Error(errorMsg);
      }
    } catch (error: any) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to create room';
      setError(errorMessage);
      console.error('‚ùå Error creating room:', errorMessage);
      throw error;
    } finally {
      setIsCreating(false);
    }
  }, [userId]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  const updateRoom = useCallback(async (
    roomId: string,
    updates: UpdateRoomRequest
  ) => {
    if (!roomId) return null;

    try {
      setError(null);

      const response = await fetch(`/api/chat/room/${roomId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updates)
      });

      const data = await response.json();

      if (data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ —Å–ø–∏—Å–∫–µ
        setRooms(prev => 
          prev.map(room => 
            room.id === roomId 
              ? { ...room, ...data.room }
              : room
          )
        );
        return data.room;
      } else {
        setError(data.error || 'Failed to update room');
        console.error('Failed to update room:', data.error);
        return null;
      }
    } catch (error) {
      const errorMessage = 'Error updating room: ' + String(error);
      setError(errorMessage);
      console.error(errorMessage);
      return null;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è AI –∫–æ–º–Ω–∞—Ç—ã
  const archiveRoom = useCallback(async (roomId: string) => {
    return await updateRoom(roomId, { is_archived: true, is_active: false });
  }, [updateRoom]);

  // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞
  const restoreRoom = useCallback(async (roomId: string) => {
    return await updateRoom(roomId, { is_archived: false, is_active: true });
  }, [updateRoom]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
  const getRoom = useCallback(async (roomId: string) => {
    if (!roomId) return null;

    try {
      const response = await fetch(`/api/chat/room/${roomId}`);
      const data = await response.json();

      if (data.success) {
        return data.room;
      } else {
        console.error('Failed to get room:', data.error);
        return null;
      }
    } catch (error) {
      console.error('Error getting room:', error);
      return null;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const updateUnreadCount = useCallback((roomId: string, count: number) => {
    setRooms(prev => 
      prev.map(room => 
        room.id === roomId 
          ? { ...room, unread_count: count }
          : room
      )
    );
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const incrementUnreadCount = useCallback((roomId: string) => {
    setRooms(prev => 
      prev.map(room => 
        room.id === roomId 
          ? { ...room, unread_count: room.unread_count + 1 }
          : room
      )
    );
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const resetUnreadCount = useCallback((roomId: string) => {
    updateUnreadCount(roomId, 0);
  }, [updateUnreadCount]);

  // –§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const setRoomTypeFilter = useCallback((roomType?: ChatRoomType) => {
    setFilters(prev => ({ ...prev, room_type: roomType }));
  }, []);

  const setActiveFilter = useCallback((isActive?: boolean) => {
    setFilters(prev => ({ ...prev, is_active: isActive }));
  }, []);

  const setUnreadFilter = useCallback((hasUnread?: boolean) => {
    setFilters(prev => ({ ...prev, has_unread: hasUnread }));
  }, []);

  const clearFilters = useCallback(() => {
    setFilters({});
  }, []);

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const aiRooms = rooms.filter(room => room.room_type === 'ai');
  const projectRooms = rooms.filter(room => room.room_type === 'project');
  const activeRooms = rooms.filter(room => room.is_active && !room.is_archived);
  const archivedRooms = rooms.filter(room => room.is_archived);
  const roomsWithUnread = rooms.filter(room => room.unread_count > 0);
  const totalUnreadCount = rooms.reduce((sum, room) => sum + room.unread_count, 0);

  // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    console.log("üîÑ SAFE useChatRooms useEffect triggered for userId:", userId);
    if (userId) {
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
      const timeoutId = setTimeout(() => {
        loadRooms();
      }, 100);

      return () => clearTimeout(timeoutId);
    }
  }, [userId]);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
  const deleteRoom = useCallback(async (roomId: string) => {
    if (!userId || !roomId) {
      throw new Error('User ID and Room ID are required');
    }

    setIsLoading(true);
    setError(null);

    try {
      console.log('üóëÔ∏è SAFE Deleting room:', roomId);

      const params = new URLSearchParams({
        room_id: roomId,
        user_id: userId
      });

      const response = await fetch(`/api/chat/rooms?${params}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Failed to delete room');
      }

      // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setRooms(prev => prev.filter(room => room.id !== roomId));

      console.log('‚úÖ Room deleted successfully:', data.deletedRoom?.name);
      
      return data.deletedRoom;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to delete room';
      console.error('‚ùå Error deleting room:', errorMessage);
      setError(errorMessage);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [userId]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    rooms,
    isLoading,
    isCreating,
    error,

    // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    aiRooms,
    projectRooms,
    activeRooms,
    archivedRooms,
    roomsWithUnread,

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    totalUnreadCount,
    roomsCount: rooms.length,
    aiRoomsCount: aiRooms.length,
    projectRoomsCount: projectRooms.length,

    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
    loadRooms,
    createRoom,
    deleteRoom,
    updateRoom,
    archiveRoom,
    restoreRoom,
    getRoom,

    // –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏
    updateUnreadCount,
    incrementUnreadCount,
    resetUnreadCount,

    // –§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    setRoomTypeFilter,
    setActiveFilter,
    setUnreadFilter,
    clearFilters,
    filters,

    // –£—Ç–∏–ª–∏—Ç—ã
    refreshRooms: loadRooms,
    clearError: () => setError(null),
  };
} 