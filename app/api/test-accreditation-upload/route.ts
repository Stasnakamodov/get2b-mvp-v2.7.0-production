import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// POST: –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é
export async function POST(request: NextRequest) {
  try {
    console.log("üß™ [TEST-UPLOAD] –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
    const testApplicationId = "test-" + Date.now();
    
    console.log("üìù [TEST-UPLOAD] –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É:", testApplicationId);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)
    const testContent = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage";
    const testFileName = `test-file-${Date.now()}.txt`;
    
    console.log("üìÅ [TEST-UPLOAD] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:", testFileName);

    try {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('project-images')
        .upload(`test/${testFileName}`, testContent, {
          contentType: 'text/plain',
          cacheControl: '3600',
          upsert: false
        });

      if (uploadError) {
        console.error("‚ùå [TEST-UPLOAD] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", uploadError);
        return NextResponse.json({ 
          error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
          details: uploadError.message
        }, { status: 500 });
      }

      console.log("‚úÖ [TEST-UPLOAD] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:", uploadData.path);

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: urlData } = supabase.storage
        .from('project-images')
        .getPublicUrl(uploadData.path);

      console.log("üîó [TEST-UPLOAD] –ü—É–±–ª–∏—á–Ω—ã–π URL:", urlData.publicUrl);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω
      const { data: fileData, error: fileError } = await supabase.storage
        .from('project-images')
        .download(uploadData.path);

      if (fileError) {
        console.error("‚ùå [TEST-UPLOAD] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", fileError);
      } else {
        console.log("‚úÖ [TEST-UPLOAD] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä:", fileData.size);
      }

      return NextResponse.json({
        success: true,
        message: "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
        file: {
          path: uploadData.path,
          public_url: urlData.publicUrl,
          size: fileData?.size || 0
        }
      });

    } catch (storageError) {
      console.error("‚ùå [TEST-UPLOAD] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Storage:", storageError);
      return NextResponse.json({ 
        error: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Storage",
        details: storageError instanceof Error ? storageError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 });
    }

  } catch (error) {
    console.error("‚ùå [TEST-UPLOAD] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 