import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";
import { CATEGORY_CERTIFICATIONS } from "@/components/catalog-categories-and-certifications";

// GET: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function GET() {
  try {
    const { data, error } = await supabase
      .from("catalog_categories")
      .select("*")
      .eq("is_active", true)
      .order("name");

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
      return NextResponse.json({ success: false, error: error.message }, { status: 500 });
    }

    console.log("‚úÖ [API] –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data?.length);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è HierarchicalCategorySelector
    const categoryTrees = data?.map((category: any) => ({
      main_category: {
        id: category.id,
        key: category.id.toString(),
        category: category.name,
        name: category.name,
        icon: category.icon || "üì¶",
        description: category.description || "",
        isActive: category.is_active
      },
      subcategories: [] // –ü–æ–∫–∞ –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
    })) || [];
    
    return NextResponse.json({ 
      success: true,
      categories: data,
      categoryTrees: categoryTrees
    });
  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    return NextResponse.json({ success: false, error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}

// POST: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∫–æ–¥–∞ –≤ –ë–î
export async function POST() {
  try {
    console.log("üîÑ [API] –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π...");

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: existingCategories, error: selectError } = await supabase
      .from("catalog_categories")
      .select("key, name, id");

    if (selectError) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", selectError);
      return NextResponse.json({ error: selectError.message }, { status: 500 });
    }

    const existingKeys = new Set(existingCategories?.map(cat => cat.key) || []);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const categoriesToInsert = CATEGORY_CERTIFICATIONS
      .filter(cat => !existingKeys.has(cat.category.toLowerCase().replace(/\s+/g, '_')))
      .map(cat => ({
        key: cat.category.toLowerCase().replace(/\s+/g, '_'),
        name: cat.category,
        description: `${cat.category}. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${cat.certifications.join(', ')}`,
        icon: getCategoryIcon(cat.category),
        is_active: true
      }));

    if (categoriesToInsert.length === 0) {
      return NextResponse.json({ 
        message: "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", 
        existing: existingCategories?.length || 0,
        total: CATEGORY_CERTIFICATIONS.length
      });
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data, error } = await supabase
      .from("catalog_categories")
      .insert(categoriesToInsert)
      .select();

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
      return NextResponse.json({ success: false, error: error.message }, { status: 500 });
    }

    console.log(`‚úÖ [API] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${data?.length} –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    return NextResponse.json({ 
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã",
      created: data?.length || 0,
      existing: existingCategories?.length || 0,
      total: (existingCategories?.length || 0) + (data?.length || 0)
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
    return NextResponse.json({ success: false, error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryIcon(category: string): string {
  const iconMap: Record<string, string> = {
    "–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞": "üëï",
    "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞": "‚ö°",
    "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "üì±", 
    "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ": "‚öôÔ∏è",
    "FMCG (–ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞–ø–∏—Ç–∫–∏, –∫–æ—Å–º–µ—Ç–∏–∫–∞)": "üõí",
    "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã": "üèóÔ∏è",
    "–ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä": "ü™ë",
    "–•–∏–º–∏—è –∏ —Å—ã—Ä—å–µ": "‚öóÔ∏è",
    "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "üöõ"
  };
  
  return iconMap[category] || "üì¶";
}

// PATCH: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function PATCH(request: NextRequest) {
  const { id, ...updateData } = await request.json();
  if (!id) {
    return NextResponse.json({ error: "–ü–æ–ª–µ id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" }, { status: 400 });
  }
  const { data, error } = await supabase
    .from("catalog_categories")
    .update(updateData)
    .eq("id", id)
    .select()
    .single();
  if (error) return NextResponse.json({ error: error.message }, { status: 500 });
  return NextResponse.json({ category: data });
}

// DELETE: –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function DELETE(request: NextRequest) {
  const { id } = await request.json();
  if (!id) {
    return NextResponse.json({ error: "–ü–æ–ª–µ id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" }, { status: 400 });
  }
  const { data, error } = await supabase
    .from("catalog_categories")
    .delete()
    .eq("id", id)
    .select()
    .single();
  if (error) return NextResponse.json({ error: error.message }, { status: 500 });
  return NextResponse.json({ category: data });
} 