require('dotenv').config({ path: '.env.local' });

async function testManagerMessageDetailed() {
  console.log('üß™ –î–ï–¢–ê–õ–¨–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞...\n');
  
  const projectId = '1570961b-ca64-4de4-8170-a7ef99b2ae5b';
  const testMessage = `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`;
  
  console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:');
  console.log(`   - –ü—Ä–æ–µ–∫—Ç ID: ${projectId}`);
  console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: "${testMessage}"`);
  console.log(`   - Telegram Chat ID: ${process.env.TELEGRAM_CHAT_ID}\n`);
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º webhook payload –æ—Ç Telegram
  const webhookPayload = {
    update_id: Date.now(),
    message: {
      message_id: Date.now(),
      from: {
        id: 987654321,
        is_bot: false,
        first_name: "–¢–µ—Å—Ç–æ–≤—ã–π",
        last_name: "–ú–µ–Ω–µ–¥–∂–µ—Ä",
        username: "test_manager"
      },
      chat: {
        id: parseInt(process.env.TELEGRAM_CHAT_ID),
        type: "private"
      },
      date: Math.floor(Date.now() / 1000),
      text: testMessage,
      reply_to_message: {
        message_id: 123,
        from: {
          id: 8195945436,
          is_bot: true,
          first_name: "Get2B ChatBot"
        },
        chat: {
          id: parseInt(process.env.TELEGRAM_CHAT_ID),
          type: "private"
        },
        date: Math.floor(Date.now() / 1000) - 60,
        text: `üÜî –ü—Ä–æ–µ–∫—Ç: ${projectId}`
      }
    }
  };

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é webhook payload...');
  
  try {
    const response = await fetch('http://localhost:3000/api/telegram-chat-webhook', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(webhookPayload)
    });

    const result = await response.text();
    console.log(`‚úÖ Webhook –æ—Ç–≤–µ—Ç (${response.status}):`, result);
    
    if (response.status === 200) {
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ API...');
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º API
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const apiResponse = await fetch(`http://localhost:3000/api/chat/messages?room_id=${projectId}&limit=3`);
      const apiData = await apiResponse.json();
      
      console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ API:');
      if (apiData.messages && apiData.messages.length > 0) {
        apiData.messages.forEach((msg, i) => {
          console.log(`   ${i + 1}. "${msg.content}" - ${msg.sender_name} (${msg.sender_type}) [${msg.created_at}]`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const testMessageFound = apiData.messages.some(msg => 
          msg.content === testMessage && 
          msg.sender_type === 'manager'
        );
        
        if (testMessageFound) {
          console.log('\nüéâ –£–°–ü–ï–•! –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API!');
        } else {
          console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ API');
        }
      } else {
        console.log('   (–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π)');
        console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    } else {
      console.log('\n‚ùå Webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

testManagerMessageDetailed(); 