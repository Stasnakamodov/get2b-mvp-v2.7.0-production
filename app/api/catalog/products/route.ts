import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// GET: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const supplier_id = searchParams.get("supplier_id");
    const category = searchParams.get("category");
    const in_stock = searchParams.get("in_stock");
    const supplier_type = searchParams.get("supplier_type") || "user"; // "user" –∏–ª–∏ "verified"

    let userId: string | null = null;

    // –î–ª—è verified (–æ—Ä–∞–Ω–∂–µ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞) –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø
    if (supplier_type === "verified") {
      console.log("üîì [PUBLIC] –ó–∞–ø—Ä–æ—Å –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É verified, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
    } else {
      // –î–ª—è user (—Å–∏–Ω—è—è –∫–æ–º–Ω–∞—Ç–∞) —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      const authHeader = request.headers.get('authorization');
      
      if (authHeader && authHeader.startsWith('Bearer ')) {
        const token = authHeader.substring(7);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
        const { data: { user }, error: authError } = await supabase.auth.getUser(token);
        
        if (authError || !user) {
          console.error("‚ùå [SECURITY] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
          return NextResponse.json({ 
            error: "Unauthorized - –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" 
          }, { status: 401 });
        }
        
        userId = user.id;
        console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω, user_id:", userId);
      } else {
        // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError || !user) {
          console.error("‚ùå [SECURITY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è user-—Ç–æ–≤–∞—Ä–æ–≤");
          return NextResponse.json({ 
            error: "Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" 
          }, { status: 401 });
        }
        
        userId = user.id;
        console.log("‚úÖ [SECURITY] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, user_id:", userId);
      }
    }

    console.log("üîç [DEBUG] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤:", { supplier_id, category, in_stock, supplier_type, userId });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    const tableName = supplier_type === "verified" ? "catalog_verified_products" : "catalog_user_products";

    let query = supabase
      .from(tableName)
      .select("*")
      .eq("is_active", true)  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
      .order("created_at", { ascending: false });

    if (supplier_id) query = query.eq("supplier_id", supplier_id);
    if (category) query = query.eq("category", category);
    if (in_stock !== null && in_stock !== undefined) query = query.eq("in_stock", in_stock === "true");

    // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ user_id
    if (supplier_type === "user") {
      query = query.eq("user_id", userId);
    }

    const { data, error } = await query;

  if (error) {
    console.error(`‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${tableName}:`, error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  console.log(`‚úÖ [API] –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ ${tableName}:`, data?.length);
  return NextResponse.json({ products: data });
  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// POST: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
export async function POST(request: NextRequest) {
  const productData = await request.json();

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  const requiredFields = ["name", "supplier_id"];
  for (const field of requiredFields) {
    if (!productData[field]) {
      return NextResponse.json({ error: `–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ` }, { status: 400 });
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
  const supplier_type = productData.supplier_type || "user";
  const tableName = supplier_type === "verified" ? "catalog_verified_products" : "catalog_user_products";
  
  // –£–±–∏—Ä–∞–µ–º supplier_type –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
  const { supplier_type: _, ...cleanProductData } = productData;
  
  // –î–æ–±–∞–≤–ª—è–µ–º user_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
  if (supplier_type === "user" && !cleanProductData.user_id) {
    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    const { data: supplier } = await supabase
      .from("catalog_user_suppliers")
      .select("user_id")
      .eq("id", cleanProductData.supplier_id)
      .single();
      
    if (supplier) {
      cleanProductData.user_id = supplier.user_id;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è category
  if (!cleanProductData.category || cleanProductData.category === null) {
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const { data: supplier } = await supabase
      .from(supplier_type === "verified" ? "catalog_verified_suppliers" : "catalog_user_suppliers")
      .select("category")
      .eq("id", cleanProductData.supplier_id)
      .single();
      
    cleanProductData.category = supplier?.category || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
  }

  console.log(`üîß [DEBUG] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ ${tableName}:`, cleanProductData);

  const { data, error } = await supabase
    .from(tableName)
    .insert([cleanProductData])
    .select()
    .single();

  if (error) {
    console.error(`‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ ${tableName}:`, error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  console.log(`‚úÖ [API] –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω –≤ ${tableName}:`, data);
  return NextResponse.json({ product: data });
}

// PATCH: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
export async function PATCH(request: NextRequest) {
  const { id, supplier_type, ...updateData } = await request.json();
  if (!id) {
    return NextResponse.json({ error: "–ü–æ–ª–µ id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" }, { status: 400 });
  }

  const tableName = supplier_type === "verified" ? "catalog_verified_products" : "catalog_user_products";
  
  const { data, error } = await supabase
    .from(tableName)
    .update(updateData)
    .eq("id", id)
    .select()
    .single();
    
  if (error) {
    console.error(`‚ùå [API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ ${tableName}:`, error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  return NextResponse.json({ product: data });
}

// DELETE: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
export async function DELETE(request: NextRequest) {
  const { id, supplier_type } = await request.json();
  if (!id) {
    return NextResponse.json({ error: "–ü–æ–ª–µ id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" }, { status: 400 });
  }

  const tableName = supplier_type === "verified" ? "catalog_verified_products" : "catalog_user_products";
  
  const { data, error } = await supabase
    .from(tableName)
    .delete()
    .eq("id", id)
    .select()
    .single();
    
  if (error) {
    console.error(`‚ùå [API] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ ${tableName}:`, error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
  
  return NextResponse.json({ product: data });
} 