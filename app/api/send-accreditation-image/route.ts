import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";
import { ChatBotService } from "@/lib/telegram/ChatBotService";

// POST: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤ Telegram
export async function POST(request: NextRequest) {
  try {
    console.log("üì§ [SEND-IMAGE] –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤ Telegram");

    const { searchParams } = new URL(request.url);
    const applicationId = searchParams.get('applicationId');
    const productIndex = searchParams.get('productIndex') || '0';
    const imageIndex = searchParams.get('imageIndex') || '0';
    const chatId = searchParams.get('chatId') || process.env.TELEGRAM_CHAT_ID;

    if (!applicationId) {
      return NextResponse.json({ 
        error: "–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞—è–≤–∫–∏" 
      }, { status: 400 });
    }

    if (!chatId) {
      return NextResponse.json({ 
        error: "–ù–µ —É–∫–∞–∑–∞–Ω chat_id" 
      }, { status: 400 });
    }

    console.log("üîç [SEND-IMAGE] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:", { applicationId, productIndex, imageIndex });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const { data: application, error } = await supabase
      .from('accreditation_applications')
      .select('*')
      .eq('id', applicationId)
      .single();

    if (error || !application) {
      return NextResponse.json({ 
        error: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" 
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    let productsData = [];
    try {
      productsData = typeof application.products_data === 'string' 
        ? JSON.parse(application.products_data) 
        : application.products_data;
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ products_data:', parseError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤" 
      }, { status: 500 });
    }

    const product = productsData[parseInt(productIndex)];
    if (!product) {
      return NextResponse.json({ 
        error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" 
      }, { status: 404 });
    }

    const images = product.images_info || [];
    const image = images[parseInt(imageIndex)];
    
    if (!image) {
      return NextResponse.json({ 
        error: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" 
      }, { status: 404 });
    }

    console.log("üì∑ [SEND-IMAGE] –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", image);

    if (!image.public_url) {
      return NextResponse.json({ 
        error: "–£ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL" 
      }, { status: 400 });
    }

    try {
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase Storage
      const storagePath = `accreditation/${applicationId}/products/${productIndex}/images/${image.name}`;
      
      console.log("üì• [SEND-IMAGE] –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª:", storagePath);
      
      const { data: fileData, error: downloadError } = await supabase.storage
        .from('project-images')
        .download(storagePath);

      if (downloadError) {
        console.error("‚ùå [SEND-IMAGE] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", downloadError);
        return NextResponse.json({ 
          error: "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞",
          details: downloadError.message
        }, { status: 500 });
      }

      console.log("‚úÖ [SEND-IMAGE] –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä:", fileData.size);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer
      const buffer = Buffer.from(await fileData.arrayBuffer());
      
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram
      const formData = new FormData();
      formData.append('chat_id', chatId);
      formData.append('photo', new Blob([buffer], { type: image.type }), image.name);
      formData.append('caption', `üì∑ ${image.name}\n–†–∞–∑–º–µ—Ä: ${(image.size / 1024).toFixed(1)} KB\n–¢–∏–ø: ${image.type}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram —á–µ—Ä–µ–∑ Bot API
      const botToken = process.env.TELEGRAM_CHAT_BOT_TOKEN;
      const telegramUrl = `https://api.telegram.org/bot${botToken}/sendPhoto`;

      console.log("üì§ [SEND-IMAGE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...");

      const response = await fetch(telegramUrl, {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (!response.ok) {
        console.error("‚ùå [SEND-IMAGE] –û—à–∏–±–∫–∞ Telegram API:", result);
        return NextResponse.json({ 
          error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram",
          details: result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }, { status: 500 });
      }

      console.log("‚úÖ [SEND-IMAGE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");

      return NextResponse.json({
        success: true,
        message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram",
        result: result
      });

    } catch (telegramError) {
      console.error("‚ùå [SEND-IMAGE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", telegramError);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram",
        details: telegramError instanceof Error ? telegramError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 });
    }

  } catch (error) {
    console.error("‚ùå [SEND-IMAGE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 