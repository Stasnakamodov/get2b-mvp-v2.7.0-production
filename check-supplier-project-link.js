require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function analyzeSupplierProjectConnection() {
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ò –ü–û–°–¢–ê–í–©–ò–ö–û–í –° –ü–†–û–ï–ö–¢–ê–ú–ò\n');
  console.log('=' .repeat(60));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    console.log('\nüìä –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶:');
    console.log('-'.repeat(40));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ catalog_verified_suppliers
    const { data: verifiedSuppliers, error: vsError } = await supabase
      .from('catalog_verified_suppliers')
      .select('*')
      .limit(1);
    
    if (!vsError && verifiedSuppliers?.[0]) {
      console.log('\n‚úÖ catalog_verified_suppliers:');
      console.log('   –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:', Object.keys(verifiedSuppliers[0]).slice(0, 5).join(', '));
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ catalog_user_suppliers
    const { data: userSuppliers, error: usError } = await supabase
      .from('catalog_user_suppliers')
      .select('*')
      .limit(1);
    
    if (!usError && userSuppliers?.[0]) {
      console.log('\n‚úÖ catalog_user_suppliers:');
      console.log('   –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:', Object.keys(userSuppliers[0]).slice(0, 5).join(', '));
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ projects
    const { data: projects, error: pError } = await supabase
      .from('projects')
      .select('*')
      .limit(1);
    
    if (!pError && projects?.[0]) {
      console.log('\n‚úÖ projects:');
      console.log('   –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:', Object.keys(projects[0]).slice(0, 5).join(', '));
      console.log('   payment_method:', projects[0].payment_method || '–ù–ï–¢');
      console.log('   company_data:', projects[0].company_data ? '–ï–°–¢–¨ (JSON)' : '–ù–ï–¢');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ project_specifications
    const { data: specs, error: sError } = await supabase
      .from('project_specifications')
      .select('*')
      .limit(1);
    
    if (!sError && specs?.[0]) {
      console.log('\n‚úÖ project_specifications:');
      console.log('   –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:', Object.keys(specs[0]).slice(0, 5).join(', '));
      console.log('   supplier_name:', specs[0].supplier_name || '–ù–ï–¢/–ü–£–°–¢–û');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ project_requisites
    const { data: requisites, error: rError } = await supabase
      .from('project_requisites')
      .select('*')
      .limit(1);
    
    if (!rError && requisites?.[0]) {
      console.log('\n‚úÖ project_requisites:');
      console.log('   –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:', Object.keys(requisites[0]).slice(0, 5).join(', '));
      console.log('   type:', requisites[0].type || '–ù–ï–¢');
      console.log('   data:', requisites[0].data ? '–ï–°–¢–¨ (JSON)' : '–ù–ï–¢');
    }
    
    // 2. –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ò –ß–ï–†–ï–ó supplier_name
    console.log('\n\nüîó –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô:');
    console.log('-'.repeat(40));
    
    // –ò—â–µ–º –¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç –≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö
    const { data: technoSupplier } = await supabase
      .from('catalog_verified_suppliers')
      .select('*')
      .or('name.ilike.%–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç%,company_name.ilike.%–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç%')
      .single();
    
    if (technoSupplier) {
      console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫ "–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç –û–û–û":');
      console.log('   ID:', technoSupplier.id);
      console.log('   name:', technoSupplier.name);
      console.log('   company_name:', technoSupplier.company_name);
    } else {
      console.log('\n‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ "–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç –û–û–û" –ù–ï –ù–ê–ô–î–ï–ù');
    }
    
    // –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —ç—Ç–∏–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
    const { data: projectsWithSupplier } = await supabase
      .from('project_specifications')
      .select('project_id, supplier_name')
      .or('supplier_name.ilike.%–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç%,supplier_name.ilike.%–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç –û–û–û%')
      .limit(5);
    
    if (projectsWithSupplier?.length > 0) {
      console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç—ã —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç:');
      projectsWithSupplier.forEach(p => {
        console.log(`   - Project ID: ${p.project_id}, Supplier: ${p.supplier_name}`);
      });
    } else {
      console.log('\n‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç');
    }
    
    // 3. –ü–†–û–í–ï–†–ö–ê –†–ï–ö–í–ò–ó–ò–¢–û–í
    console.log('\n\nüí≥ –ü–†–û–í–ï–†–ö–ê –†–ï–ö–í–ò–ó–ò–¢–û–í –ü–û–°–¢–ê–í–©–ò–ö–û–í:');
    console.log('-'.repeat(40));
    
    if (projectsWithSupplier?.length > 0) {
      const projectIds = projectsWithSupplier.map(p => p.project_id);
      const { data: projectRequisites } = await supabase
        .from('project_requisites')
        .select('project_id, type, data')
        .in('project_id', projectIds)
        .limit(3);
      
      if (projectRequisites?.length > 0) {
        console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤:');
        projectRequisites.forEach(r => {
          console.log(`   - Project: ${r.project_id}`);
          console.log(`     Type: ${r.type}`);
          console.log(`     Data keys: ${r.data ? Object.keys(r.data).join(', ') : '–ü–£–°–¢–û'}`);
        });
      } else {
        console.log('\n‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç');
      }
    }
    
    // 4. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
    console.log('\n\nüìù –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log('=' .repeat(60));
    
    console.log('\n‚ùó –ö–õ–Æ–ß–ï–í–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    console.log('1. –ù–ï–¢ –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ supplier_id –º–µ–∂–¥—É –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏');
    console.log('2. –°–≤—è–∑—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ supplier_name');
    console.log('3. supplier_name –º–æ–∂–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Ç–æ—á–Ω–æ (–¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç vs –¢–µ—Ö–Ω–æ–ö–æ–º–ø–ª–µ–∫—Ç –û–û–û)');
    console.log('4. –ù–ï–¢ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —á—Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    
    console.log('\n‚ö†Ô∏è  –¢–ï–ö–£–©–ê–Ø –õ–û–ì–ò–ö–ê:');
    console.log('1. –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É —Å supplier_name');
    console.log('2. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ supplier_name –ø–æ–ø–∞–¥–∞–µ—Ç –≤ project_specifications');
    console.log('3. –†–µ–∫–≤–∏–∑–∏—Ç—ã (—à–∞–≥–∏ 4-5) –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –í–†–£–ß–ù–£–Æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    console.log('4. –ù–ï–¢ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏!');
    
    console.log('\nüö´ –û–ë–ï–©–ê–ù–ò–Ø –í UI vs –†–ï–ê–õ–¨–ù–û–°–¢–¨:');
    console.log('UI –æ–±–µ—â–∞–µ—Ç: "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"');
    console.log('–†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –ù–ï–¢ –ö–û–î–ê –¥–ª—è —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞');
    console.log('');
    console.log('UI –æ–±–µ—â–∞–µ—Ç: "–†–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"');
    console.log('–†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –ù–ï–¢ –ö–û–î–ê –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
    
    console.log('\n‚úÖ –ß–¢–û –ù–£–ñ–ù–û –°–î–ï–õ–ê–¢–¨:');
    console.log('1. –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ supplier_name');
    console.log('2. –î–æ–±–∞–≤–∏—Ç—å API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ create-project –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    console.log('4. –ò–ª–∏ —É–±—Ä–∞—Ç—å –æ–±–µ—â–∞–Ω–∏—è –∏–∑ UI');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

analyzeSupplierProjectConnection();