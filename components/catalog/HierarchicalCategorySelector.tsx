'use client'

import React, { useState, useEffect } from 'react'
import { ChevronRight, ChevronLeft, Package, Search, Grid3X3, List, ArrowLeft } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import type { CatalogCategory, CategoryTree } from '@/lib/types'

interface HierarchicalCategorySelectorProps {
  onCategorySelect: (category: CatalogCategory) => void
  onClose: () => void
  userId?: string
  authToken?: string
  selectedRoom?: 'orange' | 'blue'
}

export default function HierarchicalCategorySelector({ 
  onCategorySelect, 
  onClose, 
  userId, 
  authToken,
  selectedRoom = 'orange'
}: HierarchicalCategorySelectorProps) {
  const [categoryTrees, setCategoryTrees] = useState<CategoryTree[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    loadHierarchicalCategories()
  }, [selectedRoom]) // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–Ω–∞—Ç—ã

  const loadHierarchicalCategories = async () => {
    try {
      setLoading(true)
      setError(null)

      console.log(`üå≥ [HierarchicalSelector] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è ${selectedRoom} –∫–æ–º–Ω–∞—Ç—ã`)

      const headers: Record<string, string> = {
        'Content-Type': 'application/json'
      }

      if (authToken) {
        headers['Authorization'] = `Bearer ${authToken}`
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º selectedRoom –≤ room_type –¥–ª—è API
      const roomType = selectedRoom === 'orange' ? 'verified' : 'user'
      const url = `/api/catalog/categories`

      const response = await fetch(url, {
        method: 'GET',
        headers
      })

      const data = await response.json()

      if (!data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
      }

      console.log(`‚úÖ [HierarchicalSelector] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${data.categoryTrees.length}`)
      setCategoryTrees(data.categoryTrees)

    } catch (error) {
      console.error('‚ùå [HierarchicalSelector] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
      setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    } finally {
      setLoading(false)
    }
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –ø–æ–∏—Å–∫—É
  const filteredCategories = React.useMemo(() => {
    if (!searchQuery.trim()) {
      return categoryTrees
    }

    return categoryTrees.filter(tree => 
      tree.main_category.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      tree.subcategories.some(sub => 
        sub.name.toLowerCase().includes(searchQuery.toLowerCase())
      )
    )
  }, [categoryTrees, searchQuery])

  const handleSubcategoryClick = (subcategory: CatalogCategory, mainCategory: CatalogCategory) => {
    console.log(`üéØ [HierarchicalSelector] –í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${subcategory.name} –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${mainCategory.name}`)
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const categoryWithPath = {
      ...subcategory,
      category_path: `${mainCategory.name} ‚Üí ${subcategory.name}`
    }
    onCategorySelect(categoryWithPath)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="text-red-500 text-xl mb-4">‚ö†Ô∏è</div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <Button onClick={loadHierarchicalCategories} variant="outline">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col h-full">
      {/* Header - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–ª—è inline –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}

      {/* Search and Controls */}
      <div className="border-b border-gray-200 p-2">
        <div className="flex items-center justify-between mb-2">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="relative flex-1 max-w-md">
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
              <Search className="w-4 h-4 text-gray-400" />
            </div>
            <Input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 border-2 border-black focus:border-gray-400"
            />
          </div>

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞ */}
          <div className="flex border-2 border-black ml-4">
            <button
              onClick={() => setViewMode('grid')}
              className={`p-2 ${viewMode === 'grid' 
                ? 'bg-black text-white' 
                : 'bg-white text-black hover:bg-gray-50'
              }`}
            >
              <Grid3X3 className="w-4 h-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`p-2 border-l-2 border-black ${viewMode === 'list' 
                ? 'bg-black text-white' 
                : 'bg-white text-black hover:bg-gray-50'
              }`}
            >
              <List className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Stats */}
        <div className="text-sm text-gray-600">
          –ù–∞–π–¥–µ–Ω–æ: {filteredCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        </div>
      </div>

      {/* Categories Content */}
      <div className="flex-1 overflow-y-auto p-4">
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ */}
        <CategoriesWithSubcategoriesView
          categoryTrees={filteredCategories}
          viewMode={viewMode}
          searchQuery={searchQuery}
          selectedRoom={selectedRoom}
          onSubcategorySelect={handleSubcategoryClick}
        />
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
interface CategoriesWithSubcategoriesViewProps {
  categoryTrees: CategoryTree[]
  viewMode: 'grid' | 'list'
  searchQuery: string
  selectedRoom: 'orange' | 'blue'
  onSubcategorySelect: (subcategory: CatalogCategory, mainCategory: CatalogCategory) => void
}

function CategoriesWithSubcategoriesView({ 
  categoryTrees, 
  viewMode, 
  searchQuery,
  selectedRoom,
  onSubcategorySelect 
}: CategoriesWithSubcategoriesViewProps) {
  if (categoryTrees.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="text-gray-400 text-xl mb-4">üì¶</div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
      </div>
    )
  }

  if (viewMode === 'list') {
    // –†–µ–∂–∏–º —Å–ø–∏—Å–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return (
      <div className="space-y-3">
        {categoryTrees.map((tree) => (
          <div
            key={tree.main_category.id || tree.main_category.key}
            className="border-2 border-gray-200 rounded-lg bg-white p-4"
          >
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
            <button
              onClick={() => onSubcategorySelect(tree.main_category, tree.main_category)}
              className="w-full flex items-center gap-4 mb-3 p-3 -m-3 rounded-lg hover:bg-blue-50 transition-all duration-200 group"
            >
              <div className="flex-1 text-left">
                <h3 className="font-medium text-lg text-gray-900 group-hover:text-blue-700">{tree.main_category.name}</h3>
                <p className="text-sm text-gray-600">{tree.main_category.description}</p>
              </div>
              <div className="text-sm text-gray-500">
                <span className="font-medium">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º</span>
                <span className="ml-2">‚Üí</span>
              </div>
            </button>
            
            {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å—Ç—Ä–æ–∫—É - —Å–∫—Ä—ã—Ç—ã –ø–æ–∫–∞ —É –Ω–∞—Å –ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ */}
            {tree.subcategories && tree.subcategories.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {tree.subcategories.map((subcategory) => (
                  <button
                    key={subcategory.id || subcategory.key}
                    onClick={() => onSubcategorySelect(subcategory, tree.main_category)}
                    className="flex items-center gap-2 px-3 py-2 bg-gray-50 hover:bg-blue-50 border border-gray-200 hover:border-blue-300 rounded-lg transition-all duration-200 group"
                  >
                    <span className="text-sm font-medium text-gray-700 group-hover:text-blue-700">
                      {subcategory.name}
                    </span>
                    <span className="text-xs text-gray-500 ml-1">
                      {subcategory.products_count}
                    </span>
                    {subcategory.rooms_info?.has_verified && (
                      <span className="text-orange-600">üß°</span>
                    )}
                    {subcategory.rooms_info?.has_user && (
                      <span className="text-blue-600">üîµ</span>
                    )}
                  </button>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    )
  }

  // –†–µ–∂–∏–º —Å–µ—Ç–∫–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4">
      {categoryTrees.map((tree) => (
        <CompactCategoryWithSubcategories
          key={tree.main_category.id || tree.main_category.key}
          tree={tree}
          searchQuery={searchQuery}
          selectedRoom={selectedRoom}
          onSubcategorySelect={onSubcategorySelect}
        />
      ))}
    </div>
  )
}

// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
interface CompactCategoryWithSubcategoriesProps {
  tree: CategoryTree
  searchQuery: string
  selectedRoom: 'orange' | 'blue'
  onSubcategorySelect: (subcategory: CatalogCategory, mainCategory: CatalogCategory) => void
}

function CompactCategoryWithSubcategories({ 
  tree, 
  searchQuery,
  selectedRoom,
  onSubcategorySelect 
}: CompactCategoryWithSubcategoriesProps) {
  const { main_category, subcategories, total_products, total_suppliers } = tree

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–∏—Å–∫—É
  const filteredSubcategories = subcategories.filter(sub =>
    sub.name.toLowerCase().includes(searchQuery.toLowerCase())
  )

  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫ –∏ –Ω–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  if (searchQuery.trim() && 
      !main_category.name.toLowerCase().includes(searchQuery.toLowerCase()) && 
      filteredSubcategories.length === 0) {
    return null
  }

  return (
    <div className="border border-gray-200 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–∫ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
      <div className="p-3 bg-gray-50 border-b border-gray-200">
        <div className="flex items-center gap-2 mb-2">
          <div className="flex-1">
            <h3 className="text-base font-medium text-gray-900 mb-1">{main_category.name}</h3>
            <p className="text-xs text-gray-600 line-clamp-2">{main_category.description}</p>
          </div>
        </div>
        
        <div className="flex items-center justify-between text-xs text-gray-500 mt-2">
          <span>{total_products} —Ç–æ–≤.</span>
          <span>{total_suppliers} –ø–æ—Å—Ç.</span>
          <span>{filteredSubcategories.length} —Ä–∞–∑–¥.</span>
        </div>
      </div>

      {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ */}
      <div className="p-2">
        {filteredSubcategories.length > 0 ? (
          <div className="space-y-1">
            {filteredSubcategories.map((subcategory) => (
              <button
                key={subcategory.id || subcategory.key}
                onClick={() => onSubcategorySelect(subcategory, main_category)}
                className="w-full flex items-center justify-between p-2.5 text-left hover:bg-blue-50 hover:border-blue-200 border border-transparent transition-all duration-200 group rounded-lg"
              >
                <div className="flex items-center gap-2 flex-1">
                  <span className="text-lg">{subcategory.icon}</span>
                  <span className="text-sm font-medium text-gray-700 group-hover:text-blue-700 leading-tight">
                    {subcategory.name}
                  </span>
                </div>
                
                <div className="flex items-center gap-2 text-xs text-gray-500">
                  <span className="font-medium">{subcategory.products_count}</span>
                  {subcategory.rooms_info?.has_verified && (
                    <span className="text-orange-600">üß°</span>
                  )}
                  {subcategory.rooms_info?.has_user && (
                    <span className="text-blue-600">üîµ</span>
                  )}
                  <ChevronRight className="w-4 h-4 group-hover:text-blue-600" />
                </div>
              </button>
            ))}
          </div>
        ) : searchQuery.trim() ? (
          <div className="text-center py-4 text-gray-500 text-sm">
            –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </div>
        ) : (
          <div className="text-center py-4 text-gray-500 text-sm">
            –ù–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
          </div>
        )}
      </div>
    </div>
  )
}



