/**
 * ü§ñ Universal AI Service
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Bot Hub, OpenAI, Anthropic —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
 */

import { botHubAIService } from './BotHubAIService';

interface InvoiceItem {
  name: string;
  quantity: number;
  price: number;
  total: number;
  code?: string;
  unit?: string;
}

interface ParsedInvoice {
  items: InvoiceItem[];
  invoiceInfo: {
    number?: string;
    date?: string;
    seller?: string;
    buyer?: string;
    totalAmount?: string;
    currency?: string;
  };
  bankInfo?: {
    bankName?: string;
    accountNumber?: string;
    swift?: string;
  };
}

export class UniversalAIService {
  /**
   * üß† –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏–Ω–≤–æ–π—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –º–µ–∂–¥—É AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
   */
  async processInvoiceWithAI(ocrText: string, userId: string = 'invoice_parser'): Promise<ParsedInvoice> {
    console.log("ü§ñ –ó–∞–ø—É—Å–∫ Universal AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–æ–π—Å–∞...");
    console.log("üìÑ –î–ª–∏–Ω–∞ OCR —Ç–µ–∫—Å—Ç–∞:", ocrText.length);

    // 1. –ü—Ä–æ–±—É–µ–º Bot Hub AI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (process.env.BOTHUB_API_KEY) {
      try {
        console.log("üîó –ü—Ä–æ–±—É–µ–º Bot Hub AI...");
        const result = await botHubAIService.processInvoiceWithAI(ocrText, userId);
        console.log("‚úÖ Bot Hub AI —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–Ω–≤–æ–π—Å!");
        return result;
      } catch (error) {
        console.log("‚ö†Ô∏è Bot Hub AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ OpenAI...");
      }
    }

    // 2. –ü—Ä–æ–±—É–µ–º OpenAI (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
    if (process.env.OPENAI_API_KEY) {
      try {
        console.log("üîó –ü—Ä–æ–±—É–µ–º OpenAI API...");
        const result = await this.processWithOpenAI(ocrText);
        console.log("‚úÖ OpenAI —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–Ω–≤–æ–π—Å!");
        return result;
      } catch (error) {
        console.log("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Anthropic...");
      }
    }

    // 3. –ü—Ä–æ–±—É–µ–º Anthropic (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
    if (process.env.ANTHROPIC_API_KEY) {
      try {
        console.log("üîó –ü—Ä–æ–±—É–µ–º Anthropic API...");
        const result = await this.processWithAnthropic(ocrText);
        console.log("‚úÖ Anthropic —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–Ω–≤–æ–π—Å!");
        return result;
      } catch (error) {
        console.log("‚ö†Ô∏è Anthropic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º regex fallback...");
      }
    }

    // 4. Fallback –Ω–∞ regex –ø–∞—Ä—Å–∏–Ω–≥
    console.log("üîÑ –í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º regex fallback...");
    return this.processWithRegexFallback(ocrText);
  }

  /**
   * üü¢ OpenAI GPT-4 processing
   */
  private async processWithOpenAI(ocrText: string): Promise<ParsedInvoice> {
    const prompt = this.createInvoicePrompt(ocrText);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.1,
        max_tokens: 2000,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices?.[0]?.message?.content || '';

    return this.parseAIResponse(aiResponse);
  }

  /**
   * üîµ Anthropic Claude processing
   */
  private async processWithAnthropic(ocrText: string): Promise<ParsedInvoice> {
    const prompt = this.createInvoicePrompt(ocrText);

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': process.env.ANTHROPIC_API_KEY!,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01',
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 2000,
        temperature: 0.1,
        messages: [{ role: 'user', content: prompt }],
      }),
    });

    if (!response.ok) {
      throw new Error(`Anthropic API error: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.content?.[0]?.text || '';

    return this.parseAIResponse(aiResponse);
  }

  /**
   * üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
   */
  private createInvoicePrompt(ocrText: string): string {
    return `
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–æ–π—Å–æ–≤. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ OCR —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–¢–ï–ö–°–¢ –ò–ù–í–û–ô–°–ê:
${ocrText}

–¢–†–ï–ë–£–ï–ú–´–ô –§–û–†–ú–ê–¢ JSON (—Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ):
{
  "items": [
    {
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
      "quantity": 1,
      "price": 100.00,
      "total": 100.00,
      "code": "ITEM-001",
      "unit": "—à—Ç"
    }
  ],
  "invoiceInfo": {
    "number": "INV-2025-001",
    "date": "31/03/2025",
    "seller": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø—Ä–æ–¥–∞–≤—Ü–∞",
    "buyer": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
    "totalAmount": "1000.00",
    "currency": "RUB"
  },
  "bankInfo": {
    "bankName": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞",
    "accountNumber": "1234567890",
    "swift": "BANKCODE"
  }
}

–ü–†–ê–í–ò–õ–ê:
1. –ò–∑–≤–ª–µ–∫–∞–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
2. –¶–µ–Ω—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ —á–∏—Å–ª–∞ (—É–±–∏—Ä–∞–π –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ)
3. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π, –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º
4. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
5. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ - –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ items: []
`;
  }

  /**
   * üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI
   */
  private parseAIResponse(aiResponse: string): ParsedInvoice {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in AI response');
      }

      const jsonString = jsonMatch[0];
      const parsed = JSON.parse(jsonString);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      return {
        items: Array.isArray(parsed.items) ? parsed.items : [],
        invoiceInfo: parsed.invoiceInfo || {},
        bankInfo: parsed.bankInfo || {}
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞:", error);
      return this.createEmptyResult();
    }
  }

  /**
   * üîÑ Regex fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
   */
  private processWithRegexFallback(ocrText: string): ParsedInvoice {
    console.log("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º regex fallback –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–≤–æ–π—Å–∞...");

    const result: ParsedInvoice = {
      items: [],
      invoiceInfo: {}
    };

    // –ü—Ä–æ—Å—Ç—ã–µ regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    const invoiceNumberMatch = ocrText.match(/(?:–∏–Ω–≤–æ–π—Å|—Å—á–µ—Ç|invoice)[\s#‚Ññ]*([a-z0-9\-_\/]+)/i);
    if (invoiceNumberMatch) {
      result.invoiceInfo.number = invoiceNumberMatch[1];
    }

    const dateMatch = ocrText.match(/(\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4})/);
    if (dateMatch) {
      result.invoiceInfo.date = dateMatch[1];
    }

    const totalMatch = ocrText.match(/(?:–∏—Ç–æ–≥–æ|–≤—Å–µ–≥–æ|total)[\s:]*(\d+[.,]?\d*)/i);
    if (totalMatch) {
      result.invoiceInfo.totalAmount = totalMatch[1].replace(',', '.');
    }

    console.log("‚úÖ Regex fallback –∑–∞–≤–µ—Ä—à–µ–Ω:", result);
    return result;
  }

  /**
   * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  private createEmptyResult(): ParsedInvoice {
    return {
      items: [],
      invoiceInfo: {},
      bankInfo: {}
    };
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  async testAIProviders(): Promise<{
    botHub: boolean;
    openai: boolean;
    anthropic: boolean;
  }> {
    const results = {
      botHub: false,
      openai: false,
      anthropic: false
    };

    // –¢–µ—Å—Ç Bot Hub
    if (process.env.BOTHUB_API_KEY) {
      try {
        results.botHub = await botHubAIService.testConnection();
      } catch (error) {
        console.log("Bot Hub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    }

    // –¢–µ—Å—Ç OpenAI
    if (process.env.OPENAI_API_KEY) {
      try {
        const response = await fetch('https://api.openai.com/v1/models', {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          },
        });
        results.openai = response.ok;
      } catch (error) {
        console.log("OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    }

    // –¢–µ—Å—Ç Anthropic
    if (process.env.ANTHROPIC_API_KEY) {
      try {
        const response = await fetch('https://api.anthropic.com/v1/messages', {
          method: 'POST',
          headers: {
            'x-api-key': process.env.ANTHROPIC_API_KEY!,
            'Content-Type': 'application/json',
            'anthropic-version': '2023-06-01',
          },
          body: JSON.stringify({
            model: 'claude-3-5-sonnet-20241022',
            max_tokens: 10,
            messages: [{ role: 'user', content: 'test' }],
          }),
        });
        results.anthropic = response.ok;
      } catch (error) {
        console.log("Anthropic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    }

    return results;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const universalAIService = new UniversalAIService();