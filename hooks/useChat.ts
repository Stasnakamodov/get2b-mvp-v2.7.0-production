import { useState, useEffect, useCallback, useRef } from 'react';
import { 
  ChatMessage, 
  ChatRoom,
  SendMessageRequest,
  AIResponseRequest,
  MessageSenderType,
  PaginationOptions
} from '@/lib/types/chat';
import { useChatPolling } from './useChatPolling';

// –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º
export function useChat(roomId?: string, userId?: string) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [isSending, setIsSending] = useState(false);

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const [hasMore, setHasMore] = useState(true);
  const [offset, setOffset] = useState(0);
  const limit = 50;

  // üóÑÔ∏è –ö–≠–® —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –∏–∑ –∫–æ–º–º–∏—Ç–∞ 1a0fff2
  const messagesCache = useRef<Record<string, ChatMessage[]>>({});
  // –†–µ—Ñ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  const loadingRef = useRef(false);
  
  // üö´ –ë–õ–û–ö–ò–†–ê–¢–û–† polling –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –ü–ï–†–ï–ú–ï–©–ï–ù –ù–ê–í–ï–†–• –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const recentlySentRef = useRef<Set<string>>(new Set());

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const loadMessages = useCallback(async (options?: PaginationOptions & { quiet?: boolean }) => {
    if (!roomId || loadingRef.current) return;

    // üõ°Ô∏è –ü–†–û–°–¢–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø ID - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if (typeof roomId !== 'string' || roomId.trim().length === 0) {
      console.warn('‚ùå useChat: Invalid roomId:', roomId);
      return;
    }

    try {
      loadingRef.current = true;
      // üîß –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loading –µ—Å–ª–∏ –Ω–µ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
      if (!options?.quiet) {
        setIsLoading(true);
      }

      const params = new URLSearchParams({
        room_id: roomId,
        limit: String(options?.limit || limit),
        offset: String(options?.offset || offset)
      });

      console.log('üì° useChat: Fetching messages from:', `/api/chat/messages?${params}`);
      const response = await fetch(`/api/chat/messages?${params}`);
      
      // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–ê –°–ï–†–í–ï–†–ê
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('üì¶ useChat: Received data:', { success: data.success, count: data.messages?.length });

      if (data.success) {
        if (options?.offset === 0) {
          // üõ°Ô∏è –î–ï–î–£–ü–õ–ò–¶–ò–†–û–í–ê–ù–ò–ï –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
          const uniqueMessages = data.messages.filter((msg: ChatMessage, index: number, arr: ChatMessage[]) => 
            arr.findIndex((m: ChatMessage) => m.id === msg.id) === index
          );
          
          // üóÑÔ∏è –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–® - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –∏–∑ –∫–æ–º–º–∏—Ç–∞ 1a0fff2
          if (roomId) {
            messagesCache.current[roomId] = uniqueMessages;
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ${uniqueMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫—ç—à –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
          }
          
          setMessages(uniqueMessages);
          console.log('‚úÖ useChat: Messages loaded successfully:', uniqueMessages?.length, 
                      uniqueMessages.length !== data.messages.length ? `(${data.messages.length - uniqueMessages.length} –¥—É–±–ª–µ–π —É–¥–∞–ª–µ–Ω–æ)` : '');
        } else {
          // üõ°Ô∏è –î–ï–î–£–ü–õ–ò–¶–ò–†–û–í–ê–ù–ò–ï –ø—Ä–∏ –¥–æ–∑–∞–≥—Ä—É–∑–∫–µ
          setMessages(prev => {
            const combined = [...data.messages, ...prev];
            const uniqueMessages = combined.filter((msg: ChatMessage, index: number, arr: ChatMessage[]) => 
              arr.findIndex((m: ChatMessage) => m.id === msg.id) === index
            );
            
            // üóÑÔ∏è –û–ë–ù–û–í–õ–Ø–ï–ú –ö–≠–® - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –∏–∑ –∫–æ–º–º–∏—Ç–∞ 1a0fff2
            if (roomId) {
              messagesCache.current[roomId] = uniqueMessages;
            }
            
            return uniqueMessages;
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        setOffset((options?.offset || 0) + data.messages.length);
        setHasMore(data.messages.length === (options?.limit || limit));
      } else {
        console.error('‚ùå useChat: Failed to load messages:', data.error);
      }
    } catch (error) {
      // üõ°Ô∏è –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
        console.warn('üåê useChat: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error.message);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
      } else if (error instanceof Error && error.message.includes('HTTP')) {
        console.error('üö´ useChat: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', error.message);
      } else {
        console.error('üí• useChat: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      }
    } finally {
      // üîß –¢–æ–ª—å–∫–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º loading –µ—Å–ª–∏ –Ω–µ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
      if (!options?.quiet) {
        setIsLoading(false);
      }
      loadingRef.current = false;
    }
  }, [roomId, limit, offset]);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback(async (
    content: string, 
    options?: {
      message_type?: 'text' | 'file' | 'image';
      file_url?: string;
      file_name?: string;
      file_size?: number;
      reply_to_message_id?: string;
    }
  ) => {
    if (!roomId || !content.trim() || !userId) return null;

    try {
      setIsSending(true);

      const messageData: SendMessageRequest = {
        room_id: roomId,
        content: content.trim(),
        sender_type: 'user',
        sender_user_id: userId,
        sender_name: '–í—ã', // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ...options
      };

      const response = await fetch('/api/chat/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(messageData)
      });

      const data = await response.json();

      console.log('üì° API Response:', { status: response.status, data });

      if (data.success) {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É polling 
        // –¢–µ–ø–µ—Ä—å polling –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
        // recentlySentRef.current.add(data.message.id);
        // console.log('üì§ –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ:', data.message.id);
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (2 —Ü–∏–∫–ª–∞ polling)
        // setTimeout(() => {
        //   recentlySentRef.current.delete(data.message.id);
        //   console.log('üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.message.id);
        // }, 10000);
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        // –ü–æ–∑–≤–æ–ª—è–µ–º polling'—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        console.log('‚úÖ Message sent successfully, waiting for polling update:', data.message.id);
        
        // üóÑÔ∏è –û–ë–ù–û–í–õ–Ø–ï–ú –ö–≠–® –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –∏–∑ –∫–æ–º–º–∏—Ç–∞ 1a0fff2
        // –ù–æ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ messages
        // if (roomId) {
        //   messagesCache.current[roomId] = updated;
        // }
        
        return data.message;
      } else {
        console.error('‚ùå API returned error:', {
          error: data.error,
          details: data.details,
          status: response.status
        });
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.error}`);
        return null;
      }
    } catch (error) {
      console.error('Error sending message:', error);
      return null;
    } finally {
      setIsSending(false);
    }
  }, [roomId, userId]);

  // üóëÔ∏è –£–î–ê–õ–ï–ù–û: requestAIResponse —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω –≤ sendMessageWithAI

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π AI –æ—Ç–≤–µ—Ç
  const sendMessageWithAI = useCallback(async (
    content: string,
    aiContext?: string
  ) => {
    // üö´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: AI API —Å–æ–∑–¥–∞–µ—Ç –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º
    // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º sendMessage –æ—Ç–¥–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI API (–±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ sendMessage):', content);
    
    if (!roomId || !content.trim() || !userId) return null;

    try {
      setIsSending(true);

      const requestData: AIResponseRequest = {
        room_id: roomId,
        user_message: content.trim(),
        ai_context: aiContext || 'general',
        user_id: userId
      };

      const response = await fetch('/api/chat/ai-response', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

      const data = await response.json();

      if (data.success) {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –¥–ª—è AI —Å–æ–æ–±—â–µ–Ω–∏–π: –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        // üîÑ –ó–ê–ú–ï–ù–Ø–ï–ú –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID
        // recentlySentRef.current.delete(`temp-user-${contentHash}`);
        // recentlySentRef.current.delete(`temp-ai-${contentHash}`);
        
        // recentlySentRef.current.add(data.user_message.id);
        // recentlySentRef.current.add(data.ai_message.id);
        // console.log('üîÑ –ó–∞–º–µ–Ω–∏–ª–∏ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID:', { user: data.user_message.id, ai: data.ai_message.id });
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        // setTimeout(() => {
        //   recentlySentRef.current.delete(data.user_message.id);
        //   recentlySentRef.current.delete(data.ai_message.id);
        //   console.log('üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ AI —Å–æ–æ–±—â–µ–Ω–∏—è:', { user: data.user_message.id, ai: data.ai_message.id });
        // }, 10000);
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ä–∞–∑—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        // –ü–æ–∑–≤–æ–ª—è–µ–º polling'—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        console.log('‚úÖ AI –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω, waiting for polling update:', { userMsg: data.user_message.id, aiMsg: data.ai_message.id });
        
        // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–ê —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –°–†–ê–ó–£
        // setMessages(prev => {
        //   const updated = [...prev, data.user_message, data.ai_message];
          
        //   // üóÑÔ∏è –û–ë–ù–û–í–õ–Ø–ï–ú –ö–≠–®
        //   if (roomId) {
        //     messagesCache.current[roomId] = updated;
        //   }
          
        //   return updated;
        // });
        
        return {
          userMessage: data.user_message,
          aiMessage: data.ai_message
        };
      } else {
        console.error('Failed to get AI response:', data.error);
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        // recentlySentRef.current.delete(`temp-user-${contentHash}`);
        // recentlySentRef.current.delete(`temp-ai-${contentHash}`);
        return null;
      }
    } catch (error) {
      console.error('Error getting AI response:', error);
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      // const contentHash = content.trim().substring(0, 50);
      // recentlySentRef.current.delete(`temp-user-${contentHash}`);
      // recentlySentRef.current.delete(`temp-ai-${contentHash}`);
      return null;
    } finally {
      setIsSending(false);
    }
  }, [roomId, userId]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
  const loadMoreMessages = useCallback(() => {
    if (hasMore && !isLoading) {
      loadMessages({ limit, offset });
    }
  }, [hasMore, isLoading, loadMessages, limit, offset]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç–∏
  const markAsRead = useCallback(async (messageIds: string[]) => {
    if (!roomId || messageIds.length === 0) return;

    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setMessages(prev => 
        prev.map(msg => 
          messageIds.includes(msg.id) 
            ? { ...msg, is_read: true }
            : msg
        )
      );
    } catch (error) {
      console.error('Error marking messages as read:', error);
    }
  }, [roomId]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  const resetChat = useCallback(() => {
    console.log('üîÑ resetChat: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞');
    setMessages([]);
    setOffset(0);
    setHasMore(true);
    setIsLoading(false);
    setIsTyping(false);
    setIsSending(false);
    
    // üßπ –û–ß–ò–©–ê–ï–ú –í–°–Æ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–Ω–∞—Ç—ã
    recentlySentRef.current.clear();
    console.log('üßπ –û—á–∏—â–µ–Ω–∞ –í–°–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—É—é)');
  }, []);

  // Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ polling
  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–∫–ª—é—á–∞–µ–º polling —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Å –∑–∞—â–∏—Ç–æ–π
  const { forceUpdate: forcePollingUpdate } = useChatPolling({
    roomId,
    onNewMessage: (newMessage) => {
      // üõ°Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      if (loadingRef.current) {
        console.log('‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º polling –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞');
        return;
      }
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –£–±–∏—Ä–∞–µ–º –í–°–Æ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É polling
      // –¢–µ–ø–µ—Ä—å polling –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
      // if (recentlySentRef.current.has(newMessage.id)) {
      //   console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ polling (–ø–æ ID):', newMessage.id);
      //   return;
      // }
      
      // üö´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      // const contentHash = newMessage.content.substring(0, 50);
      // const tempUserKey = `temp-user-${contentHash}`;
      // const tempAiKey = `temp-ai-${contentHash}`;
      
      // if (recentlySentRef.current.has(tempUserKey) || recentlySentRef.current.has(tempAiKey)) {
      //   console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ polling (–ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞):', contentHash);
      //   return;
      // }
      
      setMessages(prev => {
        // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const exists = prev.some(msg => {
          const isDuplicate = msg.id === newMessage.id;
          if (isDuplicate) {
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', { existingId: msg.id, newId: newMessage.id });
          }
          return isDuplicate;
        });
        
        if (!exists) {
          console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ polling:', newMessage.id);
          const updated = [...prev, newMessage];
          
          // üóÑÔ∏è –û–ë–ù–û–í–õ–Ø–ï–ú –ö–≠–® –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ polling - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û
          if (roomId) {
            messagesCache.current[roomId] = updated;
          }
          
          return updated;
        } else {
          console.log('üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', newMessage.id);
          return prev;
        }
      });
    },
    onMessagesUpdate: (updatedMessages) => {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –£–ø—Ä–æ—â–∞–µ–º –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ - polling —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º
      // if (loadingRef.current) {
      //   console.log('‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞');
      //   return;
      // }
      
      // üõ°Ô∏è –î–ï–î–£–ü–õ–ò–¶–ò–†–û–í–ê–ù–ò–ï —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const uniqueMessages = updatedMessages.filter((msg: ChatMessage, index: number, arr: ChatMessage[]) => 
        arr.findIndex((m: ChatMessage) => m.id === msg.id) === index
      );
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ${updatedMessages.length} ‚Üí ${uniqueMessages.length} (—É–¥–∞–ª–µ–Ω–æ ${updatedMessages.length - uniqueMessages.length} –¥—É–±–ª–µ–π)`);
      
      // üóÑÔ∏è –û–ë–ù–û–í–õ–Ø–ï–ú –ö–≠–® –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û
      if (roomId) {
        messagesCache.current[roomId] = uniqueMessages;
      }
      
      setMessages(uniqueMessages);
    },
    enabled: !!roomId && !isLoading && !isSending, // üîß –ù–ï –≤–∫–ª—é—á–∞–µ–º polling –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    pollingInterval: 8000 // üîß 8 —Å–µ–∫—É–Ω–¥ - —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  });

  // üóÑÔ∏è –ó–ê–ì–†–£–ó–ö–ê —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –° –ö–≠–®–ï–ú - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –∏–∑ –∫–æ–º–º–∏—Ç–∞ 1a0fff2
  useEffect(() => {
    if (roomId) {
      console.log('üîÑ useChat: Loading messages for room:', roomId);
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –£–±–∏—Ä–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      // recentlySentRef.current.clear();
      // console.log('üßπ –û—á–∏—â–µ–Ω–∞ –í–°–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—É—é) –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
      
      // üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–ï–ó RACE CONDITION
      const cachedMessages = messagesCache.current[roomId];
      if (cachedMessages && cachedMessages.length > 0) {
        console.log(`üíæ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ${cachedMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
        setMessages(cachedMessages);
        // üõë –£–ë–ò–†–ê–ï–ú "—Ç–∏—Ö—É—é" –∑–∞–≥—Ä—É–∑–∫—É - –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç race conditions
        // setTimeout(() => {
        //   loadMessages({ limit, offset: 0, quiet: true });
        // }, 1000);
      } else {
        console.log('üì° –ö—ç—à –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        resetChat();
        loadMessages({ limit, offset: 0 });
      }
    } else {
      console.log('‚ö†Ô∏è useChat: No roomId provided');
      resetChat();
    }
  }, [roomId, loadMessages, resetChat, limit]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    messages,
    isLoading,
    isTyping,
    isSending,
    hasMore,

    // –§—É–Ω–∫—Ü–∏–∏
    sendMessage,
    sendMessageWithAI,
    loadMoreMessages,
    markAsRead,
    resetChat,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    refreshMessages: () => loadMessages({ limit, offset: 0 }),
    forceUpdate: forcePollingUpdate,
  };
}