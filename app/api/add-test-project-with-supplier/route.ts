import { NextResponse } from 'next/server';
import { supabaseAdmin as supabase } from '@/lib/supabaseAdmin';

export async function POST() {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º...');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .insert({
        user_id: '86cc190d-0c80-463b-b0df-39a25b22365f',
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º',
        status: 'in_work',
        supplier_id: '53b75c1a-873f-4527-ba2d-08a45215bf05',
        supplier_type: 'catalog',
        supplier_data: {
          id: '53b75c1a-873f-4527-ba2d-08a45215bf05',
          name: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
          company_name: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
          category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
          country: '–ö–∏—Ç–∞–π',
          city: '–®—ç–Ω—å—á–∂—ç–Ω—å',
          contact_email: 'supplier@example.com',
          contact_phone: '+86 123 456 7890',
          website: 'https://supplier.example.com',
          contact_person: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
          min_order: '1000 USD',
          response_time: '24 —á–∞—Å–∞',
          employees: '100-500',
          established: '2010',
          payment_type: 'bank-transfer',
          payment_methods: {
            bank: {
              bank_name: 'Industrial and Commercial Bank of China',
              account_number: '1234567890123456',
              swift_code: 'ICBKCNBJ',
              bank_address: 'Beijing, China'
            }
          }
        },
        payment_method: 'bank-transfer',
        company_data: {
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
          email: 'test@example.com',
          phone: '+7 999 123 4567'
        },
        amount: 15000,
        currency: 'USD'
      })
      .select()
      .single();

    if (projectError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', projectError);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞' }, { status: 500 });
    }

    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', project.id);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { error: specsError } = await supabase
      .from('project_specifications')
      .insert({
        project_id: project.id,
        user_id: '86cc190d-0c80-463b-b0df-39a25b22365f',
        item_name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone 15',
        item_code: 'IPH15-128',
        quantity: 10,
        unit: '—à—Ç',
        price: 800,
        total: 8000,
        supplier_name: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'
      });

    if (specsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏:', specsError);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏' }, { status: 500 });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    const { error: reqError } = await supabase
      .from('project_requisites')
      .insert({
        project_id: project.id,
        user_id: '86cc190d-0c80-463b-b0df-39a25b22365f',
        type: 'bank',
        data: {
          bankName: 'Industrial and Commercial Bank of China',
          accountNumber: '1234567890123456',
          swift: 'ICBKCNBJ',
          recipientName: 'Supplier Company',
          bankAddress: 'Beijing, China'
        }
      });

    if (reqError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', reqError);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤' }, { status: 500 });
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');

    return NextResponse.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º —Å–æ–∑–¥–∞–Ω',
      project_id: project.id
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞' },
      { status: 500 }
    );
  }
} 