const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ API (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function getCategoryKeywords(categoryName) {
  const cleanName = categoryName.toLowerCase().replace(/[üè≠üöóüì±üè†üë∂üíäüëïüìö]/g, '').trim()
  
  // –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryMappings = {
    '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': ['–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '—Å—Ç–∞–Ω–∫–∏', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–∏–Ω–¥—É—Å—Ç—Ä–∏—è'],
    '–∞–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['–∞–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏', '–∞–≤—Ç–æ'],
    '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ it': ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–º–æ–±–∏–ª—å–Ω—ã–µ', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'],
    '–¥–æ–º –∏ –±—ã—Ç': ['–º–µ–±–µ–ª—å', '–∫—É—Ö–Ω—è', '–¥–æ–º–∞—à–Ω–∏–π', '–∏–Ω—Ç–µ—Ä—å–µ—Ä', '–±—ã—Ç'],
    '–¥–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': ['–¥–µ—Ç—Å–∫–∏–µ', '—Ä–µ–±–µ–Ω–æ–∫', '–∏–≥—Ä—É—à–∫–∏', '–º–ª–∞–¥–µ–Ω–µ—Ü'],
    '–∑–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç': ['–º–µ–¥–∏—Ü–∏–Ω—Å–∫', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–ø–æ—Ä—Ç', '—Ñ–∏—Ç–Ω–µ—Å', '–∫—Ä–∞—Å–æ—Ç–∞'],
    '–º–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞': ['—Ç–µ–∫—Å—Ç–∏–ª—å', '–æ–¥–µ–∂–¥–∞', '–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–∫—Ä–∞—Å–æ—Ç–∞', '–º–æ–¥–∞'],
    '–æ—Ñ–∏—Å –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ', '–æ—Ñ–∏—Å–Ω–∞—è', '—É—á–µ–±–Ω—ã–µ', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–æ—Ñ–∏—Å']
  }
  
  // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ —Å–ª–æ–≤–∞—Ä–µ
  for (const [category, keywords] of Object.entries(categoryMappings)) {
    if (cleanName.includes(category) || keywords.some(keyword => cleanName.includes(keyword))) {
      return keywords
    }
  }
  
  // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  return cleanName.split(' ').filter(word => word.length > 2)
}

function testCategoryMatch(supplierCategory, targetCategoryKeywords) {
  const supplierCategoryLower = supplierCategory.toLowerCase();
  
  return targetCategoryKeywords.some(keyword => 
    supplierCategoryLower.includes(keyword) && keyword.length > 3
  );
}

async function testCategoryLogic() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò\n');
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  const testSuppliers = [
    { name: '–¢–µ—Ö–Ω–æ–°—Ç—Ä–æ–π', category: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', expected_matches: ['–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'] },
    { name: '–û—Ñ–∏—Å–¢–µ—Ö–Ω–∏–∫–∞', category: '–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', expected_matches: ['–û—Ñ–∏—Å –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'] },
    { name: '–ú–µ–¥–¢–µ—Ö–Ω–∏–∫–∞', category: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', expected_matches: ['–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç'] },
    { name: '–¢–µ–∫—Å—Ç–∏–ª—å–ü–ª—é—Å', category: '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞', expected_matches: ['–ú–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞'] },
    { name: '–≠–ª–µ–∫—Ç—Ä–æ–ú–∏—Ä', category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', expected_matches: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT'] },
    { name: '–î–æ–º–ö–æ–º—Ñ–æ—Ä—Ç', category: '–ú–µ–±–µ–ª—å', expected_matches: ['–î–æ–º –∏ –±—ã—Ç'] },
    { name: '–î–µ—Ç—Å–∫–∏–π–ú–∏—Ä', category: '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', expected_matches: ['–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã'] },
    { name: '–°—Ç–∞–Ω–∫–æ–°—Ç—Ä–æ–π', category: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å', expected_matches: ['–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'] },
  ];
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏—Å—Ç–µ–º—ã
  const systemCategories = [
    '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT',
    '–î–æ–º –∏ –±—ã—Ç',
    '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã',
    '–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç',
    '–ú–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞',
    '–û—Ñ–∏—Å –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
  ];
  
  console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n');
  
  for (const supplier of testSuppliers) {
    console.log(`üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${supplier.name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${supplier.category}")`);
    
    let matchedCategories = [];
    
    for (const category of systemCategories) {
      const keywords = getCategoryKeywords(category);
      const isMatch = testCategoryMatch(supplier.category, keywords);
      
      if (isMatch) {
        matchedCategories.push(category);
      }
    }
    
    console.log(`   –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${matchedCategories.length > 0 ? matchedCategories.join(', ') : '–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π'}`);
    console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${supplier.expected_matches.join(', ')}`);
    
    const isCorrect = JSON.stringify(matchedCategories.sort()) === JSON.stringify(supplier.expected_matches.sort());
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${isCorrect ? '‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û' : '‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'}\n`);
  }
  
  console.log('üîç –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:\n');
  
  // –¢–µ—Å—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
  const problematicCases = [
    { supplier: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', target: '–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', shouldMatch: false },
    { supplier: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', target: '–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', shouldMatch: false },
    { supplier: 'IT —É—Å–ª—É–≥–∏', target: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT', shouldMatch: false }, // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ "IT"
  ];
  
  for (const testCase of problematicCases) {
    const keywords = getCategoryKeywords(testCase.target);
    const matches = testCategoryMatch(testCase.supplier, keywords);
    
    console.log(`–ü–æ—Å—Ç–∞–≤—â–∏–∫ "${testCase.supplier}" ‚Üí "${testCase.target}": ${matches ? '‚úÖ –°–û–í–ü–ê–î–ê–ï–¢' : '‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢'}`);
    console.log(`   –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å: ${testCase.shouldMatch ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: [${keywords.join(', ')}]`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${matches === testCase.shouldMatch ? '‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û' : '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}\n`);
  }
}

async function testWithRealData() {
  console.log('üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò:\n');
  
  const userId = 'c021fb58-c00f-405e-babd-47d20e8a8ff6';
  
  const { data: userSuppliers } = await supabase
    .from('catalog_user_suppliers')
    .select('*')
    .eq('user_id', userId)
    .eq('is_active', true);
    
  if (userSuppliers) {
    for (const supplier of userSuppliers) {
      console.log(`üè™ ${supplier.name}: "${supplier.category}"`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const categories = ['–û—Ñ–∏—Å –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT'];
      
      for (const category of categories) {
        const keywords = getCategoryKeywords(category);
        const matches = testCategoryMatch(supplier.category, keywords);
        
        if (matches) {
          console.log(`   ‚úÖ –ü–æ–ø–∞–¥–µ—Ç –≤: ${category} (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${keywords.join(', ')})`);
        }
      }
      console.log('');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testCategoryLogic()
  .then(() => testWithRealData())
  .then(() => {
    console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('‚úÖ –õ–æ–≥–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    console.log('‚úÖ –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');  
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    process.exit(0);
  })
  .catch(console.error);