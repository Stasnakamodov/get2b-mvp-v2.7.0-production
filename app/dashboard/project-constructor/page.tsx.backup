"use client"

import * as React from "react"

// CSS стили для фантомных данных
const phantomDataStyles = `
  .phantom-data-step {
    border-style: solid !important;
    border-width: 2px !important;
  }
`
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"
import {
  Blocks,
  Building,
  FileText,
  Store,
  Users,
  Plus,
  CheckCircle,
  ArrowRight,
  X,
  ChevronRight,
  ChevronLeft,
  Settings,
  CreditCard,
  Banknote,
  Download,
  CheckCircle2,
  Clock,
  DollarSign,
  Send,
  MousePointerClick,
  Download as DownloadIcon,
  CheckCircle2 as CheckCircle2Icon,
  Upload,
  Save,
  Package,
  Mail,
  Eye,
  Edit,
  Lock,
  ChevronDown,
  TestTube,
  User,
  Check,
  Loader,
  BarChart3,
  Loader2,
} from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"
import { useProjectTemplates } from "../create-project/hooks/useSaveTemplate"
import { useClientProfiles } from "@/hooks/useClientProfiles"
import { useSupplierProfiles } from "@/hooks/useSupplierProfiles"
import { useConstructorDrafts } from "@/hooks/useConstructorDrafts"
import { useCreateProjectFromConstructor } from "@/hooks/useCreateProjectFromConstructor"
import { supabase } from "@/lib/supabaseClient"

// Структура шагов конструктора
const constructorSteps = [
  { id: 1, name: "Карточка", description: "Данные компании", sources: ["profile", "template", "manual"] },
  { id: 2, name: "Заявка", description: "Спецификация товаров", sources: ["profile", "template", "catalog", "manual"] },
  { id: 3, name: "Пополнение", description: "Загрузка чека", sources: ["manual"] },
  { id: 4, name: "Метод", description: "Способ оплаты", sources: ["profile", "template", "catalog", "manual"] },
  { id: 5, name: "Реквизиты", description: "Банковские реквизиты", sources: ["profile", "template", "catalog", "manual"] },
  { id: 6, name: "Получение", description: "Получение средств", sources: ["automatic"] },
  { id: 7, name: "Подтверждение", description: "Завершение", sources: ["automatic"] }
]

// Источники данных
const dataSources = {
  profile: { name: "Профиль", icon: Users, color: "bg-blue-500" },
  template: { name: "Шаблон", icon: FileText, color: "bg-green-500" },
  catalog: { name: "Каталог", icon: Store, color: "bg-purple-500" },
  manual: { name: "Вручную", icon: Plus, color: "bg-gray-500" },
  automatic: { name: "Автоматически", icon: CheckCircle, color: "bg-emerald-500" }
}

// Иконки для шагов
const stepIcons = [
  null,
  Building,
  FileText,
  Clock,
  CreditCard,
  Banknote,
  DownloadIcon,
  CheckCircle2Icon,
]

// Компонент формы для данных компании (Шаг I)
const CompanyForm = ({ onSave, onCancel, initialData }: { onSave: (data: any) => void, onCancel: () => void, initialData?: any }) => {
  const [formData, setFormData] = useState({
    name: initialData?.name || '',
    legalName: initialData?.legalName || '',
    inn: initialData?.inn || '',
    kpp: initialData?.kpp || '',
    ogrn: initialData?.ogrn || '',
    address: initialData?.address || ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
      {/* Основные данные компании */}
      <div className="space-y-2">
        <Label htmlFor="name" className="text-sm font-semibold text-gray-700">
          Название компании <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="name"
          value={formData.name}
          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="Введите название компании"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="legalName" className="text-sm font-semibold text-gray-700">
          Юридическое название <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="legalName"
          value={formData.legalName}
          onChange={(e) => setFormData(prev => ({ ...prev, legalName: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="Введите юридическое название"
        />
      </div>
      
      {/* ИНН, КПП, ОГРН */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="inn" className="text-sm font-semibold text-gray-700">
            ИНН <span className="text-red-500 font-bold">*</span>
          </Label>
          <Input
            id="inn"
            value={formData.inn}
            onChange={(e) => setFormData(prev => ({ ...prev, inn: e.target.value }))}
            required
            className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
            placeholder="1234567890"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="kpp" className="text-sm font-semibold text-gray-700">
            КПП <span className="text-red-500 font-bold">*</span>
          </Label>
          <Input
            id="kpp"
            value={formData.kpp}
            onChange={(e) => setFormData(prev => ({ ...prev, kpp: e.target.value }))}
            required
            className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
            placeholder="123456789"
          />
        </div>
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="ogrn" className="text-sm font-semibold text-gray-700">
          ОГРН <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="ogrn"
          value={formData.ogrn}
          onChange={(e) => setFormData(prev => ({ ...prev, ogrn: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="1234567890123"
        />
      </div>
      
      {/* Адрес */}
      <div className="space-y-2">
        <Label htmlFor="address" className="text-sm font-semibold text-gray-700">
          Юридический адрес <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="address"
          value={formData.address}
          onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="г. Москва, ул. Примерная, д. 1, оф. 100"
        />
      </div>
      

      
      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1 h-12 text-base font-medium">
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" className="flex-1 h-12 text-base font-medium bg-blue-600 hover:bg-blue-700">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы для контактных данных
const ContactsForm = ({ onSave, onCancel, initialData }: { onSave: (data: any) => void, onCancel: () => void, initialData?: any }) => {
  const [formData, setFormData] = useState({
    email: initialData?.email || '',
    phone: initialData?.phone || '',
    website: initialData?.website || ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
      <div className="space-y-2">
        <Label htmlFor="email" className="text-sm font-semibold text-gray-700">
          Email
        </Label>
        <Input
          id="email"
          type="email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="info@company.ru"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="phone" className="text-sm font-semibold text-gray-700">
          Телефон <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="phone"
          value={formData.phone}
          onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="+7 (495) 123-45-67"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="website" className="text-sm font-semibold text-gray-700">
          Веб-сайт
        </Label>
        <Input
          id="website"
          value={formData.website}
          onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="https://www.company.ru"
        />
      </div>
      

      
      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1 h-12 text-base font-medium">
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" className="flex-1 h-12 text-base font-medium bg-blue-600 hover:bg-blue-700">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы для банковских данных
const BankForm = ({ onSave, onCancel, initialData }: { onSave: (data: any) => void, onCancel: () => void, initialData?: any }) => {
  const [formData, setFormData] = useState({
    bankName: initialData?.bankName || '',
    bankAccount: initialData?.bankAccount || '',
    bankCorrAccount: initialData?.bankCorrAccount || '',
    bankBik: initialData?.bankBik || ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
      <div className="space-y-2">
        <Label htmlFor="bankName" className="text-sm font-semibold text-gray-700">
          Название банка <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="bankName"
          value={formData.bankName}
          onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="Сбербанк России"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="bankAccount" className="text-sm font-semibold text-gray-700">
          Расчетный счет <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="bankAccount"
          value={formData.bankAccount}
          onChange={(e) => setFormData(prev => ({ ...prev, bankAccount: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="40702810123456789012"
        />
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="bankCorrAccount" className="text-sm font-semibold text-gray-700">
            Корр. счет <span className="text-red-500 font-bold">*</span>
          </Label>
          <Input
            id="bankCorrAccount"
            value={formData.bankCorrAccount}
            onChange={(e) => setFormData(prev => ({ ...prev, bankCorrAccount: e.target.value }))}
            required
            className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
            placeholder="30101810123456789012"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="bankBik" className="text-sm font-semibold text-gray-700">
            БИК <span className="text-red-500 font-bold">*</span>
          </Label>
          <Input
            id="bankBik"
            value={formData.bankBik}
            onChange={(e) => setFormData(prev => ({ ...prev, bankBik: e.target.value }))}
            required
            className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
            placeholder="044525225"
          />
        </div>
      </div>
      

      
      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1 h-12 text-base font-medium">
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" className="flex-1 h-12 text-base font-medium bg-blue-600 hover:bg-blue-700">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы для спецификации (Шаг II)
const SpecificationForm = ({ onSave, onCancel }: { onSave: (data: any) => void, onCancel: () => void }) => {
  const [formData, setFormData] = useState({
    supplier: '',
    currency: 'USD',
    items: [{ name: '', quantity: 1, price: 0 }]
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  const addItem = () => {
    setFormData(prev => ({
      ...prev,
      items: [...prev.items, { name: '', quantity: 1, price: 0 }]
    }))
  }

  const updateItem = (index: number, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      items: prev.items.map((item, i) => 
        i === index ? { ...item, [field]: value } : item
      )
    }))
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="supplier">Поставщик *</Label>
          <Input
            id="supplier"
            value={formData.supplier}
            onChange={(e) => setFormData(prev => ({ ...prev, supplier: e.target.value }))}
            required
          />
        </div>
        <div>
          <Label htmlFor="currency">Валюта</Label>
          <select
            id="currency"
            value={formData.currency}
            onChange={(e) => setFormData(prev => ({ ...prev, currency: e.target.value }))}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
            <option value="RUB">RUB</option>
          </select>
        </div>
      </div>
      
      <div>
        <Label>Товары</Label>
        <div className="space-y-2">
          {formData.items.map((item, index) => (
            <div key={index} className="grid grid-cols-3 gap-2">
              <Input
                placeholder="Название товара"
                value={item.name}
                onChange={(e) => updateItem(index, 'name', e.target.value)}
              />
              <Input
                type="number"
                placeholder="Количество"
                value={item.quantity}
                onChange={(e) => updateItem(index, 'quantity', parseInt(e.target.value) || 0)}
              />
              <Input
                type="number"
                placeholder="Цена"
                value={item.price}
                onChange={(e) => updateItem(index, 'price', parseFloat(e.target.value) || 0)}
              />
            </div>
          ))}
        </div>
        <Button type="button" variant="outline" onClick={addItem} className="mt-2">
          <Plus className="h-4 w-4 mr-2" />
          Добавить товар
        </Button>
      </div>
      
      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент загрузки файла (Шаг III)
const FileUploadForm = ({ onSave, onCancel }: { onSave: (data: any) => void, onCancel: () => void }) => {
  const [file, setFile] = useState<File | null>(null)

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (selectedFile) {
      setFile(selectedFile)
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (file) {
      onSave({ file })
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="text-center p-6 border-2 border-dashed border-gray-300 rounded-lg">
        <Upload className="h-12 w-12 mx-auto text-gray-400 mb-4" />
        <p className="text-gray-600 mb-4">Загрузите чек пополнения счета</p>
        <input
          type="file"
          onChange={handleFileChange}
          accept=".pdf,.jpg,.jpeg,.png"
          className="hidden"
          id="file-upload"
        />
        <label htmlFor="file-upload" className="cursor-pointer">
          <Button type="button" variant="outline">
            Выбрать файл
          </Button>
        </label>
      </div>
      
      {file && (
        <div className="p-3 bg-blue-50 border border-blue-200 rounded">
          <FileText className="h-4 w-4 text-blue-600 inline mr-2" />
          <span>Выбран файл: {file.name}</span>
        </div>
      )}
      
      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" disabled={!file}>
          <Save className="h-4 w-4 mr-2" />
          Загрузить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы метода оплаты (Шаг IV)
const PaymentMethodForm = ({ onSave, onCancel }: { onSave: (data: any) => void, onCancel: () => void }) => {
  const [method, setMethod] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (method) {
      onSave({ method })
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <Label htmlFor="method">Способ оплаты *</Label>
        <select
          id="method"
          value={method}
          onChange={(e) => setMethod(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
        >
          <option value="">Выберите способ оплаты</option>
          <option value="bank-transfer">Банковский перевод</option>
          <option value="p2p">P2P платеж</option>
          <option value="crypto">Криптовалюта</option>
        </select>
      </div>
      
      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" disabled={!method}>
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы реквизитов (Шаг V)
const RequisitesForm = ({ onSave, onCancel }: { onSave: (data: any) => void, onCancel: () => void }) => {
  const [formData, setFormData] = useState({
    bankName: '',
    accountNumber: '',
    swift: ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="bankName">Название банка *</Label>
          <Input
            id="bankName"
            value={formData.bankName}
            onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}
            required
          />
        </div>
        <div>
          <Label htmlFor="accountNumber">Номер счета *</Label>
          <Input
            id="accountNumber"
            value={formData.accountNumber}
            onChange={(e) => setFormData(prev => ({ ...prev, accountNumber: e.target.value }))}
            required
          />
        </div>
      </div>
      <div>
        <Label htmlFor="swift">SWIFT/BIC код</Label>
        <Input
          id="swift"
          value={formData.swift}
          onChange={(e) => setFormData(prev => ({ ...prev, swift: e.target.value }))}
        />
      </div>
      
      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

export default function ProjectConstructorPage() {
  // Добавляем CSS стили для фантомных данных
  React.useEffect(() => {
    const style = document.createElement('style')
    style.textContent = phantomDataStyles
    document.head.appendChild(style)
    
    return () => {
      document.head.removeChild(style)
    }
  }, [])
  
  // Состояния для управления конструктором
  const [stepConfigs, setStepConfigs] = useState<Record<number, string>>({})
  const [hoveredStep, setHoveredStep] = useState<number | null>(null)
  const [lastHoveredStep, setLastHoveredStep] = useState<number | null>(null)
  const [manualData, setManualData] = useState<Record<number, any>>({})
  const [uploadedFiles, setUploadedFiles] = useState<Record<number, string>>({})
  const [selectedSource, setSelectedSource] = useState<string | null>(null)
  const [templateStepSelection, setTemplateStepSelection] = useState<{templateId: string, availableSteps: number[]} | null>(null)
  const [templateSelection, setTemplateSelection] = useState<boolean>(false)
  const [showBankAccountSelector, setShowBankAccountSelector] = useState<boolean>(false)
  const [bankAccountSourceType, setBankAccountSourceType] = useState<'profile' | 'template'>('profile')
  const [showPreviewModal, setShowPreviewModal] = useState<boolean>(false)
  const [previewData, setPreviewData] = useState<any>(null)
  const [previewType, setPreviewType] = useState<string>('')
  const [editingType, setEditingType] = useState<string>('')
  const [currentItemIndex, setCurrentItemIndex] = useState(0)
  const [touchStart, setTouchStart] = useState(0)
  const [touchEnd, setTouchEnd] = useState(0)
  const [user, setUser] = useState<any>(null)
  const [autoFillNotification, setAutoFillNotification] = useState<{
    show: boolean;
    message: string;
    supplierName: string;
    filledSteps: number[];
  } | null>(null)
  
  // Состояния для черновиков и создания проектов
  const [currentDraftId, setCurrentDraftId] = useState<string | null>(null)
  const [showCreateProjectModal, setShowCreateProjectModal] = useState<boolean>(false)
  const [projectName, setProjectName] = useState<string>('')
  
  // Состояние для модального окна эхо данных
  const [echoDataModal, setEchoDataModal] = useState<{
    show: boolean;
    supplierName: string;
    echoData: any;
    projectInfo: any;
  } | null>(null)
  
  const [showPhantomOptions, setShowPhantomOptions] = useState<boolean>(false)
  
  // Состояние для отслеживания доступности эхо данных
  const [echoDataAvailable, setEchoDataAvailable] = useState<{ [key: number]: boolean }>({})
  
  // Состояние для отслеживания загрузки эхо данных
  const [echoDataLoading, setEchoDataLoading] = useState<boolean>(false)
  
  // Состояние для управления всплывающими подсказками эхо данных
  const [echoDataTooltips, setEchoDataTooltips] = useState<{ [key: number]: boolean }>({})
  
  // Состояние для лоадера эхо данных шагов 1 и 2
  const [echoDataLoadingSteps1_2, setEchoDataLoadingSteps1_2] = useState<boolean>(false)

  // Хук для работы с профилями клиентов
  const { profiles: clientProfiles, loading: clientProfilesLoading, fetchProfiles: fetchClientProfiles } = useClientProfiles(user?.id || null)

  // Хук для работы с профилями поставщиков
  const { profiles: supplierProfiles, loading: supplierProfilesLoading, fetchProfiles: fetchSupplierProfiles } = useSupplierProfiles(user?.id || null)
  
  // Хуки для работы с черновиками и создания проектов
  const { 
    drafts, 
    loading: draftsLoading, 
    createDraft, 
    updateDraft, 
    autoSaveDraft 
  } = useConstructorDrafts()
  
  const { 
    loading: createProjectLoading, 
    error: createProjectError, 
    createProjectFromData 
  } = useCreateProjectFromConstructor()

  // Состояние для выбора профиля клиента
  const [showProfileSelector, setShowProfileSelector] = useState<boolean>(false)
  const [selectedProfileId, setSelectedProfileId] = useState<string | null>(null)

  // Состояние для выбора профиля поставщика
  const [showSupplierProfileSelector, setShowSupplierProfileSelector] = useState<boolean>(false)
  const [selectedSupplierProfileId, setSelectedSupplierProfileId] = useState<string | null>(null)

  // Состояние для модального окна предварительной сводки
  const [showSummaryModal, setShowSummaryModal] = useState<boolean>(false)

  // Состояние для обработки ошибок загрузки шаблонов
  const [templateError, setTemplateError] = useState<string | null>(null)
  const [templateLoading, setTemplateLoading] = useState<boolean>(false)
  
  // Состояние для отслеживания текущего этапа
  const [currentStage, setCurrentStage] = useState<number>(1)

  // Состояние для модального окна выбора источника каталога
  const [showCatalogSourceModal, setShowCatalogSourceModal] = useState<boolean>(false)
  const [catalogSourceStep, setCatalogSourceStep] = useState<number | null>(null)

  // Состояние для модального окна перехода на следующий этап
  const [showStageTransitionModal, setShowStageTransitionModal] = useState<boolean>(false)

  // Состояние для модального окна выбора поставщика из синей комнаты
  const [showBlueRoomSupplierModal, setShowBlueRoomSupplierModal] = useState<boolean>(false)
  const [blueRoomSuppliers, setBlueRoomSuppliers] = useState<any[]>([])
  const [blueRoomLoading, setBlueRoomLoading] = useState<boolean>(false)
  const [selectedSupplierData, setSelectedSupplierData] = useState<any>(null)

  // Функции для работы с черновиками
  const handleCreateDraft = async () => {
    try {
      const activeScenario = getActiveScenario()
      const draft = await createDraft({
        name: `Черновик ${new Date().toLocaleDateString()}`,
        step_data: manualData,
        step_configs: stepConfigs,
        scenario: activeScenario === 'none' ? 'A' : activeScenario,
        current_stage: getCurrentStage()
      })
      
      if (draft) {
        setCurrentDraftId(draft.id)
        console.log('✅ Черновик создан:', draft.id)
      }
    } catch (error) {
      console.error('❌ Ошибка создания черновика:', error)
    }
  }

  const handleAutoSaveDraft = async () => {
    if (currentDraftId) {
      await autoSaveDraft(currentDraftId, manualData, stepConfigs)
    }
  }

  const handleCreateProject = async () => {
    try {
      const project = await createProjectFromData(manualData, projectName)
      if (project) {
        console.log('✅ Проект создан:', project.id)
        setShowCreateProjectModal(false)
        setProjectName('')
      }
    } catch (error) {
      console.error('❌ Ошибка создания проекта:', error)
    }
  }

  // Функция для поиска supplier в любом из заполненных шагов
  const findSupplierInAnyStep = () => {
    console.log('🔍 Ищем supplier в любом из заполненных шагов...')
    console.log('🔍 manualData:', manualData)
    console.log('🔍 selectedSupplierData:', selectedSupplierData)
    
    // Проверяем шаг 2 (товары)
    const step2Data = manualData[2]
    console.log('🔍 step2Data:', step2Data)
    if (step2Data) {
      if (step2Data.supplier) {
        console.log('✅ Найден supplier в шаге 2:', step2Data.supplier)
        return step2Data.supplier
      }
      if (step2Data.items && step2Data.items.length > 0) {
        const firstItem = step2Data.items[0]
        if (firstItem.supplier_name) {
          console.log('✅ Найден supplier_name в шаге 2:', firstItem.supplier_name)
          return firstItem.supplier_name
        }
        if (firstItem.supplier) {
          console.log('✅ Найден supplier в товаре шага 2:', firstItem.supplier)
          return firstItem.supplier
        }
      }
    }
    
    // Проверяем шаг 4 (способы оплаты) - может содержать данные поставщика
    const step4Data = manualData[4]
    console.log('🔍 step4Data:', step4Data)
    if (step4Data) {
      if (step4Data.supplier_name) {
        console.log('✅ Найден supplier_name в шаге 4:', step4Data.supplier_name)
        return step4Data.supplier_name
      }
      if (step4Data.supplier) {
        console.log('✅ Найден supplier в шаге 4:', step4Data.supplier)
        return step4Data.supplier
      }
    }
    
    // Проверяем шаг 5 (реквизиты) - может содержать данные поставщика
    const step5Data = manualData[5]
    console.log('🔍 step5Data:', step5Data)
    if (step5Data) {
      if (step5Data.supplier_name) {
        console.log('✅ Найден supplier_name в шаге 5:', step5Data.supplier_name)
        return step5Data.supplier_name
      }
      if (step5Data.supplier) {
        console.log('✅ Найден supplier в шаге 5:', step5Data.supplier)
        return step5Data.supplier
      }
    }
    
    // Проверяем selectedSupplierData (если был выбран из каталога)
    if (selectedSupplierData) {
      if (selectedSupplierData.name) {
        console.log('✅ Найден supplier в selectedSupplierData:', selectedSupplierData.name)
        return selectedSupplierData.name
      }
      if (selectedSupplierData.company_name) {
        console.log('✅ Найден company_name в selectedSupplierData:', selectedSupplierData.company_name)
        return selectedSupplierData.company_name
      }
    }
    
    console.log('❌ Supplier не найден ни в одном шаге')
    console.log('🔍 Детали manualData:')
    Object.keys(manualData).forEach(key => {
      const numericKey = parseInt(key)
      if (!isNaN(numericKey)) {
        console.log(`  ${key}:`, manualData[numericKey])
      }
    })
    return null
  }

  // Функция для проверки доступности эхо данных
  const checkEchoDataAvailability = async () => {
    console.log('🔍 Проверяем доступность эхо данных...')
    
    // Показываем лоадер
    setEchoDataLoading(true)
    
    // Ищем supplier в любом из заполненных шагов
    const supplierName = findSupplierInAnyStep()
    
    if (!supplierName) {
      console.log('❌ Не найден supplier ни в одном шаге')
      setEchoDataAvailable({})
      setEchoDataLoading(false)
      return
    }

    console.log('🔍 Проверяем эхо данные для поставщика:', supplierName)
    
    try {
      const echoData = await getEchoSupplierData(supplierName)
      if (echoData) {
        console.log('✅ Эхо данные доступны для шагов 4 и 5')
        setEchoDataAvailable({
          4: true,
          5: true
        })
        // Показываем всплывающие подсказки
        setEchoDataTooltips({
          4: true,
          5: true
        })
        
        // Автоматически скрываем подсказки через 10 секунд
        setTimeout(() => {
          setEchoDataTooltips(prev => ({
            ...prev,
            4: false,
            5: false
          }))
        }, 10000)
      } else {
        console.log('❌ Эхо данные недоступны')
        setEchoDataAvailable({})
        setEchoDataTooltips({})
      }
    } catch (error) {
      console.error('❌ Ошибка проверки эхо данных:', error)
      setEchoDataAvailable({})
      setEchoDataTooltips({})
    } finally {
      // Скрываем лоадер
      setEchoDataLoading(false)
    }
  }
  
  // Закрытие выпадающего списка при клике вне его области
  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element
      if (!target.closest('.phantom-options-dropdown')) {
        setShowPhantomOptions(false)
      }
    }
    
    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [])

  // Получаем реальные шаблоны из базы данных
  const { templates, loading: templatesLoading, error: templatesError, fetchTemplates } = useProjectTemplates()

  // Загружаем шаблоны при монтировании компонента
  React.useEffect(() => {
    // Проверяем аутентификацию перед загрузкой
    const checkAuthAndLoad = async () => {
      try {
        console.log('🔍 Проверка авторизации...')
      const { data: { user } } = await supabase.auth.getUser()
      if (user) {
          console.log('✅ Пользователь авторизован:', user.email)
          setUser(user)
          console.log('📋 Загружаем шаблоны...')
          await fetchTemplates()
          console.log('👤 Загружаем профили клиентов...')
          await fetchClientProfiles()
          console.log('🏭 Загружаем профили поставщиков...')
          await fetchSupplierProfiles()
          
          // Создаем черновик при первой загрузке
          if (!currentDraftId) {
            console.log('📝 Создаем черновик...')
            await handleCreateDraft()
          }
        } else {
          console.log('❌ Пользователь не авторизован')
        }
      } catch (error) {
        console.error('❌ Ошибка при проверке авторизации:', error)
      }
    }
    
    checkAuthAndLoad()
  }, []) // Убираем fetchTemplates из зависимостей

  // Функция для получения списка шаблонов пользователя из реальной базы данных
  const getUserTemplates = () => {
    console.log('📋 [getUserTemplates] Проверяем шаблоны:', {
      templates: templates,
      loading: templatesLoading,
      error: templatesError,
      length: templates?.length || 0
    });
    
    if (!templates || templates.length === 0) {
      console.log('📋 [getUserTemplates] Шаблоны пусты');
      return []
    }
    
    const mappedTemplates = templates.map(template => ({
      id: template.id,
      name: template.name || 'Без названия',
      description: template.description || 'Шаблон проекта',
      availableSteps: [1, 2], // По умолчанию шаблоны содержат шаги 1 и 2
      lastUsed: template.updated_at ? new Date(template.updated_at).toLocaleDateString('ru-RU') : 'Недавно'
    }));
    
    console.log('📋 [getUserTemplates] Преобразованные шаблоны:', mappedTemplates);
    return mappedTemplates;
  }

  // Функция для получения данных поставщика из каталога
  const getSupplierDataFromCatalog = (supplierId: string) => {
    // Здесь будет реальный запрос к базе данных
    // Пока возвращаем моковые данные для тестирования
    console.log('Запрос данных поставщика:', supplierId)
    
    // Моковые данные поставщика из синей комнаты
    const mockSupplierData = {
      "supplier-1": {
        bank_name: "Сбербанк России",
        account_number: "40702810123456789012",
        swift: "SABRRUMM",
        payment_method: "bank-transfer",
        name: "ООО ТехноСнаб",
        contact_email: "info@technosnab.ru",
        contact_phone: "+7 (495) 123-45-67"
      },
      "supplier-2": {
        bank_name: "Тинькофф Банк",
        account_number: "40702810987654321098",
        swift: "TICSRUMM",
        payment_method: "bank-transfer",
        name: "ООО Электроимпорт",
        contact_email: "sales@electroimport.ru",
        contact_phone: "+7 (812) 987-65-43"
      },
      "echo-supplier-1": {
        bank_name: "Эхо Банк",
        account_number: "40702810111111111111",
        swift: "ECHORUMM",
        payment_method: "bank-transfer",
        name: "ООО Эхо Поставщик",
        contact_email: "echo@supplier.ru",
        contact_phone: "+7 (495) 111-11-11"
      }
    }
    
    return mockSupplierData[supplierId as keyof typeof mockSupplierData] || null
  }

  // Функция для получения товаров поставщика из каталога
  const getSupplierProducts = (supplierId: string) => {
    // Здесь будет реальный запрос к базе данных
    // Пока возвращаем моковые данные для тестирования
    console.log('Запрос товаров поставщика:', supplierId)
    
    // Моковые товары поставщиков
    const mockSupplierProducts = {
      "supplier-1": [
        {
          name: "Электронные компоненты",
          quantity: 100,
          price: 150,
          unit: "шт",
          supplier_id: "supplier-1"
        },
        {
          name: "Микросхемы",
          quantity: 50,
          price: 300,
          unit: "шт", 
          supplier_id: "supplier-1"
        }
      ],
      "supplier-2": [
        {
          name: "Проводники",
          quantity: 200,
          price: 25,
          unit: "м",
          supplier_id: "supplier-2"
        },
        {
          name: "Коннекторы",
          quantity: 75,
          price: 80,
          unit: "шт",
          supplier_id: "supplier-2"
        }
      ],
      "echo-supplier-1": [
        {
          name: "Эхо товар 1",
          quantity: 10,
          price: 1000,
          unit: "шт",
          supplier_id: "echo-supplier-1"
        },
        {
          name: "Эхо товар 2",
          quantity: 5,
          price: 2000,
          unit: "шт",
          supplier_id: "echo-supplier-1"
        }
      ]
    }
    
    return mockSupplierProducts[supplierId as keyof typeof mockSupplierProducts] || []
  }

  // Функция автоматического заполнения шагов IV и V на основе данных шага II
  const autoFillStepsFromSupplier = async (stepData: any) => {
    console.log('=== АВТОМАТИЧЕСКОЕ ЗАПОЛНЕНИЕ ШАГОВ IV и V ===')
    console.log('Данные для проверки:', stepData)
    
    // Проверяем, есть ли товары в данных
    if (stepData && stepData.items && stepData.items.length > 0) {
      console.log('Найдены товары:', stepData.items)
      
      // Получаем данные поставщика из первого товара
      const firstItem = stepData.items[0]
      
      // Ищем эхо данные по supplier
      if (stepData.supplier) {
        console.log('🔍 Ищем эхо данные для поставщика:', stepData.supplier)
        
        const echoData = await getEchoSupplierData(stepData.supplier)
        
        if (echoData) {
          console.log('🎭 Найдены эхо данные:', echoData)
          
          // Показываем модальное окно с предложением эхо данных
          setEchoDataModal({
            show: true,
            supplierName: stepData.supplier,
            echoData: echoData,
            projectInfo: echoData.project_info
          })
          
          console.log('📋 Показано модальное окно с эхо данными')
          return true
        } else {
          console.log('❌ Эхо данные не найдены для поставщика:', stepData.supplier)
          console.log('ℹ️ Пользователь может найти эхо данные вручную при клике на шаги 4 и 5')
          return false
        }
      } else {
        console.log('❌ supplier не найден в данных')
        return false
      }
    } else {
      console.log('❌ Товары не найдены в данных')
      return false
    }
  }

  // Функция автоматического заполнения шага II на основе данных шагов IV или V
  const autoFillStepFromRequisites = (stepData: any, stepId: number) => {
    console.log(`=== АВТОМАТИЧЕСКОЕ ЗАПОЛНЕНИЕ ШАГА II НА ОСНОВЕ ШАГА ${stepId} ===`)
    console.log('Данные для проверки:', stepData)
    
    // Проверяем, есть ли supplier_id в данных
    let supplierId = stepData.supplier_id
    if (!supplierId) {
      console.log('supplier_id не найден в данных шага', stepId)
      return false
    }
    
    console.log('Найден supplier_id:', supplierId)
    
    // Получаем данные поставщика
    const supplierData = getSupplierDataFromCatalog(supplierId)
    
    if (supplierData) {
      console.log('Данные поставщика найдены:', supplierData)
      
      // Получаем товары поставщика (в реальности это будет запрос к каталогу)
      const supplierProducts = getSupplierProducts(supplierId)
      
      if (supplierProducts && supplierProducts.length > 0) {
        // Автоматически заполняем шаг II (спецификация товаров)
        setManualData(prev => ({
          ...prev,
          2: {
            supplier: supplierData.name,
            currency: 'RUB',
            items: supplierProducts.map(product => ({
              ...product,
              supplier_id: supplierId
            })),
            auto_filled: true
          }
        }))
        
        // Устанавливаем источник данных для шага II
        setStepConfigs(prev => ({
          ...prev,
          2: "catalog"
        }))
        
        // Показываем уведомление об автоматическом заполнении
        setAutoFillNotification({
          show: true,
          message: `Товары поставщика автоматически добавлены в спецификацию`,
          supplierName: supplierData.name,
          filledSteps: [2]
        })
        
        // Скрываем уведомление через 5 секунд
        setTimeout(() => {
          setAutoFillNotification(null)
        }, 5000)
        
        console.log('✅ Шаг II автоматически заполнен товарами поставщика')
        return true
      } else {
        console.log('❌ Товары поставщика не найдены')
      }
    } else {
      console.log('❌ Данные поставщика не найдены для ID:', supplierId)
    }
    return false
  }

  // Функция для получения данных из шаблонов для конкретного шага
  const getTemplateDataForStep = async (stepId: number) => {
    console.log('Запрос данных из шаблонов для шага:', stepId)
    
    try {
      // Используем уже загруженные шаблоны из хука
      if (!templates || templates.length === 0) {
        console.log('❌ У пользователя нет шаблонов')
        return null
      }
      
      console.log('✅ Используем загруженные шаблоны:', templates.length)
      
      // Берем первый шаблон (можно добавить выбор)
      const template = templates[0]
      
      // Преобразуем данные шаблона в формат для конкретного шага
      switch (stepId) {
        case 1: // Данные компании
          return {
            name: template.company_name || '',
            legalName: template.company_legal || '',
            inn: template.company_inn || '',
            kpp: template.company_kpp || '',
            ogrn: template.company_ogrn || '',
            address: template.company_address || '',
            bankName: template.company_bank || '',
            bankAccount: template.company_account || '',
            bankCorrAccount: template.company_corr || '',
            bankBik: template.company_bik || '',
            email: template.company_email || '',
            phone: template.company_phone || '',
            website: template.company_website || ''
          }
          
        case 2: // Спецификация товаров
          return {
            supplier: template.supplier_name || '',
            currency: template.currency || 'RUB',
            items: template.specification || []
          }
          
        default:
          return null
      }
      
    } catch (error) {
      console.error('❌ Ошибка получения данных шаблона:', error)
      throw new Error('Ошибка при обработке данных шаблона')
    }
  }



"use client"

import * as React from "react"

// CSS стили для фантомных данных
const phantomDataStyles = `
  .phantom-data-step {
    border-style: solid !important;
    border-width: 2px !important;
  }
`
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"
import {
  Blocks,
  Building,
  FileText,
  Store,
  Users,
  Plus,
  CheckCircle,
  ArrowRight,
  X,
  ChevronRight,
  ChevronLeft,
  Settings,
  CreditCard,
  Banknote,
  Download,
  CheckCircle2,
  Clock,
  DollarSign,
  Send,
  MousePointerClick,
  Download as DownloadIcon,
  CheckCircle2 as CheckCircle2Icon,
  Upload,
  Save,
  Package,
  Mail,
  Eye,
  Edit,
  Lock,
  ChevronDown,
  TestTube,
  User,
  Check,
  Loader,
  BarChart3,
  Loader2,
} from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"
import { useProjectTemplates } from "../create-project/hooks/useSaveTemplate"
import { useClientProfiles } from "@/hooks/useClientProfiles"
import { useSupplierProfiles } from "@/hooks/useSupplierProfiles"
import { useConstructorDrafts } from "@/hooks/useConstructorDrafts"
import { useCreateProjectFromConstructor } from "@/hooks/useCreateProjectFromConstructor"
import { supabase } from "@/lib/supabaseClient"

// Структура шагов конструктора
const constructorSteps = [
  { id: 1, name: "Карточка", description: "Данные компании", sources: ["profile", "template", "manual"] },
  { id: 2, name: "Заявка", description: "Спецификация товаров", sources: ["profile", "template", "catalog", "manual"] },
  { id: 3, name: "Пополнение", description: "Загрузка чека", sources: ["manual"] },
  { id: 4, name: "Метод", description: "Способ оплаты", sources: ["profile", "template", "catalog", "manual"] },
  { id: 5, name: "Реквизиты", description: "Банковские реквизиты", sources: ["profile", "template", "catalog", "manual"] },
  { id: 6, name: "Получение", description: "Получение средств", sources: ["automatic"] },
  { id: 7, name: "Подтверждение", description: "Завершение", sources: ["automatic"] }
]

// Источники данных
const dataSources = {
  profile: { name: "Профиль", icon: Users, color: "bg-blue-500" },
  template: { name: "Шаблон", icon: FileText, color: "bg-green-500" },
  catalog: { name: "Каталог", icon: Store, color: "bg-purple-500" },
  manual: { name: "Вручную", icon: Plus, color: "bg-gray-500" },
  automatic: { name: "Автоматически", icon: CheckCircle, color: "bg-emerald-500" }
}

// Иконки для шагов
const stepIcons = [
  null,
  Building,
  FileText,
  Clock,
  CreditCard,
  Banknote,
  DownloadIcon,
  CheckCircle2Icon,
]

// Компонент формы для данных компании (Шаг I)
const CompanyForm = ({ onSave, onCancel, initialData }: { onSave: (data: any) => void, onCancel: () => void, initialData?: any }) => {
  const [formData, setFormData] = useState({
    name: initialData?.name || '',
    legalName: initialData?.legalName || '',
    inn: initialData?.inn || '',
    kpp: initialData?.kpp || '',
    ogrn: initialData?.ogrn || '',
    address: initialData?.address || ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
      {/* Основные данные компании */}
      <div className="space-y-2">
        <Label htmlFor="name" className="text-sm font-semibold text-gray-700">
          Название компании <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="name"
          value={formData.name}
          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="Введите название компании"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="legalName" className="text-sm font-semibold text-gray-700">
          Юридическое название <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="legalName"
          value={formData.legalName}
          onChange={(e) => setFormData(prev => ({ ...prev, legalName: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="Введите юридическое название"
        />
      </div>
      
      {/* ИНН, КПП, ОГРН */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="inn" className="text-sm font-semibold text-gray-700">
            ИНН <span className="text-red-500 font-bold">*</span>
          </Label>
          <Input
            id="inn"
            value={formData.inn}
            onChange={(e) => setFormData(prev => ({ ...prev, inn: e.target.value }))}
            required
            className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
            placeholder="1234567890"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="kpp" className="text-sm font-semibold text-gray-700">
            КПП <span className="text-red-500 font-bold">*</span>
          </Label>
          <Input
            id="kpp"
            value={formData.kpp}
            onChange={(e) => setFormData(prev => ({ ...prev, kpp: e.target.value }))}
            required
            className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
            placeholder="123456789"
          />
        </div>
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="ogrn" className="text-sm font-semibold text-gray-700">
          ОГРН <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="ogrn"
          value={formData.ogrn}
          onChange={(e) => setFormData(prev => ({ ...prev, ogrn: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="1234567890123"
        />
      </div>
      
      {/* Адрес */}
      <div className="space-y-2">
        <Label htmlFor="address" className="text-sm font-semibold text-gray-700">
          Юридический адрес <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="address"
          value={formData.address}
          onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="г. Москва, ул. Примерная, д. 1, оф. 100"
        />
      </div>
      

      
      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1 h-12 text-base font-medium">
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" className="flex-1 h-12 text-base font-medium bg-blue-600 hover:bg-blue-700">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы для контактных данных
const ContactsForm = ({ onSave, onCancel, initialData }: { onSave: (data: any) => void, onCancel: () => void, initialData?: any }) => {
  const [formData, setFormData] = useState({
    email: initialData?.email || '',
    phone: initialData?.phone || '',
    website: initialData?.website || ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
      <div className="space-y-2">
        <Label htmlFor="email" className="text-sm font-semibold text-gray-700">
          Email
        </Label>
        <Input
          id="email"
          type="email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="info@company.ru"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="phone" className="text-sm font-semibold text-gray-700">
          Телефон <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="phone"
          value={formData.phone}
          onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="+7 (495) 123-45-67"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="website" className="text-sm font-semibold text-gray-700">
          Веб-сайт
        </Label>
        <Input
          id="website"
          value={formData.website}
          onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="https://www.company.ru"
        />
      </div>
      

      
      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1 h-12 text-base font-medium">
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" className="flex-1 h-12 text-base font-medium bg-blue-600 hover:bg-blue-700">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы для банковских данных
const BankForm = ({ onSave, onCancel, initialData }: { onSave: (data: any) => void, onCancel: () => void, initialData?: any }) => {
  const [formData, setFormData] = useState({
    bankName: initialData?.bankName || '',
    bankAccount: initialData?.bankAccount || '',
    bankCorrAccount: initialData?.bankCorrAccount || '',
    bankBik: initialData?.bankBik || ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
      <div className="space-y-2">
        <Label htmlFor="bankName" className="text-sm font-semibold text-gray-700">
          Название банка <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="bankName"
          value={formData.bankName}
          onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="Сбербанк России"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="bankAccount" className="text-sm font-semibold text-gray-700">
          Расчетный счет <span className="text-red-500 font-bold">*</span>
        </Label>
        <Input
          id="bankAccount"
          value={formData.bankAccount}
          onChange={(e) => setFormData(prev => ({ ...prev, bankAccount: e.target.value }))}
          required
          className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
          placeholder="40702810123456789012"
        />
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="bankCorrAccount" className="text-sm font-semibold text-gray-700">
            Корр. счет <span className="text-red-500 font-bold">*</span>
          </Label>
          <Input
            id="bankCorrAccount"
            value={formData.bankCorrAccount}
            onChange={(e) => setFormData(prev => ({ ...prev, bankCorrAccount: e.target.value }))}
            required
            className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
            placeholder="30101810123456789012"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="bankBik" className="text-sm font-semibold text-gray-700">
            БИК <span className="text-red-500 font-bold">*</span>
          </Label>
          <Input
            id="bankBik"
            value={formData.bankBik}
            onChange={(e) => setFormData(prev => ({ ...prev, bankBik: e.target.value }))}
            required
            className="h-12 px-4 text-base border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
            placeholder="044525225"
          />
        </div>
      </div>
      

      
      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1 h-12 text-base font-medium">
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" className="flex-1 h-12 text-base font-medium bg-blue-600 hover:bg-blue-700">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы для спецификации (Шаг II)
const SpecificationForm = ({ onSave, onCancel }: { onSave: (data: any) => void, onCancel: () => void }) => {
  const [formData, setFormData] = useState({
    supplier: '',
    currency: 'USD',
    items: [{ name: '', quantity: 1, price: 0 }]
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  const addItem = () => {
    setFormData(prev => ({
      ...prev,
      items: [...prev.items, { name: '', quantity: 1, price: 0 }]
    }))
  }

  const updateItem = (index: number, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      items: prev.items.map((item, i) => 
        i === index ? { ...item, [field]: value } : item
      )
    }))
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="supplier">Поставщик *</Label>
          <Input
            id="supplier"
            value={formData.supplier}
            onChange={(e) => setFormData(prev => ({ ...prev, supplier: e.target.value }))}
            required
          />
        </div>
        <div>
          <Label htmlFor="currency">Валюта</Label>
          <select
            id="currency"
            value={formData.currency}
            onChange={(e) => setFormData(prev => ({ ...prev, currency: e.target.value }))}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
            <option value="RUB">RUB</option>
          </select>
        </div>
      </div>
      
      <div>
        <Label>Товары</Label>
        <div className="space-y-2">
          {formData.items.map((item, index) => (
            <div key={index} className="grid grid-cols-3 gap-2">
              <Input
                placeholder="Название товара"
                value={item.name}
                onChange={(e) => updateItem(index, 'name', e.target.value)}
              />
              <Input
                type="number"
                placeholder="Количество"
                value={item.quantity}
                onChange={(e) => updateItem(index, 'quantity', parseInt(e.target.value) || 0)}
              />
              <Input
                type="number"
                placeholder="Цена"
                value={item.price}
                onChange={(e) => updateItem(index, 'price', parseFloat(e.target.value) || 0)}
              />
            </div>
          ))}
        </div>
        <Button type="button" variant="outline" onClick={addItem} className="mt-2">
          <Plus className="h-4 w-4 mr-2" />
          Добавить товар
        </Button>
      </div>
      
      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент загрузки файла (Шаг III)
const FileUploadForm = ({ onSave, onCancel }: { onSave: (data: any) => void, onCancel: () => void }) => {
  const [file, setFile] = useState<File | null>(null)

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (selectedFile) {
      setFile(selectedFile)
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (file) {
      onSave({ file })
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="text-center p-6 border-2 border-dashed border-gray-300 rounded-lg">
        <Upload className="h-12 w-12 mx-auto text-gray-400 mb-4" />
        <p className="text-gray-600 mb-4">Загрузите чек пополнения счета</p>
        <input
          type="file"
          onChange={handleFileChange}
          accept=".pdf,.jpg,.jpeg,.png"
          className="hidden"
          id="file-upload"
        />
        <label htmlFor="file-upload" className="cursor-pointer">
          <Button type="button" variant="outline">
            Выбрать файл
          </Button>
        </label>
      </div>
      
      {file && (
        <div className="p-3 bg-blue-50 border border-blue-200 rounded">
          <FileText className="h-4 w-4 text-blue-600 inline mr-2" />
          <span>Выбран файл: {file.name}</span>
        </div>
      )}
      
      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" disabled={!file}>
          <Save className="h-4 w-4 mr-2" />
          Загрузить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы метода оплаты (Шаг IV)
const PaymentMethodForm = ({ onSave, onCancel }: { onSave: (data: any) => void, onCancel: () => void }) => {
  const [method, setMethod] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (method) {
      onSave({ method })
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <Label htmlFor="method">Способ оплаты *</Label>
        <select
          id="method"
          value={method}
          onChange={(e) => setMethod(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
        >
          <option value="">Выберите способ оплаты</option>
          <option value="bank-transfer">Банковский перевод</option>
          <option value="p2p">P2P платеж</option>
          <option value="crypto">Криптовалюта</option>
        </select>
      </div>
      
      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit" disabled={!method}>
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

// Компонент формы реквизитов (Шаг V)
const RequisitesForm = ({ onSave, onCancel }: { onSave: (data: any) => void, onCancel: () => void }) => {
  const [formData, setFormData] = useState({
    bankName: '',
    accountNumber: '',
    swift: ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="bankName">Название банка *</Label>
          <Input
            id="bankName"
            value={formData.bankName}
            onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}
            required
          />
        </div>
        <div>
          <Label htmlFor="accountNumber">Номер счета *</Label>
          <Input
            id="accountNumber"
            value={formData.accountNumber}
            onChange={(e) => setFormData(prev => ({ ...prev, accountNumber: e.target.value }))}
            required
          />
        </div>
      </div>
      <div>
        <Label htmlFor="swift">SWIFT/BIC код</Label>
        <Input
          id="swift"
          value={formData.swift}
          onChange={(e) => setFormData(prev => ({ ...prev, swift: e.target.value }))}
        />
      </div>
      
      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          <X className="h-4 w-4 mr-2" />
          Отмена
        </Button>
        <Button type="submit">
          <Save className="h-4 w-4 mr-2" />
          Сохранить
        </Button>
      </div>
    </form>
  )
}

export default function ProjectConstructorPage() {
  // Добавляем CSS стили для фантомных данных
  React.useEffect(() => {
    const style = document.createElement('style')
    style.textContent = phantomDataStyles
    document.head.appendChild(style)
    
    return () => {
      document.head.removeChild(style)
    }
  }, [])
  
  // Состояния для управления конструктором
  const [stepConfigs, setStepConfigs] = useState<Record<number, string>>({})
  const [hoveredStep, setHoveredStep] = useState<number | null>(null)
  const [lastHoveredStep, setLastHoveredStep] = useState<number | null>(null)
  const [manualData, setManualData] = useState<Record<number, any>>({})
  const [uploadedFiles, setUploadedFiles] = useState<Record<number, string>>({})
  const [selectedSource, setSelectedSource] = useState<string | null>(null)
  const [templateStepSelection, setTemplateStepSelection] = useState<{templateId: string, availableSteps: number[]} | null>(null)
  const [templateSelection, setTemplateSelection] = useState<boolean>(false)
  const [showBankAccountSelector, setShowBankAccountSelector] = useState<boolean>(false)
  const [bankAccountSourceType, setBankAccountSourceType] = useState<'profile' | 'template'>('profile')
  const [showPreviewModal, setShowPreviewModal] = useState<boolean>(false)
  const [previewData, setPreviewData] = useState<any>(null)
  const [previewType, setPreviewType] = useState<string>('')
  const [editingType, setEditingType] = useState<string>('')
  const [currentItemIndex, setCurrentItemIndex] = useState(0)
  const [touchStart, setTouchStart] = useState(0)
  const [touchEnd, setTouchEnd] = useState(0)
  const [user, setUser] = useState<any>(null)
  const [autoFillNotification, setAutoFillNotification] = useState<{
    show: boolean;
    message: string;
    supplierName: string;
    filledSteps: number[];
  } | null>(null)
  
  // Состояния для черновиков и создания проектов
  const [currentDraftId, setCurrentDraftId] = useState<string | null>(null)
  const [showCreateProjectModal, setShowCreateProjectModal] = useState<boolean>(false)
  const [projectName, setProjectName] = useState<string>('')
  
  // Состояние для модального окна эхо данных
  const [echoDataModal, setEchoDataModal] = useState<{
    show: boolean;
    supplierName: string;
    echoData: any;
    projectInfo: any;
  } | null>(null)
  
  const [showPhantomOptions, setShowPhantomOptions] = useState<boolean>(false)
  
  // Состояние для отслеживания доступности эхо данных
  const [echoDataAvailable, setEchoDataAvailable] = useState<{ [key: number]: boolean }>({})
  
  // Состояние для отслеживания загрузки эхо данных
  const [echoDataLoading, setEchoDataLoading] = useState<boolean>(false)
  
  // Состояние для управления всплывающими подсказками эхо данных
  const [echoDataTooltips, setEchoDataTooltips] = useState<{ [key: number]: boolean }>({})
  
  // Состояние для лоадера эхо данных шагов 1 и 2
  const [echoDataLoadingSteps1_2, setEchoDataLoadingSteps1_2] = useState<boolean>(false)

  // Хук для работы с профилями клиентов
  const { profiles: clientProfiles, loading: clientProfilesLoading, fetchProfiles: fetchClientProfiles } = useClientProfiles(user?.id || null)

  // Хук для работы с профилями поставщиков
  const { profiles: supplierProfiles, loading: supplierProfilesLoading, fetchProfiles: fetchSupplierProfiles } = useSupplierProfiles(user?.id || null)
  
  // Хуки для работы с черновиками и создания проектов
  const { 
    drafts, 
    loading: draftsLoading, 
    createDraft, 
    updateDraft, 
    autoSaveDraft 
  } = useConstructorDrafts()
  
  const { 
    loading: createProjectLoading, 
    error: createProjectError, 
    createProjectFromData 
  } = useCreateProjectFromConstructor()

  // Состояние для выбора профиля клиента
  const [showProfileSelector, setShowProfileSelector] = useState<boolean>(false)
  const [selectedProfileId, setSelectedProfileId] = useState<string | null>(null)

  // Состояние для выбора профиля поставщика
  const [showSupplierProfileSelector, setShowSupplierProfileSelector] = useState<boolean>(false)
  const [selectedSupplierProfileId, setSelectedSupplierProfileId] = useState<string | null>(null)

  // Состояние для модального окна предварительной сводки
  const [showSummaryModal, setShowSummaryModal] = useState<boolean>(false)

  // Состояние для обработки ошибок загрузки шаблонов
  const [templateError, setTemplateError] = useState<string | null>(null)
  const [templateLoading, setTemplateLoading] = useState<boolean>(false)
  
  // Состояние для отслеживания текущего этапа
  const [currentStage, setCurrentStage] = useState<number>(1)

  // Состояние для модального окна выбора источника каталога
  const [showCatalogSourceModal, setShowCatalogSourceModal] = useState<boolean>(false)
  const [catalogSourceStep, setCatalogSourceStep] = useState<number | null>(null)

  // Состояние для модального окна перехода на следующий этап
  const [showStageTransitionModal, setShowStageTransitionModal] = useState<boolean>(false)

  // Состояние для модального окна выбора поставщика из синей комнаты
  const [showBlueRoomSupplierModal, setShowBlueRoomSupplierModal] = useState<boolean>(false)
  const [blueRoomSuppliers, setBlueRoomSuppliers] = useState<any[]>([])
  const [blueRoomLoading, setBlueRoomLoading] = useState<boolean>(false)
  const [selectedSupplierData, setSelectedSupplierData] = useState<any>(null)

  // Функции для работы с черновиками
  const handleCreateDraft = async () => {
    try {
      const activeScenario = getActiveScenario()
      const draft = await createDraft({
        name: `Черновик ${new Date().toLocaleDateString()}`,
        step_data: manualData,
        step_configs: stepConfigs,
        scenario: activeScenario === 'none' ? 'A' : activeScenario,
        current_stage: getCurrentStage()
      })
      
      if (draft) {
        setCurrentDraftId(draft.id)
        console.log('✅ Черновик создан:', draft.id)
      }
    } catch (error) {
      console.error('❌ Ошибка создания черновика:', error)
    }
  }

  const handleAutoSaveDraft = async () => {
    if (currentDraftId) {
      await autoSaveDraft(currentDraftId, manualData, stepConfigs)
    }
  }

  const handleCreateProject = async () => {
    try {
      const project = await createProjectFromData(manualData, projectName)
      if (project) {
        console.log('✅ Проект создан:', project.id)
        setShowCreateProjectModal(false)
        setProjectName('')
      }
    } catch (error) {
      console.error('❌ Ошибка создания проекта:', error)
    }
  }

  // Функция для поиска supplier в любом из заполненных шагов
  const findSupplierInAnyStep = () => {
    console.log('🔍 Ищем supplier в любом из заполненных шагов...')
    console.log('🔍 manualData:', manualData)
    console.log('🔍 selectedSupplierData:', selectedSupplierData)
    
    // Проверяем шаг 2 (товары)
    const step2Data = manualData[2]
    console.log('🔍 step2Data:', step2Data)
    if (step2Data) {
      if (step2Data.supplier) {
        console.log('✅ Найден supplier в шаге 2:', step2Data.supplier)
        return step2Data.supplier
      }
      if (step2Data.items && step2Data.items.length > 0) {
        const firstItem = step2Data.items[0]
        if (firstItem.supplier_name) {
          console.log('✅ Найден supplier_name в шаге 2:', firstItem.supplier_name)
          return firstItem.supplier_name
        }
        if (firstItem.supplier) {
          console.log('✅ Найден supplier в товаре шага 2:', firstItem.supplier)
          return firstItem.supplier
        }
      }
    }
    
    // Проверяем шаг 4 (способы оплаты) - может содержать данные поставщика
    const step4Data = manualData[4]
    console.log('🔍 step4Data:', step4Data)
    if (step4Data) {
      if (step4Data.supplier_name) {
        console.log('✅ Найден supplier_name в шаге 4:', step4Data.supplier_name)
        return step4Data.supplier_name
      }
      if (step4Data.supplier) {
        console.log('✅ Найден supplier в шаге 4:', step4Data.supplier)
        return step4Data.supplier
      }
    }
    
    // Проверяем шаг 5 (реквизиты) - может содержать данные поставщика
    const step5Data = manualData[5]
    console.log('🔍 step5Data:', step5Data)
    if (step5Data) {
      if (step5Data.supplier_name) {
        console.log('✅ Найден supplier_name в шаге 5:', step5Data.supplier_name)
        return step5Data.supplier_name
      }
      if (step5Data.supplier) {
        console.log('✅ Найден supplier в шаге 5:', step5Data.supplier)
        return step5Data.supplier
      }
    }
    
    // Проверяем selectedSupplierData (если был выбран из каталога)
    if (selectedSupplierData) {
      if (selectedSupplierData.name) {
        console.log('✅ Найден supplier в selectedSupplierData:', selectedSupplierData.name)
        return selectedSupplierData.name
      }
      if (selectedSupplierData.company_name) {
        console.log('✅ Найден company_name в selectedSupplierData:', selectedSupplierData.company_name)
        return selectedSupplierData.company_name
      }
    }
    
    console.log('❌ Supplier не найден ни в одном шаге')
    console.log('🔍 Детали manualData:')
    Object.keys(manualData).forEach(key => {
      const numericKey = parseInt(key)
      if (!isNaN(numericKey)) {
        console.log(`  ${key}:`, manualData[numericKey])
      }
    })
    return null
  }

  // Функция для проверки доступности эхо данных
  const checkEchoDataAvailability = async () => {
    console.log('🔍 Проверяем доступность эхо данных...')
    
    // Показываем лоадер
    setEchoDataLoading(true)
    
    // Ищем supplier в любом из заполненных шагов
    const supplierName = findSupplierInAnyStep()
    
    if (!supplierName) {
      console.log('❌ Не найден supplier ни в одном шаге')
      setEchoDataAvailable({})
      setEchoDataLoading(false)
      return
    }

    console.log('🔍 Проверяем эхо данные для поставщика:', supplierName)
    
    try {
      const echoData = await getEchoSupplierData(supplierName)
      if (echoData) {
        console.log('✅ Эхо данные доступны для шагов 4 и 5')
        setEchoDataAvailable({
          4: true,
          5: true
        })
        // Показываем всплывающие подсказки
        setEchoDataTooltips({
          4: true,
          5: true
        })
        
        // Автоматически скрываем подсказки через 10 секунд
        setTimeout(() => {
          setEchoDataTooltips(prev => ({
            ...prev,
            4: false,
            5: false
          }))
        }, 10000)
      } else {
        console.log('❌ Эхо данные недоступны')
        setEchoDataAvailable({})
        setEchoDataTooltips({})
      }
    } catch (error) {
      console.error('❌ Ошибка проверки эхо данных:', error)
      setEchoDataAvailable({})
      setEchoDataTooltips({})
    } finally {
      // Скрываем лоадер
      setEchoDataLoading(false)
    }
  }
  
  // Закрытие выпадающего списка при клике вне его области
  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element
      if (!target.closest('.phantom-options-dropdown')) {
        setShowPhantomOptions(false)
      }
    }
    
    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [])

  // Получаем реальные шаблоны из базы данных
  const { templates, loading: templatesLoading, error: templatesError, fetchTemplates } = useProjectTemplates()

  // Загружаем шаблоны при монтировании компонента
  React.useEffect(() => {
    // Проверяем аутентификацию перед загрузкой
    const checkAuthAndLoad = async () => {
      try {
        console.log('🔍 Проверка авторизации...')
      const { data: { user } } = await supabase.auth.getUser()
      if (user) {
          console.log('✅ Пользователь авторизован:', user.email)
          setUser(user)
          console.log('📋 Загружаем шаблоны...')
          await fetchTemplates()
          console.log('👤 Загружаем профили клиентов...')
          await fetchClientProfiles()
          console.log('🏭 Загружаем профили поставщиков...')
          await fetchSupplierProfiles()
          
          // Создаем черновик при первой загрузке
          if (!currentDraftId) {
            console.log('📝 Создаем черновик...')
            await handleCreateDraft()
          }
        } else {
          console.log('❌ Пользователь не авторизован')
        }
      } catch (error) {
        console.error('❌ Ошибка при проверке авторизации:', error)
      }
    }
    
    checkAuthAndLoad()
  }, []) // Убираем fetchTemplates из зависимостей

  // Функция для получения списка шаблонов пользователя из реальной базы данных
  const getUserTemplates = () => {
    console.log('📋 [getUserTemplates] Проверяем шаблоны:', {
      templates: templates,
      loading: templatesLoading,
      error: templatesError,
      length: templates?.length || 0
    });
    
    if (!templates || templates.length === 0) {
      console.log('📋 [getUserTemplates] Шаблоны пусты');
      return []
    }
    
    const mappedTemplates = templates.map(template => ({
      id: template.id,
      name: template.name || 'Без названия',
      description: template.description || 'Шаблон проекта',
      availableSteps: [1, 2], // По умолчанию шаблоны содержат шаги 1 и 2
      lastUsed: template.updated_at ? new Date(template.updated_at).toLocaleDateString('ru-RU') : 'Недавно'
    }));
    
    console.log('📋 [getUserTemplates] Преобразованные шаблоны:', mappedTemplates);
    return mappedTemplates;
  }

  // Функция для получения данных поставщика из каталога
  const getSupplierDataFromCatalog = (supplierId: string) => {
    // Здесь будет реальный запрос к базе данных
    // Пока возвращаем моковые данные для тестирования
    console.log('Запрос данных поставщика:', supplierId)
    
    // Моковые данные поставщика из синей комнаты
    const mockSupplierData = {
      "supplier-1": {
        bank_name: "Сбербанк России",
        account_number: "40702810123456789012",
        swift: "SABRRUMM",
        payment_method: "bank-transfer",
        name: "ООО ТехноСнаб",
        contact_email: "info@technosnab.ru",
        contact_phone: "+7 (495) 123-45-67"
      },
      "supplier-2": {
        bank_name: "Тинькофф Банк",
        account_number: "40702810987654321098",
        swift: "TICSRUMM",
        payment_method: "bank-transfer",
        name: "ООО Электроимпорт",
        contact_email: "sales@electroimport.ru",
        contact_phone: "+7 (812) 987-65-43"
      },
      "echo-supplier-1": {
        bank_name: "Эхо Банк",
        account_number: "40702810111111111111",
        swift: "ECHORUMM",
        payment_method: "bank-transfer",
        name: "ООО Эхо Поставщик",
        contact_email: "echo@supplier.ru",
        contact_phone: "+7 (495) 111-11-11"
      }
    }
    
    return mockSupplierData[supplierId as keyof typeof mockSupplierData] || null
  }

  // Функция для получения товаров поставщика из каталога
  const getSupplierProducts = (supplierId: string) => {
    // Здесь будет реальный запрос к базе данных
    // Пока возвращаем моковые данные для тестирования
    console.log('Запрос товаров поставщика:', supplierId)
    
    // Моковые товары поставщиков
    const mockSupplierProducts = {
      "supplier-1": [
        {
          name: "Электронные компоненты",
          quantity: 100,
          price: 150,
          unit: "шт",
          supplier_id: "supplier-1"
        },
        {
          name: "Микросхемы",
          quantity: 50,
          price: 300,
          unit: "шт", 
          supplier_id: "supplier-1"
        }
      ],
      "supplier-2": [
        {
          name: "Проводники",
          quantity: 200,
          price: 25,
          unit: "м",
          supplier_id: "supplier-2"
        },
        {
          name: "Коннекторы",
          quantity: 75,
          price: 80,
          unit: "шт",
          supplier_id: "supplier-2"
        }
      ],
      "echo-supplier-1": [
        {
          name: "Эхо товар 1",
          quantity: 10,
          price: 1000,
          unit: "шт",
          supplier_id: "echo-supplier-1"
        },
        {
          name: "Эхо товар 2",
          quantity: 5,
          price: 2000,
          unit: "шт",
          supplier_id: "echo-supplier-1"
        }
      ]
    }
    
    return mockSupplierProducts[supplierId as keyof typeof mockSupplierProducts] || []
  }

  // Функция автоматического заполнения шагов IV и V на основе данных шага II
  const autoFillStepsFromSupplier = async (stepData: any) => {
    console.log('=== АВТОМАТИЧЕСКОЕ ЗАПОЛНЕНИЕ ШАГОВ IV и V ===')
    console.log('Данные для проверки:', stepData)
    
    // Проверяем, есть ли товары в данных
    if (stepData && stepData.items && stepData.items.length > 0) {
      console.log('Найдены товары:', stepData.items)
      
      // Получаем данные поставщика из первого товара
      const firstItem = stepData.items[0]
      
      // Ищем эхо данные по supplier
      if (stepData.supplier) {
        console.log('🔍 Ищем эхо данные для поставщика:', stepData.supplier)
        
        const echoData = await getEchoSupplierData(stepData.supplier)
        
        if (echoData) {
          console.log('🎭 Найдены эхо данные:', echoData)
          
          // Показываем модальное окно с предложением эхо данных
          setEchoDataModal({
            show: true,
            supplierName: stepData.supplier,
            echoData: echoData,
            projectInfo: echoData.project_info
          })
          
          console.log('📋 Показано модальное окно с эхо данными')
          return true
        } else {
          console.log('❌ Эхо данные не найдены для поставщика:', stepData.supplier)
          console.log('ℹ️ Пользователь может найти эхо данные вручную при клике на шаги 4 и 5')
          return false
        }
      } else {
        console.log('❌ supplier не найден в данных')
        return false
      }
    } else {
      console.log('❌ Товары не найдены в данных')
      return false
    }
  }

  // Функция автоматического заполнения шага II на основе данных шагов IV или V
  const autoFillStepFromRequisites = (stepData: any, stepId: number) => {
    console.log(`=== АВТОМАТИЧЕСКОЕ ЗАПОЛНЕНИЕ ШАГА II НА ОСНОВЕ ШАГА ${stepId} ===`)
    console.log('Данные для проверки:', stepData)
    
    // Проверяем, есть ли supplier_id в данных
    let supplierId = stepData.supplier_id
    if (!supplierId) {
      console.log('supplier_id не найден в данных шага', stepId)
      return false
    }
    
    console.log('Найден supplier_id:', supplierId)
    
    // Получаем данные поставщика
    const supplierData = getSupplierDataFromCatalog(supplierId)
    
    if (supplierData) {
      console.log('Данные поставщика найдены:', supplierData)
      
      // Получаем товары поставщика (в реальности это будет запрос к каталогу)
      const supplierProducts = getSupplierProducts(supplierId)
      
      if (supplierProducts && supplierProducts.length > 0) {
        // Автоматически заполняем шаг II (спецификация товаров)
        setManualData(prev => ({
          ...prev,
          2: {
            supplier: supplierData.name,
            currency: 'RUB',
            items: supplierProducts.map(product => ({
              ...product,
              supplier_id: supplierId
            })),
            auto_filled: true
          }
        }))
        
        // Устанавливаем источник данных для шага II
        setStepConfigs(prev => ({
          ...prev,
          2: "catalog"
        }))
        
        // Показываем уведомление об автоматическом заполнении
        setAutoFillNotification({
          show: true,
          message: `Товары поставщика автоматически добавлены в спецификацию`,
          supplierName: supplierData.name,
          filledSteps: [2]
        })
        
        // Скрываем уведомление через 5 секунд
        setTimeout(() => {
          setAutoFillNotification(null)
        }, 5000)
        
        console.log('✅ Шаг II автоматически заполнен товарами поставщика')
        return true
      } else {
        console.log('❌ Товары поставщика не найдены')
      }
    } else {
      console.log('❌ Данные поставщика не найдены для ID:', supplierId)
    }
    return false
  }

  // Функция для получения данных из шаблонов для конкретного шага
  const getTemplateDataForStep = async (stepId: number) => {
    console.log('Запрос данных из шаблонов для шага:', stepId)
    
    try {
      // Используем уже загруженные шаблоны из хука
      if (!templates || templates.length === 0) {
        console.log('❌ У пользователя нет шаблонов')
        return null
      }
      
      console.log('✅ Используем загруженные шаблоны:', templates.length)
      
      // Берем первый шаблон (можно добавить выбор)
      const template = templates[0]
      
      // Преобразуем данные шаблона в формат для конкретного шага
      switch (stepId) {
        case 1: // Данные компании
          return {
            name: template.company_name || '',
            legalName: template.company_legal || '',
            inn: template.company_inn || '',
            kpp: template.company_kpp || '',
            ogrn: template.company_ogrn || '',
            address: template.company_address || '',
            bankName: template.company_bank || '',
            bankAccount: template.company_account || '',
            bankCorrAccount: template.company_corr || '',
            bankBik: template.company_bik || '',
            email: template.company_email || '',
            phone: template.company_phone || '',
            website: template.company_website || ''
          }
          
        case 2: // Спецификация товаров
          return {
            supplier: template.supplier_name || '',
            currency: template.currency || 'RUB',
            items: template.specification || []
          }
          
        default:
          return null
      }
      
    } catch (error) {
      console.error('❌ Ошибка получения данных шаблона:', error)
      throw new Error('Ошибка при обработке данных шаблона')
    }
  }



  // Функция для получения эхо данных поставщика из прошлых проектов
  const getEchoSupplierData = async (supplierName: string) => {
    console.log('🔍 Поиск эхо данных для поставщика:', supplierName)
    
    try {
      // Получаем ID пользователя из сессии
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        console.log('❌ Пользователь не авторизован')
        return null
      }
      
      // 1. Находим проекты с указанным поставщиком в спецификациях
      const { data: specifications, error: specsError } = await supabase
        .from("project_specifications")
        .select(`project_id, supplier_name, created_at`)
        .eq("user_id", user.id)
        .ilike("supplier_name", `%${supplierName}%`)
        .order("created_at", { ascending: false })
      
      if (specsError) {
        console.error('❌ Ошибка получения спецификаций:', specsError)
        return null
      }
      
      if (!specifications || specifications.length === 0) {
        console.log('❌ Спецификации с поставщиком не найдены')
        return null
      }
      
      console.log('✅ Найдены спецификации:', specifications.length)
      
      // 2. Получаем ID проектов
      const projectIds = specifications.map(s => s.project_id)
      
      // 3. Получаем реквизиты для этих проектов
      const { data: projectRequisites, error: requisitesError } = await supabase
        .from("project_requisites")
        .select(`project_id, type, data, created_at`)
        .in("project_id", projectIds)
        .eq("user_id", user.id)
        .order("created_at", { ascending: false })
      
      if (requisitesError) {
        console.error('❌ Ошибка получения реквизитов:', requisitesError)
        return null
      }
      
      if (!projectRequisites || projectRequisites.length === 0) {
        console.log('❌ Реквизиты для проектов не найдены')
        return null
      }
      
      // 4. Получаем детали проектов
      const { data: projects, error: projectsError } = await supabase
        .from("projects")
        .select(`id, name, payment_method, status, amount, currency, created_at, updated_at`)
        .in("id", projectIds)
        .eq("user_id", user.id)
        .order("updated_at", { ascending: false })
      
      if (projectsError) {
        console.error('❌ Ошибка получения проектов:', projectsError)
        return null
      }
      
      // 5. Находим самый релевантный проект с правильными реквизитами
      console.log('🔍 Анализ проектов и реквизитов:')
      
      // Создаем карту проектов для быстрого поиска
      const projectsMap = new Map(projects.map(p => [p.id, p]))
      
      // Ищем проект с наиболее полными и согласованными данными
      let bestProject = null
      let bestRequisite = null
      let bestScore = 0
      
      for (const requisite of projectRequisites) {
        const project = projectsMap.get(requisite.project_id)
        if (!project) continue
        
        // Проверяем соответствие способа оплаты и типа реквизитов
        const paymentMethodMap: { [key: string]: string } = {
          'bank-transfer': 'bank',
          'p2p': 'p2p',
          'crypto': 'crypto'
        }
        
        const expectedRequisiteType = paymentMethodMap[project.payment_method] || 'bank'
        const actualRequisiteType = requisite.type
        
        // КРИТИЧЕСКОЕ ИСПРАВЛЕНИЕ: Пропускаем проекты с несоответствующими реквизитами
        if (expectedRequisiteType !== actualRequisiteType) {
          console.log(`❌ ПРОПУСКАЕМ проект "${project.name}": НЕСООТВЕТСТВИЕ payment_method="${project.payment_method}" vs тип реквизитов="${actualRequisiteType}"`)
          continue // Пропускаем этот проект полностью
        }
        
        // Вычисляем "релевантность" проекта
        let score = 0
        
        // Базовый балл за наличие данных
        score += 10
        
        // Бонус за соответствие типа реквизитов и способа оплаты (теперь всегда +50)
        score += 50
        console.log(`✅ Проект "${project.name}": payment_method="${project.payment_method}" соответствует типу реквизитов="${actualRequisiteType}"`)
        
        // Бонус за более новый проект
        const daysSinceUpdate = (Date.now() - new Date(project.updated_at).getTime()) / (1000 * 60 * 60 * 24)
        if (daysSinceUpdate < 30) score += 20
        else if (daysSinceUpdate < 90) score += 10
        
        // Бонус за завершенные проекты
        if (project.status === 'completed') score += 15
        
        // Бонус за проекты с суммой
        if (project.amount && project.amount > 0) score += 5
        
        console.log(`📊 Проект "${project.name}": релевантность = ${score}`)
        
        if (score > bestScore) {
          bestScore = score
          bestProject = project
          bestRequisite = requisite
        }
      }
      
      if (!bestProject || !bestRequisite) {
        console.log('❌ Подходящий проект не найден')
        return null
      }
      
      // ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА: Убеждаемся, что выбранный проект имеет правильные реквизиты
      const finalPaymentMethodMap: { [key: string]: string } = {
        'bank-transfer': 'bank',
        'p2p': 'p2p',
        'crypto': 'crypto'
      }
      
      const finalExpectedType = finalPaymentMethodMap[bestProject.payment_method] || 'bank'
      const finalActualType = bestRequisite.type
      
      if (finalExpectedType !== finalActualType) {
        console.error(`🚨 КРИТИЧЕСКАЯ ОШИБКА: Выбранный проект "${bestProject.name}" имеет несоответствие!`)
        console.error(`   Способ оплаты: ${bestProject.payment_method} (ожидается тип: ${finalExpectedType})`)
        console.error(`   Тип реквизитов: ${finalActualType}`)
        console.error(`   НЕ ВОЗВРАЩАЕМ НЕСООТВЕТСТВУЮЩИЕ ДАННЫЕ!`)
        return null
      }
      
      const requisiteData = bestRequisite.data
      
      console.log('✅ Выбран лучший проект:', bestProject.name)
      console.log('📋 Данные реквизита:', requisiteData)
      console.log('📋 Данные проекта:', bestProject)
      console.log('🔍 Тип реквизита:', bestRequisite.type)
      console.log('🔍 Способ оплаты проекта:', bestProject.payment_method)
      console.log('🏆 Релевантность:', bestScore)
      
      // Проверяем соответствие способа оплаты и типа реквизитов
      const paymentMethodMap: { [key: string]: string } = {
        'bank-transfer': 'bank',
        'p2p': 'p2p',
        'crypto': 'crypto'
      }
      
      const expectedRequisiteType = paymentMethodMap[bestProject.payment_method] || 'bank'
      const actualRequisiteType = bestRequisite.type
      
      if (expectedRequisiteType !== actualRequisiteType) {
        console.warn(`⚠️ НЕСООТВЕТСТВИЕ: Проект имеет payment_method="${bestProject.payment_method}" (ожидается тип="${expectedRequisiteType}"), но реквизит имеет тип="${actualRequisiteType}"`)
      }
      
      // Формируем реквизиты в зависимости от типа
      let requisites: any = {}
      
      if (actualRequisiteType === 'bank') {
        requisites = {
          bankName: requisiteData.bankName || requisiteData.details?.bankName || 'Банк поставщика',
          accountNumber: requisiteData.accountNumber || requisiteData.details?.accountNumber || '****0000',
          swift: requisiteData.swift || requisiteData.details?.swift || 'PHANTOM',
          recipientName: requisiteData.recipientName || requisiteData.details?.recipientName || 'Поставщик',
          supplier_id: `phantom-${bestProject.id}`
        }
      } else if (actualRequisiteType === 'p2p') {
        requisites = {
          card_bank: requisiteData.bank || requisiteData.details?.bank || 'Банк карты',
          card_number: requisiteData.card_number || requisiteData.details?.card_number || '****0000',
          card_holder: requisiteData.holder_name || requisiteData.details?.holder_name || 'Поставщик',
          supplier_id: `phantom-${bestProject.id}`
        }
      } else if (actualRequisiteType === 'crypto') {
        requisites = {
          crypto_network: requisiteData.network || requisiteData.details?.network || 'BTC',
          crypto_address: requisiteData.address || requisiteData.details?.address || 'Адрес кошелька',
          supplier_id: `phantom-${bestProject.id}`
        }
      }
      
      const result = {
        // Шаг IV: Способ оплаты
        payment_method: {
          method: bestProject.payment_method || 'bank-transfer',
          supplier_id: `phantom-${bestProject.id}`
        },
        
        // Шаг V: Реквизиты (правильные в зависимости от типа)
        requisites: {
          ...requisites,
          type: actualRequisiteType // Явно добавляем тип реквизитов
        },
        
        // Дополнительная информация
        project_info: {
          project_name: bestProject.name,
          project_date: bestProject.updated_at,
          amount: bestProject.amount,
          currency: bestProject.currency,
          status: bestProject.status
        }
      }
      
      console.log('🎯 ФИНАЛЬНЫЙ РЕЗУЛЬТАТ getEchoSupplierData:')
      console.log('  - Способ оплаты:', result.payment_method)
      console.log('  - Тип реквизитов:', result.requisites.type)
      console.log('  - Реквизиты:', result.requisites)
      console.log('  - Проверка соответствия:', result.payment_method.method === 'crypto' && result.requisites.type === 'crypto' ? '✅ КРИПТО' : 
                                                      result.payment_method.method === 'p2p' && result.requisites.type === 'p2p' ? '✅ P2P' :
                                                      result.payment_method.method === 'bank-transfer' && result.requisites.type === 'bank' ? '✅ БАНК' : '❌ НЕСООТВЕТСТВИЕ')
      
      return result
      
    } catch (error) {
      console.error('❌ Ошибка получения фантомных данных:', error)
      return null
    }
  }

  // Функция для получения данных профиля клиента
  const getProfileData = async (stepId: number) => {
    console.log('🔍 Получаем данные профиля для шага:', stepId)
    
    if (stepId === 1) {
      // Для шага 1 (данные компании) используем профиль клиента
      if (clientProfilesLoading) {
        console.log('⏳ Профили клиентов загружаются...')
        return null
      }
      
      if (!clientProfiles || clientProfiles.length === 0) {
        console.log('❌ Нет профилей клиентов')
        return null
      }
      
      // Если несколько профилей и не выбран конкретный - показываем выбор
      if (clientProfiles.length > 1 && !selectedProfileId) {
        console.log('🔍 Несколько профилей - показываем выбор')
        setShowProfileSelector(true)
        return null
      }
      
      // Определяем какой профиль использовать
      let targetProfile
      if (selectedProfileId) {
        targetProfile = clientProfiles.find(p => p.id === selectedProfileId)
      } else {
        targetProfile = clientProfiles.find(p => p.is_default) || clientProfiles[0]
      }
      
      if (!targetProfile) {
        console.log('❌ Не найден профиль клиента')
        return null
      }
      
      console.log('✅ Найден профиль клиента:', targetProfile.name)
      
      return {
        name: targetProfile.name,
        legalName: targetProfile.legal_name || '',
        inn: targetProfile.inn || '',
        kpp: targetProfile.kpp || '',
        ogrn: targetProfile.ogrn || '',
        address: targetProfile.legal_address || '',
        bankName: targetProfile.bank_name || '',
        bankAccount: targetProfile.bank_account || '',
        bankCorrAccount: targetProfile.corr_account || '',
        bankBik: targetProfile.bik || '',
        email: targetProfile.email || '',
        phone: targetProfile.phone || '',
        website: targetProfile.website || ''
      }
    }
    
    // Для шагов 2, 4, 5 используем профили поставщиков
    if ([2, 4, 5].includes(stepId)) {
      if (supplierProfilesLoading) {
        console.log('⏳ Профили поставщиков загружаются...')
        return null
      }
      
      if (!supplierProfiles || supplierProfiles.length === 0) {
        console.log('❌ Нет профилей поставщиков')
        return null
      }
      
      // Если несколько профилей и не выбран конкретный - показываем выбор
      if (supplierProfiles.length > 1 && !selectedSupplierProfileId) {
        console.log('🔍 Несколько профилей поставщиков - показываем выбор')
        setShowSupplierProfileSelector(true)
        return null
      }
      
      // Определяем какой профиль использовать
      let targetProfile
      if (selectedSupplierProfileId) {
        targetProfile = supplierProfiles.find(p => p.id === selectedSupplierProfileId)
      } else {
        targetProfile = supplierProfiles.find(p => p.is_default) || supplierProfiles[0]
      }
      
      if (!targetProfile) {
        console.log('❌ Не найден профиль поставщика')
        return null
      }
      
      console.log('✅ Найден профиль поставщика:', targetProfile.name)
      
      // Возвращаем данные в зависимости от шага
      if (stepId === 2) {
        // Шаг 2: Название поставщика и валюта
        return {
          supplier: targetProfile.name,
          currency: targetProfile.transfer_currency || 'USD'
        }
      } else if (stepId === 4) {
        // Шаг 4: Методы оплаты
        return {
          method: targetProfile.payment_methods || 'bank-transfer'
        }
      } else if (stepId === 5) {
        // Шаг 5: Банковские реквизиты
        return {
          bankName: targetProfile.bank_name || '',
          accountNumber: targetProfile.account_number || '',
          swift: targetProfile.swift || '',
          iban: targetProfile.iban || '',
          recipientName: targetProfile.recipient_name || '',
          transferCurrency: targetProfile.transfer_currency || 'USD',
          paymentPurpose: targetProfile.payment_purpose || ''
        }
      }
    }
    
    // Для остальных шагов пока возвращаем null
    console.log('⚠️ Данные профиля для шага', stepId, 'пока не реализованы')
    return null
  }

  // Функция для получения данных шаблона (симуляция)
  const getTemplateData = (templateId: string) => {
    // Находим реальный шаблон в базе данных
    const template = templates?.find(t => t.id === templateId)
    
    if (!template) {
      console.error('Шаблон не найден:', templateId)
      return null
    }
    
    console.log('=== ДАННЫЕ ШАБЛОНА ДЛЯ СПЕЦИФИКАЦИИ ===')
    console.log('template:', template)
    console.log('template.items:', template.items)
    console.log('template.specification:', template.specification)
    console.log('template.data?.specification:', template.data?.specification)
    
    return {
      id: template.id,
      name: template.name || 'Без названия',
      availableSteps: [1, 2], // По умолчанию шаблоны содержат шаги 1 и 2
              data: {
          1: {
            name: template.company_name || '',
            legalName: template.company_legal_name || '',
            inn: template.company_inn || '',
            kpp: template.company_kpp || '',
            ogrn: template.company_ogrn || '',
            address: template.company_address || '',
            bankName: template.company_bank || '',
            bankAccount: template.company_account || '',
            bankCorrAccount: template.company_corr_account || template.company_corr || '',
            bankBik: template.company_bik || '',
            email: template.company_email || '',
            phone: template.company_phone || '',
            website: template.company_website || ''
          },
        2: {
          supplier: template.supplier_name || template.data?.supplier_name || template.data?.supplier || '',
          currency: template.currency || 'RUB',
          items: template.items || template.specification || template.data?.specification || []
        }
      }
    }
  }

  // Функция для применения данных шаблона к конкретному шагу
  const applyTemplateStep = (stepId: number, templateData: any) => {
    console.log(`=== ПРИМЕНЕНИЕ ШАБЛОНА ДЛЯ ШАГА ${stepId} ===`)
    console.log('templateData:', templateData)
    console.log('templateData.data:', templateData.data)
    console.log(`templateData.data[${stepId}]:`, templateData.data[stepId as keyof typeof templateData.data])
    
    if (templateData.data[stepId as keyof typeof templateData.data]) {
      // Применяем данные шаблона
      setStepConfigs(prev => ({
        ...prev,
        [stepId]: "template"
      }))
      const stepData = templateData.data[stepId as keyof typeof templateData.data]
      setManualData(prev => ({
        ...prev,
        [stepId]: stepData
      }))
      setSelectedSource(null)
      setTemplateStepSelection(null)
      console.log(`✅ Применены данные шаблона для шага ${stepId}:`, stepData)
      
      // Проверяем, нужно ли автоматическое заполнение (если это шаг II)
      if (stepId === 2) {
        autoFillStepsFromSupplier(stepData)
      }
      
      // Проверяем, нужно ли автоматическое заполнение (если это шаги IV или V)
      if (stepId === 4 || stepId === 5) {
        autoFillStepFromRequisites(stepData, stepId)
      }
    } else {
      console.log(`❌ Нет данных шаблона для шага ${stepId}`)
    }
  }

  // Обработчик выбора шаблона
  const handleTemplateSelect = (templateId: string) => {
    const templateData = getTemplateData(templateId)
    if (!templateData) return
    
    const availableSteps = templateData.availableSteps
    
    // Если шаблон содержит несколько шагов, показываем выбор
    if (availableSteps.length > 1) {
      setTemplateStepSelection({
        templateId: templateId,
        availableSteps: availableSteps
      })
      setTemplateSelection(false)
    } else if (availableSteps.length === 1) {
      // Если только один шаг, применяем его автоматически
      applyTemplateStep(availableSteps[0], templateData)
      setTemplateSelection(false)
    }
  }

  // Обработчик выбора шага в шаблоне
  const handleTemplateStepSelect = (stepId: number) => {
    if (templateStepSelection) {
      const templateData = getTemplateData(templateStepSelection.templateId)
      if (templateData) {
        applyTemplateStep(stepId, templateData)
      }
    }
  }

  // Обработчик заполнения всех шагов из шаблона
  const handleFillAllTemplateSteps = () => {
    if (templateStepSelection) {
      const templateData = getTemplateData(templateStepSelection.templateId)
      if (!templateData) return
      
      // Применяем данные для всех доступных шагов
      templateStepSelection.availableSteps.forEach(stepId => {
        if (templateData.data[stepId as keyof typeof templateData.data]) {
          const stepData = templateData.data[stepId as keyof typeof templateData.data]
          setStepConfigs(prev => ({
            ...prev,
            [stepId]: "template"
          }))
          setManualData(prev => ({
            ...prev,
            [stepId]: stepData
          }))
          
          // Проверяем, нужно ли автоматическое заполнение (если это шаг II)
          if (stepId === 2) {
            // Используем setTimeout, чтобы дать время для обновления состояния
            setTimeout(async () => {
              await autoFillStepsFromSupplier(stepData)
            }, 100)
          }
          
          // Проверяем, нужно ли автоматическое заполнение (если это шаги IV или V)
          if (stepId === 4 || stepId === 5) {
            // Используем setTimeout, чтобы дать время для обновления состояния
            setTimeout(() => {
              autoFillStepFromRequisites(stepData, stepId)
            }, 100)
          }
        }
      })
      
      setSelectedSource(null)
      setTemplateStepSelection(null)
      console.log(`Применены данные шаблона для всех шагов: ${templateStepSelection.availableSteps.join(', ')}`)
    }
  }

  // Обработчик наведения на кубик
  const handleStepHover = (stepId: number) => {
    if (isStepEnabled(stepId)) {
      setHoveredStep(stepId)
      setLastHoveredStep(stepId)
    }
  }

  // Обработчик клика по кубику (теперь не нужен, так как выбор происходит в Block 2)
  const handleStepClick = (stepId: number) => {
    console.log(`🖱️ Клик по шагу ${stepId}`)
    console.log(`📊 manualData[${stepId}]:`, manualData[stepId])
    console.log(`📊 stepConfigs[${stepId}]:`, stepConfigs[stepId])
    
    // Для шагов 4 и 5: показываем модальное окно с предложением данных
    if (stepId === 4 || stepId === 5) {
      console.log(`🎯 Обрабатываем клик по шагу ${stepId}`)
      
      // Если данные уже применены, не показываем ничего (просмотр только через карточки в блоке 2)
      if (manualData[stepId]?.user_choice && stepConfigs[stepId] === 'echoData') {
        console.log('✅ Эхо данные уже применены, просмотр доступен только через карточки в блоке 2')
        return
      }
      
      // Проверяем, есть ли эхо данные
      if (manualData[stepId]?.echo_data) {
        console.log('📋 Показываем модальное окно с эхо данными')
        setEchoDataModal({
          show: true,
          supplierName: manualData[stepId]?.supplier_name || 'Поставщик',
          echoData: manualData[stepId]?.echo_data,
          projectInfo: manualData[stepId]?.echo_data?.project_info
        })
        return
      }
      
      // Если нет эхо данных, предлагаем поиск
      console.log('📋 Предлагаем поиск эхо данных')
      
      // Подробное логирование данных шага 2
      console.log('🔍 Проверяем данные шага 2:')
      console.log('manualData[2]:', manualData[2])
      console.log('stepConfigs[2]:', stepConfigs[2])
      
      // Попробуем найти эхо данные для поставщика из шага 2
      const step2Data = manualData[2]
      console.log('🔍 step2Data:', step2Data)
      
      // Проверяем различные возможные места, где может быть supplier
      let supplierName = null
      if (step2Data) {
        if (step2Data.supplier) {
          supplierName = step2Data.supplier
          console.log('✅ Найден supplier в step2Data.supplier:', supplierName)
        } else if (step2Data.items && step2Data.items.length > 0) {
          // Проверяем первого товара
          const firstItem = step2Data.items[0]
          console.log('🔍 Первый товар:', firstItem)
          if (firstItem.supplier_name) {
            supplierName = firstItem.supplier_name
            console.log('✅ Найден supplier в первом товаре:', supplierName)
          } else if (firstItem.supplier) {
            supplierName = firstItem.supplier
            console.log('✅ Найден supplier в первом товаре (supplier):', supplierName)
          }
        }
      }
      
      if (supplierName) {
        console.log('🔍 Ищем эхо данные для поставщика:', supplierName)
        
        // Показываем лоадер
        setEchoDataLoading(true)

        getEchoSupplierData(supplierName).then(echoData => {
          if (echoData) {
            console.log('✅ Найдены эхо данные, показываем модальное окно')
            setEchoDataModal({
              show: true,
              supplierName: supplierName,
              echoData: echoData,
              projectInfo: echoData.project_info
            })
          } else {
            console.log('❌ Эхо данные для поставщика не найдены, показываем сообщение')
            alert(`Эхо данные для поставщика "${supplierName}" не найдены. Создайте проект с этим поставщиком для получения эхо данных.`)
          }
        }).catch(error => {
          console.error('❌ Ошибка поиска эхо данных:', error)
          alert('Ошибка при поиске эхо данных: ' + (error as Error).message)
        }).finally(() => {
          // Скрываем лоадер
          setEchoDataLoading(false)
        })
      } else {
        console.log('❌ Нет данных поставщика в шаге 2')
        console.log('Доступные поля в step2Data:', step2Data ? Object.keys(step2Data) : 'step2Data is null')
        alert('Сначала заполните шаг 2 (спецификация) с поставщиком, чтобы найти эхо данные.')
      }
      
      return
    }
    
    // Для остальных шагов: стандартная логика hover
    handleStepHover(stepId)
  }

  // Обработчик выбора источника данных
  const handleSourceSelect = (source: string) => {
    if (lastHoveredStep) {
      // Если выбран шаблон, показываем выбор шаблонов пользователя
      if (source === "template") {
        setTemplateSelection(true)
        return
      }
      
      // Для других источников применяем стандартную логику
      setStepConfigs(prev => ({
        ...prev,
        [lastHoveredStep]: source
      }))
      setSelectedSource(source)
      
      // Если выбран каталог, показываем модальное окно выбора источника
      if (source === "catalog") {
        console.log("Выбран каталог для шага", lastHoveredStep)
        setCatalogSourceStep(lastHoveredStep)
        setShowCatalogSourceModal(true)
        return
      }
      
      // Если выбран профиль, применяем данные из профиля
      if (source === "profile") {
        console.log('🔍 Применяем данные профиля для шага:', lastHoveredStep)
        getProfileData(lastHoveredStep).then(profileData => {
        if (profileData) {
          setManualData(prev => ({
            ...prev,
            [lastHoveredStep]: profileData
          }))
            console.log(`✅ Применены данные профиля для шага ${lastHoveredStep}`)
          } else {
            console.log(`❌ Не удалось получить данные профиля для шага ${lastHoveredStep}`)
        }
        }).catch(error => {
          console.error('❌ Ошибка получения данных профиля:', error)
        })
      }
      
      // Если выбраны шаблоны, применяем данные из шаблонов
      if (source === "template") {
        try {
          // Проверяем, есть ли загруженные шаблоны
          if (!templates || templates.length === 0) {
            setTemplateError('Нет доступных шаблонов. Создайте шаблон в разделе "Создать проект".')
            return
          }
          
          // Берем первый шаблон
          const template = templates[0]
          let templateData = null
          
          // Преобразуем данные шаблона в формат для конкретного шага
          if (lastHoveredStep === 1) {
            templateData = {
              name: template.company_name || '',
              legalName: template.company_legal || '',
              inn: template.company_inn || '',
              kpp: template.company_kpp || '',
              ogrn: template.company_ogrn || '',
              address: template.company_address || '',
              bankName: template.company_bank || '',
              bankAccount: template.company_account || '',
              bankCorrAccount: template.company_corr || '',
              bankBik: template.company_bik || '',
              email: template.company_email || '',
              phone: template.company_phone || '',
              website: template.company_website || ''
            }
          } else if (lastHoveredStep === 2) {
            templateData = {
              supplier: template.supplier_name || '',
              currency: template.currency || 'RUB',
              items: template.specification || []
            }
          }
          
          if (templateData) {
            setManualData(prev => ({
              ...prev,
              [lastHoveredStep]: templateData
            }))
            console.log(`✅ Применены данные шаблона для шага ${lastHoveredStep}`)
            
            // Если это шаг II (спецификация), ищем фантомные данные поставщика
            if (lastHoveredStep === 2 && templateData.supplier) {
              console.log('🔍 Ищем фантомные данные для поставщика:', templateData.supplier)
              
                      getEchoSupplierData(templateData.supplier).then(echoData => {
          if (echoData) {
            console.log('✅ Найдены эхо данные:', echoData)
                  
                  // Автоматически заполняем шаги IV и V эхо данными
                  setManualData(prev => ({
                    ...prev,
                    4: echoData.payment_method,
                    5: echoData.requisites
                  }))
                  
                  // Устанавливаем источники данных
                  setStepConfigs(prev => ({
                    ...prev,
                    4: "echoData",
                    5: "echoData"
                  }))
                  
                  // Показываем уведомление
                  setAutoFillNotification({
                    show: true,
                    message: `Найдены эхо данные поставщика из проекта "${echoData.project_info.project_name}" (${echoData.project_info.status})`,
                    supplierName: templateData.supplier,
                    filledSteps: [4, 5]
                  })
                  
                  setTimeout(() => {
                    setAutoFillNotification(null)
                  }, 5000)
                } else {
                  console.log('❌ Фантомные данные не найдены')
                }
              }).catch(error => {
                console.error('❌ Ошибка получения эхо данных:', error)
              })
            }
          } else {
            setTemplateError(`Шаблон не содержит данных для шага ${lastHoveredStep}`)
          }
        } catch (error) {
          console.error('❌ Ошибка применения данных шаблона:', error)
          setTemplateError('Ошибка при обработке данных шаблона')
        }
      }
    }
  }

  // Определение текущего этапа
  const getCurrentStage = () => {
    // Проверяем, заполнены ли все основные шаги этапа 1
    const step1Filled = isStepFilledByUser(1)
    const step2Filled = isStepFilledByUser(2)
    const step4Filled = isStepFilledByUser(4)
    const step5Filled = isStepFilledByUser(5)
    
    console.log('🔍 Проверка этапа:', { step1Filled, step2Filled, step4Filled, step5Filled })
    
    const stage1Completed = step1Filled && step2Filled && step4Filled && step5Filled
    
    if (stage1Completed && currentStage === 1) {
      console.log('✅ Этап 1 завершен, переходим к этапу 2')
      
      // Автоматически показываем сводку при завершении этапа 1
      setTimeout(() => {
        console.log('🎯 Автоматически показываем сводку при завершении этапа 1')
        checkSummaryReadiness()
      }, 100)
      
      return 2 // Этап 2: Подготовка инфраструктуры
    } else {
      console.log('⏳ Этап 1 еще не завершен или уже в этапе 2')
      return currentStage // Возвращаем текущий этап
    }
  }

  // Определение активного сценария
  const getActiveScenario = () => {
    // Используем ту же логику, что и в isStepFilledByUser
    if (isStepFilledByUser(1)) {
      return 'A'
    }
    
    if (isStepFilledByUser(2)) {
      return 'B1'
    }
    
    if (isStepFilledByUser(4) || isStepFilledByUser(5)) {
      return 'B2'
    }
    
    return 'none' // Сценарий еще не определен
  }

  // Проверка, заполнен ли шаг пользователем (не эхо данными)
  const isStepFilledByUser = (stepId: number) => {
    // Шаг 1: проверяем наличие данных
    if (stepId === 1) {
      return stepConfigs[1] || (manualData[1] && Object.keys(manualData[1]).length > 0)
    }
    
    // Шаг 2: проверяем наличие товаров
    if (stepId === 2) {
      return stepConfigs[2] || (manualData[2] && manualData[2].items && manualData[2].items.length > 0)
    }
    
    // Шаги 4, 5: считаем заполненными если пользователь явно выбрал (включая эхо данные)
    if (stepId === 4 || stepId === 5) {
      // Проверяем, есть ли выбор пользователя (включая примененные эхо данные)
      const hasUserChoice = manualData[stepId] && manualData[stepId].user_choice
      
      // Проверяем источник данных
      const source = stepConfigs[stepId]
      
      // Проверяем наличие данных
      const hasData = manualData[stepId] && Object.keys(manualData[stepId]).length > 0
      
      // Считаем заполненным если:
      // 1. Пользователь явно выбрал (user_choice: true)
      // 2. ИЛИ есть источник данных (включая echoData)
      // 3. ИЛИ есть данные в manualData
      const result = hasUserChoice || source || hasData
      
      console.log(`🔍 Шаг ${stepId}: user_choice=${hasUserChoice}, source=${source}, hasData=${hasData}, результат=${result}`)
      console.log(`🔍 manualData[${stepId}]:`, manualData[stepId])
      return result
    }
    
    // Остальные шаги
    return stepConfigs[stepId] || manualData[stepId]
  }

  // Функция для перехода к следующему этапу
  const goToNextStage = () => {
    console.log('🚀 Переход к следующему этапу')
    
    if (currentStage === 1) {
      // Переходим к этапу 2: Подготовка инфраструктуры
      setCurrentStage(2)
      console.log('✅ Переход к этапу 2: Подготовка инфраструктуры')
      
      // Закрываем модальные окна
      setShowSummaryModal(false)
      setShowStageTransitionModal(false)
      
      // TODO: Здесь можно добавить логику для активации шагов 3, 6, 7
      // Например, показать подсказки для заполнения этих шагов
    } else if (currentStage === 2) {
      // Переходим к этапу 3: Анимация сделки
      setCurrentStage(3)
      console.log('✅ Переход к этапу 3: Анимация сделки')
      
      setShowStageTransitionModal(false)
      // TODO: Активировать анимацию сделки
    }
  }

  const openStageTransitionModal = () => {
    setShowStageTransitionModal(true)
  }

  // Функция для получения читаемого названия источника данных
  const getSourceDisplayName = (source: string) => {
    switch (source) {
      case 'profile':
        return 'Профиль пользователя'
      case 'template':
        return 'Шаблон проекта'
      case 'catalog':
        return 'Каталог поставщиков'
      case 'blue_room':
        return 'Синяя комната'
      case 'orange_room':
        return 'Оранжевая комната'
      case 'echo_cards':
        return 'Эхо карточки'
      case 'manual':
        return 'Ручной ввод'
      case 'automatic':
        return 'Автоматически'
      default:
        return source || 'Ручной ввод'
    }
  }

  // Проверка доступности шага
  const isStepEnabled = (stepId: number) => {
    // Этап 1: Подготовка данных
    if (currentStage === 1) {
      // Активные шаги в этапе 1: 1, 2, 4, 5
      if ([1, 2, 4, 5].includes(stepId)) {
        return true
      }
      
      // Закрытые шаги в этапе 1: 3, 6, 7
      if ([3, 6, 7].includes(stepId)) {
        return false
      }
    }
    
    // Этап 2: Подготовка инфраструктуры
    if (currentStage === 2) {
      // Все шаги доступны в этапе 2
      return true
    }
    
    // Этап 3: Анимация сделки
    if (currentStage === 3) {
      // Все шаги доступны в этапе 3
      return true
    }
    
    return false
  }

  // Получение прогресса
  const getProgress = () => {
    // Считаем только шаги, заполненные пользователем (не эхо данными)
    const filledSteps = [1, 2, 3, 4, 5, 6, 7].filter(stepId => isStepFilledByUser(stepId)).length
    return Math.round((filledSteps / 7) * 100)
  }

  // Получение сводки настроенных шагов
    const getConfiguredStepsSummary = () => {
    const summary = []

    // Проверяем все шаги
    for (let stepId = 1; stepId <= 7; stepId++) {
      const isFilled = isStepFilledByUser(stepId)

      if (isFilled) {
        const step = constructorSteps.find(s => s.id === stepId)
        const source = stepConfigs[stepId]

        const sourceInfo = source ? dataSources[source as keyof typeof dataSources] : null

        const item = {
          stepId: stepId,
          stepName: step?.name,
          sourceName: sourceInfo?.name || 'Вручную',
          source: source,
          data: manualData[stepId]
        }

        summary.push(item)
      }
    }

    return summary.sort((a, b) => a.stepId - b.stepId)
  }

  // Функция проверки готовности к показу сводки
  const checkSummaryReadiness = () => {
    const requiredSteps = [1, 2, 4, 5]
    const filledSteps = requiredSteps.filter(stepId => isStepFilledByUser(stepId))
    
    console.log('🔍 Проверка готовности к сводке:')
    console.log('  - Требуемые шаги:', requiredSteps)
    console.log('  - Заполненные шаги:', filledSteps)
    console.log('  - manualData:', manualData)
    console.log('  - stepConfigs:', stepConfigs)
    
    requiredSteps.forEach(stepId => {
      const isFilled = isStepFilledByUser(stepId)
      console.log(`  - Шаг ${stepId}: ${isFilled ? '✅ Заполнен' : '❌ Не заполнен'}`)
    })
    
    if (filledSteps.length === requiredSteps.length) {
      console.log('✅ Все основные шаги заполнены - показываем сводку')
      setShowSummaryModal(true)
    } else {
      console.log(`❌ Не все шаги заполнены: ${filledSteps.length}/${requiredSteps.length}`)
    }
  }

  // Обработчик сохранения данных формы
  const handleManualDataSave = (stepId: number, data: any) => {
    console.log('=== СОХРАНЕНИЕ ДАННЫХ ===')
    console.log('stepId:', stepId)
    console.log('data для сохранения:', data)
    
    setManualData(prev => {
      console.log('Текущие manualData:', prev)
      
      // Для шага 1 объединяем данные с существующими
      if (stepId === 1) {
        const existingData = prev[stepId] || {}
        const mergedData = { ...existingData, ...data }
        console.log('Объединенные данные:', mergedData)
        const newData = { ...prev, [stepId]: mergedData }
        
        // Автосохранение черновика
        setTimeout(() => {
          checkSummaryReadiness()
          handleAutoSaveDraft()
        }, 100)
        return newData
      }
      
      // Для остальных шагов просто заменяем
      const newData = { ...prev, [stepId]: data }
      
      // Автоматическое заполнение шагов IV и V после заполнения шага II
      if (stepId === 2) {
        autoFillStepsFromSupplier(data)
      }
      
      // Автоматическое заполнение шага II после заполнения шагов IV или V
      if (stepId === 4 || stepId === 5) {
        autoFillStepFromRequisites(data, stepId)
      }
      
      // Автосохранение черновика
      setTimeout(() => {
        checkSummaryReadiness()
        handleAutoSaveDraft()
      }, 100)
      return newData
    })
    
    // Проверяем переход между этапами
    setTimeout(() => {
      const currentStage = getCurrentStage()
      const previousStage = getCurrentStage() // Это будет предыдущий этап
      
      if (currentStage === 2 && previousStage === 1) {
        // Показываем уведомление о переходе к этапу 2
        setAutoFillNotification({
          show: true,
          message: '🎉 Этап 1 завершен! Теперь доступны шаги 3, 6, 7 для завершения сделки.',
          supplierName: '',
          filledSteps: [3, 6, 7]
        })
      }
    }, 100)
    
    setSelectedSource(null) // Скрываем форму после сохранения
    setEditingType('') // Сбрасываем тип редактирования
  }

  // Обработчик загрузки файла
  const handleFileUpload = async (stepId: number, file: File) => {
    try {
      // Здесь будет логика загрузки файла в Supabase Storage
      console.log(`Загружаем файл для шага ${stepId}:`, file.name)
      
      // Пока просто сохраняем имя файла для демонстрации
      setUploadedFiles(prev => ({ ...prev, [stepId]: file.name }))
      
      // Если это файл спецификации, можно попробовать извлечь данные
      if (stepId === 2 && file.name.endsWith('.csv')) {
        // Здесь будет парсинг CSV файла
        console.log('Парсим CSV файл спецификации')
      }
      
    } catch (error) {
      console.error('Ошибка загрузки файла:', error)
    }
  }

  // Обработчик отмены выбора источника
  const handleCancelSource = () => {
    setSelectedSource(null)
    setEditingType('')
  }

  const handleRemoveSource = (stepId: number) => {
    // Удаляем источник данных для конкретного шага
    setStepConfigs(prev => {
      const newConfigs = { ...prev }
      delete newConfigs[stepId]
      return newConfigs
    })
    
    // Очищаем сохраненные данные
    setManualData(prev => {
      const newData = { ...prev }
      delete newData[stepId]
      return newData
    })
    
    // Очищаем загруженные файлы
    setUploadedFiles(prev => {
      const newFiles = { ...prev }
      delete newFiles[stepId]
      return newFiles
    })
    
    // Сбрасываем выбранный источник
    setSelectedSource(null)
  }

  // Функция для открытия предварительного просмотра данных
  const handlePreviewData = (type: string, data: any) => {
    console.log('=== ПРЕДВАРИТЕЛЬНЫЙ ПРОСМОТР ===')
    console.log('type:', type)
    console.log('data для просмотра:', data)
    console.log('manualData[1]:', manualData[1])
    
    setPreviewType(type)
    setPreviewData(data)
    setShowPreviewModal(true)
  }

  // Функция для открытия формы редактирования
  const handleEditData = (type: string) => {
    setSelectedSource("manual")
    setShowPreviewModal(false)
    // Сохраняем тип редактируемых данных для передачи в форму
    if (type === 'bank') {
      setEditingType('bank')
    } else if (type === 'contacts') {
      setEditingType('contacts')
    } else {
      setEditingType('company')
    }
  }

  const handleAddProductsFromCatalog = () => {
    console.log('🛒 Открытие каталога для добавления товаров')
    // TODO: Реализовать модальное окно каталога
    // Пока что используем моковые данные для демонстрации
    const mockCatalogProducts = [
      {
        id: 'prod_1',
        name: 'Товар из каталога 1',
        price: 1500,
        supplier_id: 'supp_1',
        supplier_name: 'ООО "Тестовый поставщик"'
      },
      {
        id: 'prod_2', 
        name: 'Товар из каталога 2',
        price: 2300,
        supplier_id: 'supp_1',
        supplier_name: 'ООО "Тестовый поставщик"'
      }
    ]
    
    // Добавляем товары в Step II
    setManualData(prev => ({
      ...prev,
      2: {
        ...prev[2],
        items: [...(prev[2]?.items || []), ...mockCatalogProducts.map(product => ({
          name: product.name,
          quantity: 1,
          price: product.price,
          supplier_id: product.supplier_id,
          supplier_name: product.supplier_name
        }))]
      }
    }))
    
    // Ищем фантомные данные для поставщика
    const firstProduct = mockCatalogProducts[0]
    if (firstProduct?.supplier_id) {
              console.log('🔍 Ищем фантомные данные для поставщика:', firstProduct.supplier_name)
      
              getEchoSupplierData(firstProduct.supplier_name).then(echoData => {
          if (echoData) {
          // Автоматически заполняем Steps IV и V
          autoFillStepsFromSupplier({
            supplier: firstProduct.supplier_name,
            items: mockCatalogProducts
          })
          
          // Показываем уведомление
          setAutoFillNotification({
            show: true,
            message: `Эхо данные из проекта "${echoData.project_info.project_name}" автоматически применены`,
            supplierName: firstProduct.supplier_name,
            filledSteps: [4, 5]
          })
        }
      })
    }
  }

  // Функции для обработки свайпа
  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX)
  }

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX)
  }

  const handleTouchEnd = () => {
    if (!touchStart || !touchEnd || !lastHoveredStep) return
    
    const distance = touchStart - touchEnd
    const isLeftSwipe = distance > 50
    const isRightSwipe = distance < -50
    const items = manualData[lastHoveredStep]?.items

    if (isLeftSwipe && items && items.length > 3) {
      // Свайп влево - следующий набор
      setCurrentItemIndex(prev => 
        prev < Math.max(0, items.length - 3) ? prev + 1 : prev
      )
    }
    
    if (isRightSwipe && items && items.length > 3) {
      // Свайп вправо - предыдущий набор
      setCurrentItemIndex(prev => prev > 0 ? prev - 1 : prev)
    }

    // Сброс значений
    setTouchStart(0)
    setTouchEnd(0)
  }

  // Функция для тестирования эхо данных
  const testEchoData = async () => {
    console.log('🧪 Тестирование эхо данных...')
    
    try {
      // Попробуем получить реальные эхо данные для тестирования
      const supplierName = 'Тестовый поставщик'
      const echoData = await getEchoSupplierData(supplierName)
      
      if (echoData) {
        console.log('✅ Найдены реальные эхо данные для тестирования')
        
        // Показываем модальное окно с реальными данными
        setEchoDataModal({
          show: true,
          supplierName: supplierName,
          echoData: echoData,
          projectInfo: echoData.project_info
        })
        
        console.log('📋 Модальное окно должно открыться с реальными данными')
      } else {
        console.log('❌ Реальные эхо данные не найдены для тестирования')
        alert('Реальные эхо данные не найдены. Создайте проект с поставщиком для тестирования.')
      }
      
    } catch (error) {
      console.error('❌ Ошибка тестирования:', error)
      alert('Ошибка при поиске эхо данных: ' + (error as Error).message)
    }
  }

  // Функция для применения эхо данных (вызывается из модального окна)
  const applyEchoData = (echoData: any) => {
    console.log('✅ Применяем эхо данные:', echoData)
    console.log('🔍 Способ оплаты:', echoData.payment_method)
    console.log('🔍 Реквизиты:', echoData.requisites)
    console.log('🔍 Тип реквизитов:', echoData.requisites?.type)
    
    // Применяем данные для шагов 4 и 5
    const step4Data = {
      ...echoData.payment_method,
      user_choice: true,
      source: 'echoData',
      supplier_name: echoData.supplier_name,
      project_info: echoData.project_info
    }
    
    const step5Data = {
      ...echoData.requisites,
      user_choice: true,
      source: 'echoData',
      supplier_name: echoData.supplier_name,
      project_info: echoData.project_info,
      // Явно сохраняем тип реквизитов
      type: echoData.requisites?.type || 
            (echoData.payment_method?.method === 'crypto' ? 'crypto' : 
             echoData.payment_method?.method === 'p2p' ? 'p2p' : 'bank')
    }
    
    console.log('🔍 Тип реквизитов в step5Data:', step5Data.type)
    console.log('🔍 Способ оплаты:', echoData.payment_method?.method)
    
    console.log('📋 Step 4 Data:', step4Data)
    console.log('📋 Step 5 Data:', step5Data)
    
    setManualData(prev => {
      const newData = {
      ...prev,
      4: step4Data,
      5: step5Data
      }
      console.log('🔄 Новые manualData:', newData)
      return newData
    })
    
    // Устанавливаем источник данных
    setStepConfigs(prev => ({
      ...prev,
      4: 'echoData',
      5: 'echoData'
    }))
    
    // Очищаем доступность эхо данных (звездочки исчезнут)
    setEchoDataAvailable(prev => ({
      ...prev,
      4: false,
      5: false
    }))
    
    // Скрываем всплывающие подсказки
    setEchoDataTooltips(prev => ({
      ...prev,
      4: false,
      5: false
    }))
    
    // Закрываем модальное окно
    setEchoDataModal(null)
    
    // Показываем уведомление
    alert('Эхо данные успешно применены!')
  }

  // Функция для отклонения эхо данных
  const rejectEchoData = () => {
    console.log('❌ Пользователь отклонил эхо данные')
    
    // Очищаем доступность эхо данных (звездочки исчезнут)
    setEchoDataAvailable(prev => ({
      ...prev,
      4: false,
      5: false
    }))
    
    // Скрываем всплывающие подсказки
    setEchoDataTooltips(prev => ({
      ...prev,
      4: false,
      5: false
    }))
    
    setEchoDataModal(null)
  }

  // Автоматически проверяем доступность эхо данных при изменении данных любого шага
  useEffect(() => {
    // Проверяем, есть ли данные в любом из шагов 2, 4, 5
    const hasAnyStepData = manualData[2] || manualData[4] || manualData[5] || selectedSupplierData
    
    if (hasAnyStepData) {
      checkEchoDataAvailability()
    } else {
      setEchoDataAvailable({})
    }
  }, [manualData[2], manualData[4], manualData[5], selectedSupplierData])
  
  // Автоматически ищем эхо данные для шагов 1 и 2 при изменении данных любого шага
  useEffect(() => {
    // Проверяем, есть ли данные в любом из шагов 2, 4, 5
    const hasAnyStepData = manualData[2] || manualData[4] || manualData[5] || selectedSupplierData
    
    if (hasAnyStepData && !(manualData as any).echoSuggestions?.step1) {
      // Ищем эхо данные для шагов 1 и 2
      suggestEchoDataForSteps()
    }
  }, [manualData[2], manualData[4], manualData[5], selectedSupplierData])

  // Обработчик клика по карточке шага в блоке 2
  const handleStepCardClick = (item: any) => {
    // Открываем модальное окно для всех карточек в блоке 2
    handlePreviewData(getPreviewType(item.stepId), item.data)
  }

  // Функция для определения типа предварительного просмотра
  const getPreviewType = (stepId: number) => {
    switch (stepId) {
      case 1: return 'company'
      case 2: return 'product'
      case 4: return 'payment'
      case 5: return 'requisites'
      default: return 'company'
    }
  }

  // Функция для закрытия всплывающей подсказки эхо данных
  const closeEchoDataTooltip = (stepId: number) => {
    setEchoDataTooltips(prev => ({
      ...prev,
      [stepId]: false
    }))
  }

  // Функции для обработки источников каталога
  const handleBlueRoomSource = async () => {
    if (!catalogSourceStep) return
    
    console.log('🔵 Загружаем данные из синей комнаты для шага:', catalogSourceStep)
    
    setBlueRoomLoading(true)
    setShowCatalogSourceModal(false)
    
    try {
      const response = await fetch('/api/catalog/user-suppliers')
      const data = await response.json()
      
      if (data.suppliers && data.suppliers.length > 0) {
        console.log('✅ Найдены поставщики в синей комнате:', data.suppliers.length)
        setBlueRoomSuppliers(data.suppliers)
        setShowBlueRoomSupplierModal(true)
      } else {
        console.log('❌ Нет поставщиков в синей комнате')
        // TODO: Показать toast уведомление о пустой синей комнате
        alert('В синей комнате нет поставщиков. Добавьте поставщиков в каталог.')
      }
    } catch (error) {
      console.error('❌ Ошибка загрузки синей комнаты:', error)
      alert('Ошибка загрузки поставщиков из синей комнаты')
    } finally {
      setBlueRoomLoading(false)
    }
  }

  const handleOrangeRoomSource = async () => {
    if (!catalogSourceStep) return
    
    console.log('🟠 Загружаем данные из оранжевой комнаты для шага:', catalogSourceStep)
    
    try {
      const response = await fetch('/api/catalog/verified-suppliers')
      const data = await response.json()
      
      if (data.suppliers && data.suppliers.length > 0) {
        // Показываем выбор поставщика из оранжевой комнаты
        console.log('✅ Найдены поставщики в оранжевой комнате:', data.suppliers.length)
        // TODO: Показать модальное окно выбора поставщика
      } else {
        console.log('❌ Нет поставщиков в оранжевой комнате')
        // TODO: Показать сообщение о пустой оранжевой комнате
      }
    } catch (error) {
      console.error('❌ Ошибка загрузки оранжевой комнаты:', error)
    }
    
    setShowCatalogSourceModal(false)
  }

  const handleEchoCardsSource = async () => {
    if (!catalogSourceStep) return
    
    console.log('🔄 Загружаем данные из эхо карточек для шага:', catalogSourceStep)
    
    try {
      const response = await fetch('/api/catalog/echo-cards')
      const data = await response.json()
      
      if (data.echoCards && data.echoCards.length > 0) {
        // Показываем выбор эхо карточки
        console.log('✅ Найдены эхо карточки:', data.echoCards.length)
        // TODO: Показать модальное окно выбора эхо карточки
      } else {
        console.log('❌ Нет эхо карточек')
        // TODO: Показать сообщение об отсутствии эхо карточек
      }
    } catch (error) {
      console.error('❌ Ошибка загрузки эхо карточек:', error)
    }
    
    setShowCatalogSourceModal(false)
  }

  // Функция выбора поставщика из синей комнаты
  // Функция выбора метода оплаты и автоматического заполнения реквизитов
  const handlePaymentMethodSelect = (method: string, supplier: any) => {
    console.log('🎯 Выбран метод оплаты:', method)
    
    // Обновляем шаг 4 - устанавливаем выбранный метод как единственный
    setManualData(prev => ({
      ...prev,
      4: {
        type: 'single',
        method: method,
        selectedMethod: method,
        defaultMethod: method
      }
    }))
    
    // Автоматически заполняем шаг 5 соответствующими реквизитами
    let requisitesData = {}
    
    if (method === 'crypto' && supplier.payment_methods?.crypto) {
      requisitesData = {
        type: 'crypto',
        crypto_name: supplier.payment_methods.crypto.network || 'ETH',
        crypto_address: supplier.payment_methods.crypto.address,
        crypto_network: supplier.payment_methods.crypto.network || 'ETH'
      }
    } else if (method === 'p2p' && supplier.payment_methods?.card) {
      requisitesData = {
        type: 'p2p',
        card_bank: supplier.payment_methods.card.bank,
        card_number: supplier.payment_methods.card.number,
        card_holder: supplier.payment_methods.card.holder,
        card_expiry: supplier.payment_methods.card.expiry || ''
      }
    } else if (method === 'bank' && supplier.payment_methods?.bank) {
      requisitesData = {
        type: 'bank',
        bankName: supplier.payment_methods.bank.bank_name,
        recipientName: supplier.name,
        accountNumber: supplier.payment_methods.bank.account_number,
        swift: supplier.payment_methods.bank.swift_code,
        iban: supplier.payment_methods.bank.iban || '',
        transferCurrency: supplier.currency || 'RUB'
      }
    }
    
    // Сохраняем реквизиты в шаге 5
    setManualData(prev => ({
      ...prev,
      5: requisitesData
    }))
    
    // Устанавливаем источник данных для шага 5
    setStepConfigs(prev => ({
      ...prev,
      5: 'catalog'
    }))
    
    console.log('✅ Автоматически заполнены реквизиты для метода:', method)
    
    // Показываем уведомление
    alert(`Выбран метод оплаты: ${method === 'crypto' ? 'Криптовалюта' : method === 'p2p' ? 'P2P перевод' : 'Банковский перевод'}. Реквизиты автоматически заполнены.`)
  }

  const handleSelectBlueRoomSupplier = async (supplier: any) => {
    console.log('🎯 === НАЧАЛО handleSelectBlueRoomSupplier ===')
    console.log('🎯 supplier:', supplier)
    console.log('🎯 catalogSourceStep:', catalogSourceStep)
    console.log('🎯 lastHoveredStep:', lastHoveredStep)
    
    if (!catalogSourceStep) {
      console.log('❌ catalogSourceStep не установлен, выходим')
      return
    }
    
    try {
      // Используем данные поставщика напрямую (они уже включают catalog_user_products)
      const fullSupplier = supplier
      
      // Сохраняем данные поставщика для использования в других шагах
      setSelectedSupplierData(fullSupplier)
      
      // АВТОМАТИЧЕСКИ заполняем связанные шаги при выборе поставщика!
      console.log('🎯 Автоматически заполняем связанные шаги для поставщика:', fullSupplier.name)
      
      // Шаг 2: Товары поставщика (ОБЯЗАТЕЛЬНО!)
      const specificationData = {
        supplier: fullSupplier.name,
        currency: fullSupplier.currency || 'USD',
        items: fullSupplier.catalog_user_products?.map((product: any) => ({
          name: product.name,
          description: product.description || '',
          quantity: 1,
          price: product.price || 0,
          unit: product.unit || 'шт'
        })) || [],
        user_choice: true
      }
      
      // Шаг 4: Методы оплаты поставщика
      const paymentMethods = []
      if (fullSupplier.payment_methods?.bank) {
        paymentMethods.push('bank')
      }
      if (fullSupplier.payment_methods?.card) {
        paymentMethods.push('p2p')
      }
      if (fullSupplier.payment_methods?.crypto) {
        paymentMethods.push('crypto')
      }
      
      const paymentData = {
        type: 'multiple',
        methods: paymentMethods,
        defaultMethod: paymentMethods[0] || 'bank',
        supplier: fullSupplier.name,
        user_choice: true
      }
      
      // Шаг 5: Реквизиты поставщика
      const allRequisites = []
      if (fullSupplier.payment_methods?.bank) {
        allRequisites.push({
          type: 'bank',
          bankName: fullSupplier.payment_methods.bank.bank_name,
          accountNumber: fullSupplier.payment_methods.bank.account_number,
          bik: fullSupplier.payment_methods.bank.bik,
          correspondentAccount: fullSupplier.payment_methods.bank.correspondent_account,
          supplier: fullSupplier.name
        })
      }
      if (fullSupplier.payment_methods?.card) {
        allRequisites.push({
          type: 'p2p',
          card_number: fullSupplier.payment_methods.card.number,
          card_bank: fullSupplier.payment_methods.card.bank,
          card_holder: fullSupplier.payment_methods.card.holder,
          supplier: fullSupplier.name
        })
      }
      if (fullSupplier.payment_methods?.crypto) {
        allRequisites.push({
          type: 'crypto',
          crypto_address: fullSupplier.payment_methods.crypto.address,
          crypto_network: fullSupplier.payment_methods.crypto.network,
          supplier: fullSupplier.name
        })
      }
      
      const requisitesData = {
        type: 'multiple',
        requisites: allRequisites,
        defaultRequisite: allRequisites[0] || null,
        supplier: fullSupplier.name,
        user_choice: true
      }
      
      // Сохраняем данные для шагов 2, 4, 5 (НЕ шаг 1!)
      setManualData(prev => ({
        ...prev,
        2: specificationData,
        4: paymentData,
        5: requisitesData
      }))
      
      // Устанавливаем источники для шагов 2, 4, 5
      setStepConfigs(prev => ({
        ...prev,
        2: 'blue_room',
        4: 'blue_room',
        5: 'blue_room'
      }))
      
      console.log('✅ Автоматически заполнены связанные шаги для поставщика:')
      console.log('  - Шаг 2 (товары):', specificationData.items.length, 'товаров')
      console.log('  - Шаг 4 (оплата):', paymentMethods.length, 'методов')
      console.log('  - Шаг 5 (реквизиты):', allRequisites.length, 'реквизитов')
      console.log('  - Шаг 1 (клиент): НЕ заполняется (пользователь выберет сам)')
      
      // Закрываем модальное окно каталога
      setShowCatalogSourceModal(false)
      setCatalogSourceStep(null)
      
      // Показываем уведомление об успешном заполнении
      console.log(`✅ Данные поставщика "${fullSupplier.name}" успешно применены ко ВСЕМ шагам!`)
      
      console.log('🎯 Начинаем поиск эхо данных для поставщика:', fullSupplier.name)
      console.log('🎯 Вызываем suggestEchoDataForSteps с данными:', fullSupplier)
      
      // Предлагаем эхо данные для шагов 1 и 2
      try {
        await suggestEchoDataForSteps(fullSupplier)
        console.log('🎯 suggestEchoDataForSteps завершился успешно')
      } catch (error) {
        console.error('❌ Ошибка в suggestEchoDataForSteps:', error)
      }
      
      console.log('🎯 Поиск эхо данных завершен')
      
    } catch (error) {
      console.error('❌ Ошибка при выборе поставщика:', error)
      alert('Ошибка при выборе поставщика')
    }
    
    setShowBlueRoomSupplierModal(false)
  }

  // Функция поиска поставщика в каталоге по реквизитам
  const findSupplierByRequisites = async (requisites: any) => {
    try {
      console.log('🔍 Поиск поставщика по реквизитам:', requisites)
      
      // Получаем всех поставщиков из каталога
      const response = await fetch('/api/catalog/user-suppliers')
      const suppliers = await response.json()
      
      if (!suppliers || suppliers.length === 0) {
        console.log('❌ Нет поставщиков в каталоге')
        return null
      }
      
      // Ищем поставщика с совпадающими реквизитами
      for (const supplier of suppliers) {
        console.log('🔍 Проверяем поставщика:', supplier.name)
        
        // Проверяем банковские реквизиты
        if (requisites.type === 'bank' && supplier.payment_methods?.bank) {
          const bankMatch = 
            supplier.payment_methods.bank.account_number === requisites.accountNumber ||
            supplier.payment_methods.bank.bank_name === requisites.bankName
          
          if (bankMatch) {
            console.log('✅ Найден поставщик по банковским реквизитам:', supplier.name)
            return supplier
          }
        }
        
        // Проверяем P2P реквизиты
        if (requisites.type === 'p2p' && supplier.payment_methods?.card) {
          const p2pMatch = 
            supplier.payment_methods.card.number === requisites.card_number ||
            supplier.payment_methods.card.bank === requisites.card_bank
          
          if (p2pMatch) {
            console.log('✅ Найден поставщик по P2P реквизитам:', supplier.name)
            return supplier
          }
        }
        
        // Проверяем крипто реквизиты
        if (requisites.type === 'crypto' && supplier.payment_methods?.crypto) {
          const cryptoMatch = 
            supplier.payment_methods.crypto.address === requisites.crypto_address ||
            supplier.payment_methods.crypto.network === requisites.crypto_network
          
          if (cryptoMatch) {
            console.log('✅ Найден поставщик по крипто реквизитам:', supplier.name)
            return supplier
          }
        }
      }
      
      console.log('❌ Поставщик с такими реквизитами не найден')
      return null
      
    } catch (error) {
      console.error('❌ Ошибка поиска поставщика по реквизитам:', error)
      return null
    }
  }

  // Функция поиска исторических проектов по реквизитам поставщика
  const findHistoricalProjectsByRequisites = async (supplierRequisites: any) => {
    try {
      console.log('🔍 Поиск исторических проектов по реквизитам:', supplierRequisites)
      
      const { data: projects, error } = await supabase
        .from('projects')
        .select(`
          id,
          project_name,
          created_at,
          status,
          client_profiles!inner(
            id,
            name,
            company_name,
            inn,
            address,
            email,
            phone
          ),
          project_specifications!inner(
            id,
            items
          ),
          project_requisites!inner(
            id,
            type,
            crypto_address,
            crypto_network,
            card_number,
            card_bank,
            account_number,
            bank_name
          )
        `)
        .eq('status', 'completed')
        .order('created_at', { ascending: false })
        .limit(10)
      
      if (error) {
        console.error('❌ Ошибка поиска проектов:', error)
        return []
      }
      
      // Фильтруем проекты по совпадению реквизитов
      const matchingProjects = projects?.filter(project => {
        const projectRequisites = project.project_requisites
        
        // Проверяем совпадение по типу реквизитов
        return projectRequisites.some((req: any) => {
          if (supplierRequisites.type === 'crypto' && req.type === 'crypto') {
            return req.crypto_network === supplierRequisites.crypto_network
          }
          if (supplierRequisites.type === 'p2p' && req.type === 'p2p') {
            return req.card_bank === supplierRequisites.card_bank
          }
          if (supplierRequisites.type === 'bank' && req.type === 'bank') {
            return req.bank_name === supplierRequisites.bankName
          }
          return false
        })
      }) || []
      
      console.log('✅ Найдено проектов с совпадающими реквизитами:', matchingProjects.length)
      return matchingProjects
      
    } catch (error) {
      console.error('❌ Ошибка при поиске исторических проектов:', error)
      return []
    }
  }

  // СИСТЕМА 1: Поиск эхо данных по имени поставщика (текущая)
  const suggestEchoDataByName = async (supplierName: string) => {
    try {
      console.log('🔍 === СИСТЕМА 1: Поиск по имени ===')
      console.log('🔍 Ищем поставщика по имени:', supplierName)
      
      const response = await fetch(`/api/catalog/user-suppliers?search=${encodeURIComponent(supplierName)}`)
      const suppliers = await response.json()
      
      if (suppliers.length > 0) {
        const supplier = suppliers[0]
        console.log('✅ Найден поставщик по имени:', supplier.name)
        
        return {
          step1: {
            clients: [{
              name: supplier.contact_person || supplier.name,
              company_name: supplier.company_name,
              inn: supplier.inn,
              address: supplier.address,
              email: supplier.contact_email,
              phone: supplier.contact_phone
            }],
            source: 'nameSearch',
            description: `Данные поставщика по имени: ${supplier.name}`
          }
        }
      }
      
      console.log('❌ Поставщик по имени не найден')
      return null
      
    } catch (error) {
      console.error('❌ Ошибка поиска по имени:', error)
      return null
    }
  }

  // СИСТЕМА 2: Поиск эхо данных по реквизитам
  const suggestEchoDataByRequisites = async () => {
    try {
      console.log('🔍 === СИСТЕМА 2: Поиск по реквизитам ===')
      
      // Получаем реквизиты из шага 5
      const step5Data = manualData[5]
      if (!step5Data || !step5Data.requisites) {
        console.log('❌ Нет реквизитов в шаге 5')
        return null
      }
      
      console.log('🔍 Реквизиты из шага 5:', step5Data.requisites)
      
      // Ищем поставщика по реквизитам
      const supplier = await findSupplierByRequisites(step5Data.requisites[0]) // Берем первый выбранный
      
      if (supplier) {
        console.log('✅ Найден поставщик по реквизитам:', supplier.name)
        
        // Получаем товары поставщика
        const productsResponse = await fetch(`/api/catalog/user-suppliers/${supplier.id}/products`)
        const productsData = await productsResponse.json()
        const products = productsData.products || []
        
        return {
          step2: {
            products: products,
            source: 'requisitesSearch',
            description: `Товары поставщика по реквизитам: ${supplier.name}`
          }
        }
      }
      
      console.log('❌ Поставщик по реквизитам не найден')
      return null
      
    } catch (error) {
      console.error('❌ Ошибка поиска по реквизитам:', error)
      return null
    }
  }

  // СИСТЕМА 3: Поиск эхо данных по историческим проектам
  const suggestEchoDataByHistory = async () => {
    try {
      console.log('🔍 === СИСТЕМА 3: Поиск по истории ===')
      
      // Получаем реквизиты из шага 5
      const step5Data = manualData[5]
      if (!step5Data || !step5Data.requisites) {
        console.log('❌ Нет реквизитов в шаге 5')
        return null
      }
      
      // Ищем исторические проекты с такими реквизитами
      const historicalProjects = await findHistoricalProjectsByRequisites(step5Data.requisites[0])
      
      if (historicalProjects.length > 0) {
        const bestProject = historicalProjects[0] // Берем самый релевантный
        console.log('✅ Найден исторический проект:', bestProject.project_name)
        
        return {
          step1: {
            clients: bestProject.client_profiles ? [bestProject.client_profiles] : [],
            source: 'historySearch',
            description: `Данные клиента из истории: ${bestProject.project_name}`
          },
          step2: {
            products: bestProject.project_specifications?.[0]?.items || [],
            source: 'historySearch',
            description: `Товары из истории: ${bestProject.project_name}`
          }
        }
      }
      
      console.log('❌ Исторические проекты не найдены')
      return null
      
    } catch (error) {
      console.error('❌ Ошибка поиска по истории:', error)
      return null
    }
  }

  // ГЛАВНАЯ ФУНКЦИЯ: Объединяет все системы поиска
  const suggestEchoDataForSteps = async (supplierData?: any) => {
    try {
      console.log('🎯 === НАЧАЛО suggestEchoDataForSteps ===')
      console.log('🎯 supplierData:', supplierData)
      console.log('🎯 Текущий manualData:', manualData)
      console.log('🎯 Текущий stepConfigs:', stepConfigs)
      
      // Показываем лоадер
      setEchoDataLoadingSteps1_2(true)
      
      // Собираем результаты от всех систем
      const allResults = {}
      
      // СИСТЕМА 1: Поиск по имени (если есть supplierData)
      if (supplierData) {
        const supplierName = supplierData.name || supplierData.company_name
        console.log('🎯 Запускаем СИСТЕМУ 1 (по имени):', supplierName)
        
        const result1 = await suggestEchoDataByName(supplierName)
        if (result1) {
          Object.assign(allResults, result1)
          console.log('✅ СИСТЕМА 1 дала результат:', result1)
        }
      }
      
      // СИСТЕМА 2: Поиск по реквизитам (если заполнен шаг 5)
      if (manualData[5] && manualData[5].requisites) {
        console.log('🎯 Запускаем СИСТЕМУ 2 (по реквизитам)')
        
        const result2 = await suggestEchoDataByRequisites()
        if (result2) {
          Object.assign(allResults, result2)
          console.log('✅ СИСТЕМА 2 дала результат:', result2)
        }
      }
      
      // СИСТЕМА 3: Поиск по истории (если заполнен шаг 5)
      if (manualData[5] && manualData[5].requisites) {
        console.log('🎯 Запускаем СИСТЕМУ 3 (по истории)')
        
        const result3 = await suggestEchoDataByHistory()
        if (result3) {
          Object.assign(allResults, result3)
          console.log('✅ СИСТЕМА 3 дала результат:', result3)
        }
      }
      
      // Сохраняем все найденные эхо данные
      if (Object.keys(allResults).length > 0) {
        setManualData(prev => ({
          ...prev,
          echoSuggestions: allResults
        }))
        
        console.log('✅ Все эхо данные сохранены:', allResults)
      } else {
        console.log('❌ Ни одна система не нашла эхо данных')
      }
      
      // Скрываем лоадер
      setEchoDataLoadingSteps1_2(false)
      
    } catch (error) {
      console.error('❌ Ошибка в suggestEchoDataForSteps:', error)
      setEchoDataLoadingSteps1_2(false)
    }
  }

  return (
    <div className="container mx-auto py-8 pb-24">
      {/* Заголовок */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center gap-3">
          <Blocks className="h-8 w-8 text-blue-500" />
          <h1 className="text-3xl font-bold">Конструктор атомарных сделок</h1>
        </div>
        <div className="flex gap-4">
          <Button 
            variant="outline" 
            onClick={async () => {
              try {
                const response = await fetch('/api/test-client-profile', { method: 'POST' })
                const result = await response.json()
                if (result.success) {
                  alert('Тестовый профиль клиента создан!')
                  await fetchClientProfiles()
                } else {
                  alert('Ошибка: ' + result.error)
                }
              } catch (error) {
                alert('Ошибка создания профиля: ' + error)
              }
            }} 
            className="gap-2"
          >
            <User className="h-4 w-4" />
            Создать тест профиль клиента
          </Button>
          <Button 
            variant="outline" 
            onClick={async () => {
              try {
                const response = await fetch('/api/test-supplier-profile', { method: 'POST' })
                const result = await response.json()
                if (result.success) {
                  alert('Тестовый профиль поставщика создан!')
                  await fetchSupplierProfiles()
                } else {
                  alert('Ошибка: ' + result.error)
                }
              } catch (error) {
                alert('Ошибка создания профиля: ' + error)
              }
            }} 
            className="gap-2"
          >
            <Building className="h-4 w-4" />
            Создать тест профиль поставщика
          </Button>
          <Button variant="outline" className="gap-2">
            <Settings className="h-4 w-4" />
            Настройки
          </Button>
          <Button 
            variant="outline" 
            onClick={() => {
              console.log('🧪 Ручной тест модального окна сводки')
              console.log('manualData:', manualData)
              checkSummaryReadiness()
            }} 
            className="gap-2"
          >
            <CheckCircle className="h-4 w-4" />
            Тест сводки
          </Button>
          <Button 
            variant="outline" 
            onClick={() => {
              console.log('🎯 Принудительный показ модального окна сводки')
              setShowSummaryModal(true)
            }} 
            className="gap-2"
          >
            <Eye className="h-4 w-4" />
            Показать сводку
          </Button>
          <Button 
            onClick={async () => {
              console.log('🔍 === РУЧНОЙ ПОИСК ЭХО ДАННЫХ ===')
              console.log('🔍 Текущий manualData:', manualData)
              console.log('🔍 Текущий stepConfigs:', stepConfigs)
              try {
                await suggestEchoDataForSteps()
                console.log('🔍 Ручной поиск эхо данных завершен')
              } catch (error) {
                console.error('❌ Ошибка в ручном поиске эхо данных:', error)
              }
            }} 
            className="gap-2"
            variant="outline"
          >
            <Eye className="h-4 w-4" />
            Найти эхо данные
          </Button>
          <Button className="gap-2">
            Запустить проект
            <ArrowRight className="w-4 h-4" />
          </Button>
        </div>
      </div>



      {/* Block 1: 7 кубиков-шагов */}
      <Card className="mb-8">
        <CardContent className="p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-xl font-bold">Шаги конструктора</h2>
              <p className="text-gray-600">Выберите источники данных для каждого шага</p>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-sm">
                <span className="font-medium">Этап {currentStage}: </span>
                <span className="text-gray-600">
                  {currentStage === 1 ? 'Подготовка данных' : 
                   currentStage === 2 ? 'Подготовка инфраструктуры' : 
                   'Анимация сделки'}
                </span>
              </div>
              <div className="text-sm">
                <span className="font-medium">Сценарий: </span>
                <span className="text-gray-600">
                  {getActiveScenario() === 'A' ? 'А (Клиент-покупатель)' :
                   getActiveScenario() === 'B1' ? 'Б1 (Поставщик-товары)' :
                   getActiveScenario() === 'B2' ? 'Б2 (Поставщик-реквизиты)' : 'Не определен'}
                </span>
              </div>
            </div>
          </div>
          
          {/* Все 7 кубиков в одной горизонтальной линии */}
          <div className="grid grid-cols-7 gap-4">
            {constructorSteps.map((step) => {
              const isEnabled = isStepEnabled(step.id)
              

              
              return (
              <motion.div
                key={step.id}
                  className={`relative transition-all duration-300 ${
                    isEnabled ? 'cursor-pointer opacity-100' : 'cursor-not-allowed opacity-50'
                  }`}
                  onHoverStart={() => isEnabled ? handleStepHover(step.id) : null}
                  onClick={() => isEnabled ? handleStepClick(step.id) : null}
                  whileHover={isEnabled ? { scale: 1.05 } : {}}
                  whileTap={isEnabled ? { scale: 0.95 } : {}}
              >

                
                <div className={`
                    aspect-square rounded-lg border-2 p-4 flex flex-col items-center justify-center relative group
                  ${(stepConfigs[step.id] && manualData[step.id]?.user_choice) || 
                    (stepConfigs[step.id] && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5 || step.id === 4 || step.id === 5)) || 
                    (manualData[step.id] && Object.keys(manualData[step.id]).length > 0 && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5 || step.id === 4 || step.id === 5))
                                          ? 'border-blue-500 border-dashed bg-blue-50'
                                          : (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5) && ((manualData as any).echoSuggestions?.step1 || (manualData as any).echoSuggestions?.step2) && isEnabled
                                            ? 'border-purple-400 bg-purple-50 hover:border-purple-500'
                                            : isEnabled
                                              ? 'border-gray-300 hover:border-blue-400'
                                              : 'border-gray-200 bg-gray-50'
                                        }
                  `}>
                               {/* Индикатор заблокированного шага с tooltip */}
             {!isEnabled && (
               <div className="absolute inset-0 bg-gray-100/80 rounded-lg flex items-center justify-center group">
                 <div className="text-center">
                   <Lock className="h-6 w-6 text-gray-400 mx-auto mb-1" />
                   <p className="text-xs text-gray-500">Этап {getCurrentStage() === 1 ? '2' : '1'}</p>
                 </div>
                 
                 {/* Tooltip при наведении */}
                 <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
                   <div className="text-center">
                     <p className="font-medium">
                       {step.id === 3 ? 'Документы проекта' :
                        step.id === 6 ? 'Финансовые условия' :
                        step.id === 7 ? 'Запуск проекта' : 'Откроется в следующем этапе'}
                     </p>
                     <p className="text-gray-300">
                       {step.id === 3 ? 'Загрузка документов и спецификаций' :
                        step.id === 6 ? 'Настройка условий оплаты и доставки' :
                        step.id === 7 ? 'Финальная проверка и запуск сделки' : 'Заполните шаги 1, 2, 4, 5 для продолжения'}
                     </p>
                   </div>
                   {/* Стрелка вниз */}
                   <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-800"></div>
                 </div>
               </div>
             )}
                    {/* Иконка замка для заблокированных шагов */}
                    {!isEnabled && (
                      <div className="absolute top-2 left-2">
                        <Lock className="h-4 w-4 text-gray-400" />
                      </div>
                    )}
                    
                    
                                        
                                        {/* Индикатор эхо данных для шагов 1 и 2 */}
                                        {(step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5) && ((manualData as any).echoSuggestions?.step1 || (manualData as any).echoSuggestions?.step2) && (
                      <div className="absolute top-2 left-2">
                                            <div className="w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center">
                                              <span className="text-white text-xs">📊</span>
                                            </div>
                                          </div>
                                        )}
                                        
                                        {/* Лоадер эхо данных для шагов 1 и 2 */}
                                        {(step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5) && echoDataLoadingSteps1_2 && (
                      <div className="absolute top-2 left-2">
                                            <div className="w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center">
                                              <Loader className="w-3 h-3 text-white animate-spin" />
                                            </div>
                                          </div>
                                        )}
                    
                  {/* Римская цифра в правом верхнем углу */}
                  <div className={`absolute top-2 right-2 w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                      isEnabled 
                        ? (stepConfigs[step.id] && manualData[step.id]?.user_choice) || 
                           (stepConfigs[step.id] && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5)) || 
                           (manualData[step.id] && Object.keys(manualData[step.id]).length > 0 && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5))
                          ? 'bg-blue-500 text-white'
                          : (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5) && ((manualData as any).echoSuggestions?.step1 || (manualData as any).echoSuggestions?.step2)
                            ? 'bg-purple-500 text-white'
                            : 'bg-gray-400 text-white'
                        : 'bg-gray-300 text-gray-500'
                    }`}>
                    {step.id === 1 ? 'I' : step.id === 2 ? 'II' : step.id === 3 ? 'III' : 
                     step.id === 4 ? 'IV' : step.id === 5 ? 'V' : step.id === 6 ? 'VI' : 'VII'}
                  </div>
                  
                  {/* Иконка шага в центре */}
                  <div className="mb-2">
                    {stepIcons[step.id] && React.createElement(stepIcons[step.id] as React.ComponentType<any>, { 
                        className: `h-6 w-6 ${
                          isEnabled 
                            ? (stepConfigs[step.id] && manualData[step.id]?.user_choice) || 
                               (stepConfigs[step.id] && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5)) || 
                               (manualData[step.id] && Object.keys(manualData[step.id]).length > 0 && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5))
                              ? 'text-blue-600'
                              : (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5) && ((manualData as any).echoSuggestions?.step1 || (manualData as any).echoSuggestions?.step2)
                                ? 'text-purple-600'
                                : 'text-gray-600'
                            : 'text-gray-400'
                        }` 
                    })}
                  </div>
                  
                  {/* Название и описание */}
                    <div className={`text-sm font-medium text-center ${
                      isEnabled 
                        ? (stepConfigs[step.id] && manualData[step.id]?.user_choice) || 
                           (stepConfigs[step.id] && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5)) || 
                           (manualData[step.id] && Object.keys(manualData[step.id]).length > 0 && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5))
                          ? 'text-gray-800' 
                          : (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5) && ((manualData as any).echoSuggestions?.step1 || (manualData as any).echoSuggestions?.step2)
                            ? 'text-purple-800'
                            : 'text-gray-600'
                        : 'text-gray-500'
                    }`}>
                      {step.name}
                    </div>
                    <div className={`text-xs text-center mt-1 ${
                      isEnabled 
                        ? (stepConfigs[step.id] && manualData[step.id]?.user_choice) || 
                           (stepConfigs[step.id] && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5)) || 
                           (manualData[step.id] && Object.keys(manualData[step.id]).length > 0 && (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5))
                          ? 'text-gray-500' 
                          : (step.id === 1 || step.id === 2 || step.id === 4 || step.id === 5) && ((manualData as any).echoSuggestions?.step1 || (manualData as any).echoSuggestions?.step2)
                            ? 'text-purple-600'
                            : 'text-gray-400'
                        : 'text-gray-400'
                    }`}>
                      {step.description}
                    </div>
                  
                  {/* Бейдж с источником данных */}
                  {stepConfigs[step.id] && (
                    <div className="mt-2">
                      <Badge variant="secondary" className="text-xs">
                        {dataSources[stepConfigs[step.id] as keyof typeof dataSources]?.name}
                      </Badge>
                    </div>
                  )}
                    

                </div>
              </motion.div>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {/* Block 2: Интерактивная область с вариантами заполнения */}
      <Card className="mb-8">
        <CardContent className="p-6">
          <h2 className="text-xl font-bold mb-6">Область настройки</h2>
          
          {/* Уведомление об автоматическом заполнении */}
          {autoFillNotification && (
            <div className="bg-green-50 border-l-4 border-green-400 p-4 mb-4 rounded-r-lg">
              <div className="flex items-center">
                <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
                <div>
                  <p className="text-green-700 font-medium">{autoFillNotification.message}</p>
                  <p className="text-green-600 text-sm">
                    Поставщик: {autoFillNotification.supplierName} | 
                    Заполнены шаги: {autoFillNotification.filledSteps.map(step => 
                      step === 4 ? 'IV' : step === 5 ? 'V' : step
                    ).join(', ')}
                  </p>
                </div>
                <button 
                  onClick={() => setAutoFillNotification(null)}
                  className="ml-auto text-green-400 hover:text-green-600"
                >
                  <X className="h-4 w-4" />
                </button>
              </div>
            </div>
          )}
          

          
          <div className="min-h-[200px] border-2 border-dashed border-gray-300 rounded-lg p-6 relative">
            {/* Кнопки действий в правом верхнем углу внутри контейнера */}
            {lastHoveredStep && stepConfigs[lastHoveredStep] && (
              <div className="absolute top-4 right-4 z-10 flex flex-col gap-2">
                {/* Кнопка удаления */}
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleRemoveSource(lastHoveredStep)}
                  className="text-red-500 border-red-200 hover:bg-red-50 hover:border-red-300 hover:text-red-600 transition-all duration-200 shadow-sm hover:shadow-md bg-white"
                >
                  <div className="flex items-center gap-2">
                    <div className="w-5 h-5 rounded-full bg-red-100 flex items-center justify-center">
                      <X className="h-3 w-3 text-red-500" />
                    </div>
                    <span className="font-medium">Удалить данные</span>
                  </div>
                </Button>
                

                
                {/* Кнопка добавления товаров из каталога (только для шага 2) */}
                {lastHoveredStep === 2 && (
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => handleAddProductsFromCatalog()}
                    className="text-orange-600 border-orange-200 hover:bg-orange-50 hover:border-orange-300 hover:text-orange-700 transition-all duration-200 shadow-sm hover:shadow-md bg-white"
                  >
                    <div className="flex items-center gap-2">
                      <div className="w-5 h-5 rounded-full bg-orange-100 flex items-center justify-center">
                        <Plus className="h-3 w-3 text-orange-600" />
                      </div>
                      <span className="font-medium">Добавить товары</span>
                    </div>
                  </Button>
                )}
              </div>
            )}
            

            <AnimatePresence>
              {lastHoveredStep && isStepEnabled(lastHoveredStep) ? (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="h-full"
                >
                  {/* Заголовок выбранного шага */}
                  <div className="text-center mb-6">
                    <div className="flex items-center justify-center gap-3 mb-2">
                      <div className="w-8 h-8 rounded-full bg-blue-500 text-white flex items-center justify-center text-sm font-bold">
                        {lastHoveredStep === 1 ? 'I' : lastHoveredStep === 2 ? 'II' : lastHoveredStep === 3 ? 'III' : 
                         lastHoveredStep === 4 ? 'IV' : lastHoveredStep === 5 ? 'V' : lastHoveredStep === 6 ? 'VI' : 'VII'}
                      </div>
                      <h3 className="text-lg font-semibold">
                        {constructorSteps.find(s => s.id === lastHoveredStep)?.name}
                      </h3>
                    </div>
                    <p className="text-gray-600">
                      {constructorSteps.find(s => s.id === lastHoveredStep)?.description}
                    </p>
                  </div>

                  {/* Показываем выбор шаблонов пользователя */}
                  {templateSelection ? (
                    <div>
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="text-base font-semibold text-gray-800">Выберите шаблон</h4>
                        <div className="flex gap-2">
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => fetchTemplates()}
                            disabled={templatesLoading}
                          >
                            {templatesLoading ? 'Загрузка...' : 'Обновить'}
                          </Button>
                          <Button variant="outline" size="sm" onClick={() => setTemplateSelection(false)}>
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      
                      <div className="grid gap-4">
                        {templatesLoading ? (
                          <div className="flex items-center justify-center p-8">
                            <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                            <span className="ml-2 text-gray-600">Загрузка шаблонов...</span>
                          </div>
                        ) : templatesError ? (
                          <div className="text-center py-8 text-red-500">
                            <p>Ошибка загрузки шаблонов: {templatesError}</p>
                            <div className="flex gap-2 mt-4 justify-center">
                              <Button 
                                onClick={() => fetchTemplates()}
                                variant="outline" 
                              >
                                Попробовать снова
                              </Button>
                              <Button 
                                onClick={async () => {
                                  try {
                                    const response = await fetch('/api/check-project-templates')
                                    const data = await response.json()
                                    console.log('🔍 Результат проверки таблицы:', data)
                                    alert(`Проверка таблицы: ${JSON.stringify(data, null, 2)}`)
                                  } catch (error) {
                                    console.error('Ошибка проверки:', error)
                                    alert('Ошибка проверки таблицы')
                                  }
                                }}
                                variant="outline" 
                              >
                                Проверить таблицу
                              </Button>
                              <Button 
                                onClick={async () => {
                                  try {
                                    const response = await fetch('/api/create-project-templates-table', {
                                      method: 'POST'
                                    })
                                    const data = await response.json()
                                    console.log('🔧 Результат создания таблицы:', data)
                                    if (data.success) {
                                      alert('Таблица создана успешно! Обновите страницу.')
                                      window.location.reload()
                                    } else {
                                      alert(`Ошибка создания таблицы: ${data.error}`)
                                    }
                                  } catch (error) {
                                    console.error('Ошибка создания:', error)
                                    alert('Ошибка создания таблицы')
                                  }
                                }}
                                variant="outline" 
                                className="bg-green-50 hover:bg-green-100"
                              >
                                Создать таблицу
                              </Button>
                              <Button 
                                onClick={async () => {
                                  try {
                                    const response = await fetch('/api/analyze-database-structure')
                                    const data = await response.json()
                                    console.log('🔍 Результат анализа БД:', data)
                                    alert(`Анализ БД: ${JSON.stringify(data.summary, null, 2)}`)
                                  } catch (error) {
                                    console.error('Ошибка анализа:', error)
                                    alert('Ошибка анализа БД')
                                  }
                                }}
                                variant="outline" 
                                className="bg-blue-50 hover:bg-blue-100"
                              >
                                Анализ БД
                              </Button>
                            </div>
                          </div>
                        ) : getUserTemplates().length === 0 ? (
                          <div className="text-center py-8 text-gray-500">
                            <FileText className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                            <p>У вас пока нет сохраненных шаблонов</p>
                            <p className="text-sm mt-2">Создайте шаблон в разделе "Создать проект"</p>
                          </div>
                        ) : (
                          getUserTemplates().map((template) => (
                            <div
                              key={template.id}
                              className="flex items-center gap-4 p-4 border-2 border-gray-200 rounded-xl hover:border-blue-400 hover:bg-blue-50 cursor-pointer transition-all duration-200 shadow-sm hover:shadow-md"
                              onClick={() => handleTemplateSelect(template.id)}
                            >
                              <div className="w-12 h-12 rounded-full bg-green-500 flex items-center justify-center shadow-sm">
                                <FileText className="h-6 w-6 text-white" />
                              </div>
                              <div className="flex-1">
                                <div className="text-lg font-semibold text-gray-800 mb-1">{template.name}</div>
                                <div className="text-sm text-gray-600 leading-relaxed">{template.description}</div>
                                <div className="text-xs text-gray-500 mt-1">Использован: {template.lastUsed}</div>
                              </div>
                              <div className="text-blue-500">
                                <ArrowRight className="h-5 w-5" />
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                    </div>
                  ) : templateStepSelection ? (
                    <div>
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="text-base font-semibold text-gray-800">Выберите шаг для заполнения из шаблона</h4>
                        <Button variant="outline" size="sm" onClick={() => setTemplateStepSelection(null)}>
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                      
                      {/* Кнопка "Заполнить все шаги" */}
                      {templateStepSelection.availableSteps.length > 1 && (
                        <div className="mb-4">
                          <Button 
                            onClick={handleFillAllTemplateSteps}
                            variant="outline"
                            className="w-full h-10 text-sm font-medium border-green-300 text-green-700 hover:bg-green-50 hover:border-green-400"
                          >
                            <CheckCircle className="h-4 w-4 mr-2" />
                            Заполнить все шаги из шаблона
                          </Button>
                        </div>
                      )}
                      
                      <div className="grid gap-4">
                        {templateStepSelection.availableSteps.map((stepId) => {
                          const step = constructorSteps.find(s => s.id === stepId)
                          return (
                            <div
                              key={stepId}
                              className="flex items-center gap-4 p-4 border-2 border-gray-200 rounded-xl hover:border-blue-400 hover:bg-blue-50 cursor-pointer transition-all duration-200 shadow-sm hover:shadow-md"
                              onClick={() => handleTemplateStepSelect(stepId)}
                            >
                              <div className="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center shadow-sm">
                                <span className="text-white font-bold text-lg">
                                  {stepId === 1 ? 'I' : stepId === 2 ? 'II' : stepId === 3 ? 'III' : 
                                   stepId === 4 ? 'IV' : stepId === 5 ? 'V' : stepId === 6 ? 'VI' : 'VII'}
                                </span>
                              </div>
                              <div className="flex-1">
                                <div className="text-lg font-semibold text-gray-800 mb-1">{step?.name}</div>
                                <div className="text-sm text-gray-600 leading-relaxed">{step?.description}</div>
                              </div>
                              <div className="text-blue-500">
                                <ArrowRight className="h-5 w-5" />
                              </div>
                            </div>
                          )
                        })}
                      </div>
                    </div>
                  ) : selectedSource === "manual" ? (
                    <div>
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="text-sm font-medium text-gray-700">Заполнение вручную</h4>
                        <Button variant="outline" size="sm" onClick={handleCancelSource}>
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                      
                      {/* Формы для разных шагов */}
                      {lastHoveredStep === 1 && editingType === 'company' && (
                        <CompanyForm 
                          onSave={(data) => handleManualDataSave(lastHoveredStep, data)}
                          onCancel={handleCancelSource}
                          initialData={manualData[lastHoveredStep]}
                        />
                      )}
                      
                      {lastHoveredStep === 1 && editingType === 'contacts' && (
                        <ContactsForm 
                          onSave={(data) => handleManualDataSave(lastHoveredStep, data)}
                          onCancel={handleCancelSource}
                          initialData={manualData[lastHoveredStep]}
                        />
                      )}
                      
                      {lastHoveredStep === 1 && editingType === 'bank' && (
                        <BankForm 
                          onSave={(data) => handleManualDataSave(lastHoveredStep, data)}
                          onCancel={handleCancelSource}
                          initialData={manualData[lastHoveredStep]}
                        />
                      )}
                      
                      {lastHoveredStep === 1 && !editingType && (
                        <CompanyForm 
                          onSave={(data) => handleManualDataSave(lastHoveredStep, data)}
                          onCancel={handleCancelSource}
                          initialData={manualData[lastHoveredStep]}
                        />
                      )}
                      
                      {lastHoveredStep === 2 && (
                        <SpecificationForm 
                          onSave={(data) => handleManualDataSave(lastHoveredStep, data)}
                          onCancel={handleCancelSource}
                        />
                      )}
                      
                      {lastHoveredStep === 3 && (
                        <FileUploadForm 
                          onSave={(data) => {
                            if (data.file) {
                              handleFileUpload(lastHoveredStep, data.file)
                            }
                            handleManualDataSave(lastHoveredStep, data)
                          }}
                          onCancel={handleCancelSource}
                        />
                      )}
                      
                      {lastHoveredStep === 4 && (
                        <PaymentMethodForm 
                          onSave={(data) => handleManualDataSave(lastHoveredStep, data)}
                          onCancel={handleCancelSource}
                        />
                      )}
                      
                      {lastHoveredStep === 5 && (
                        <RequisitesForm 
                          onSave={(data) => handleManualDataSave(lastHoveredStep, data)}
                          onCancel={handleCancelSource}
                        />
                      )}
                    </div>
                  ) : stepConfigs[lastHoveredStep] ? (
                    // Только 3 кубика с данными для первого шага
                    <div className="flex justify-center">
                      {lastHoveredStep === 1 && manualData[lastHoveredStep] && (
                        <div className="grid grid-cols-3 gap-4 w-full max-w-4xl">
                          {/* Кубик 1: Данные компании - кликабельный */}
                          <div 
                            className="bg-white border-2 border-blue-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:border-blue-300 hover:scale-105"
                            onClick={() => handlePreviewData('company', manualData[lastHoveredStep])}
                          >
                            <div className="flex items-center gap-2 mb-3">
                              <div className="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center">
                                <Building className="h-4 w-4 text-white" />
                              </div>
                              <div>
                                <div className="text-sm font-semibold text-gray-800">Данные компании</div>
                                <div className="text-xs text-gray-500">Основная информация</div>
                              </div>
                            </div>
                            <div className="text-sm text-gray-800 font-medium">{manualData[lastHoveredStep].name}</div>
                            <div className="text-xs text-blue-600 mt-2 flex items-center gap-1">
                              <span>Нажмите для просмотра</span>
                              <Eye className="h-3 w-3" />
                            </div>
                          </div>
                          
                          {/* Кубик 2: Данные расчетного счета - кликабельный */}
                          <div 
                            className="bg-white border-2 border-green-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:border-green-300 hover:scale-105"
                            onClick={() => handlePreviewData('bank', manualData[lastHoveredStep])}
                          >
                            <div className="flex items-center gap-2 mb-3">
                              <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center">
                                <Banknote className="h-4 w-4 text-white" />
                              </div>
                              <div>
                                <div className="text-sm font-semibold text-gray-800">Расчетный счет</div>
                                <div className="text-xs text-gray-500">Банковские реквизиты</div>
                              </div>
                            </div>
                            <div className="text-sm text-gray-800">{manualData[lastHoveredStep].bankName}</div>
                            {manualData[lastHoveredStep].bankAccount && (
                              <div className="text-xs text-gray-500">{manualData[lastHoveredStep].bankAccount}</div>
                            )}
                            <div className="text-xs text-green-600 mt-2 flex items-center gap-1">
                              <span>Нажмите для просмотра</span>
                              <Eye className="h-3 w-3" />
                            </div>
                          </div>
                          
                          {/* Кубик 3: Дополнительные данные - кликабельный */}
                          <div 
                            className="bg-white border-2 border-purple-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:border-purple-300 hover:scale-105"
                            onClick={() => handlePreviewData('contacts', manualData[lastHoveredStep])}
                          >
                            <div className="flex items-center gap-2 mb-3">
                              <div className="w-8 h-8 rounded-full bg-purple-500 flex items-center justify-center">
                                <Mail className="h-4 w-4 text-white" />
                              </div>
                              <div>
                                <div className="text-sm font-semibold text-gray-800">Дополнительно</div>
                                <div className="text-xs text-gray-500">Контакты и детали</div>
                              </div>
                            </div>
                            <div className="text-sm text-gray-800">{manualData[lastHoveredStep].email}</div>
                            {manualData[lastHoveredStep].phone && (
                              <div className="text-sm text-gray-800 mt-1">{manualData[lastHoveredStep].phone}</div>
                            )}
                            <div className="text-xs text-purple-600 mt-2 flex items-center gap-1">
                              <span>Нажмите для просмотра</span>
                              <Eye className="h-3 w-3" />
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {/* Эхо предложения для шага 1 */}
                      {lastHoveredStep === 1 && (manualData as any).echoSuggestions?.step1 && (
                        <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                          <div className="flex items-center gap-2 mb-3">
                            <div className="w-6 h-6 rounded-full bg-yellow-500 flex items-center justify-center">
                              <span className="text-white text-xs">📊</span>
                            </div>
                            <div>
                              <div className="text-sm font-semibold text-gray-800">Эхо данные найдены!</div>
                              <div className="text-xs text-gray-600">{(manualData as any).echoSuggestions.step1.description}</div>
                            </div>
                          </div>
                          <div className="text-sm text-gray-700 mb-3">
                            Найдено {(manualData as any).echoSuggestions.step1.clients.length} клиентов из исторических проектов
                          </div>
                          <div className="flex gap-2">
                            <Button 
                              size="sm" 
                              variant="outline" 
                              onClick={() => {
                                // Применяем первого клиента из эхо данных
                                const firstClient = (manualData as any).echoSuggestions.step1.clients[0]
                                if (firstClient) {
                                  setManualData(prev => ({
                                    ...prev,
                                    1: {
                                      name: firstClient.name || firstClient.company_name,
                                      legalName: firstClient.company_name || '',
                                      inn: firstClient.inn || '',
                                      address: firstClient.address || '',
                                      email: firstClient.email || '',
                                      phone: firstClient.phone || ''
                                    }
                                  }))
                                  setStepConfigs(prev => ({ ...prev, 1: 'echo' }))
                                  alert('Данные клиента из эхо истории применены!')
                                }
                              }}
                            >
                              Применить первого клиента
                            </Button>
                            <Button 
                              size="sm" 
                              variant="ghost" 
                              onClick={() => {
                                setManualData(prev => {
                                  const { echoSuggestions, ...rest } = prev as any
                                  return rest
                                })
                              }}
                            >
                              Отклонить
                            </Button>
                          </div>
                        </div>
                      )}
                      
                      {/* Эхо предложения для шага 2 */}
                      {lastHoveredStep === 2 && (manualData as any).echoSuggestions?.step2 && (
                        <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                          <div className="flex items-center gap-2 mb-3">
                            <div className="w-6 h-6 rounded-full bg-yellow-500 flex items-center justify-center">
                              <span className="text-white text-xs">📊</span>
                            </div>
                            <div>
                              <div className="text-sm font-semibold text-gray-800">Эхо данные найдены!</div>
                              <div className="text-xs text-gray-600">{(manualData as any).echoSuggestions.step2.description}</div>
                            </div>
                          </div>
                          <div className="text-sm text-gray-700 mb-3">
                            Найдено {(manualData as any).echoSuggestions.step2.products.length} товаров поставщика
                          </div>
                          <div className="flex gap-2">
                            <Button 
                              size="sm" 
                              variant="outline" 
                              onClick={() => {
                                // Применяем товары из эхо данных
                                const products = (manualData as any).echoSuggestions.step2.products
                                if (products && products.length > 0) {
                                  setManualData(prev => ({
                                    ...prev,
                                    2: {
                                      supplier: products[0].supplier || products[0].supplier_name,
                                      currency: products[0].currency || 'USD',
                                      items: products.map((product: any) => ({
                                        item_name: product.name,
                                        item_code: product.name,
                                        quantity: 1,
                                        price: product.price || 0,
                                        unit: 'шт'
                                      }))
                                    }
                                  }))
                                  setStepConfigs(prev => ({ ...prev, 2: 'echo' }))
                                  alert('Товары поставщика из эхо данных применены!')
                                }
                              }}
                            >
                              Применить товары поставщика
                            </Button>
                            <Button 
                              size="sm" 
                              variant="ghost" 
                              onClick={() => {
                                setManualData(prev => {
                                  const { echoSuggestions, ...rest } = prev as any
                                  return rest
                                })
                              }}
                            >
                              Отклонить
                            </Button>
                          </div>
                        </div>
                      )}
                      
                      {/* Глобальные эхо предложения - показываются независимо от lastHoveredStep */}
                      {((manualData as any).echoSuggestions?.step1 || (manualData as any).echoSuggestions?.step2) && (
                        <div className="mt-6 p-4 bg-purple-50 border border-purple-200 rounded-lg">
                          <div className="flex items-center gap-2 mb-3">
                            <div className="w-6 h-6 rounded-full bg-purple-500 flex items-center justify-center">
                              <span className="text-white text-xs">📊</span>
                            </div>
                            <div>
                              <div className="text-sm font-semibold text-gray-800">Найдены эхо данные!</div>
                              <div className="text-xs text-gray-600">
                                {(manualData as any).echoSuggestions?.step1 && 'Данные клиента • '}
                                {(manualData as any).echoSuggestions?.step2 && 'Товары поставщика'}
                              </div>
                            </div>
                          </div>
                          
                          <div className="space-y-3">
                            {/* Эхо данные для шага 1 */}
                            {(manualData as any).echoSuggestions?.step1 && (
                              <div className="p-3 bg-white rounded border">
                                <div className="text-sm font-medium text-gray-800 mb-2">
                                  👤 Данные клиента: {(manualData as any).echoSuggestions.step1.description}
                                </div>
                                <div className="text-xs text-gray-600 mb-2">
                                  Найдено {(manualData as any).echoSuggestions.step1.clients.length} клиентов
                                </div>
                                <Button 
                                  size="sm" 
                                  variant="outline" 
                                  onClick={() => {
                                    const firstClient = (manualData as any).echoSuggestions.step1.clients[0]
                                    if (firstClient) {
                                      setManualData(prev => ({
                                        ...prev,
                                        1: {
                                          name: firstClient.name || firstClient.company_name,
                                          legalName: firstClient.company_name || '',
                                          inn: firstClient.inn || '',
                                          address: firstClient.address || '',
                                          email: firstClient.email || '',
                                          phone: firstClient.phone || ''
                                        }
                                      }))
                                      setStepConfigs(prev => ({ ...prev, 1: 'echo' }))
                                      alert('Данные клиента из эхо истории применены!')
                                    }
                                  }}
                                >
                                  Применить данные клиента
                                </Button>
                              </div>
                            )}
                            
                            {/* Эхо данные для шага 2 */}
                            {(manualData as any).echoSuggestions?.step2 && (
                              <div className="p-3 bg-white rounded border">
                                <div className="text-sm font-medium text-gray-800 mb-2">
                                  📦 Товары поставщика: {(manualData as any).echoSuggestions.step2.description}
                                </div>
                                <div className="text-xs text-gray-600 mb-2">
                                  Найдено {(manualData as any).echoSuggestions.step2.products.length} товаров
                                </div>
                                <Button 
                                  size="sm" 
                                  variant="outline" 
                                  onClick={() => {
                                    const products = (manualData as any).echoSuggestions.step2.products
                                    if (products && products.length > 0) {
                                      setManualData(prev => ({
                                        ...prev,
                                        2: {
                                          supplier: products[0].supplier || products[0].supplier_name,
                                          currency: products[0].currency || 'USD',
                                          items: products.map((product: any) => ({
                                            item_name: product.name,
                                            item_code: product.name,
                                            quantity: 1,
                                            price: product.price || 0,
                                            unit: 'шт'
                                          }))
                                        }
                                      }))
                                      setStepConfigs(prev => ({ ...prev, 2: 'echo' }))
                                      alert('Товары поставщика из эхо данных применены!')
                                    }
                                  }}
                                >
                                  Применить товары поставщика
                                </Button>
                              </div>
                            )}
                          </div>
                          
                          <div className="mt-3 pt-3 border-t border-purple-200">
                            <Button 
                              size="sm" 
                              variant="ghost" 
                              onClick={() => {
                                setManualData(prev => {
                                  const { echoSuggestions, ...rest } = prev as any
                                  return rest
                                })
                              }}
                            >
                              Отклонить все эхо данные
                            </Button>
                          </div>
                        </div>
                      )}
                      
                      {/* Шаг 2: 3 отдельных кубика товаров в стиле первого шага */}
                      {lastHoveredStep === 2 && manualData[lastHoveredStep] && (
                        <div className="flex justify-center">
                          <div className="grid grid-cols-3 gap-4 w-full max-w-4xl">
                            {/* Кубик 1: Первый товар */}
                            {manualData[lastHoveredStep]?.items && manualData[lastHoveredStep].items[0] && (
                              <div 
                                className="bg-white border-2 border-dashed border-gray-300 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:border-blue-400 hover:scale-105"
                                onClick={() => handlePreviewData('product', manualData[lastHoveredStep].items[0])}
                              >
                                <div className="flex items-center gap-2 mb-3">
                                  <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center">
                                    <Package className="h-4 w-4 text-white" />
                            </div>
                            <div>
                                    <div className="text-sm font-semibold text-gray-800">Товар 1</div>
                                    <div className="text-xs text-gray-500">Спецификация</div>
                              </div>
                                </div>
                                
                                <div className="space-y-2">
                                  <div className="flex items-center gap-2">
                                    <span className="text-gray-400">📦</span>
                                    <span className="text-gray-800 font-medium truncate">
                                      {manualData[lastHoveredStep].items[0].item_name || 'Товар без названия'}
                                    </span>
                                  </div>
                                  <div className="flex items-center gap-2">
                                    <span className="text-gray-400">🏷️</span>
                                    <span className="text-gray-800">
                                      {manualData[lastHoveredStep].items[0].item_code || 'Без артикула'}
                                    </span>
                                  </div>
                                  <div className="flex items-center gap-2">
                                    <span className="text-gray-400">💰</span>
                                    <span className="text-gray-800">
                                      {manualData[lastHoveredStep].items[0].price} {manualData[lastHoveredStep]?.currency || 'RUB'}
                                    </span>
                                  </div>
                                  <div className="flex items-center gap-2">
                                    <span className="text-gray-400">📊</span>
                                    <span className="text-gray-800">
                                      {manualData[lastHoveredStep].items[0].quantity} шт
                                    </span>
                                  </div>
                                  <div className="flex items-center gap-2">
                                    <span className="text-gray-400">💳</span>
                                    <span className="text-gray-800 font-semibold">
                                      {manualData[lastHoveredStep].items[0].total} {manualData[lastHoveredStep]?.currency || 'RUB'}
                                    </span>
                            </div>
                          </div>
                          
                                <div className="text-xs text-green-600 mt-3 flex items-center gap-1">
                                  <span>Нажмите для просмотра</span>
                                  <Eye className="h-3 w-3" />
                                </div>
                              </div>
                            )}
                            
                            {/* Кубик 2: Второй товар */}
                            {manualData[lastHoveredStep]?.items && manualData[lastHoveredStep].items[1] && (
                              <div 
                                className="bg-white border-2 border-dashed border-gray-300 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:border-blue-400 hover:scale-105"
                                onClick={() => handlePreviewData('product', manualData[lastHoveredStep].items[1])}
                              >
                                <div className="flex items-center gap-2 mb-3">
                                  <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center">
                                    <Package className="h-4 w-4 text-white" />
                                          </div>
                                          <div>
                                    <div className="text-sm font-semibold text-gray-800">Товар 2</div>
                                    <div className="text-xs text-gray-500">Спецификация</div>
                                          </div>
                                        </div>
                                        
                                        <div className="space-y-2">
                                          <div className="flex items-center gap-2">
                                            <span className="text-gray-400">📦</span>
                                            <span className="text-gray-800 font-medium truncate">
                                      {manualData[lastHoveredStep].items[1].item_name || 'Товар без названия'}
                                            </span>
                                          </div>
                                          <div className="flex items-center gap-2">
                                            <span className="text-gray-400">🏷️</span>
                                            <span className="text-gray-800">
                                      {manualData[lastHoveredStep].items[1].item_code || 'Без артикула'}
                                            </span>
                                          </div>
                                          <div className="flex items-center gap-2">
                                            <span className="text-gray-400">💰</span>
                                            <span className="text-gray-800">
                                      {manualData[lastHoveredStep].items[1].price} {manualData[lastHoveredStep]?.currency || 'RUB'}
                                            </span>
                                          </div>
                                          <div className="flex items-center gap-2">
                                            <span className="text-gray-400">📊</span>
                                            <span className="text-gray-800">
                                      {manualData[lastHoveredStep].items[1].quantity} шт
                                            </span>
                                          </div>
                                          <div className="flex items-center gap-2">
                                            <span className="text-gray-400">💳</span>
                                            <span className="text-gray-800 font-semibold">
                                      {manualData[lastHoveredStep].items[1].total} {manualData[lastHoveredStep]?.currency || 'RUB'}
                                            </span>
                                          </div>
                                        </div>
                                
                                <div className="text-xs text-green-600 mt-3 flex items-center gap-1">
                                  <span>Нажмите для просмотра</span>
                                  <Eye className="h-3 w-3" />
                                      </div>
                                  </div>
                                )}
                                
                            {/* Кубик 3: Сводная информация */}
                            <div className="bg-white border-2 border-dashed border-gray-300 rounded-xl p-4 shadow-sm">
                              <div className="flex items-center gap-2 mb-3">
                                <div className="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center">
                                  <FileText className="h-4 w-4 text-white" />
                                </div>
                                <div>
                                  <div className="text-sm font-semibold text-gray-800">Сводка</div>
                                  <div className="text-xs text-gray-500">Общая информация</div>
                                </div>
                              </div>
                              
                              <div className="space-y-2">
                                <div className="flex items-center gap-2">
                                  <span className="text-gray-400">🏪</span>
                                  <span className="text-gray-800 font-medium">
                                    {manualData[lastHoveredStep]?.supplier || 
                                     manualData[lastHoveredStep]?.items?.[0]?.item_name || 
                                     'Не указано'}
                                  </span>
                                </div>
                                <div className="flex items-center gap-2">
                                  <span className="text-gray-400">📦</span>
                                  <span className="text-gray-800">
                                    {manualData[lastHoveredStep]?.items?.length || 0} позиций
                                  </span>
                                </div>
                                <div className="flex items-center gap-2">
                                  <span className="text-gray-400">💰</span>
                                  <span className="text-gray-800">{manualData[lastHoveredStep]?.currency || 'Не указано'}</span>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                      
                                            {/* Шаг 4: Методы оплаты - показываем кубики для каждого метода */}
                      {lastHoveredStep === 4 && manualData[lastHoveredStep] && (
                        <div className="flex justify-center">
                          <div className="grid grid-cols-3 gap-4 w-full">
                            {manualData[lastHoveredStep].type === 'multiple' && manualData[lastHoveredStep].methods ? (
                              // Показываем кубики для каждого метода оплаты
                              manualData[lastHoveredStep].methods.map((method: string, index: number) => (
                                <div 
                                  key={index}
                                  className={`bg-white border-2 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:scale-105 ${
                                    method === 'crypto' ? 'border-green-200 hover:border-green-300' :
                                    method === 'p2p' ? 'border-blue-200 hover:border-blue-300' :
                                    'border-gray-200 hover:border-gray-300'
                                  }`}
                                  onClick={() => handlePaymentMethodSelect(method, selectedSupplierData)}
                                >
                                  <div className="flex items-center gap-2 mb-3">
                                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                      method === 'crypto' ? 'bg-green-500' :
                                      method === 'p2p' ? 'bg-blue-500' :
                                      'bg-gray-500'
                                    }`}>
                                      <CreditCard className="h-4 w-4 text-white" />
                                    </div>
                                    <div>
                                      <div className="text-sm font-semibold text-gray-800">
                                        {method === 'crypto' ? 'Криптовалюта' :
                                         method === 'p2p' ? 'P2P перевод' :
                                         'Банковский перевод'}
                                      </div>
                                      <div className="text-xs text-gray-500">
                                        {method === 'crypto' ? 'Крипто платеж' :
                                         method === 'p2p' ? 'P2P платеж' :
                                         'Банковский платеж'}
                                      </div>
                                    </div>
                                  </div>
                                  <div className="text-sm text-gray-800">
                                    Статус
                                  </div>
                                  <div className="text-xs text-gray-500">
                                    Доступен
                                  </div>
                                  <div className={`text-xs mt-2 flex items-center gap-1 ${
                                    method === 'crypto' ? 'text-green-600' :
                                    method === 'p2p' ? 'text-blue-600' :
                                    'text-gray-600'
                                  }`}>
                                    <span>Выбрать</span>
                                    <CheckCircle className="h-3 w-3" />
                                  </div>
                                </div>
                              ))
                            ) : (
                              // Показываем один кубик для одиночного метода
                              <div 
                                className={`bg-white border-2 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:scale-105 col-span-3 ${
                                  manualData[lastHoveredStep].method === 'crypto' ? 'border-green-200 hover:border-green-300' :
                                  manualData[lastHoveredStep].method === 'p2p' ? 'border-blue-200 hover:border-blue-300' :
                                  'border-gray-200 hover:border-gray-300'
                                }`}
                                onClick={() => handlePreviewData('payment', manualData[lastHoveredStep])}
                              >
                                <div className="flex items-center gap-2 mb-3">
                                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                    manualData[lastHoveredStep].method === 'crypto' ? 'bg-green-500' :
                                    manualData[lastHoveredStep].method === 'p2p' ? 'bg-blue-500' :
                                    'bg-gray-500'
                                  }`}>
                                    <CreditCard className="h-4 w-4 text-white" />
                                  </div>
                                  <div>
                                    <div className="text-sm font-semibold text-gray-800">Способ оплаты</div>
                                    <div className="text-xs text-gray-500">Метод платежа</div>
                                  </div>
                                </div>
                                <div className="text-sm text-gray-800 font-medium">
                                  {manualData[lastHoveredStep].method === 'bank' ? 'Банковский перевод' :
                                   manualData[lastHoveredStep].method === 'p2p' ? 'P2P перевод' :
                                   manualData[lastHoveredStep].method === 'crypto' ? 'Криптовалюта' :
                                   manualData[lastHoveredStep].method || 'Не указано'}
                                </div>
                                <div className={`text-xs mt-2 flex items-center gap-1 ${
                                  manualData[lastHoveredStep].method === 'crypto' ? 'text-green-600' :
                                  manualData[lastHoveredStep].method === 'p2p' ? 'text-blue-600' :
                                  'text-gray-600'
                                }`}>
                                  <span>Нажмите для просмотра</span>
                                  <Eye className="h-3 w-3" />
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                      
                      {/* Шаг 5: Реквизиты - показываем все доступные типы */}
                      {lastHoveredStep === 5 && manualData[lastHoveredStep] && (
                        <div className="flex justify-center">
                          <div className="grid grid-cols-3 gap-4 w-full">
                            {manualData[lastHoveredStep].type === 'multiple' && manualData[lastHoveredStep].requisites ? (
                              // Показываем все кубики реквизитов
                              manualData[lastHoveredStep].requisites.map((requisite: any, index: number) => (
                                <div 
                                  key={index}
                                  className={`bg-white border-2 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:scale-105 ${
                                    requisite.type === 'crypto' ? 'border-green-200 hover:border-green-300' :
                                    requisite.type === 'p2p' ? 'border-blue-200 hover:border-blue-300' :
                                    'border-gray-200 hover:border-gray-300'
                                  }`}
                                  onClick={() => handlePreviewData('requisites', requisite)}
                                >
                                  <div className="flex items-center gap-2 mb-3">
                                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                      requisite.type === 'crypto' ? 'bg-green-500' :
                                      requisite.type === 'p2p' ? 'bg-blue-500' :
                                      'bg-gray-500'
                                    }`}>
                                      <Banknote className="h-4 w-4 text-white" />
                                    </div>
                                    <div>
                                      <div className="text-sm font-semibold text-gray-800">
                                        {requisite.type === 'crypto' ? 'Криптокошелек' :
                                         requisite.type === 'p2p' ? 'Карта поставщика' :
                                         'Расчетный счет'}
                                      </div>
                                      <div className="text-xs text-gray-500">
                                        {requisite.type === 'crypto' ? 'Криптореквизиты' :
                                         requisite.type === 'p2p' ? 'P2P реквизиты' :
                                         'Банковские реквизиты'}
                                      </div>
                                    </div>
                                  </div>
                                  <div className="text-sm text-gray-800">
                                    {requisite.type === 'crypto' ? 'Сеть' :
                                     requisite.type === 'p2p' ? 'Банк карты' :
                                     'Банк поставщика'}
                                  </div>
                                  <div className="text-xs text-gray-500">
                                    {requisite.type === 'crypto' ? (requisite.crypto_network || 'Не указана') :
                                     requisite.type === 'p2p' ? (requisite.card_bank || 'Не указан') :
                                     `${requisite.accountNumber || 'Не указано'}`}
                                  </div>
                                  <div className={`text-xs mt-2 flex items-center gap-1 ${
                                    requisite.type === 'crypto' ? 'text-green-600' :
                                    requisite.type === 'p2p' ? 'text-blue-600' :
                                    'text-gray-600'
                                  }`}>
                                    <span>Нажмите для просмотра</span>
                                    <Eye className="h-3 w-3" />
                                  </div>
                                </div>
                              ))
                            ) : (
                              // Показываем один кубик для одиночного типа
                              <div 
                                className="bg-white border-2 border-green-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer hover:border-green-300 hover:scale-105 col-span-3"
                                onClick={() => handlePreviewData('requisites', manualData[lastHoveredStep])}
                              >
                                <div className="flex items-center gap-2 mb-3">
                                  <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center">
                                    <Banknote className="h-4 w-4 text-white" />
                                  </div>
                                  <div>
                                    <div className="text-sm font-semibold text-gray-800">
                                      {manualData[lastHoveredStep].type === 'crypto' ? 'Криптокошелек' :
                                       manualData[lastHoveredStep].type === 'p2p' ? 'Карта поставщика' :
                                       'Расчетный счет'}
                                    </div>
                                    <div className="text-xs text-gray-500">
                                      {manualData[lastHoveredStep].type === 'crypto' ? 'Криптореквизиты' :
                                       manualData[lastHoveredStep].type === 'p2p' ? 'P2P реквизиты' :
                                       'Банковские реквизиты'}
                                    </div>
                                  </div>
                                </div>
                                <div className="text-sm text-gray-800">
                                  {manualData[lastHoveredStep].type === 'crypto' ? 'Сеть' :
                                   manualData[lastHoveredStep].type === 'p2p' ? 'Банк карты' :
                                   'Банк поставщика'}
                                </div>
                                <div className="text-xs text-gray-500">
                                  {manualData[lastHoveredStep].type === 'crypto' ? (manualData[lastHoveredStep].crypto_network || 'Не указана') :
                                   manualData[lastHoveredStep].type === 'p2p' ? (manualData[lastHoveredStep].card_bank || 'Не указан') :
                                   `${manualData[lastHoveredStep].accountNumber || 'Не указано'}`}
                                </div>
                                <div className="text-xs text-green-600 mt-2 flex items-center gap-1">
                                  <span>Нажмите для просмотра</span>
                                  <Eye className="h-3 w-3" />
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                      
                      {/* Для других шагов - обычная карточка */}
                      {lastHoveredStep !== 1 && lastHoveredStep !== 2 && lastHoveredStep !== 4 && lastHoveredStep !== 5 && manualData[lastHoveredStep] && (
                        <div 
                          className={`border-2 border-gray-200 rounded-xl p-6 shadow-lg max-w-md w-full transition-all duration-200
                            ${manualData[lastHoveredStep].echo_data 
                              ? 'bg-white/60 backdrop-blur-sm border-indigo-200' 
                              : 'bg-white'}
                          `}
                        >
                          <div className="flex items-center gap-3 mb-4">
                            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                              stepConfigs[lastHoveredStep] === "profile" ? "bg-blue-500" :
                              stepConfigs[lastHoveredStep] === "template" ? "bg-green-500" :
                              (stepConfigs[lastHoveredStep] === "blue_room" || stepConfigs[lastHoveredStep] === "orange_room" || stepConfigs[lastHoveredStep] === "echo_cards") ? "bg-purple-500" :
                              stepConfigs[lastHoveredStep] === "echo" ? "bg-orange-500" :
                              stepConfigs[lastHoveredStep] === "echoData" ? "bg-indigo-500" :
                              stepConfigs[lastHoveredStep] === "manual" ? "bg-gray-500" : "bg-emerald-500"
                            }`}>
                              {stepConfigs[lastHoveredStep] === "profile" ? <Users className="h-4 w-4 text-white" /> :
                               stepConfigs[lastHoveredStep] === "template" ? <FileText className="h-4 w-4 text-white" /> :
                               stepConfigs[lastHoveredStep] === "blue_room" ? <Store className="h-4 w-4 text-white" /> :
                               stepConfigs[lastHoveredStep] === "orange_room" ? <Store className="h-4 w-4 text-white" /> :
                               stepConfigs[lastHoveredStep] === "echo_cards" ? <Store className="h-4 w-4 text-white" /> :
                               stepConfigs[lastHoveredStep] === "catalog" ? <Store className="h-4 w-4 text-white" /> :
                               stepConfigs[lastHoveredStep] === "echo" ? <FileText className="h-4 w-4 text-white" /> :
                               stepConfigs[lastHoveredStep] === "echoData" ? <Clock className="h-4 w-4 text-white" /> :
                               stepConfigs[lastHoveredStep] === "manual" ? <Plus className="h-4 w-4 text-white" /> : <CheckCircle className="h-4 w-4 text-white" />}
                            </div>
                            <div>
                              <div className="font-semibold text-gray-800">
                                {dataSources[stepConfigs[lastHoveredStep] as keyof typeof dataSources]?.name}
                              </div>
                              {stepConfigs[lastHoveredStep] === "template" && manualData[lastHoveredStep]?.templateName && (
                                <div className="text-xs text-gray-500">{manualData[lastHoveredStep].templateName}</div>
                              )}
                            </div>
                          </div>
                          
                          <div className="space-y-3 mb-4">
                            {lastHoveredStep === 3 && (
                              <div className="flex items-center gap-2">
                                <span className="text-gray-400">📄</span>
                                <span className="text-gray-800">{uploadedFiles[lastHoveredStep]}</span>
                                <span className="text-xs text-green-600 bg-green-100 px-2 py-1 rounded-full ml-auto">
                                  ✓ Загружен
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div>
                      <h4 className="text-base font-semibold text-gray-800 mb-4">Доступные источники данных:</h4>
                      <div className="grid gap-4">
                        {constructorSteps.find(s => s.id === lastHoveredStep)?.sources.map((source) => {
                          const sourceInfo = dataSources[source as keyof typeof dataSources]
                          const SourceIcon = sourceInfo?.icon
                          return (
                            <div
                              key={source}
                              className="flex items-center gap-4 p-4 border-2 border-gray-200 rounded-xl hover:border-blue-400 hover:bg-blue-50 cursor-pointer transition-all duration-200 shadow-sm hover:shadow-md"
                              onClick={() => handleSourceSelect(source)}
                            >
                              <div className={`w-12 h-12 rounded-full ${sourceInfo?.color} flex items-center justify-center shadow-sm`}>
                                <SourceIcon className="h-6 w-6 text-white" />
                              </div>
                              <div className="flex-1">
                                <div className="text-lg font-semibold text-gray-800 mb-1">{sourceInfo?.name}</div>
                                <div className="text-sm text-gray-600 leading-relaxed">
                                  {source === "profile" && (lastHoveredStep === 1 ? "Использовать данные из профиля клиента" : "Использовать данные из профиля поставщика")}
                                  {source === "template" && "Выбрать из сохраненных шаблонов"}
                                  {source === "catalog" && "Из синей и оранжевой комнат каталога (включая эхо карточки)"}
                                  {source === "manual" && "Заполнить самостоятельно"}
                                  {source === "automatic" && "Автоматическая обработка"}
                                </div>
                              </div>
                            </div>
                          )
                        })}
                      </div>
                    </div>
                  )}
                </motion.div>
              ) : lastHoveredStep && !isStepEnabled(lastHoveredStep) ? (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="text-center py-8"
                >
                  <div className="text-gray-400 mb-4">
                    <Blocks className="h-12 w-12 mx-auto" />
                  </div>
                  <p className="text-gray-500">Сначала настройте основные шаги (I и II)</p>
                </motion.div>
              ) : (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="text-center py-8 text-gray-500"
                >
                  <Blocks className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                  <p>Наведите на кубик для выбора источника данных</p>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </CardContent>
      </Card>

      {/* Block 3: Сводка и запуск проекта */}
      <Card>
        <CardContent className="p-6">
          <h2 className="text-xl font-bold mb-6">Сводка проекта</h2>
          
          {/* Прогресс бар с мини-кубиками */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">Прогресс настройки</span>
              <span className="text-sm text-gray-500">{getProgress()}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${getProgress()}%` }}
              />
            </div>
            
            {/* Мини-кубики прогресса */}
            <div className="flex gap-2 mt-4">
              {constructorSteps.map((step) => (
                <div
                  key={step.id}
                  className={`w-6 h-6 rounded border-2 flex items-center justify-center text-xs font-bold ${
                    stepConfigs[step.id]
                      ? 'border-blue-500 bg-blue-500 text-white'
                      : 'border-gray-300 bg-gray-100 text-gray-400'
                  }`}
                >
                  {step.id}
                </div>
              ))}
            </div>
          </div>

                    {/* Сводка настроенных шагов */}
          <div className="mb-6">
            <h3 className="text-lg font-medium mb-3">Настроенные шаги:</h3>
            {getConfiguredStepsSummary().length > 0 ? (
              <div className="space-y-2">
                {getConfiguredStepsSummary().map((item) => (
                  <div 
                    key={item.stepId} 
                    className={`flex items-center gap-3 p-3 rounded-lg hover:shadow-md cursor-pointer transition-all duration-200 border-2 relative z-10 ${
                      item.source === 'echoData' 
                        ? 'bg-purple-50 hover:bg-purple-100 border-purple-400 hover:border-purple-500' 
                        : 'bg-gray-50 hover:bg-gray-100 border-blue-400 hover:border-blue-500'
                    }`}
                    style={{ pointerEvents: 'auto' }}
                    onClick={() => handleStepCardClick(item)}
                  >
                    <div className={`w-8 h-8 rounded text-white flex items-center justify-center text-sm font-bold ${
                      item.source === 'echoData' ? 'bg-purple-500' : 'bg-blue-500'
                    }`}>
                      {item.stepId}
                    </div>
                    <div className="flex-1">
                      <div className="font-medium">{item.stepName}</div>
                      <div className={`text-sm ${
                        item.source === 'echoData' ? 'text-purple-600' : 'text-gray-500'
                      }`}>
                        Источник: {item.sourceName}
                        {item.source === 'echoData' && ' ✨'}
                      </div>

                    </div>
                    <ChevronRight className={`h-4 w-4 ${
                      item.source === 'echoData' ? 'text-purple-400' : 'text-gray-400'
                    }`} />
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <Blocks className="h-8 w-8 mx-auto mb-2 text-gray-400" />
                <p>Настройте хотя бы один шаг для продолжения</p>
              </div>
            )}
          </div>

          {/* Кнопка запуска */}
          <div className="flex justify-end">
            <Button 
              className="gap-2"
              disabled={getConfiguredStepsSummary().length === 0}
            >
              Запустить атомарную сделку
              <ArrowRight className="w-4 h-4" />
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Модальное окно для предварительного просмотра данных */}
      <Dialog open={showPreviewModal} onOpenChange={setShowPreviewModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              {previewType === 'company' && <Building className="h-5 w-5 text-blue-500" />}
              {previewType === 'bank' && <Banknote className="h-5 w-5 text-green-500" />}
              {previewType === 'contacts' && <Mail className="h-5 w-5 text-purple-500" />}
              {previewType === 'product' && <Package className="h-5 w-5 text-green-500" />}
              {previewType === 'payment' && <CreditCard className="h-5 w-5 text-indigo-500" />}
              {previewType === 'requisites' && <Banknote className="h-5 w-5 text-green-500" />}
              {previewType === 'company' && 'Данные компании'}
              {previewType === 'bank' && 'Банковские реквизиты'}
              {previewType === 'contacts' && 'Контактная информация'}
              {previewType === 'product' && 'Информация о товаре'}
              {previewType === 'payment' && 'Способ оплаты'}
              {previewType === 'requisites' && (previewData?.type === 'crypto' ? 'Криптореквизиты' :
                                               previewData?.type === 'p2p' ? 'P2P реквизиты' :
                                               'Банковские реквизиты')}
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-6">
            {previewType === 'company' && previewData && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Название компании</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.name && previewData.name.trim() !== '' ? previewData.name : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Юридическое название</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.legalName && previewData.legalName.trim() !== '' ? previewData.legalName : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">ИНН</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.inn && previewData.inn.trim() !== '' ? previewData.inn : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">КПП</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.kpp && previewData.kpp.trim() !== '' ? previewData.kpp : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">ОГРН</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.ogrn && previewData.ogrn.trim() !== '' ? previewData.ogrn : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Юридический адрес</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.address && previewData.address.trim() !== '' ? previewData.address : 'Не указано'}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {previewType === 'bank' && previewData && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Название банка</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.bankName && previewData.bankName.trim() !== '' ? previewData.bankName : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Расчетный счет</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.bankAccount && previewData.bankAccount.trim() !== '' ? `${previewData.bankAccount}` : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Корр. счет</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.bankCorrAccount && previewData.bankCorrAccount.trim() !== '' ? previewData.bankCorrAccount : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">БИК</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.bankBik && previewData.bankBik.trim() !== '' ? previewData.bankBik : 'Не указано'}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {previewType === 'contacts' && previewData && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Email</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.email && previewData.email.trim() !== '' ? previewData.email : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Телефон</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.phone && previewData.phone.trim() !== '' ? previewData.phone : 'Не указано'}
                    </div>
                  </div>
                  <div className="col-span-2">
                    <Label className="text-sm font-medium text-gray-600">Веб-сайт</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.website && previewData.website.trim() !== '' ? previewData.website : 'Не указано'}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {previewType === 'product' && previewData && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Название товара</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.item_name && previewData.item_name.trim() !== '' ? previewData.item_name : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Артикул</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.item_code && previewData.item_code.trim() !== '' ? previewData.item_code : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Цена за единицу</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.price ? `${previewData.price} RUB` : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Количество</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.quantity ? `${previewData.quantity} шт` : 'Не указано'}
                    </div>
                  </div>
                  <div className="col-span-2">
                    <Label className="text-sm font-medium text-gray-600">Общая сумма</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg font-semibold">
                      {previewData.total ? `${previewData.total} RUB` : 'Не указано'}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {previewType === 'payment' && previewData && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Способ оплаты</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.method && previewData.method.trim() !== '' ? 
                        (previewData.method === 'bank-transfer' ? 'Банковский перевод' :
                         previewData.method === 'p2p' ? 'P2P платеж' :
                         previewData.method === 'crypto' ? 'Криптовалюта' :
                         previewData.method) : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Поставщик</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.supplier_name && previewData.supplier_name.trim() !== '' ? previewData.supplier_name : 'Не указано'}
                    </div>
                  </div>
                  {previewData.project_info && (
                    <div className="col-span-2">
                      <Label className="text-sm font-medium text-gray-600">Источник данных</Label>
                      <div className="mt-1 p-3 bg-indigo-50 rounded-lg">
                        <div className="text-indigo-700">
                          <strong>Проект:</strong> {previewData.project_info.project_name || 'Не указан'}
                        </div>
                        <div className="text-indigo-600 text-sm">
                          <strong>Дата:</strong> {previewData.project_info.project_date ? new Date(previewData.project_info.project_date).toLocaleDateString('ru-RU') : 'Не указана'}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {previewType === 'requisites' && previewData && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  {/* Крипто реквизиты */}
                  {previewData.type === 'crypto' ? (
                    <>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Сеть</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {previewData.crypto_network && previewData.crypto_network.trim() !== '' ? previewData.crypto_network : 'Не указана'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Адрес кошелька</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {previewData.crypto_address && previewData.crypto_address.trim() !== '' ? previewData.crypto_address : 'Не указан'}
                        </div>
                      </div>
                    </>
                  ) : previewData.type === 'p2p' ? (
                    <>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Банк карты</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {previewData.card_bank && previewData.card_bank.trim() !== '' ? previewData.card_bank : 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Номер карты</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {previewData.card_number && previewData.card_number.trim() !== '' ? `${previewData.card_number}` : 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Держатель карты</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {previewData.card_holder && previewData.card_holder.trim() !== '' ? previewData.card_holder : 'Не указан'}
                        </div>
                      </div>
                    </>
                  ) : (
                    <>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Название банка</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.bankName && previewData.bankName.trim() !== '' ? previewData.bankName : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Номер счета</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.accountNumber && previewData.accountNumber.trim() !== '' ? `${previewData.accountNumber}` : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">SWIFT/BIC</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.swift && previewData.swift.trim() !== '' ? previewData.swift : 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Получатель</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.recipientName && previewData.recipientName.trim() !== '' ? previewData.recipientName : 'Не указано'}
                    </div>
                  </div>
                    </>
                  )}
                  
                  {/* Общие поля для всех типов */}
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Поставщик</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {previewData.supplier_name && previewData.supplier_name.trim() !== '' ? previewData.supplier_name : 'Не указано'}
                    </div>
                  </div>
                  {previewData.project_info && (
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Источник данных</Label>
                      <div className="mt-1 p-3 bg-indigo-50 rounded-lg">
                        <div className="text-indigo-700">
                          <strong>Проект:</strong> {previewData.project_info.project_name || 'Не указан'}
                        </div>
                        <div className="text-indigo-600 text-sm">
                          <strong>Дата:</strong> {previewData.project_info.project_date ? new Date(previewData.project_info.project_date).toLocaleDateString('ru-RU') : 'Не указана'}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            <div className="flex justify-end gap-3 pt-4 border-t">
              <Button variant="outline" onClick={() => setShowPreviewModal(false)}>
                Закрыть
              </Button>
              <Button onClick={() => handleEditData(previewType)} className="gap-2">
                <Edit className="h-4 w-4" />
                Редактировать
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно эхо данных */}
      <Dialog open={echoDataModal?.show || false} onOpenChange={() => setEchoDataModal(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Clock className="h-5 w-5 text-indigo-500" />
              Найдены эхо данные
            </DialogTitle>
            <DialogDescription>
              Для поставщика <strong>{echoDataModal?.supplierName}</strong> найдены данные из предыдущего проекта
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-6">
            {/* Информация о проекте */}
            <div className="bg-indigo-50 p-4 rounded-lg">
              <h4 className="font-medium text-indigo-900 mb-2">Источник данных:</h4>
              <p className="text-indigo-700">
                Проект: <strong>{echoDataModal?.projectInfo?.project_name}</strong>
              </p>
              <p className="text-indigo-600 text-sm">
                Дата: {echoDataModal?.projectInfo?.project_date ? new Date(echoDataModal.projectInfo.project_date).toLocaleDateString('ru-RU') : 'Не указана'}
              </p>
            </div>

            {/* Данные для применения */}
            <div className="space-y-4">
              <h4 className="font-medium">Данные для применения:</h4>
              
              {/* Способ оплаты */}
              <div className="border rounded-lg p-4">
                <h5 className="font-medium text-gray-900 mb-2">Способ оплаты (Шаг IV)</h5>
                <div className="flex items-center gap-2">
                  <CreditCard className="h-4 w-4 text-gray-500" />
                  <span className="text-gray-700">{echoDataModal?.echoData?.payment_method?.method || 'bank-transfer'}</span>
                </div>
              </div>

              {/* Реквизиты (в зависимости от типа) */}
              <div className="border rounded-lg p-4">
                <h5 className="font-medium text-gray-900 mb-2">
                  {echoDataModal?.echoData?.payment_method?.method === 'crypto' ? 'Криптореквизиты' :
                   echoDataModal?.echoData?.payment_method?.method === 'p2p' ? 'P2P реквизиты' :
                   'Банковские реквизиты'} (Шаг V)
                </h5>
                <div className="space-y-2 text-sm">
                  {echoDataModal?.echoData?.payment_method?.method === 'crypto' ? (
                    <>
                      <div className="flex items-center gap-2">
                        <Building className="h-4 w-4 text-gray-500" />
                        <span className="text-gray-700">Сеть: {echoDataModal?.echoData?.requisites?.crypto_network || 'Не указана'}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CreditCard className="h-4 w-4 text-gray-500" />
                        <span className="text-gray-700">Адрес: {echoDataModal?.echoData?.requisites?.crypto_address || 'Не указан'}</span>
                      </div>
                    </>
                  ) : echoDataModal?.echoData?.payment_method?.method === 'p2p' ? (
                    <>
                      <div className="flex items-center gap-2">
                        <Building className="h-4 w-4 text-gray-500" />
                        <span className="text-gray-700">Банк: {echoDataModal?.echoData?.requisites?.card_bank || 'Не указан'}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CreditCard className="h-4 w-4 text-gray-500" />
                        <span className="text-gray-700">Карта: {echoDataModal?.echoData?.requisites?.card_number || 'Не указан'}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-gray-500" />
                        <span className="text-gray-700">Держатель: {echoDataModal?.echoData?.requisites?.card_holder || 'Не указан'}</span>
                      </div>
                    </>
                  ) : (
                    <>
                  <div className="flex items-center gap-2">
                    <Building className="h-4 w-4 text-gray-500" />
                    <span className="text-gray-700">{echoDataModal?.echoData?.requisites?.bankName || 'Банк не указан'}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <CreditCard className="h-4 w-4 text-gray-500" />
                    <span className="text-gray-700">Счет: {echoDataModal?.echoData?.requisites?.accountNumber || 'Не указан'}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4 text-gray-500" />
                    <span className="text-gray-700">{echoDataModal?.echoData?.requisites?.recipientName || 'Получатель не указан'}</span>
                  </div>
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* Кнопки действий */}
            <div className="flex justify-end gap-3 pt-4 border-t">
              <Button variant="outline" onClick={rejectEchoData}>
                Отклонить
              </Button>
              <Button onClick={() => applyEchoData(echoDataModal?.echoData)} className="gap-2">
                <Check className="h-4 w-4" />
                Применить эхо данные
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно выбора профиля клиента */}
      <Dialog open={showProfileSelector} onOpenChange={setShowProfileSelector}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Users className="h-5 w-5 text-blue-500" />
              Выберите профиль клиента
            </DialogTitle>
            <DialogDescription>
              У вас несколько профилей клиентов. Выберите один для заполнения данных компании.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {clientProfiles?.map((profile) => (
              <div
                key={profile.id}
                className={`p-4 border rounded-lg cursor-pointer transition-all ${
                  selectedProfileId === profile.id
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => setSelectedProfileId(profile.id)}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">{profile.name}</h4>
                    <p className="text-sm text-gray-500">
                      {profile.legal_name || 'Юридическое название не указано'}
                    </p>
                    {profile.is_default && (
                      <span className="inline-block mt-1 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded">
                        По умолчанию
                      </span>
                    )}
                  </div>
                  {selectedProfileId === profile.id && (
                    <Check className="h-5 w-5 text-blue-500" />
                  )}
                </div>
              </div>
            ))}
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t">
            <Button variant="outline" onClick={() => setShowProfileSelector(false)}>
              Отмена
            </Button>
            <Button 
              onClick={async () => {
                if (selectedProfileId) {
                  setShowProfileSelector(false)
                  // Применяем выбранный профиль
                  const profileData = await getProfileData(1)
                  if (profileData) {
                    setManualData(prev => ({
                      ...prev,
                      [1]: profileData
                    }))
                    setStepConfigs(prev => ({
                      ...prev,
                      [1]: 'profile'
                    }))
                    console.log('✅ Применен выбранный профиль клиента')
                  }
                }
              }}
              disabled={!selectedProfileId}
              className="gap-2"
            >
              <Check className="h-4 w-4" />
              Применить профиль
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно выбора профиля поставщика */}
      <Dialog open={showSupplierProfileSelector} onOpenChange={setShowSupplierProfileSelector}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Building className="h-5 w-5 text-orange-500" />
              Выберите профиль поставщика
            </DialogTitle>
            <DialogDescription>
              У вас несколько профилей поставщиков. Выберите один для заполнения данных.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {supplierProfiles?.map((profile) => (
              <div
                key={profile.id}
                className={`p-4 border rounded-lg cursor-pointer transition-all ${
                  selectedSupplierProfileId === profile.id
                    ? 'border-orange-500 bg-orange-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => setSelectedSupplierProfileId(profile.id)}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">{profile.name}</h4>
                    <p className="text-sm text-gray-500">
                      {profile.category || 'Категория не указана'}
                    </p>
                    {profile.is_default && (
                      <span className="inline-block mt-1 px-2 py-1 text-xs bg-orange-100 text-orange-800 rounded">
                        По умолчанию
                      </span>
                    )}
                  </div>
                  {selectedSupplierProfileId === profile.id && (
                    <Check className="h-5 w-5 text-orange-500" />
                  )}
                </div>
              </div>
            ))}
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t">
            <Button variant="outline" onClick={() => setShowSupplierProfileSelector(false)}>
              Отмена
            </Button>
            <Button 
              onClick={async () => {
                if (selectedSupplierProfileId) {
                  setShowSupplierProfileSelector(false)
                  // Применяем выбранный профиль поставщика
                  // Здесь нужно будет определить для какого шага применять
                  console.log('✅ Выбран профиль поставщика:', selectedSupplierProfileId)
                  // TODO: Применить профиль для соответствующих шагов (2, 4, 5)
                }
              }}
              disabled={!selectedSupplierProfileId}
              className="gap-2"
            >
              <Check className="h-4 w-4" />
              Применить профиль
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно предварительной сводки */}
      <Dialog open={showSummaryModal} onOpenChange={setShowSummaryModal}>
        <DialogContent className="max-w-4xl max-h-[85vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              Предварительная сводка атомарной сделки
            </DialogTitle>
            <DialogDescription>
              Все основные данные собраны! Проверьте информацию перед подготовкой инфраструктуры.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-6">
            {/* Шаг 1 - Данные компании */}
            {manualData[1] && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-semibold text-gray-900 flex items-center gap-2">
                    <Building className="h-4 w-4 text-blue-500" />
                    Шаг 1: Данные компании
                  </h4>
                  <div className="flex items-center gap-2">
                    <span className="text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded">
                      Источник: {getSourceDisplayName(stepConfigs[1])}
                    </span>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Название компании</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {manualData[1].name || 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Юридическое название</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {manualData[1].legalName || 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">ИНН</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {manualData[1].inn || 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Email</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {manualData[1].email || 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Телефон</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {manualData[1].phone || 'Не указано'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Адрес</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {manualData[1].address || 'Не указано'}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Шаг 2 - Спецификация товаров */}
            {manualData[2] && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-semibold text-gray-900 flex items-center gap-2">
                    <FileText className="h-4 w-4 text-green-500" />
                    Шаг 2: Спецификация товаров
                  </h4>
                  <div className="flex items-center gap-2">
                    <span className="text-xs px-2 py-1 bg-green-100 text-green-800 rounded">
                      Источник: {getSourceDisplayName(stepConfigs[2])}
                    </span>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Поставщик</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {manualData[2].supplier || 'Не указан'}
                    </div>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Валюта</Label>
                    <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                      {manualData[2].currency || 'Не указана'}
                    </div>
                  </div>
                </div>
                {manualData[2].items && manualData[2].items.length > 0 && (
                  <div>
                    <Label className="text-sm font-medium text-gray-600">Товары</Label>
                    <div className="mt-2 space-y-2">
                      {manualData[2].items.map((item: any, index: number) => (
                        <div key={index} className="p-3 bg-gray-50 rounded-lg">
                          <div className="flex justify-between items-center mb-1">
                            <span className="font-medium">{item.name || 'Без названия'}</span>
                            <span className="text-sm text-gray-600">{item.quantity || 0} шт.</span>
                          </div>
                          <div className="text-sm text-gray-600">
                            Цена: {item.price || 0} {manualData[2].currency || 'RUB'}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Шаг 4 - Способ оплаты */}
            {manualData[4] && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-semibold text-gray-900 flex items-center gap-2">
                    <CreditCard className="h-4 w-4 text-purple-500" />
                    Шаг 4: Способ оплаты
                  </h4>
                  <div className="flex items-center gap-2">
                    <span className="text-xs px-2 py-1 bg-purple-100 text-purple-800 rounded">
                      Источник: {getSourceDisplayName(stepConfigs[4])}
                    </span>
                  </div>
                </div>
                <div>
                  <Label className="text-sm font-medium text-gray-600">Метод оплаты</Label>
                  <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                    {manualData[4].method || 'Не указан'}
                  </div>
                </div>
              </div>
            )}

            {/* Шаг 5 - Реквизиты */}
            {manualData[5] && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-semibold text-gray-900 flex items-center gap-2">
                    <Banknote className="h-4 w-4 text-orange-500" />
                    Шаг 5: {manualData[5].type === 'crypto' ? 'Криптореквизиты' :
                            manualData[5].type === 'p2p' ? 'P2P реквизиты' :
                            'Банковские реквизиты'}
                  </h4>
                  <div className="flex items-center gap-2">
                    <span className="text-xs px-2 py-1 bg-orange-100 text-orange-800 rounded">
                      Источник: {getSourceDisplayName(stepConfigs[5])}
                    </span>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  {manualData[5].type === 'crypto' ? (
                    <>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Сеть</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {manualData[5].crypto_network || 'Не указана'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Адрес</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg font-mono">
                          {manualData[5].crypto_address || 'Не указан'}
                        </div>
                      </div>
                    </>
                  ) : manualData[5].type === 'p2p' ? (
                    <>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Банк</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {manualData[5].card_bank || 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Номер карты</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg font-mono">
                          {manualData[5].card_number || 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Держатель</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {manualData[5].card_holder || 'Не указан'}
                        </div>
                      </div>
                    </>
                  ) : (
                    <>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Банк</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {manualData[5].bankName || 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Получатель</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {manualData[5].recipientName || 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Номер счета</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg font-mono">
                          {manualData[5].accountNumber || 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">SWIFT</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg font-mono">
                          {manualData[5].swift || 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">IBAN</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg font-mono">
                          {manualData[5].iban || 'Не указан'}
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-gray-600">Валюта перевода</Label>
                        <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                          {manualData[5].transferCurrency || 'Не указана'}
                        </div>
                      </div>
                    </>
                  )}
                </div>
              </div>
            )}

            {/* Статистика сделки */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-semibold text-blue-900 mb-2">📊 Статистика сделки</h4>
              <div className="grid grid-cols-3 gap-4 text-sm">
                <div>
                  <span className="font-medium text-blue-700">Заполнено шагов:</span>
                  <p className="text-blue-900">4 из 7</p>
                </div>
                <div>
                  <span className="font-medium text-blue-700">Прогресс:</span>
                  <p className="text-blue-900">57%</p>
                </div>
                <div>
                  <span className="font-medium text-blue-700">Статус:</span>
                  <p className="text-blue-900">Готово к подготовке инфраструктуры</p>
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t">
            <Button variant="outline" onClick={() => setShowSummaryModal(false)}>
              Закрыть
            </Button>
            <Button 
              onClick={openStageTransitionModal}
              className="gap-2"
            >
              <ArrowRight className="h-4 w-4" />
              Перейти к подготовке инфраструктуры
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно выбора источника каталога */}
      <Dialog open={showCatalogSourceModal} onOpenChange={setShowCatalogSourceModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Store className="h-5 w-5 text-purple-500" />
              Выберите источник данных из каталога
            </DialogTitle>
            <DialogDescription>
              Выберите, откуда загрузить данные для шага {catalogSourceStep}
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {/* Синяя комната */}
            <div
              onClick={handleBlueRoomSource}
              className="flex items-center gap-4 p-4 border-2 border-blue-200 rounded-xl hover:border-blue-400 hover:bg-blue-50 cursor-pointer transition-all duration-200"
            >
              <div className="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center">
                <Users className="h-6 w-6 text-white" />
              </div>
              <div className="flex-1">
                <div className="text-lg font-semibold text-gray-800 mb-1">Синяя комната</div>
                <div className="text-sm text-gray-600">
                  Ваши личные поставщики с историей работы
                </div>
              </div>
            </div>

            {/* Оранжевая комната */}
            <div
              onClick={handleOrangeRoomSource}
              className="flex items-center gap-4 p-4 border-2 border-orange-200 rounded-xl hover:border-orange-400 hover:bg-orange-50 cursor-pointer transition-all duration-200"
            >
              <div className="w-12 h-12 rounded-full bg-orange-500 flex items-center justify-center">
                <Building className="h-6 w-6 text-white" />
              </div>
              <div className="flex-1">
                <div className="text-lg font-semibold text-gray-800 mb-1">Оранжевая комната</div>
                <div className="text-sm text-gray-600">
                  Аккредитованные поставщики Get2B
                </div>
              </div>
            </div>

            {/* Эхо карточки */}
            <div
              onClick={handleEchoCardsSource}
              className="flex items-center gap-4 p-4 border-2 border-purple-200 rounded-xl hover:border-purple-400 hover:bg-purple-50 cursor-pointer transition-all duration-200"
            >
              <div className="w-12 h-12 rounded-full bg-purple-500 flex items-center justify-center">
                <FileText className="h-6 w-6 text-white" />
              </div>
              <div className="flex-1">
                <div className="text-lg font-semibold text-gray-800 mb-1">Эхо карточки</div>
                <div className="text-sm text-gray-600">
                  Данные из завершенных проектов
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setShowCatalogSourceModal(false)}>
              Отмена
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно перехода на следующий этап */}
      <Dialog open={showStageTransitionModal} onOpenChange={setShowStageTransitionModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <ArrowRight className="h-5 w-5 text-blue-500" />
              Переход на следующий этап
            </DialogTitle>
            <DialogDescription>
              {currentStage === 1 
                ? "Вы готовы перейти к подготовке инфраструктуры. Все основные данные собраны!"
                : "Вы готовы перейти к анимации сделки. Инфраструктура настроена!"
              }
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-6">
            {/* Текущий этап */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                <div className="w-6 h-6 rounded-full bg-gray-500 text-white flex items-center justify-center text-sm font-bold">
                  {currentStage}
                </div>
                Текущий этап: {currentStage === 1 ? 'Подготовка данных' : 'Подготовка инфраструктуры'}
              </h4>
              <div className="text-sm text-gray-600 space-y-1">
                {currentStage === 1 ? (
                  <>
                    <p>✅ Шаг 1: Данные компании - заполнен</p>
                    <p>✅ Шаг 2: Спецификация товаров - заполнен</p>
                    <p>✅ Шаг 4: Способ оплаты - заполнен</p>
                    <p>✅ Шаг 5: Реквизиты - заполнен</p>
                  </>
                ) : (
                  <>
                    <p>✅ Шаг 3: Документы - настроен</p>
                    <p>✅ Шаг 6: Получение средств - настроено</p>
                    <p>✅ Шаг 7: Подтверждение - настроено</p>
                  </>
                )}
              </div>
            </div>

            {/* Следующий этап */}
            <div className="bg-blue-50 p-4 rounded-lg border-2 border-blue-200">
              <h4 className="font-semibold text-blue-900 mb-3 flex items-center gap-2">
                <div className="w-6 h-6 rounded-full bg-blue-500 text-white flex items-center justify-center text-sm font-bold">
                  {currentStage + 1}
                </div>
                Следующий этап: {currentStage === 1 ? 'Подготовка инфраструктуры' : 'Анимация сделки'}
              </h4>
              <div className="text-sm text-blue-700 space-y-1">
                {currentStage === 1 ? (
                  <>
                    <p>🔧 Шаг 3: Загрузка документов</p>
                    <p>🔧 Шаг 6: Настройка получения средств</p>
                    <p>🔧 Шаг 7: Настройка подтверждения</p>
                    <p className="font-medium mt-2">Все шаги станут доступными для настройки</p>
                  </>
                ) : (
                  <>
                    <p>🎬 Блок 2 превратится в анимацию сделки</p>
                    <p>🎬 Реальное отслеживание статуса</p>
                    <p>🎬 Интерактивные уведомления</p>
                    <p className="font-medium mt-2">Сделка перейдет в активную фазу</p>
                  </>
                )}
              </div>
            </div>

            {/* Предупреждение */}
            <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
              <div className="flex items-start gap-3">
                <div className="w-5 h-5 rounded-full bg-yellow-500 text-white flex items-center justify-center text-xs font-bold mt-0.5">
                  !
                </div>
                <div>
                  <h5 className="font-medium text-yellow-900 mb-1">Внимание</h5>
                  <p className="text-sm text-yellow-700">
                    {currentStage === 1 
                      ? "После перехода вы сможете вернуться к редактированию данных, но рекомендуется завершить настройку инфраструктуры."
                      : "После перехода сделка станет активной. Убедитесь, что все настройки корректны."
                    }
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t">
            <Button variant="outline" onClick={() => setShowStageTransitionModal(false)}>
              Отмена
            </Button>
            <Button 
              onClick={goToNextStage}
              className="gap-2 bg-blue-600 hover:bg-blue-700"
            >
              <ArrowRight className="h-4 w-4" />
              {currentStage === 1 ? 'Перейти к подготовке инфраструктуры' : 'Перейти к анимации сделки'}
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно создания проекта */}
      <Dialog open={showCreateProjectModal} onOpenChange={setShowCreateProjectModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Plus className="h-5 w-5 text-green-500" />
              Создать проект из конструктора
            </DialogTitle>
            <DialogDescription>
              Введите название проекта и создайте его на основе собранных данных
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-6">
            {/* Название проекта */}
            <div className="space-y-2">
              <Label htmlFor="project-name">Название проекта</Label>
              <Input
                id="project-name"
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
                placeholder="Введите название проекта..."
              />
            </div>

            {/* Предварительный просмотр данных */}
            <div className="space-y-3">
              <Label>Собранные данные для создания проекта:</Label>
              <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                {[1, 2, 4, 5].map((stepId) => {
                  const stepData = manualData[stepId]
                  const stepNames: Record<string, string> = {
                    '1': 'Данные компании',
                    '2': 'Спецификация товаров',
                    '4': 'Способ оплаты',
                    '5': 'Реквизиты'
                  }
                  const stepName = stepNames[stepId.toString()] || 'Неизвестный шаг'
                  
                  return (
                    <div key={stepId} className="border-l-4 border-green-500 pl-3">
                      <div className="flex items-center gap-2 mb-1">
                        <div className="w-2 h-2 rounded-full bg-green-500"></div>
                        <span className="font-medium text-sm">{stepName}</span>
                      </div>
                      <div className="text-xs text-gray-600 ml-4">
                        {stepId === 1 && stepData?.company_name && (
                          <div>🏢 {stepData.company_name}</div>
                        )}
                        {stepId === 2 && stepData?.items && (
                          <div>📦 {stepData.items.length} товаров</div>
                        )}
                        {stepId === 4 && stepData?.payment_method && (
                          <div>💳 {stepData.payment_method}</div>
                        )}
                        {stepId === 5 && stepData?.requisites && Array.isArray(stepData.requisites) && stepData.requisites.length > 0 && (
                          <div>🏦 {stepData.requisites[0]?.bank_name || 'Банк не указан'}</div>
                        )}
                      </div>
                    </div>
                  )
                })}
              </div>
            </div>

            {/* Ошибка создания */}
            {createProjectError && (
              <div className="bg-red-50 p-3 rounded-lg border border-red-200">
                <p className="text-red-700 text-sm">{createProjectError}</p>
              </div>
            )}
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t">
            <Button variant="outline" onClick={() => setShowCreateProjectModal(false)}>
              Отмена
            </Button>
            <Button 
              onClick={handleCreateProject}
              disabled={!projectName.trim() || createProjectLoading}
              className="gap-2 bg-green-600 hover:bg-green-700"
            >
              {createProjectLoading ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Создание...
                </>
              ) : (
                <>
                  <Plus className="h-4 w-4" />
                  Создать проект
                </>
              )}
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно выбора поставщика из синей комнаты */}
      <Dialog open={showBlueRoomSupplierModal} onOpenChange={setShowBlueRoomSupplierModal}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Users className="h-5 w-5 text-blue-500" />
              Выберите поставщика из синей комнаты
            </DialogTitle>
            <DialogDescription>
              Выберите поставщика для заполнения шага {catalogSourceStep}
            </DialogDescription>
          </DialogHeader>

          {blueRoomLoading ? (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
              <span className="ml-2 text-gray-600">Загрузка поставщиков...</span>
            </div>
          ) : (
            <div className="space-y-4">
              {blueRoomSuppliers.map((supplier) => (
                <div
                  key={supplier.id}
                  onClick={() => handleSelectBlueRoomSupplier(supplier)}
                  className="flex items-center gap-4 p-4 border-2 border-gray-200 rounded-xl hover:border-blue-400 hover:bg-blue-50 cursor-pointer transition-all duration-200"
                >
                  <div className="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center">
                    <Building className="h-6 w-6 text-white" />
                  </div>
                  <div className="flex-1">
                    <div className="text-lg font-semibold text-gray-800 mb-1">
                      {supplier.name}
                    </div>
                    <div className="text-sm text-gray-600 space-y-1">
                      {supplier.contact_email && (
                        <div>📧 {supplier.contact_email}</div>
                      )}
                      {supplier.contact_phone && (
                        <div>📞 {supplier.contact_phone}</div>
                      )}
                      {supplier.category && (
                        <div>🏷️ {supplier.category}</div>
                      )}
                      {supplier.city && (
                        <div>📍 {supplier.city}</div>
                      )}
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-sm text-gray-500">
                      ID: {supplier.id}
                    </div>
                    <div className="text-xs text-gray-400">
                      {supplier.created_at ? new Date(supplier.created_at).toLocaleDateString() : ''}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setShowBlueRoomSupplierModal(false)}>
              Отмена
            </Button>
          </div>
        </DialogContent>
      </Dialog>

    </div>
  )
}

