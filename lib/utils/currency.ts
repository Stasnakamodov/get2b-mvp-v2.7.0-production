/**
 * üí± –í–ê–õ–Æ–¢–ù–´–ï –£–¢–ò–õ–ò–¢–´ GET2B
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª—é—Ç
 */

export const SUPPORTED_CURRENCIES = {
  'USD': { name: '–î–æ–ª–ª–∞—Ä –°–®–ê', symbol: '$', flag: 'üá∫üá∏' },
  'EUR': { name: '–ï–≤—Ä–æ', symbol: '‚Ç¨', flag: 'üá™üá∫' },
  'CNY': { name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', symbol: '¬•', flag: 'üá®üá≥' },
  'RUB': { name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', symbol: '‚ÇΩ', flag: 'üá∑üá∫' },
  'TRY': { name: '–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞', symbol: '‚Ç∫', flag: 'üáπüá∑' },
  'AED': { name: '–î–∏—Ä—Ö–∞–º –û–ê–≠', symbol: 'ÿØ.ÿ•', flag: 'üá¶üá™' },
} as const;

export type SupportedCurrency = keyof typeof SUPPORTED_CURRENCIES;

/**
 * üí∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å –≤–∞–ª—é—Ç–æ–π
 */
export function formatCurrency(
  amount: number, 
  currency: SupportedCurrency, 
  locale: string = 'ru-RU'
): string {
  const currencyInfo = SUPPORTED_CURRENCIES[currency];
  if (!currencyInfo) {
    return `${amount.toLocaleString(locale)} ${currency}`;
  }

  // –î–ª—è —Ä—É–±–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (currency === 'RUB') {
    return new Intl.NumberFormat(locale, {
      style: 'currency',
      currency: 'RUB'
    }).format(amount);
  }

  // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç - –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const formattedAmount = amount.toLocaleString(locale, {
    minimumFractionDigits: currency === 'CNY' ? 2 : 2,
    maximumFractionDigits: currency === 'CNY' ? 2 : 2
  });

  return `${currencyInfo.symbol}${formattedAmount}`;
}

/**
 * üè∑Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–ª–∞–≥–æ–º —Å—Ç—Ä–∞–Ω—ã
 */
export function formatCurrencyWithFlag(
  amount: number, 
  currency: SupportedCurrency,
  showFullName: boolean = false
): string {
  const currencyInfo = SUPPORTED_CURRENCIES[currency];
  if (!currencyInfo) return `${amount} ${currency}`;

  const formatted = formatCurrency(amount, currency);
  const name = showFullName ? ` ${currencyInfo.name}` : '';
  
  return `${currencyInfo.flag} ${formatted}${name}`;
}

/**
 * üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
 */
export function formatExchangeRate(
  fromCurrency: SupportedCurrency,
  toCurrency: SupportedCurrency,
  rate: number,
  trend?: 'up' | 'down' | 'stable'
): string {
  const fromInfo = SUPPORTED_CURRENCIES[fromCurrency];
  const toInfo = SUPPORTED_CURRENCIES[toCurrency];
  
  if (!fromInfo || !toInfo) {
    return `1 ${fromCurrency} = ${rate.toFixed(4)} ${toCurrency}`;
  }

  const trendIcon = trend === 'up' ? ' ‚ñ≤' : trend === 'down' ? ' ‚ñº' : '';
  const formattedRate = rate.toFixed(4);
  
  return `${fromInfo.flag} 1 ${fromCurrency} = ${formattedRate} ${toInfo.symbol}${trendIcon}`;
}

/**
 * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
 */
export function isValidCurrency(currency: string): currency is SupportedCurrency {
  return currency in SUPPORTED_CURRENCIES;
}

/**
 * üíπ –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ Get2B
 */
export function calculateGet2BFee(
  amount: number, 
  currency: SupportedCurrency,
  tier: 'basic' | 'standard' | 'premium' = 'standard'
): { fee: number; feePercent: number; totalAmount: number } {
  const feePercents = {
    basic: 12,    // –î–æ 1M
    standard: 10, // 1M - 3M  
    premium: 8    // 3M+
  };

  const feePercent = feePercents[tier];
  const fee = (amount * feePercent) / 100;
  
  return {
    fee,
    feePercent,
    totalAmount: amount + fee
  };
}

/**
 * üìà –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —Å—É–º–º–µ
 */
export function getFeeTier(amount: number, currency: SupportedCurrency): 'basic' | 'standard' | 'premium' {
  // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ USD –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
  const usdRates: Record<SupportedCurrency, number> = {
    'USD': 1,
    'EUR': 1.1,
    'CNY': 0.14,
    'RUB': 0.011,
    'TRY': 0.033,
    'AED': 0.27
  };

  const amountInUSD = amount * (usdRates[currency] || 1);

  if (amountInUSD >= 30000) return 'premium';   // 3M+ RUB
  if (amountInUSD >= 10000) return 'standard';  // 1M+ RUB  
  return 'basic';                               // –î–æ 1M RUB
}

/**
 * üî¢ –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
export function parseAmount(input: string): { amount: number; currency?: SupportedCurrency } {
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  const cleaned = input.trim().toUpperCase();
  
  // –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
  let currency: SupportedCurrency | undefined;
  let numberString = cleaned;

  for (const [code, info] of Object.entries(SUPPORTED_CURRENCIES)) {
    if (cleaned.endsWith(code) || cleaned.endsWith(info.symbol)) {
      currency = code as SupportedCurrency;
      numberString = cleaned.replace(new RegExp(`${code}|${info.symbol.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}$`), '').trim();
      break;
    }
  }

  // –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ, —É–±–∏—Ä–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
  const amount = parseFloat(numberString.replace(/[^\d.,]/g, '').replace(',', '.'));

  return { amount: isNaN(amount) ? 0 : amount, currency };
}

/**
 * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–µ
 */
export function getCurrencyInfo(currency: SupportedCurrency) {
  return SUPPORTED_CURRENCIES[currency];
}

/**
 * üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
 */
export function getSupportedCurrencies(): Array<{
  code: SupportedCurrency;
  name: string;
  symbol: string;
  flag: string;
}> {
  return Object.entries(SUPPORTED_CURRENCIES).map(([code, info]) => ({
    code: code as SupportedCurrency,
    ...info
  }));
} 