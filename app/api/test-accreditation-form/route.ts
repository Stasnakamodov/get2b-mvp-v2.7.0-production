import { NextRequest, NextResponse } from "next/server";

// POST: –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–æ—Ä–º—ã –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏
export async function POST(request: NextRequest) {
  try {
    console.log("üß™ [TEST-FORM] –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
    const contentType = request.headers.get('content-type') || '';
    console.log("üìã [TEST-FORM] Content-Type:", contentType);
    
    let data: any = {};
    
    if (contentType.includes('multipart/form-data')) {
      // FormData
      const formData = await request.formData();
      console.log("üìÅ [TEST-FORM] –ü–æ–ª—É—á–µ–Ω FormData");
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è
      for (const [key, value] of formData.entries()) {
        if (value instanceof File) {
          console.log(`üìÑ [TEST-FORM] ${key}: File(${value.name}, ${value.size} bytes, ${value.type})`);
        } else {
          console.log(`üìù [TEST-FORM] ${key}: ${value}`);
        }
      }
      
      // –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
      const supplier_id = formData.get('supplier_id');
      const supplier_type = formData.get('supplier_type');
      const products = formData.get('products');
      const legal_confirmation = formData.get('legal_confirmation');
      
      data = {
        supplier_id,
        supplier_type,
        products: products ? JSON.parse(products as string) : [],
        legal_confirmation: legal_confirmation ? JSON.parse(legal_confirmation as string) : {}
      };
    } else {
      // JSON
      data = await request.json();
      console.log("üìÑ [TEST-FORM] –ü–æ–ª—É—á–µ–Ω JSON:", data);
    }
    
    return NextResponse.json({
      success: true,
      message: "–§–æ—Ä–º–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
      data: {
        supplier_id: data.supplier_id,
        supplier_type: data.supplier_type,
        products_count: data.products?.length || 0,
        has_legal_confirmation: !!data.legal_confirmation
      }
    });
    
  } catch (error) {
    console.error("‚ùå [TEST-FORM] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 