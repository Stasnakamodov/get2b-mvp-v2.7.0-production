import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// GET: –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ - –£–õ–¨–¢–†–ê-–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
export async function GET(request: NextRequest) {
  try {
    // DEBUG: Chat messages GET called (logging disabled for performance)
    
    const { searchParams } = new URL(request.url);
    const roomId = searchParams.get('room_id');
    const limit = parseInt(searchParams.get('limit') || '50');
    const offset = parseInt(searchParams.get('offset') || '0');

    if (!roomId) {
      // Missing room_id error
      return NextResponse.json(
        { error: "room_id is required" },
        { status: 400 }
      );
    }

    // –ü–†–û–í–ï–†–Ø–ï–ú UUID –§–û–†–ú–ê–¢
    if (!isValidUUID(roomId)) {
      // Invalid UUID format error
      return NextResponse.json(
        { error: "Invalid room_id format - must be valid UUID" },
        { status: 400 }
      );
    }

    // –°–ê–ú–´–ô –ü–†–û–°–¢–û–ô –ó–ê–ü–†–û–° –ë–ï–ó –í–°–Ø–ö–ò–• –ü–†–û–í–ï–†–û–ö (–ò–°–ü–†–ê–í–õ–ï–ù –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
    // Direct query to chat_messages
    
    const { data: messages, error } = await supabase
      .from('chat_messages')
      .select(`
        id,
        room_id,
        content,
        sender_type,
        sender_name,
        sender_user_id,
        sender_manager_id,
        message_type,
        created_at
      `)
      .eq('room_id', roomId)
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1);

    if (error) {
      console.error('‚ùå DEBUG: Database error:', error);
      return NextResponse.json(
        { error: "Failed to fetch messages", details: error.message },
        { status: 500 }
      );
    }

    // Messages fetched successfully

    return NextResponse.json({
      success: true,
      messages: messages || [],
      room_id: roomId,
      count: messages?.length || 0,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('üí• DEBUG: Unexpected error in GET /api/chat/messages:', error);
    return NextResponse.json(
      { error: "Internal server error", details: String(error) },
      { status: 500 }
    );
  }
}

// POST: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
export async function POST(request: NextRequest) {
  try {
    console.log('üîç DEBUG: Chat messages POST called (MANAGER SUPPORT VERSION)');
    
    const body = await request.json();
    console.log('üîç DEBUG: Request body:', body);
    
    const { 
      room_id, 
      content, 
      sender_type = 'user',
      sender_user_id,
      sender_manager_id,
      sender_name,
      message_type = 'text'
    } = body;

    if (!room_id || !content) {
      console.log('‚ùå DEBUG: Missing required fields');
      return NextResponse.json(
        { error: "room_id and content are required" },
        { status: 400 }
      );
    }

    // –ü–†–û–í–ï–†–Ø–ï–ú UUID –§–û–†–ú–ê–¢–´
    if (!isValidUUID(room_id)) {
      console.log('‚ùå DEBUG: Invalid UUID format for room_id:', room_id);
      return NextResponse.json(
        { error: "Invalid room_id format - must be valid UUID" },
        { status: 400 }
      );
    }

    if (sender_user_id && !isValidUUID(sender_user_id)) {
      console.log('‚ùå DEBUG: Invalid UUID format for sender_user_id:', sender_user_id);
      return NextResponse.json(
        { error: "Invalid sender_user_id format - must be valid UUID" },
        { status: 400 }
      );
    }

    // –ù–ï –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ú–ù–ê–¢–£ - –ü–†–û–°–¢–û –°–û–ó–î–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
    console.log('üîç DEBUG: Skipping room validation to avoid RLS issues');

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ê–ü–†–Ø–ú–£–Æ - –ü–û–î–î–ï–†–ñ–ö–ê –ú–ï–ù–ï–î–ñ–ï–†–û–í
    const messageData: any = {
      room_id,
      content,
      sender_type,
      sender_name: sender_name || (sender_type === 'manager' ? '–ú–µ–Ω–µ–¥–∂–µ—Ä Get2B' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
      message_type
    };

    // –î–æ–±–∞–≤–ª—è–µ–º sender_user_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –≤–∞–ª–∏–¥–Ω—ã–π UUID –ò —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    if (sender_type === 'user' && sender_user_id && isValidUUID(sender_user_id)) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
        const { data: userExists } = await supabase
          .from('users')
          .select('id')
          .eq('id', sender_user_id)
          .single();
        
        if (userExists) {
          messageData.sender_user_id = sender_user_id;
          console.log('‚úÖ DEBUG: Valid user_id added:', sender_user_id);
        } else {
          console.log('‚ö†Ô∏è DEBUG: User not found, using null for sender_user_id');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è DEBUG: User check failed, using null for sender_user_id:', error);
      }
    }

    // üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É sender_manager_id –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if (sender_type === 'manager' && sender_manager_id) {
      messageData.sender_manager_id = sender_manager_id;
      console.log('‚úÖ DEBUG: Manager ID added:', sender_manager_id);
    }

    console.log('üîç DEBUG: Creating message with manager support:', messageData);

    const { data: newMessage, error } = await supabase
      .from('chat_messages')
      .insert(messageData)
      .select()
      .single();

    if (error) {
      console.error('‚ùå DEBUG: Error creating message:', error);
      return NextResponse.json(
        { error: "Failed to send message", details: error.message },
        { status: 500 }
      );
    }

    console.log('‚úÖ DEBUG: Message created successfully:', {
      id: newMessage.id,
      sender_type: newMessage.sender_type,
      sender_manager_id: newMessage.sender_manager_id
    });

    // üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê–ú –¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if (sender_type === 'user') {
      console.log('üîç DEBUG: Checking if need to notify managers...');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        const { data: room, error: roomError } = await supabase
          .from('chat_rooms')
          .select('room_type, project_id, name')
          .eq('id', room_id)
          .single();

        if (room && room.room_type === 'project' && room.project_id) {
          console.log('üì® DEBUG: This is a project room, notifying managers...');
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
          const { data: project, error: projectError } = await supabase
            .from('projects')
            .select('name, company_data')
            .eq('id', room.project_id)
            .single();

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram
          const { notifyManagersAboutNewMessage } = await import('@/lib/telegram-chat-integration');
          
          await notifyManagersAboutNewMessage({
            roomId: room_id,
            projectId: room.project_id,
            userMessage: content,
            userName: sender_name || '–ö–ª–∏–µ–Ω—Ç',
            projectName: project?.name || room.name,
            companyName: project?.company_data?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            messageId: newMessage.id
          });
          
          console.log('‚úÖ DEBUG: Managers notified about new message');
        } else {
          console.log('‚ÑπÔ∏è DEBUG: Not a project room, skipping manager notification');
        }
      } catch (notifyError) {
        console.error('‚ö†Ô∏è DEBUG: Error notifying managers (non-critical):', notifyError);
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      }
    }

    return NextResponse.json({
      success: true,
      message: newMessage,
      message_text: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
    });

  } catch (error) {
    console.error('üí• DEBUG: Unexpected error in POST /api/chat/messages:', error);
    return NextResponse.json(
      { error: "Internal server error", details: String(error) },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ UUID —Ñ–æ—Ä–º–∞—Ç–∞
function isValidUUID(uuid: string): boolean {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(uuid);
} 