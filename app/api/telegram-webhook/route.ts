import { type NextRequest, NextResponse } from "next/server"
import { supabase } from "@/lib/supabaseClient"
import { createClient } from "@supabase/supabase-js"
import { supabaseAdmin } from "@/lib/supabaseAdmin"
import { changeProjectStatus } from "@/lib/supabaseProjectStatus"
import { ProjectStatus } from "@/lib/types/project-status"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID

export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    console.log("üì® Webhook body:", JSON.stringify(body, null, 2))
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_query:", {
      hasCallbackQuery: !!body.callback_query,
      callbackData: body.callback_query?.data,
      callbackId: body.callback_query?.id
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è message —Å —Ñ–∞–π–ª–æ–º –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    if (body.message) {
      console.log("üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", {
        messageId: body.message.message_id,
        hasPhoto: !!body.message.photo,
        hasDocument: !!body.message.document,
        hasReplyTo: !!body.message.reply_to_message,
        text: body.message.text?.substring(0, 100)
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback_query
    if (!body.callback_query && !body.message) {
      console.log("‚ùå –ù–µ—Ç callback_query –∏ message, –∑–∞–≤–µ—Ä—à–∞–µ–º");
      return NextResponse.json({ ok: true })
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å message —Å —Ñ–∞–π–ª–æ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –ü–ï–†–í–´–ú
    if (body.message?.photo || body.message?.document) {
      console.log("üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –≤ webhook:", {
        hasPhoto: !!body.message?.photo,
        hasDocument: !!body.message?.document,
        messageId: body.message?.message_id,
        hasReplyTo: !!body.message?.reply_to_message
      });

      const message = body.message;
      const replyToMessage = message.reply_to_message;
      
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_to_message:", {
        hasReplyTo: !!replyToMessage,
        replyText: replyToMessage?.text?.substring(0, 100),
        includesLoadingText: replyToMessage?.text?.includes("–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞
      if (replyToMessage && replyToMessage.text?.includes("–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")) {
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞");
        
        const projectIdMatch = replyToMessage.text.match(/–ø—Ä–æ–µ–∫—Ç–∞ ([a-f0-9-]+)/);
        console.log("üîç –ü–æ–∏—Å–∫ project ID:", {
          projectIdMatch: projectIdMatch?.[1],
          fullText: replyToMessage.text
        });
        
        if (projectIdMatch) {
          const projectId = projectIdMatch[1];
          console.log("üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:", projectId);
          
          try {
            let fileId = "";
            let fileName = "receipt";
            
            if (message.photo) {
              // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
              const photo = message.photo[message.photo.length - 1];
              fileId = photo.file_id;
              fileName = "receipt.jpg";
            } else if (message.document) {
              fileId = message.document.file_id;
              fileName = message.document.file_name || "receipt";
            }
            
            console.log("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª:", { fileId, fileName });
            
            // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –æ—Ç Telegram
            const fileResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`);
            const fileData = await fileResponse.json();
            
            if (fileData.ok) {
              const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileData.result.file_path}`;
              console.log("üîó URL —Ñ–∞–π–ª–∞ –æ—Ç Telegram:", fileUrl);
              
              // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Telegram —Å–µ—Ä–≤–µ—Ä–æ–≤
              console.log("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Telegram...");
              const fileDownloadResponse = await fetch(fileUrl);
              if (!fileDownloadResponse.ok) {
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å Telegram");
              }
              
              const fileBuffer = await fileDownloadResponse.arrayBuffer();
              const fileExtension = fileName.split('.').pop() || 'jpg';
              const supabaseFileName = `manager-receipt-${projectId}-${Date.now()}.${fileExtension}`;
              
              console.log("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage:", {
                fileName: supabaseFileName,
                size: fileBuffer.byteLength,
                bucket: "step6-client-receipts"
              });
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
              const { data: uploadData, error: uploadError } = await supabase.storage
                .from("step6-client-receipts")
                .upload(supabaseFileName, fileBuffer, {
                  contentType: message.document?.mime_type || 'image/jpeg',
                  upsert: false
                });
                
              if (uploadError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase Storage:", uploadError);
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Storage: " + uploadError.message);
              }
              
              // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL —Ñ–∞–π–ª–∞ –∏–∑ Supabase Storage
              const { data: urlData } = supabase.storage
                .from("step6-client-receipts")
                .getPublicUrl(supabaseFileName);
                
              const supabaseFileUrl = urlData.publicUrl;
              console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase Storage:", supabaseFileUrl);
              
              // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
              const { data: currentProject, error: fetchError } = await supabase
                .from("projects")
                .select("receipts, status")
                .eq("id", projectId)
                .single()

              if (fetchError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", fetchError)
                throw new Error("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
              }

              console.log("üìã –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç:", { 
                status: currentProject.status, 
                hasReceipts: !!currentProject.receipts 
              });

              // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —á–µ–∫–∞–º–∏ (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π)
              const receiptsData = {
                client_receipt: currentProject.receipts, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —á–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞
                manager_receipt: supabaseFileUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ Supabase Storage
                manager_uploaded_at: new Date().toISOString(),
                manager_file_name: supabaseFileName // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              }

              console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î:", receiptsData);

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ñ–∞–π–ª–∞ –≤ –ø—Ä–æ–µ–∫—Ç
              const { error: updateError } = await supabase
                .from("projects")
                .update({ 
                  receipts: JSON.stringify(receiptsData), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON
                  status: "in_work", // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ"
                  updated_at: new Date().toISOString()
                })
                .eq("id", projectId)

              if (updateError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", updateError)
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
              }

              console.log("‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å —á–µ–∫–æ–º –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ Supabase Storage")

              // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
              console.log(`üßπ –ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`)
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram
              await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: `‚úÖ –ß–µ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ —Å–∞–π—Ç–µ.\nüìÅ –§–∞–π–ª: ${supabaseFileName}`,
                  reply_to_message_id: body.message.message_id
                })
              })
              
              return NextResponse.json({ 
                ok: true, 
                message: `Receipt uploaded to Supabase Storage for project ${projectId}`,
                file_url: supabaseFileUrl
              });
            } else {
              console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—Ç Telegram:", fileData);
              throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –æ—Ç Telegram");
            }
          } catch (error: any) {
            console.error("‚ùå File upload error:", error);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
              await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}: ${error.message}`,
                  reply_to_message_id: message.message_id
                })
              });
            }
            
            return NextResponse.json({ ok: false, error: error.message });
          }
        } else {
          console.log("‚ùå Project ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
        }
      } else {
        console.log("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞");
      }
      
      return NextResponse.json({ ok: true, message: "File processed" });
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç callback_query, –∑–∞–≤–µ—Ä—à–∞–µ–º
    if (!body.callback_query) {
      console.log("‚ùå –ù–µ—Ç callback_query, –∑–∞–≤–µ—Ä—à–∞–µ–º");
      return NextResponse.json({ ok: true })
    }

    const { data } = body.callback_query
    console.log("üìù Callback data:", data)

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –∫–æ—Ä–æ—Ç–∫–∏–º (–∞—Ç–æ–º–∞—Ä–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä) –∏–ª–∏ –ø–æ–ª–Ω—ã–º UUID
    const isShortId = (callbackData: string): boolean => {
      if (callbackData.startsWith("approve_receipt_") || callbackData.startsWith("reject_receipt_")) {
        const idPart = callbackData.split("_").slice(-1)[0];
        return idPart.length <= 10;
      }
      return false;
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –∞—Ç–æ–º–∞—Ä–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ ID)
    if ((data.startsWith("approve_") || data.startsWith("reject_")) &&
        !data.includes("atomic") &&
        !data.includes("client_receipt") &&
        !isShortId(data)) {
      console.log("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")

      const data = body.callback_query.data;
      const parts = data.split("_");
      const action = parts[0]; // approve –∏–ª–∏ reject
      
      let type = "";
      let projectId = "";
      
      // –ü–∞—Ä—Å–∏–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
      if (parts.length >= 3) {
        if (parts[1] === "project") {
          // –§–æ—Ä–º–∞—Ç: approve_project_uuid –∏–ª–∏ reject_project_uuid (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
          type = "project";
          projectId = parts.slice(2).join("_"); // –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ project (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å _ –≤ UUID)
        } else {
          // –§–æ—Ä–º–∞—Ç: approve_receipt_uuid –∏–ª–∏ approve_invoice_uuid
          type = parts[1]; // receipt, invoice, spec, etc.
          projectId = parts.slice(2).join("_"); // –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ —Ç–∏–ø–∞ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å _ –≤ UUID)
        }
      } else if (parts.length === 2) {
        // –§–æ—Ä–º–∞—Ç: approve_uuid (–±–µ–∑ —Ç–∏–ø–∞)
        type = "spec"; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
        projectId = parts[1];
      } else {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: " + data);
      }
      
      console.log("Parsed callback_data:", { data, action, type, projectId });
      console.log("üîç [DEBUG] Validation - projectId length:", projectId.length, "format valid:", /^[a-f0-9-]{36}$/.test(projectId));

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
      const { data: project, error: fetchError } = await supabase
        .from("projects")
        .select("status")
        .eq("id", projectId)
        .single();
      if (fetchError || !project) throw new Error("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");

      let newStatus: ProjectStatus;
      if (action === "approve") {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø—Ä—É–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
        if (type === "project") {
          switch (project.status) {
            case "waiting_approval":
              newStatus = "waiting_receipt";
              break;
            default:
              throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–ø—Ä—É–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞: " + project.status);
          }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø—Ä—É–≤–∞ –∏–Ω–≤–æ–π—Å–∞
        else if (type === "invoice") {
          switch (project.status) {
            case "waiting_approval":
              newStatus = "waiting_receipt";
              break;
            default:
              throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–ø—Ä—É–≤–∞ –∏–Ω–≤–æ–π—Å–∞: " + project.status);
          }
        } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø—Ä—É–≤–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —á–µ–∫–∞
        switch (project.status) {
          case "waiting_approval":
            newStatus = "waiting_receipt";
            break;
          case "waiting_receipt":
            newStatus = "receipt_approved";
            break;
          case "receipt_approved":
            // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            newStatus = "filling_requisites";
            break;
          case "waiting_client_confirmation":
            newStatus = "completed";
            break;
          default:
            // –î–ª—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if (project.status === "filling_requisites" || project.status === "in_work" || project.status === "completed") {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
              if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
                await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
                    callback_query_id: body.callback_query.id,
                    text: "–ü—Ä–æ–µ–∫—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                    show_alert: false
                  })
                })
              }
              return NextResponse.json({ 
                ok: true, 
                message: `Project ${projectId} already processed` 
              })
            }
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–ø—Ä—É–≤–∞: " + project.status);
          }
        }
      } else if (action === "reject") {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
        if (type === "project") {
          switch (project.status) {
            case "waiting_approval":
              newStatus = "receipt_rejected";
              break;
            default:
              throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: " + project.status);
          }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        else if (type === "invoice") {
          switch (project.status) {
            case "waiting_approval":
              newStatus = "draft"; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏
              break;
            default:
              throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: " + project.status);
          }
        } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —á–µ–∫–∞
        switch (project.status) {
          case "waiting_approval":
            newStatus = "receipt_rejected";
            break;
          case "waiting_receipt":
            newStatus = "receipt_rejected";
            break;
          case "receipt_approved":
            newStatus = "receipt_rejected";
            break;
          default:
            // –î–ª—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if (project.status === "receipt_rejected" || project.status === "completed" || project.status === "in_work") {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
              if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
                await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
                    callback_query_id: body.callback_query.id,
                    text: "–ü—Ä–æ–µ–∫—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                    show_alert: false
                  })
                })
              }
              return NextResponse.json({ 
                ok: true, 
                message: `Project ${projectId} already processed` 
              })
            }
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: " + project.status);
          }
        }
      } else {
        throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: " + action);
      }

      try {
        await changeProjectStatus({
          projectId,
          newStatus,
          changedBy: "telegram_bot",
          comment: `${action === "approve" ? "–û–¥–æ–±—Ä–µ–Ω–æ" : "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram`,
        })
        // --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram ---
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          let responseText = "";
          if (action === "approve") {
            if (type === "project") {
              responseText = "–ü—Ä–æ–µ–∫—Ç –æ–¥–æ–±—Ä–µ–Ω! –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —á–µ–∫.";
            } else if (type === "invoice") {
              responseText = "–ò–Ω–≤–æ–π—Å –æ–¥–æ–±—Ä–µ–Ω! –ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞.";
            } else {
            switch (project.status) {
              case "waiting_approval":
                responseText = "–ü—Ä–æ–µ–∫—Ç –æ–¥–æ–±—Ä–µ–Ω! –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —á–µ–∫.";
                break;
              case "waiting_receipt":
                responseText = "–ß–µ–∫ –æ–¥–æ–±—Ä–µ–Ω! –ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.";
                break;
              case "receipt_approved":
                responseText = "–ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.";
                break;
              case "waiting_client_confirmation":
                responseText = "–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!";
                break;
              default:
                responseText = "–ü—Ä–æ–µ–∫—Ç –æ–¥–æ–±—Ä–µ–Ω!";
              }
            }
          } else {
            if (type === "project") {
              responseText = "–ü—Ä–æ–µ–∫—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏.";
            } else if (type === "invoice") {
              responseText = "–ò–Ω–≤–æ–π—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å.";
          } else {
            switch (project.status) {
              case "waiting_approval":
                responseText = "–ü—Ä–æ–µ–∫—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏.";
                break;
              case "waiting_receipt":
              case "receipt_approved":
                responseText = "–ß–µ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫.";
                break;
              default:
                responseText = "–ü—Ä–æ–µ–∫—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.";
              }
            }
          }
          
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: responseText,
              show_alert: false
            })
          })
        }
        return NextResponse.json({ 
          ok: true, 
          message: `Project ${projectId} ${action === "approve" ? "approved" : "rejected"}` 
        })
      } catch (error: any) {
        console.error("‚ùå Status change error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if (data.startsWith("upload_supplier_receipt_")) {
        const projectId = data.replace("upload_supplier_receipt_", "")

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º —á–µ–∫–∞",
              show_alert: true
            })
          })
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
              chat_id: process.env.TELEGRAM_CHAT_ID,
              text: `üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –§–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É.`,
              reply_markup: {
                force_reply: true,
                selective: true
              }
            })
          })
        }

        return NextResponse.json({ 
          ok: true, 
          message: `Upload dialog opened for project ${projectId}` 
        })
      } catch (error: any) {
        console.error("‚ùå Receipt upload dialog error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    if (data.startsWith("confirm_receipt_")) {
      const projectId = data.replace("confirm_receipt_", "")
      
      try {
        await changeProjectStatus({
          projectId,
          newStatus: "completed" as ProjectStatus,
          changedBy: "telegram_bot",
          comment: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
        })

        return NextResponse.json({ 
          ok: true, 
          message: `Receipt confirmed for project ${projectId}` 
        })
      } catch (error: any) {
        console.error("‚ùå Receipt confirmation error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–ö–†–ï–î–ò–¢–ê–¶–ò–ò –ü–û–°–¢–ê–í–©–ò–ö–û–í =====
    
    // –û–¥–æ–±—Ä–µ–Ω–∏–µ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    if (data.startsWith("accredit_approve_")) {
      const supplierId = data.replace("accredit_approve_", "")
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–æ
        const { error: approveError } = await supabase
          .from("catalog_verified_suppliers")
          .update({
            moderation_status: "approved",
            moderated_at: new Date().toISOString(),
            moderated_by: "telegram_bot",
            is_verified: true,
            is_active: true
          })
          .eq("id", supplierId)

        if (approveError) {
          throw new Error("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: " + approveError.message)
        }

        // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
        const { data: draft } = await supabase
          .from("supplier_drafts")
          .select("products, supplier_data")
          .eq("supplier_data->verified_supplier_id", supplierId)
          .single()

        if (draft?.products && Array.isArray(draft.products) && draft.products.length > 0) {
          const verifiedProducts = draft.products.map((product: any) => ({
            supplier_id: supplierId,
            name: product.name,
            description: product.description,
            category: product.category,
            price: product.price,
            currency: product.currency || 'USD',
            min_order: product.min_order,
            images: product.images,
            specifications: product.specifications,
            in_stock: product.in_stock,
            sku: product.sku
          }))

          await supabase
            .from("catalog_verified_products")
            .insert(verifiedProducts)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω!",
              show_alert: true
            })
          })
        }

        console.log("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –æ–¥–æ–±—Ä–µ–Ω:", supplierId)
        return NextResponse.json({ 
          ok: true, 
          message: `Supplier ${supplierId} approved` 
        })
      } catch (error: any) {
        console.error("‚ùå Supplier approval error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    if (data.startsWith("accredit_reject_")) {
      const supplierId = data.replace("accredit_reject_", "")
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
        const { error: rejectError } = await supabase
          .from("catalog_verified_suppliers")
          .update({
            moderation_status: "rejected",
            moderated_at: new Date().toISOString(),
            moderated_by: "telegram_bot",
            is_verified: false,
            is_active: false
          })
          .eq("id", supplierId)

        if (rejectError) {
          throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: " + rejectError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
              show_alert: true
            })
          })
        }

        console.log("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω:", supplierId)
        return NextResponse.json({ 
          ok: true, 
          message: `Supplier ${supplierId} rejected` 
        })
      } catch (error: any) {
        console.error("‚ùå Supplier rejection error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–∫–∏
    if (data.startsWith("accredit_revision_")) {
      const supplierId = data.replace("accredit_revision_", "")
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
        const { error: revisionError } = await supabase
          .from("catalog_verified_suppliers")
          .update({
            moderation_status: "revision",
            moderated_at: new Date().toISOString(),
            moderated_by: "telegram_bot"
          })
          .eq("id", supplierId)

        if (revisionError) {
          throw new Error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏: " + revisionError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "üìã –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏",
              show_alert: true
            })
          })
        }

        console.log("üìã –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞:", supplierId)
        return NextResponse.json({ 
          ok: true, 
          message: `Supplier ${supplierId} revision requested` 
        })
      } catch (error: any) {
        console.error("‚ùå Supplier revision error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // ========================================
    // üöÄ –û–ë–†–ê–ë–û–¢–ö–ê –ê–¢–û–ú–ê–†–ù–û–ì–û –ö–û–ù–°–¢–†–£–ö–¢–û–†–ê
    // ========================================

    // –û–¥–æ–±—Ä–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    if (data.startsWith("approve_atomic_")) {
      console.log("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:", data)
      const cleanRequestId = data.replace("approve_atomic_", "")
      console.log("üßπ –û—á–∏—â–µ–Ω–Ω—ã–π requestId:", cleanRequestId)
      
      try {
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É requestId (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫)
        console.log("üîç –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç —Å atomic_request_id —Å–æ–¥–µ—Ä–∂–∞—â–∏–º:", cleanRequestId)
        const { data: projects, error: searchError } = await supabase
          .from("projects")
          .select("id, atomic_request_id")
          .ilike("atomic_request_id", `%${cleanRequestId}%`)
          .order("created_at", { ascending: false })
          .limit(1)

        if (searchError) {
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + searchError.message)
        }

        if (!projects || projects.length === 0) {
          throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        const project = projects[0]
        console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:", { 
          projectId: project.id, 
          originalRequestId: project.atomic_request_id,
          cleanRequestId 
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–æ
        const { error: approveError } = await supabase
          .from("projects")
          .update({
            atomic_moderation_status: "approved",
            atomic_moderated_at: new Date().toISOString(),
            atomic_moderated_by: "telegram_bot"
          })
          .eq("id", project.id)

        if (approveError) {
          throw new Error("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: " + approveError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback_query:", body.callback_query.id)
          const answerResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "‚úÖ –ê—Ç–æ–º–∞—Ä–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–¥–æ–±—Ä–µ–Ω!",
              show_alert: true
            })
          })
          
          const answerResult = await answerResponse.json()
          console.log("üì§ –û—Ç–≤–µ—Ç –Ω–∞ callback_query:", answerResult)
        }

        console.log("‚úÖ –ê—Ç–æ–º–∞—Ä–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–¥–æ–±—Ä–µ–Ω:", cleanRequestId)
        return NextResponse.json({ 
          ok: true, 
          message: `Atomic constructor ${cleanRequestId} approved` 
        })
      } catch (error: any) {
        console.error("‚ùå Atomic constructor approval error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    if (data.startsWith("reject_atomic_")) {
      const cleanRequestId = data.replace("reject_atomic_", "")
      
      try {
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É requestId
        const { data: projects, error: searchError } = await supabase
          .from("projects")
          .select("id, atomic_request_id")
          .ilike("atomic_request_id", `%${cleanRequestId}%`)

        if (searchError) {
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + searchError.message)
        }

        if (!projects || projects.length === 0) {
          throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        const project = projects[0]
        console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:", { 
          projectId: project.id, 
          originalRequestId: project.atomic_request_id,
          cleanRequestId 
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
        const { error: rejectError } = await supabase
          .from("projects")
          .update({
            atomic_moderation_status: "rejected",
            atomic_moderated_at: new Date().toISOString(),
            atomic_moderated_by: "telegram_bot"
          })
          .eq("id", project.id)

        if (rejectError) {
          throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: " + rejectError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "‚ùå –ê—Ç–æ–º–∞—Ä–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω",
              show_alert: true
            })
          })
        }

        console.log("‚ùå –ê—Ç–æ–º–∞—Ä–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω:", cleanRequestId)
        return NextResponse.json({ 
          ok: true, 
          message: `Atomic constructor ${cleanRequestId} rejected` 
        })
      } catch (error: any) {
        console.error("‚ùå Atomic constructor rejection error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –ó–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    if (data.startsWith("request_changes_atomic_")) {
      const cleanRequestId = data.replace("request_changes_atomic_", "")
      
      try {
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É requestId
        const { data: projects, error: searchError } = await supabase
          .from("projects")
          .select("id, atomic_request_id")
          .ilike("atomic_request_id", `%${cleanRequestId}%`)

        if (searchError) {
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + searchError.message)
        }

        if (!projects || projects.length === 0) {
          throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        const project = projects[0]
        console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:", { 
          projectId: project.id, 
          originalRequestId: project.atomic_request_id,
          cleanRequestId 
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
        const { error: revisionError } = await supabase
          .from("projects")
          .update({
            atomic_moderation_status: "revision",
            atomic_moderated_at: new Date().toISOString(),
            atomic_moderated_by: "telegram_bot"
          })
          .eq("id", project.id)

        if (revisionError) {
          throw new Error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: " + revisionError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "üìã –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ",
              show_alert: true
            })
          })
        }

        console.log("üìã –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:", cleanRequestId)
        return NextResponse.json({ 
          ok: true, 
          message: `Atomic constructor ${cleanRequestId} changes requested` 
        })
      } catch (error: any) {
        console.error("‚ùå Atomic constructor revision error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–µ–∫–∞
    if (data.startsWith("approve_receipt_")) {
      const cleanRequestId = data.replace("approve_receipt_", "")
      
      try {
        console.log("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ–∫–∞:", cleanRequestId)
        
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É requestId
        const { data: projects, error: searchError } = await supabase
          .from("projects")
          .select("id, atomic_request_id, status")
          .ilike("atomic_request_id", `%${cleanRequestId}%`)
          .order("created_at", { ascending: false })
          .limit(1)

        if (searchError) {
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + searchError.message)
        }

        if (!projects || projects.length === 0) {
          throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        const project = projects[0]
        console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–µ–∫–∞:", { 
          projectId: project.id, 
          originalRequestId: project.atomic_request_id,
          cleanRequestId 
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        const { error: approveError } = await supabase
          .from("projects")
          .update({
            status: "receipt_approved",
            updated_at: new Date().toISOString()
          })
          .eq("id", project.id)

        if (approveError) {
          throw new Error("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–µ–∫–∞: " + approveError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "‚úÖ –ß–µ–∫ –æ–¥–æ–±—Ä–µ–Ω! –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
              show_alert: true
            })
          })
        }

        console.log("‚úÖ –ß–µ–∫ –æ–¥–æ–±—Ä–µ–Ω:", cleanRequestId)
        return NextResponse.json({ 
          ok: true, 
          message: `Receipt ${cleanRequestId} approved` 
        })
      } catch (error: any) {
        console.error("‚ùå Receipt approval error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    if (data.startsWith("approve_client_receipt_")) {
      const cleanRequestId = data.replace("approve_client_receipt_", "")
      
      try {
        console.log("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", cleanRequestId)
        
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É requestId
        const { data: projects, error: searchError } = await supabase
          .from("projects")
          .select("id, atomic_request_id, status, client_confirmation_url")
          .ilike("atomic_request_id", `%${cleanRequestId}%`)
          .order("created_at", { ascending: false })
          .limit(1)

        if (searchError) {
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + searchError.message)
        }

        if (!projects || projects.length === 0) {
          throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        const project = projects[0]
        console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", { 
          projectId: project.id, 
          originalRequestId: project.atomic_request_id,
          cleanRequestId,
          hasClientReceipt: !!project.client_confirmation_url
        })

        if (!project.client_confirmation_url) {
          throw new Error("–ß–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ completed
        const { error: approveError } = await supabase
          .from("projects")
          .update({
            status: "completed",
            client_confirmation_status: "approved",
            updated_at: new Date().toISOString()
          })
          .eq("id", project.id)

        if (approveError) {
          throw new Error("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: " + approveError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "‚úÖ –ß–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω! –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
              show_alert: true
            })
          })
        }

        console.log("‚úÖ –ß–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω, –ø—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:", cleanRequestId)
        return NextResponse.json({ 
          ok: true, 
          message: `Client receipt ${cleanRequestId} approved, project completed` 
        })
      } catch (error: any) {
        console.error("‚ùå Client receipt approval error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    if (data.startsWith("reject_client_receipt_")) {
      const cleanRequestId = data.replace("reject_client_receipt_", "")
      
      try {
        console.log("‚ùå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", cleanRequestId)
        
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É requestId
        const { data: projects, error: searchError } = await supabase
          .from("projects")
          .select("id, atomic_request_id, status, client_confirmation_url")
          .ilike("atomic_request_id", `%${cleanRequestId}%`)
          .order("created_at", { ascending: false })
          .limit(1)

        if (searchError) {
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + searchError.message)
        }

        if (!projects || projects.length === 0) {
          throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        const project = projects[0]
        console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", { 
          projectId: project.id, 
          originalRequestId: project.atomic_request_id,
          cleanRequestId,
          hasClientReceipt: !!project.client_confirmation_url
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        const { error: rejectError } = await supabase
          .from("projects")
          .update({
            client_confirmation_status: "rejected",
            updated_at: new Date().toISOString()
          })
          .eq("id", project.id)

        if (rejectError) {
          throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: " + rejectError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "‚ùå –ß–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫.",
              show_alert: true
            })
          })
        }

        console.log("‚ùå –ß–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω:", cleanRequestId)
        return NextResponse.json({ 
          ok: true, 
          message: `Client receipt ${cleanRequestId} rejected` 
        })
      } catch (error: any) {
        console.error("‚ùå Client receipt rejection error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ–∫–∞
    if (data.startsWith("reject_receipt_")) {
      const cleanRequestId = data.replace("reject_receipt_", "")
      
      try {
        console.log("‚ùå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ–∫–∞:", cleanRequestId)
        
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É requestId
        const { data: projects, error: searchError } = await supabase
          .from("projects")
          .select("id, atomic_request_id, status")
          .ilike("atomic_request_id", `%${cleanRequestId}%`)
          .order("created_at", { ascending: false })
          .limit(1)

        if (searchError) {
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + searchError.message)
        }

        if (!projects || projects.length === 0) {
          throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        const project = projects[0]
        console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ–∫–∞:", { 
          projectId: project.id, 
          originalRequestId: project.atomic_request_id,
          cleanRequestId 
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        const { error: rejectError } = await supabase
          .from("projects")
          .update({
            status: "receipt_rejected",
            updated_at: new Date().toISOString()
          })
          .eq("id", project.id)

        if (rejectError) {
          throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ–∫–∞: " + rejectError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —á–µ–∫.",
              show_alert: true
            })
          })
        }

        console.log("‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω:", cleanRequestId)
        return NextResponse.json({ 
          ok: true, 
          message: `Receipt ${cleanRequestId} rejected` 
        })
      } catch (error: any) {
        console.error("‚ùå Receipt rejection error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞
    if (data.startsWith("request_new_receipt_")) {
      const cleanRequestId = data.replace("request_new_receipt_", "")
      
      try {
        console.log("üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞:", cleanRequestId)
        
        // –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–º—É requestId
        const { data: projects, error: searchError } = await supabase
          .from("projects")
          .select("id, atomic_request_id, status")
          .ilike("atomic_request_id", `%${cleanRequestId}%`)
          .order("created_at", { ascending: false })
          .limit(1)

        if (searchError) {
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + searchError.message)
        }

        if (!projects || projects.length === 0) {
          throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        const project = projects[0]
        console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞:", { 
          projectId: project.id, 
          originalRequestId: project.atomic_request_id,
          cleanRequestId 
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        const { error: requestError } = await supabase
          .from("projects")
          .update({
            status: "waiting_receipt",
            updated_at: new Date().toISOString()
          })
          .eq("id", project.id)

        if (requestError) {
          throw new Error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞: " + requestError.message)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
        if (body.callback_query?.id && process.env.TELEGRAM_BOT_TOKEN) {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              callback_query_id: body.callback_query.id,
              text: "üìã –ó–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫. –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏.",
              show_alert: true
            })
          })
        }

        console.log("üìã –ó–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫:", cleanRequestId)
        return NextResponse.json({ 
          ok: true, 
          message: `New receipt requested for ${cleanRequestId}` 
        })
      } catch (error: any) {
        console.error("‚ùå New receipt request error:", error)
        return NextResponse.json({ ok: false, error: error.message })
      }
    }

    // ========================================
    // üí¨ –û–ë–†–ê–ë–û–¢–ö–ê –ß–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
    // ========================================

    // ‚ùå –£–î–ê–õ–ï–ù–û: –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–µ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ telegram-chat-webhook

    // ‚ùå –£–î–ê–õ–ï–ù–û: –ß–∞—Ç-—Ñ—É–Ω–∫—Ü–∏–∏ (open_chat_, project_details_) —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ telegram-chat-webhook

    return NextResponse.json({ ok: true })
  } catch (error: any) {
    console.error("‚ùå Webhook error:", error)
    return NextResponse.json({ ok: false, error: error.message })
  }
}
