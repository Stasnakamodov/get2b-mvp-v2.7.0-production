import { NextRequest, NextResponse } from "next/server";
import { supabaseService } from "@/lib/supabaseServiceClient";
import crypto from "crypto";

export async function POST() {
  try {
    console.log("üß™ [TEST-ACCREDITATION-WITH-FILES] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏");
    
    const applicationId = crypto.randomUUID();
    const supplierId = crypto.randomUUID();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏
    const testApplication = {
      id: applicationId,
      user_id: "86cc190d-0c80-463b-b0df-39a25b22365f", // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      supplier_id: supplierId,
      supplier_type: "profile",
      supplier_name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ—Å—Ç–∞–≤—â–∏–∫",
      company_name: "–û–û–û –¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è",
      category: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
      country: "–†–æ—Å—Å–∏—è",
      status: "pending",
      
      // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (JSON —Å—Ç—Ä–æ–∫–∞)
      application_data: JSON.stringify({
        name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ—Å—Ç–∞–≤—â–∏–∫",
        company_name: "–û–û–û –¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è",
        category: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        country: "–†–æ—Å—Å–∏—è",
        contact_email: "test@example.com",
        contact_phone: "+7 999 123-45-67"
      }),
      
      // –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ (JSON —Å—Ç—Ä–æ–∫–∞)
      products_data: JSON.stringify([
        {
          id: crypto.randomUUID(),
          name: "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1",
          description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
          category: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
          price: "1000",
          currency: "RUB",
          images: ["test-svg-image-1753455315159.svg"],
          imageNames: ["test-svg-image-1753455315159.svg"],
          certificates: ["Receipt-2186-3845.pdf"],
          certificateNames: ["Receipt-2186-3845.pdf"],
          images_info: [
            {
              name: "test-svg-image-1753455315159.svg",
              size: 1024,
              type: "image/svg+xml",
              public_url: "https://ejkhdhexkadecpbjjmsz.supabase.co/storage/v1/object/public/project-images/accreditation/test-1753468788256/products/0/images/1753468788256_test-svg-image-1753455315159.svg"
            }
          ],
          certificates_info: [
            {
              name: "Receipt-2186-3845.pdf",
              size: 2048,
              type: "application/pdf",
              public_url: "https://ejkhdhexkadecpbjjmsz.supabase.co/storage/v1/object/public/accreditation-certificates/accreditation/test-1753468790096/products/0/certificates/1753468790096_Receipt-2186-3845.pdf"
            }
          ]
        }
      ]),
      
      // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (JSON —Å—Ç—Ä–æ–∫–∞)
      legal_documents_data: JSON.stringify([
        {
          type: "business_license",
          name: "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
          fileName: "Receipt-2976-0063.pdf",
          size: 3072,
          fileType: "application/pdf",
          public_url: "https://ejkhdhexkadecpbjjmsz.supabase.co/storage/v1/object/public/accreditation-documents/accreditation/test-1753468792757/legal/1753468792757_Receipt-2976-0063.pdf"
        }
      ]),
      
      // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (JSON —Å—Ç—Ä–æ–∫–∞)
      legal_confirmation: JSON.stringify({
        isLegalEntity: true,
        hasRightToRepresent: true,
        confirmAccuracy: true
      }),
      
      // –°—á–µ—Ç—á–∏–∫–∏
      products_count: 1,
      certificates_count: 1,
      legal_documents_count: 1,
      
      // –î–∞—Ç—ã
      submitted_at: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      
      // –ë–∞–∫–µ—Ç—ã
      images_bucket: "project-images",
      certificates_bucket: "accreditation-certificates", 
      documents_bucket: "accreditation-documents"
    };

    console.log("üìù [TEST-ACCREDITATION-WITH-FILES] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é –≤ –ë–î");
    
    const { data, error } = await supabaseService
      .from('accreditation_applications')
      .insert(testApplication)
      .select()
      .single();

    if (error) {
      console.error("‚ùå [TEST-ACCREDITATION-WITH-FILES] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
      return NextResponse.json({
        success: false,
        error: error.message
      }, { status: 500 });
    }

    console.log("‚úÖ [TEST-ACCREDITATION-WITH-FILES] –¢–µ—Å—Ç–æ–≤–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:", data.id);

    return NextResponse.json({
      success: true,
      message: "–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞",
      application: {
        id: data.id,
        supplier_name: data.supplier_name,
        products_count: data.products?.length || 0,
        has_images: data.products?.[0]?.images?.length > 0,
        has_certificates: data.products?.[0]?.certificates?.length > 0,
        has_legal_docs: data.legal_confirmation?.documents?.length > 0
      }
    });

  } catch (error) {
    console.error("‚ùå [TEST-ACCREDITATION-WITH-FILES] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 