import { NextResponse } from "next/server"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN

export async function GET() {
  if (!TELEGRAM_BOT_TOKEN) {
    return NextResponse.json({ error: "TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" }, { status: 400 })
  }

  try {
    console.log("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞...")
    console.log("üîë –¢–æ–∫–µ–Ω:", TELEGRAM_BOT_TOKEN ? `${TELEGRAM_BOT_TOKEN.substring(0, 10)}...` : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`)
    const result = await response.json()

    console.log("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:", result)

    if (result.ok) {
      return NextResponse.json({
        success: true,
        bot: result.result,
        message: "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
      })
    } else {
      return NextResponse.json(
        {
          error: result.description,
          error_code: result.error_code,
        },
        { status: 400 },
      )
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:", error)
    return NextResponse.json({ error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }, { status: 500 })
  }
}
