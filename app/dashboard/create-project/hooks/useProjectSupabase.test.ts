import { createProject } from './useProjectSupabase';

jest.mock('@supabase/supabase-js', () => ({
  createClient: () => ({
    from: () => ({
      insert: jest.fn().mockReturnThis(),
      select: jest.fn().mockReturnThis(),
      single: jest.fn().mockResolvedValue({ data: { id: 'test-id' }, error: null }),
    }),
    auth: {
      getUser: jest.fn().mockResolvedValue({ data: { user: { id: 'user-id', email: 'test@test.com' } }, error: null })
    }
  })
}));

describe('createProject', () => {
  const baseParams = {
    name: 'Test Project',
    companyData: { name: '–û–û–û –†–æ–º–∞—à–∫–∞' },
    user_id: 'user-id',
    initiator_role: 'client' as const,
  };

  const startMethods = ['manual', 'template', 'profile', 'upload'] as const;

  startMethods.forEach((start_method) => {
    it(`—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–µ–∫—Ç —Å start_method ${start_method}`, async () => {
      jest.resetModules();
      jest.doMock('@/lib/supabaseClient', () => ({
        supabase: {
          from: () => ({
            insert: jest.fn(() => ({
              select: jest.fn(() => ({
                single: jest.fn(() => Promise.resolve({ data: { id: 'test-id' }, error: null }))
              }))
            })),
          }),
        },
      }));
      const { createProject } = await import('./useProjectSupabase');
      const id = await createProject({ ...baseParams, start_method });
      expect(id).toBe('test-id');
    });
  });

  it('–æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω user_id', async () => {
    jest.resetModules();
    jest.doMock('@/lib/supabaseClient', () => ({
      supabase: {
        from: () => ({
          insert: jest.fn(() => ({
            select: jest.fn(() => ({
              single: jest.fn(() => Promise.resolve({ data: null, error: { message: '–ù–µ—Ç user_id' } }))
            }))
          })),
        }),
      },
    }));
    const { createProject } = await import('./useProjectSupabase');
    // @ts-expect-error
    const id = await createProject({ ...baseParams, user_id: undefined, start_method: 'manual' });
    expect(id).toBeNull();
  });

  it('–æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω start_method', async () => {
    jest.resetModules();
    jest.doMock('@/lib/supabaseClient', () => ({
      supabase: {
        from: () => ({
          insert: jest.fn(() => ({
            select: jest.fn(() => ({
              single: jest.fn(() => Promise.resolve({ data: null, error: { message: '–ù–µ—Ç start_method' } }))
            }))
          })),
        }),
      },
    }));
    const { createProject } = await import('./useProjectSupabase');
    // @ts-expect-error
    const id = await createProject({ ...baseParams, start_method: undefined });
    expect(id).toBeNull();
  });
});

describe('startProjectFromProfile (integration)', () => {
  it('—Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–µ–∫—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞, companyData –∏ projectName –ø–æ–¥—Ç—è–≥–∏–≤–∞—é—Ç—Å—è, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è', async () => {
    jest.resetModules();
    jest.doMock('@/lib/supabaseClient', () => ({
      supabase: {
        from: () => ({
          insert: jest.fn(() => ({
            select: jest.fn(() => ({
              single: jest.fn(() => Promise.resolve({ data: { id: 'project-123' }, error: null }))
            }))
          })),
        }),
      },
    }));
    // –ú–æ–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
    const mockProfile = {
      id: 'profile-1',
      name: '–û–û–û –ê–ª—å—Ñ–∞',
      legal_name: '–û–û–û –ê–ª—å—Ñ–∞',
      inn: '7701234567',
      kpp: '123456789',
      ogrn: '1234567890123',
      legal_address: '–≥. –ú–æ—Å–∫–≤–∞',
      bank_name: '–¢–µ—Å—Ç –ë–∞–Ω–∫',
      bank_account: '12345678901234567890',
      corr_account: '12345678901234567890',
      bik: '044525225',
      phone: '+79991234567',
      country: '–†–æ—Å—Å–∏—è',
    };
    const { createProject } = await import('./useProjectSupabase');
    // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    const projectId = await createProject({
      name: mockProfile.name,
      companyData: {
        name: mockProfile.name,
        legalName: mockProfile.legal_name,
        inn: mockProfile.inn,
        kpp: mockProfile.kpp,
        ogrn: mockProfile.ogrn,
        address: mockProfile.legal_address,
        bankName: mockProfile.bank_name,
        bankAccount: mockProfile.bank_account,
        bankCorrAccount: mockProfile.corr_account,
        bankBik: mockProfile.bik,
        email: '',
        phone: mockProfile.phone,
        website: '',
      },
      user_id: 'user-123',
      initiator_role: 'client',
      start_method: 'profile',
    });
    expect(projectId).toBe('project-123');
  });
});

describe('manual project creation with autofill and edit', () => {
  it('—Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–µ–∫—Ç –≤—Ä—É—á–Ω—É—é —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º', async () => {
    // –ú–æ–∫–∞–µ–º supabase –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º insert
    const insertMock = jest.fn(() => ({
      select: jest.fn(() => ({
        single: jest.fn(() => Promise.resolve({ data: { id: 'manual-123' }, error: null }))
      }))
    }));
    const mockSupabase = {
      from: () => ({ insert: insertMock })
    };
    // –î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    const profileData = {
      name: '–û–û–û –ê–ª—å—Ñ–∞',
      legalName: '–û–û–û –ê–ª—å—Ñ–∞',
      inn: '7701234567',
      kpp: '123456789',
      ogrn: '1234567890123',
      address: '–≥. –ú–æ—Å–∫–≤–∞',
      bankName: '–¢–µ—Å—Ç –ë–∞–Ω–∫',
      bankAccount: '12345678901234567890',
      bankCorrAccount: '12345678901234567890',
      bankBik: '044525225',
      email: 'a@a.ru',
      phone: '+79991234567',
      website: '',
    };
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—è
    const editedData = {
      ...profileData,
      name: '–û–û–û –ë–µ—Ç–∞', // –∏–∑–º–µ–Ω–µ–Ω–æ
      inn: '1234567890', // –∏–∑–º–µ–Ω–µ–Ω–æ
      email: 'b@b.ru', // –∏–∑–º–µ–Ω–µ–Ω–æ
    };
    const { createProjectWithSupabase } = await import('./useProjectSupabase');
    const id = await createProjectWithSupabase(mockSupabase, {
      name: editedData.name,
      companyData: editedData,
      user_id: 'user-123',
      initiator_role: 'client',
      start_method: 'manual',
    });
    expect(id).toBe('manual-123');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ insert –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏) –¥–∞–Ω–Ω—ã–º–∏
    expect(insertMock.mock.calls.length).toBeGreaterThan(0);
    const firstCall = insertMock.mock.calls[0] as any[];
    const firstArg = firstCall[0] as any[];
    const insertCall = firstArg[0] as any;
    expect(insertCall).toBeDefined();
    expect(insertCall.company_data.name).toBe('–û–û–û –ë–µ—Ç–∞');
    expect(insertCall.company_data.inn).toBe('1234567890');
    expect(insertCall.company_data.email).toBe('b@b.ru');
  });
});

describe('Step 1: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram', () => {
  beforeEach(() => {
    jest.resetModules();
  });

  it('–≤—ã–∑—ã–≤–∞–µ—Ç sendTelegramMessageClient –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (manual)', async () => {
    jest.doMock('@/lib/telegram-client', () => ({
      sendTelegramMessageClient: jest.fn().mockResolvedValue({ success: true }),
    }));
    const { sendTelegramMessageClient } = await import('@/lib/telegram-client');
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–ª–æ–≥–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Step1CompanyForm)
    await sendTelegramMessageClient('üÜï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!\n\n–ù–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: test-id\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user-id\nEmail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: test@test.com\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: Test Project\n\n–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n- –ù–∞–∑–≤–∞–Ω–∏–µ: –û–û–û –†–æ–º–∞—à–∫–∞\n- –Æ—Ä. –Ω–∞–∑–≤–∞–Ω–∏–µ: –û–û–û –†–æ–º–∞—à–∫–∞\n- –ò–ù–ù: 1234567890\n- –ö–ü–ü: 123456789\n- –û–ì–†–ù: 1234567890123\n- –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞\n- –ë–∞–Ω–∫: –¢–µ—Å—Ç –ë–∞–Ω–∫\n- –°—á—ë—Ç: 12345678901234567890\n- –ö–æ—Ä—Ä. —Å—á—ë—Ç: 12345678901234567890\n- –ë–ò–ö: 044525225');
    expect(sendTelegramMessageClient).toHaveBeenCalledTimes(1);
    expect(sendTelegramMessageClient).toHaveBeenCalledWith(expect.stringContaining('–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω'));
  });
}); 