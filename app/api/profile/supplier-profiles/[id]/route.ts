import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// PUT: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
export async function PUT(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  const { id } = await params;
  try {
    // –í–†–ï–ú–ï–ù–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = { id: "86cc190d-0c80-463b-b0df-39a25b22365f" };
    
    const supplierId = id;
    const supplierData = await request.json();
    
    console.log("üîß [DEBUG PUT] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ID:", supplierId);
    console.log("üîß [DEBUG PUT] –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", JSON.stringify(supplierData, null, 2));

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ["name", "company_name", "category", "country"];
    for (const field of requiredFields) {
      if (!supplierData[field]) {
        return NextResponse.json({ 
          error: `–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ` 
        }, { status: 400 });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: existingProfile, error: checkError } = await supabase
      .from("supplier_profiles")
      .select("id, user_id")
      .eq("id", supplierId)
      .eq("user_id", user.id)
      .single();

    if (checkError || !existingProfile) {
      return NextResponse.json({ 
        error: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" 
      }, { status: 404 });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {
      ...supplierData,
      updated_at: new Date().toISOString()
    };

    // –£–¥–∞–ª—è–µ–º ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    delete updateData.id;
    delete updateData.user_id;
    delete updateData.created_at;

    console.log("üîß [DEBUG PUT] –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ supplier_profiles:", JSON.stringify(updateData, null, 2));

    const { data, error } = await supabase
      .from("supplier_profiles")
      .update(updateData)
      .eq("id", supplierId)
      .eq("user_id", user.id)
      .select()
      .single();

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    console.log("‚úÖ [API] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:", data.id);
    return NextResponse.json({ profile: data });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// DELETE: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
export async function DELETE(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  const { id } = await params;
  try {
    // –í–†–ï–ú–ï–ù–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = { id: "86cc190d-0c80-463b-b0df-39a25b22365f" };
    
    const supplierId = id;
    
    console.log("üîß [DEBUG DELETE] –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ID:", supplierId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: existingProfile, error: checkError } = await supabase
      .from("supplier_profiles")
      .select("id")
      .eq("id", supplierId)
      .eq("user_id", user.id)
      .single();

    if (checkError || !existingProfile) {
      return NextResponse.json({ 
        error: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" 
      }, { status: 404 });
    }

    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
    const { error } = await supabase
      .from("supplier_profiles")
      .update({ is_active: false, updated_at: new Date().toISOString() })
      .eq("id", supplierId)
      .eq("user_id", user.id);

    if (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    console.log("‚úÖ [API] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É–¥–∞–ª–µ–Ω:", supplierId);
    return NextResponse.json({ message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É–¥–∞–ª–µ–Ω" });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
} 