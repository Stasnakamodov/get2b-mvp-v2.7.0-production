import { NextRequest, NextResponse } from 'next/server';
import { getYandexVisionService } from '@/lib/services/YandexVisionService';

export async function POST(request: NextRequest) {
  try {
    const { fileUrl } = await request.json();
    
    if (!fileUrl) {
      return NextResponse.json({ error: 'URL —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ XLSX —Ñ–∞–π–ª–∞:', fileUrl);
    
    const visionService = getYandexVisionService();
    const extractedText = await visionService.extractTextFromXlsx(fileUrl);
    
    console.log('‚úÖ XLSX —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    console.log('üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', extractedText);
    console.log('üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', extractedText.length);
    
    return NextResponse.json({
      success: true,
      extractedText,
      textLength: extractedText.length,
      message: 'XLSX —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ XLSX —Ñ–∞–π–ª–∞:', error);
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ XLSX —Ñ–∞–π–ª–∞',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
} 