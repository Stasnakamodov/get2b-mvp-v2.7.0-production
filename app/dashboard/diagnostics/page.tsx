"use client"
import React from "react"
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { sendTelegramMessageClient } from "@/lib/telegram-client";
import { useRouter } from "next/navigation";

export default function DiagnosticsPage() {
  const [result, setResult] = useState<string>("");
  const router = useRouter();

  // –¢–µ—Å—Ç Telegram
  const handleTestTelegram = async () => {
    setResult("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram...");
    try {
      await sendTelegramMessageClient("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
      setResult("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram.");
    } catch (error: any) {
      setResult("‚ùå –û—à–∏–±–∫–∞: " + error.message);
    }
  };

  // –¢–µ—Å—Ç –±–æ—Ç–∞
  const handleTestBot = async () => {
    setResult("–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞...");
    try {
      const response = await fetch("/api/telegram/test-bot");
      const result = await response.json();
      if (result.success) {
        setResult(`‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ò–º—è: ${result.bot.first_name}\nUsername: @${result.bot.username}`);
      } else {
        setResult(`‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: ${result.error}`);
      }
    } catch (error: any) {
      setResult("‚ùå –û—à–∏–±–∫–∞: " + error.message);
    }
  };

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
  const handleSetWebhook = async () => {
    setResult("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook...");
    try {
      const webhookUrl = `${window.location.origin}/api/telegram-webhook`;
      const response = await fetch("/api/telegram/set-webhook", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ webhookUrl }),
      });
      const result = await response.json();
      if (result.success) {
        setResult("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
      } else {
        setResult("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: " + result.error);
      }
    } catch (error: any) {
      setResult("‚ùå –û—à–∏–±–∫–∞: " + error.message);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å webhook
  const handleCheckWebhook = async () => {
    setResult("–ü—Ä–æ–≤–µ—Ä—è–µ–º webhook...");
    try {
      const response = await fetch("/api/telegram/set-webhook");
      const result = await response.json();
      if (result.result) {
        const info = result.result;
        setResult(
          `üìã Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\nURL: ${info.url || "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}\nPending updates: ${info.pending_update_count || 0}\nLast error: ${info.last_error_message || "–ù–µ—Ç –æ—à–∏–±–æ–∫"}`
        );
      } else {
        setResult("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook");
      }
    } catch (error: any) {
      setResult("‚ùå –û—à–∏–±–∫–∞: " + error.message);
    }
  };

      return (
      <div className="container mx-auto py-4">
      <h1 className="text-3xl font-bold mb-8 text-foreground">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞</h1>
      <div className="flex flex-wrap gap-4 mb-6">
        <Button variant="destructive" onClick={handleTestTelegram}>‚úèÔ∏è –¢–µ—Å—Ç Telegram</Button>
        <Button variant="outline" onClick={handleTestBot}>ü§ñ –¢–µ—Å—Ç –ë–æ—Ç–∞</Button>
        <Button variant="outline" onClick={handleSetWebhook}>‚öôÔ∏è Webhook</Button>
        <Button variant="outline" onClick={handleCheckWebhook}>‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å</Button>
      </div>
      <div className="bg-muted p-4 rounded-lg border border-border min-h-[80px]">
        <pre className="whitespace-pre-wrap text-sm text-foreground">{result}</pre>
      </div>
      <div className="mt-8 text-muted-foreground text-sm">
        –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
      </div>
    </div>
  );
} 