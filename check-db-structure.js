const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  'https://ejkhdhexkadecpbjjmsz.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVqa2hkaGV4a2FkZWNwYmpqbXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwMzcxNDIsImV4cCI6MjA2MjYxMzE0Mn0.DHcfdHrQmPiG4AkwDaCa9AXYB7zQPJlK7VuXt-g1uUU'
);

async function checkDatabaseStructure() {
  try {
    console.log('üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    console.log('üë• 1. –ü–û–°–¢–ê–í–©–ò–ö–ò (catalog_verified_suppliers):');
    const { data: verifiedSuppliers, error: suppliersError } = await supabase
      .from('catalog_verified_suppliers')
      .select('id, name, category, city, is_active')
      .eq('is_active', true)
      .order('name');
      
    if (suppliersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', suppliersError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${verifiedSuppliers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:`);
      verifiedSuppliers?.forEach(s => {
        console.log(`  - ${s.name} (${s.category}) - ${s.city} [ID: ${s.id.substring(0, 8)}...]`);
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    console.log('\nüì¶ 2. –¢–û–í–ê–†–´ –ê–ö–ö–†–ï–î–ò–¢–û–í–ê–ù–ù–´–• (catalog_verified_products):');
    const { data: verifiedProducts, error: productsError } = await supabase
      .from('catalog_verified_products')
      .select(`
        id, name, price, currency, category, is_active,
        catalog_verified_suppliers!inner(name, category)
      `)
      .eq('is_active', true)
      .order('name');
      
    if (productsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', productsError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${verifiedProducts?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:`);
      const bySupplier = {};
      verifiedProducts?.forEach(p => {
        const supplierName = p.catalog_verified_suppliers.name;
        if (!bySupplier[supplierName]) bySupplier[supplierName] = [];
        bySupplier[supplierName].push(p);
      });
      
      Object.keys(bySupplier).forEach(supplierName => {
        console.log(`\n  üìã ${supplierName} (${bySupplier[supplierName].length} —Ç–æ–≤–∞—Ä–æ–≤):`);
        bySupplier[supplierName].forEach(p => {
          console.log(`    - ${p.name} (${p.price} ${p.currency}) [ID: ${p.id.substring(0, 8)}...]`);
        });
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    console.log('\nüë§ 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ü–û–°–¢–ê–í–©–ò–ö–ò (catalog_user_suppliers):');
    const { data: userSuppliers, error: userSuppliersError } = await supabase
      .from('catalog_user_suppliers')
      .select('id, name, category, city, user_id, source_type, is_active')
      .eq('is_active', true)
      .order('name')
      .limit(10);
      
    if (userSuppliersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', userSuppliersError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userSuppliers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:`);
      userSuppliers?.forEach(s => {
        console.log(`  - ${s.name} (${s.category}) - ${s.city} [${s.source_type}] [ID: ${s.id.substring(0, 8)}...]`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüõçÔ∏è 4. –¢–û–í–ê–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (catalog_user_products):');
    const { data: userProducts, error: userProductsError } = await supabase
      .from('catalog_user_products')
      .select(`
        id, name, price, currency, category, is_active,
        catalog_user_suppliers!inner(name, category)
      `)
      .eq('is_active', true)
      .order('name')
      .limit(10);
      
    if (userProductsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', userProductsError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userProducts?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:`);
      userProducts?.forEach(p => {
        console.log(`  - ${p.name} (${p.price} ${p.currency}) –æ—Ç ${p.catalog_user_suppliers.name}`);
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\nüìÇ 5. –ö–ê–¢–ï–ì–û–†–ò–ò (catalog_categories):');
    const { data: categories, error: categoriesError } = await supabase
      .from('catalog_categories')
      .select('id, name, key, is_active')
      .eq('is_active', true)
      .order('name');
      
    if (categoriesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', categoriesError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${categories?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`);
      categories?.forEach(c => {
        console.log(`  - ${c.name} (–∫–ª—é—á: ${c.key}) [ID: ${c.id}]`);
      });
    }
    
    // 6. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    console.log('\nüìà 6. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`üü† –ê–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏: ${verifiedSuppliers?.length || 0}`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä—ã –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö: ${verifiedProducts?.length || 0}`);
    console.log(`üîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏: ${userSuppliers?.length || 0}`);
    console.log(`üõçÔ∏è –¢–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userProducts?.length || 0}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories?.length || 0}`);
    
    // 7. –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ï–ô
    console.log('\nüîç 7. –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò:');
    
    // –î—É–±–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    const supplierNames = {};
    verifiedSuppliers?.forEach(s => {
      if (supplierNames[s.name]) {
        supplierNames[s.name]++;
      } else {
        supplierNames[s.name] = 1;
      }
    });
    
    const duplicateSuppliers = Object.keys(supplierNames).filter(name => supplierNames[name] > 1);
    if (duplicateSuppliers.length > 0) {
      console.log('‚ö†Ô∏è –î–£–ë–õ–ò –ü–û–°–¢–ê–í–©–ò–ö–û–í:');
      duplicateSuppliers.forEach(name => {
        console.log(`  - "${name}" –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ${supplierNames[name]} —Ä–∞–∑`);
      });
    } else {
      console.log('‚úÖ –î—É–±–ª–µ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –î—É–±–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    const productKeys = {};
    verifiedProducts?.forEach(p => {
      const key = `${p.name}__${p.catalog_verified_suppliers.name}`;
      if (productKeys[key]) {
        productKeys[key]++;
      } else {
        productKeys[key] = 1;
      }
    });
    
    const duplicateProducts = Object.keys(productKeys).filter(key => productKeys[key] > 1);
    if (duplicateProducts.length > 0) {
      console.log('\n‚ö†Ô∏è –î–£–ë–õ–ò –¢–û–í–ê–†–û–í:');
      duplicateProducts.forEach(key => {
        const [productName, supplierName] = key.split('__');
        console.log(`  - "${productName}" –æ—Ç "${supplierName}" –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ${productKeys[key]} —Ä–∞–∑`);
      });
    } else {
      console.log('‚úÖ –î—É–±–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    console.log('\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkDatabaseStructure();