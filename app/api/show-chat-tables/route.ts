import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function GET(request: NextRequest) {
  try {
    console.log("üîç [API] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —á–∞—Ç–∞...");

    const chatTables = [
      // –ê–ö–¢–ò–í–ù–´–ï –¢–ê–ë–õ–ò–¶–´ (–ù–ï –£–î–ê–õ–Ø–¢–¨!)
      'chat_rooms',
      'chat_messages',
      
      // –°–¢–ê–†–´–ï –¢–ê–ë–õ–ò–¶–´ (–ú–û–ñ–ù–û –£–î–ê–õ–ò–¢–¨)
      'chats',
      'messages', 
      'rooms',
      'chat_old',
      'messages_old',
      'rooms_old',
      'chat_temp',
      'messages_temp',
      'rooms_temp',
      'chat_backup',
      'messages_backup',
      'rooms_backup',
      'chat_archive',
      'messages_archive',
      'rooms_archive',
      'chat_legacy',
      'messages_legacy',
      'rooms_legacy',
      'chat_deprecated',
      'messages_deprecated',
      'rooms_deprecated'
    ];

    const analysis: any = {
      activeTables: [],
      oldTables: [],
      summary: {}
    };

    for (const tableName of chatTables) {
      try {
        const { count, error } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });

        if (!error) {
          const tableInfo = {
            name: tableName,
            exists: true,
            recordCount: count,
            status: '',
            recommendation: ''
          };

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          if (tableName === 'chat_rooms' || tableName === 'chat_messages') {
            tableInfo.status = 'ACTIVE';
            tableInfo.recommendation = '–ù–ï –£–î–ê–õ–Ø–¢–¨ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ';
            analysis.activeTables.push(tableInfo);
          } else {
            tableInfo.status = 'OLD';
            if (count === 0) {
              tableInfo.recommendation = '–ë–ï–ó–û–ü–ê–°–ù–û –£–î–ê–õ–ò–¢–¨ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
            } else {
              tableInfo.recommendation = `–£–î–ê–õ–ò–¢–¨ –ü–û–°–õ–ï –ë–≠–ö–ê–ü–ê - ${count} –∑–∞–ø–∏—Å–µ–π`;
            }
            analysis.oldTables.push(tableInfo);
          }
        }
      } catch (err) {
        // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const tableInfo = {
          name: tableName,
          exists: false,
          recordCount: 0,
          status: 'NOT_EXISTS',
          recommendation: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        };
        analysis.oldTables.push(tableInfo);
      }
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    analysis.summary = {
      totalTables: chatTables.length,
      activeTables: analysis.activeTables.length,
      oldTables: analysis.oldTables.length,
      tablesWithData: analysis.oldTables.filter((t: any) => t.recordCount > 0).length,
      safeToDelete: analysis.oldTables.filter((t: any) => t.recordCount === 0).length,
      needBackup: analysis.oldTables.filter((t: any) => t.recordCount > 0).length,
      analysisDate: new Date().toISOString()
    };

    console.log("‚úÖ [API] –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω");
    console.log("üìä [API] –°–≤–æ–¥–∫–∞:", analysis.summary);

    return NextResponse.json({
      success: true,
      analysis,
      message: "–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü —á–∞—Ç–∞:", error);
    return NextResponse.json({ 
      error: "Internal server error",
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 