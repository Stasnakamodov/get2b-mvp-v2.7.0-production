import { type NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { fileUrl } = body;

    if (!fileUrl) {
      return NextResponse.json({ error: "fileUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 });
    }

    console.log("üîç –ü–†–û–°–¢–û–ô –¢–ï–°–¢ YANDEX VISION");
    console.log("üìÑ URL —Ñ–∞–π–ª–∞:", fileUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiKey = process.env.YANDEX_VISION_API_KEY;
    const folderId = process.env.YANDEX_FOLDER_ID;
    
    console.log("üîë API Key:", apiKey ? `${apiKey.substring(0, 10)}...` : "–ù–ï –ù–ê–ô–î–ï–ù");
    console.log("üìÅ Folder ID:", folderId || "–ù–ï –ù–ê–ô–î–ï–ù");

    if (!apiKey || !folderId) {
      return NextResponse.json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è" }, { status: 500 });
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    console.log("üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª...");
    const fileResponse = await fetch(fileUrl);
    if (!fileResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${fileResponse.status}`);
    }
    
    const arrayBuffer = await fileResponse.arrayBuffer();
    const base64Content = Buffer.from(arrayBuffer).toString('base64');
    
    console.log("üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:", arrayBuffer.byteLength, "–±–∞–π—Ç");
    console.log("üìÑ Base64 –¥–ª–∏–Ω–∞:", base64Content.length);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex Vision API
    console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex Vision API...");
    
    const response = await fetch('https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze', {
      method: 'POST',
      headers: {
        'Authorization': `Api-Key ${apiKey}`,
        'Content-Type': 'application/json',
        'X-Data-Center': 'ru-central1'
      },
      body: JSON.stringify({
        folderId: folderId,
        analyzeSpecs: [{
          content: base64Content,
          features: [{
            type: 'TEXT_DETECTION',
            textDetectionConfig: {
              languageCodes: ['ru', 'en']
            }
          }]
        }]
      })
    });

    console.log("üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
    console.log("üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:", Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå –û—à–∏–±–∫–∞ API:", errorText);
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ Yandex Vision API", 
        status: response.status,
        details: errorText 
      }, { status: 500 });
    }

    const data = await response.json();
    console.log("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω");
    console.log("üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", Object.keys(data));
    
    if (data.results) {
      console.log("üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", data.results.length);
      if (data.results[0]) {
        console.log("üìÑ –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", Object.keys(data.results[0]));
        if (data.results[0].results) {
          console.log("üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", data.results[0].results.length);
          if (data.results[0].results[0]) {
            console.log("üìÑ –ü–µ—Ä–≤—ã–π –ø–æ–¥—Ä–µ–∑—É–ª—å—Ç–∞—Ç:", Object.keys(data.results[0].results[0]));
            if (data.results[0].results[0].textDetection) {
              console.log("üìÑ textDetection –Ω–∞–π–¥–µ–Ω:", Object.keys(data.results[0].results[0].textDetection));
              if (data.results[0].results[0].textDetection.pages) {
                console.log("üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:", data.results[0].results[0].textDetection.pages.length);
              }
            }
          }
        }
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    const text = data.results?.[0]?.results?.[0]?.textDetection?.pages
      ?.map((page: any) => page.blocks
        ?.map((block: any) => block.lines?.map((line: any) => line.words?.map((word: any) => word.text).join(' ')).join(' '))
        .join('\n'))
      .join('\n\n') || '';

    console.log("üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", text);
    console.log("üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:", text.length);

    return NextResponse.json({
      success: true,
      textLength: text.length,
      textPreview: text.substring(0, 500),
      apiResponse: data
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ—Å—Ç–µ:", error);
    return NextResponse.json(
      { 
        error: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
        details: error instanceof Error ? error.message : String(error) 
      },
      { status: 500 }
    );
  }
} 