import { type NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    console.log("üîç API /test-ocr-debug –≤—ã–∑–≤–∞–Ω");

    const body = await request.json();
    const { text } = body;

    if (!text) {
      return NextResponse.json(
        { error: "text –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" },
        { status: 400 }
      );
    }

    console.log("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç:", text.substring(0, 500) + "...");
    console.log("üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:", text.length);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞
    const result = extractCompanyDataImproved(text);

    return NextResponse.json({
      success: true,
      originalText: text,
      extractedData: result,
      debugInfo: {
        textLength: text.length,
        lines: text.split('\n').length,
        firstLines: text.split('\n').slice(0, 10)
      }
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ API test-ocr-debug:", error);
    return NextResponse.json(
      {
        error: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
 */
function extractCompanyDataImproved(text: string) {
  const suggestions: any = {};
  
  console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏...");
  console.log("üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:", text.length);
  console.log("üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞:", text.substring(0, 500));
  console.log("üìÑ –°—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 10):", text.split('\n').slice(0, 10));
  console.log("üìÑ –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞:", text.split('\n'));

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ò–ù–ù
  const innPatterns = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    /\b–ò–ù–ù[:\s]*(\d{10}|\d{12})\b/i,
    /\b–ò–ù–ù[:\s]*(\d{3}-\d{3}-\d{3}-\d{3})\b/i,
    /\b(\d{10}|\d{12})\s*\(–ò–ù–ù\)/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ò–ù–ù/–ö–ü–ü
    /\b–ò–ù–ù\/–ö–ü–ü[:\s]*(\d{10})\/(\d{9})\b/i,
    /\b(\d{10})\/(\d{9})\s*\(–ò–ù–ù\/–ö–ü–ü\)/i,
    /\b–ò–ù–ù\/–ö–ü–ü\s*\n\s*(\d{10})\/(\d{9})\b/i,
    /–ò–ù–ù\/–ö–ü–ü\s*\n\s*(\d{10})\/(\d{9})/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å OCR –æ—à–∏–±–∫–∞–º–∏
    /\b–ò–ù–ù\/–ö–ü–ü[:\s]*([0-9\s\-_]{10,})\/([0-9\s\-_]{9,})\b/i,
    /–ò–ù–ù\/–ö–ü–ü\s*\n\s*([0-9\s\-_]{10,})\/([0-9\s\-_]{9,})/i,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ò–ù–ù
    /\b–ò–ù–ù\s*\n\s*(\d{10}|\d{12})\b/i,
    /–ò–ù–ù\s*\n\s*(\d{10}|\d{12})/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    /(?<=–ò–ù–ù\s*[:\n]*)(\d{10}|\d{12})/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–µ—Å–ª–∏ –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ —Å—Ç—Ä–æ–∫–µ)
    /^\s*(\d{10}|\d{12})\s*$/im,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (OCR –æ—à–∏–±–∫–∏)
    /\b–ò–ù–ù[:\s]*([0-9\s]{10,12})\b/i,
    /–ò–ù–ù\s*\n\s*([0-9\s]{10,12})/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö)
    /^(\d{10}|\d{12})\s/i,
    /^(\d{10}|\d{12})$/im,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù —Ä—è–¥–æ–º —Å –ö–ü–ü (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è)
    /(\d{10})\s+(\d{9})/i,
    
    // üî• –ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    /\b–ò–ù–ù[:\s]*([0-9\s\-_\.]{10,12})\b/i,
    /–ò–ù–ù[:\s]*([0-9\s\-_\.]{10,12})/i,
    /\b([0-9\s\-_\.]{10,12})\s*\(?–ò–ù–ù\)?/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    /\|\s*(\d{10}|\d{12})\s*\|/i,
    /\|\s*([0-9\s\-_\.]{10,12})\s*\|/i,
    
    // –ü–æ–∏—Å–∫ –ò–ù–ù –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    /:\s*(\d{10}|\d{12})/i,
    /:\s*([0-9\s\-_\.]{10,12})/i
  ];
  
  for (const pattern of innPatterns) {
    const match = text.match(pattern);
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ò–ù–ù:", pattern.source);
    if (match) {
      // –û—á–∏—â–∞–µ–º –ò–ù–ù –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let inn = match[1].replace(/[-_\s\.]/g, '');
      inn = inn.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä
      if ((inn.length === 10 || inn.length === 12) && /^\d+$/.test(inn)) {
        suggestions.inn = inn;
        console.log("‚úÖ –ò–ù–ù –Ω–∞–π–¥–µ–Ω:", suggestions.inn);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù/–ö–ü–ü, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ –ö–ü–ü
        if (match[2]) {
          let kpp = match[2].replace(/[-_\s\.]/g, '');
          kpp = kpp.replace(/\D/g, '');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 9 —Ü–∏—Ñ—Ä
          if (kpp.length === 9 && /^\d{9}$/.test(kpp)) {
            suggestions.kpp = kpp;
            console.log("‚úÖ –ö–ü–ü –Ω–∞–π–¥–µ–Ω –∏–∑ –ò–ù–ù/–ö–ü–ü:", suggestions.kpp);
          }
        }
        break;
      }
    }
  }
  
  // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  if (!suggestions.inn) {
    console.log("üîç –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –∏—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...");
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏ (–ò–ù–ù + –ö–ü–ü)
    const lines = text.split('\n');
    for (const line of lines) {
      const numbersMatch = line.match(/(\d{10})\s+(\d{9})/);
      if (numbersMatch) {
        const potentialInn = numbersMatch[1];
        const potentialKpp = numbersMatch[2];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ò–ù–ù –∏ –ö–ü–ü
        if (/^\d{10}$/.test(potentialInn) && /^\d{9}$/.test(potentialKpp)) {
          suggestions.inn = potentialInn;
          suggestions.kpp = potentialKpp;
          console.log("‚úÖ –ò–ù–ù –∏ –ö–ü–ü –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:", suggestions.inn, suggestions.kpp);
          break;
        }
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ö–ü–ü
  const kppPatterns = [
    /\b–ö–ü–ü[:\s]*(\d{9})\b/i,
    /\b–ö–ü–ü[:\s]*(\d{3}-\d{3}-\d{3})\b/i,
    /\b(\d{9})\s*\(–ö–ü–ü\)/i,
    /\b–ö–ü–ü[:\s]*([0-9\s\-_\.]{9})\b/i,
    /–ö–ü–ü[:\s]*([0-9\s\-_\.]{9})/i,
    /\b([0-9\s\-_\.]{9})\s*\(?–ö–ü–ü\)?/i
  ];
  
  for (const pattern of kppPatterns) {
    const match = text.match(pattern);
    if (match) {
      let kpp = match[1].replace(/[-_\s\.]/g, '');
      kpp = kpp.replace(/\D/g, '');
      
      if (kpp.length === 9 && /^\d{9}$/.test(kpp)) {
        suggestions.kpp = kpp;
        console.log("‚úÖ –ö–ü–ü –Ω–∞–π–¥–µ–Ω:", suggestions.kpp);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –û–ì–†–ù
  const ogrnPatterns = [
    /\b–û–ì–†–ù[:\s]*(\d{13}|\d{15})\b/i,
    /\b–û–ì–†–ù[:\s]*(\d{1}-\d{4}-\d{4}-\d{4})\b/i,
    /\b(\d{13}|\d{15})\s*\(–û–ì–†–ù\)/i,
    /\b–û–ì–†–ù\s*\n\s*(\d{13}|\d{15})\b/i,
    /–û–ì–†–ù\s*\n\s*(\d{13})/i,
    /\b–û–ì–†–ù[:\s]*([0-9\s\-_\.]{13,15})\b/i,
    /–û–ì–†–ù\s*\n\s*([0-9\s\-_\.]{13,15})/i,
    /\b([0-9\s\-_\.]{13,15})\s*\(?–û–ì–†–ù\)?/i
  ];
  
  for (const pattern of ogrnPatterns) {
    const match = text.match(pattern);
    if (match) {
      // –û—á–∏—â–∞–µ–º –û–ì–†–ù –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let ogrn = match[1].replace(/[-_\s\.]/g, '');
      ogrn = ogrn.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä
      if ((ogrn.length === 13 || ogrn.length === 15) && /^\d+$/.test(ogrn)) {
        suggestions.ogrn = ogrn;
        console.log("‚úÖ –û–ì–†–ù –Ω–∞–π–¥–µ–Ω:", suggestions.ogrn);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ù–ê–ó–í–ê–ù–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò
  const companyPatterns = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –û–û–û, –û–ê–û, –ó–ê–û, –ò–ü
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*["¬´]?([^¬ª"\n\r]+)["¬ª]?/i,
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*([^,\n\r]+?)(?=\s*(?:–ò–ù–ù|–ö–ü–ü|–û–ì–†–ù|–ê–¥—Ä–µ—Å|–ë–∞–Ω–∫|$))/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    /\b–ù–∞–∑–≤–∞–Ω–∏–µ[:\s]*([^,\n\r]+)/i,
    /\b–ö–æ–º–ø–∞–Ω–∏—è[:\s]*([^,\n\r]+)/i,
    /\b–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è[:\s]*([^,\n\r]+)/i,
    /\b–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ[:\s]*\n*([^,\n\r]+)/i,
    /\b–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ[:\s]*\n*([^,\n\r]+)/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    /\b–û–±—â–µ—Å—Ç–≤–æ\s+—Å\s+–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π\s+–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é\s*["¬´]?([^¬ª"\n\r]+)["¬ª]?/i,
    /\b–ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ\s+–æ–±—â–µ—Å—Ç–≤–æ\s*["¬´]?([^¬ª"\n\r]+)["¬ª]?/i,
    /\b–ó–∞–∫—Ä—ã—Ç–æ–µ\s+–∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ\s+–æ–±—â–µ—Å—Ç–≤–æ\s*["¬´]?([^¬ª"\n\r]+)["¬ª]?/i,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    /\b–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s*\n\s*([^\n\r]+)/i,
    /\b–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s*\n\s*([^\n\r]+)/i,
    
    // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ)
    /^[^–ò–ù–ù–ö–ü–ü–û–ì–†–ù]*?(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*["¬´]?([^¬ª"\n\r]+)["¬ª]?/im,
    
    // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)
    /(?<=^|\n)([^–ò–ù–ù–ö–ü–ü–û–ì–†–ù\n\r]{5,50})(?=\s*\n\s*(?:–ò–ù–ù|–ö–ü–ü|–û–ì–†–ù|–ê–¥—Ä–µ—Å|–ë–∞–Ω–∫))/im,
    
    // üî• –ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*([^0-9\n\r]{3,100})/i,
    /^[^0-9]*?(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*([^0-9\n\r]{3,100})/im,
    /\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)[\s]*([^|0-9\n\r]{3,100})/i
  ];
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
  let foundCompanyName = false;
  
  for (const pattern of companyPatterns) {
    const match = text.match(pattern);
    if (match) {
      let companyName = '';
      
      if (match[2]) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –û–û–û/–û–ê–û)
        companyName = match[1] + ' ' + match[2];
      } else if (match[1]) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞
        companyName = match[1];
      }
      
      // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      companyName = companyName.trim()
        .replace(/^["¬´]+/, '')  // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        .replace(/["¬ª]+$/, '')  // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        .replace(/\s+/g, ' ')   // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        .replace(/[^\w\s\-¬´¬ª]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –¥–µ—Ñ–∏—Å–∞ –∏ –∫–∞–≤—ã—á–µ–∫
        .trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      if (companyName.length >= 3 && companyName.length <= 200) {
        suggestions.companyName = companyName;
        console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ:", suggestions.companyName);
        foundCompanyName = true;
        break;
      }
    }
  }
  
  // üî• –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–û–ò–°–ö –ù–ê–ó–í–ê–ù–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò
  if (!foundCompanyName) {
    console.log("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –∏—â–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ...");
    
    const lines = text.split('\n');
    for (let i = 0; i < Math.min(lines.length, 15); i++) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –û–û–û/–û–ê–û/–ó–ê–û/–ò–ü
      const orgMatch = line.match(/\b(–û–û–û|–û–ê–û|–ó–ê–û|–ò–ü)\s+([^0-9\n\r]{3,100})/i);
      if (orgMatch && orgMatch[2]) {
        const potentialName = orgMatch[1] + ' ' + orgMatch[2].trim();
        if (potentialName.length >= 5 && potentialName.length <= 200) {
          suggestions.companyName = potentialName;
          console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º:", suggestions.companyName);
          foundCompanyName = true;
          break;
        }
      }
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
      if (line.length > 5 && 
          line.length < 100 && 
          /^[–∞-—è—ëa-z\s\-¬´¬ª]+$/i.test(line) &&
          !line.includes('–ò–ù–ù') &&
          !line.includes('–ö–ü–ü') &&
          !line.includes('–û–ì–†–ù') &&
          !line.includes('–ê–¥—Ä–µ—Å') &&
          !line.includes('–ë–∞–Ω–∫')) {
        
        suggestions.companyName = line.trim();
        console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –±—É–∫–≤–µ–Ω–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É:", suggestions.companyName);
        foundCompanyName = true;
        break;
      }
    }
  }
  
  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ë–ê–ù–ö–û–í–°–ö–ò–• –†–ï–ö–í–ò–ó–ò–¢–û–í
  const bankPatterns = [
    /\b–ë–∞–Ω–∫[:\s]*([^,\n\r–ë–ò–ö]+)/i,
    /\b–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞[:\s]*([^,\n\r]+)/i,
    /\b–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è[:\s]*([^,\n\r–ë–ò–ö]+)/i,
    /\b–ü–æ–ª—É—á–∞—Ç–µ–ª—å[:\s]*([^,\n\r]+)/i,
    /–ë–∞–Ω–∫\s*\n\s*([^\n\r]+)/i,
    /\b([^,\n\r]+)\s*–±–∞–Ω–∫/i,
    /\b–±–∞–Ω–∫\s+([^,\n\r]+)/i
  ];
  
  for (const pattern of bankPatterns) {
    const match = text.match(pattern);
    if (match) {
      const bankName = match[1].trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ "–ë–ò–ö" –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      if (bankName && 
          bankName.toLowerCase() !== '–±–∏–∫' && 
          bankName.length > 2 && 
          bankName.length < 100) {
        suggestions.bankName = bankName;
        console.log("‚úÖ –ë–∞–Ω–∫ –Ω–∞–π–¥–µ–Ω:", suggestions.bankName);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ë–ê–ù–ö–û–í–°–ö–û–ì–û –°–ß–ï–¢–ê
  const accountPatterns = [
    /\b(—Ä\/—Å|—Å—á–µ—Ç|—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç)[:\s]*(\d{20})\b/i,
    /\b(\d{20})\s*\(—Å—á–µ—Ç\)/i,
    /\b–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç[:\s]*(\d{20})\b/i,
    /\b–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç\s*\n\s*(\d{20})\b/i,
    /–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç\s*\n\s*(\d{20})/i,
    /\b–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç[:\s]*([0-9\s\-_\.]{20,})\b/i,
    /–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç\s*\n\s*([0-9\s\-_\.]{20,})/i,
    /\b([0-9\s\-_\.]{20})\s*\(?—Å—á–µ—Ç\)?/i
  ];
  
  for (const pattern of accountPatterns) {
    const match = text.match(pattern);
    if (match) {
      // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let account = match[2] || match[1];
      account = account.replace(/[-_\s\.]/g, '');
      account = account.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 20 —Ü–∏—Ñ—Ä
      if (account.length === 20 && /^\d{20}$/.test(account)) {
        suggestions.bankAccount = account;
        console.log("‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω:", suggestions.bankAccount);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ë–ò–ö
  const bikPatterns = [
    /\b–ë–ò–ö[:\s]*(\d{9})\b/i,
    /\b(\d{9})\s*\(–ë–ò–ö\)/i,
    /\b–ë–ò–ö –±–∞–Ω–∫–∞[:\s]*(\d{9})\b/i,
    /–ë–ò–ö –±–∞–Ω–∫–∞\s*\n\s*(\d{9})/i,
    /\b–ë–ò–ö[:\s]*([p—Ä]?\d{9})\b/i,
    /\b–ë–ò–ö –±–∞–Ω–∫–∞[:\s]*([p—Ä]?\d{9})\b/i,
    /–ë–ò–ö –±–∞–Ω–∫–∞\s*\n\s*([p—Ä]?\d{9})/i,
    /\b–ë–ò–ö[^0-9]*([p—Ä]?\d{9})\b/i,
    /\b([0-9\s\-_\.]{9})\s*\(?–ë–ò–ö\)?/i
  ];
  
  for (const pattern of bikPatterns) {
    const match = text.match(pattern);
    if (match) {
      // –û—á–∏—â–∞–µ–º –ë–ò–ö –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö OCR –æ—à–∏–±–æ–∫
      let bik = match[1];
      bik = bik.replace(/^[p—Ä]/, '');
      bik = bik.replace(/[-_\s\.]/g, '');
      bik = bik.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å 9 —Ü–∏—Ñ—Ä
      if (bik.length === 9 && /^\d{9}$/.test(bik)) {
        suggestions.bankBik = bik;
        console.log("‚úÖ –ë–ò–ö –Ω–∞–π–¥–µ–Ω:", suggestions.bankBik);
        break;
      }
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ê–î–†–ï–°–ê
  const addressPatterns = [
    /\b(–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å|–ê–¥—Ä–µ—Å)[:\s]*\n*([^,\n]+)/i,
    /\b(–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å)[:\s]*\n*([^,\n]+)/i,
    /–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å\s*\n\s*([^\n]+)/i,
    /–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å\s*\n\s*([^\n]+)/i,
    /\b([^,\n]+)\s*\(?–∞–¥—Ä–µ—Å\)?/i
  ];
  
  for (const pattern of addressPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.address = match[2] || match[1];
      console.log("‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω:", suggestions.address);
      break;
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –¢–ï–õ–ï–§–û–ù–ê
  const phonePatterns = [
    /\b(–¢–µ–ª–µ—Ñ–æ–Ω|–¢–µ–ª)[:\s]*([+\d\s\-\(\)]+)/i,
    /\b([+7]\s*\(\d{3}\)\s*\d{3}-\d{2}-\d{2})/i,
    /–¢–µ–ª–µ—Ñ–æ–Ω\s*\n\s*([+\d\s\-\(\)]+)/i,
    /\b(\d{1}\s*\(\d{3}\)\s*\d{3}-\d{2}-\d{2})/i,
    /\b(\d{1}\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2})/i
  ];
  
  for (const pattern of phonePatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.phone = (match[2] || match[1]).trim();
      console.log("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞–π–¥–µ–Ω:", suggestions.phone);
      break;
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö EMAIL
  const emailPatterns = [
    /\b(E-mail|Email)[:\s]*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i,
    /\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i
  ];
  
  for (const pattern of emailPatterns) {
    const match = text.match(pattern);
    if (match) {
      suggestions.email = match[2] || match[1];
      console.log("‚úÖ Email –Ω–∞–π–¥–µ–Ω:", suggestions.email);
      break;
    }
  }

  console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", suggestions);
  return suggestions;
} 