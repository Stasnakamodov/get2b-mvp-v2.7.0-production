import { NextRequest, NextResponse } from 'next/server'
import { NotificationService, type NotificationRecipient } from '@/lib/notifications/NotificationService'
import { ProjectStatus } from '@/lib/types/project-status'

export async function POST(request: NextRequest) {
  try {
    console.log('üîî API /notifications/project-status –≤—ã–∑–≤–∞–Ω')

    const body = await request.json()
    console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body)

    const { 
      projectId, 
      oldStatus, 
      newStatus, 
      projectData,
      recipients 
    } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!projectId || !newStatus || !projectData) {
      console.error('‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥–∞–Ω—ã')
      return NextResponse.json({ 
        error: 'projectId, newStatus, and projectData are required' 
      }, { status: 400 })
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationService = NotificationService.getInstance()

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    const availableChannels = notificationService.getAvailableChannels()
    console.log('üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:', availableChannels)

    if (availableChannels.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
      return NextResponse.json({ 
        success: true, 
        skipped: true,
        message: 'No notification channels configured' 
      })
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    const finalRecipients: NotificationRecipient[] = recipients || getDefaultRecipients(newStatus, availableChannels)

    console.log('üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', finalRecipients.length)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const results = await notificationService.sendProjectStatusNotification(
      projectId,
      oldStatus as ProjectStatus,
      newStatus as ProjectStatus,
      projectData,
      finalRecipients
    )

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const failureCount = results.filter(r => !r.success).length

    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length}`)
    if (failureCount > 0) {
      console.warn(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${failureCount}`)
      console.log('–û—à–∏–±–∫–∏:', results.filter(r => !r.success).map(r => ({ channel: r.channel, error: r.error })))
    }

    return NextResponse.json({
      success: true,
      results,
      stats: {
        total: results.length,
        successful: successCount,
        failed: failureCount,
        channels: availableChannels
      }
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
    return NextResponse.json({ 
      error: 'Failed to send notifications',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
}

/**
 * üë• –î–ï–§–û–õ–¢–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–ò –ü–û –°–¢–ê–¢–£–°–ê–ú
 */
function getDefaultRecipients(
  newStatus: ProjectStatus, 
  availableChannels: string[]
): NotificationRecipient[] {
  const recipients: NotificationRecipient[] = []

  // –ú–µ–Ω–µ–¥–∂–µ—Ä - –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if (['waiting_approval', 'waiting_manager_receipt', 'receipt_rejected'].includes(newStatus)) {
    recipients.push({
      id: 'manager-default',
      name: '–ú–µ–Ω–µ–¥–∂–µ—Ä Get2B',
      role: 'manager',
      preferences: {
        channels: availableChannels.map(type => ({ 
          type: type as any, 
          enabled: true 
        })),
        criticalOnly: false,
        timezone: 'Europe/Moscow'
      }
    })
  }

  // –ö–ª–∏–µ–Ω—Ç - –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
  if (['waiting_receipt', 'receipt_rejected', 'waiting_client_confirmation', 'completed'].includes(newStatus)) {
    recipients.push({
      id: 'client-default',
      name: '–ö–ª–∏–µ–Ω—Ç',
      role: 'client',
      preferences: {
        channels: availableChannels.map(type => ({ 
          type: type as any, 
          enabled: true 
        })),
        criticalOnly: true, // –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        timezone: 'Europe/Moscow'
      }
    })
  }

  return recipients
}

/**
 * üìä GET: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const projectId = searchParams.get('projectId')

    const notificationService = NotificationService.getInstance()
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await notificationService.getNotificationStats(projectId || undefined)
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    const availableChannels = notificationService.getAvailableChannels()

    return NextResponse.json({
      success: true,
      stats,
      availableChannels,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
    return NextResponse.json({ 
      error: 'Failed to get notification stats' 
    }, { status: 500 })
  }
} 