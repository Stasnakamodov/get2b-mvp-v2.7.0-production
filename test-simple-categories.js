// üß™ –¢–ï–°–¢ –ü–†–û–°–¢–û–ô –°–ò–°–¢–ï–ú–´ –ö–ê–¢–ï–ì–û–†–ò–ô
// –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
// –ó–∞–ø—É—Å–∫: node test-simple-categories.js

const { createClient } = require('@supabase/supabase-js');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'your-supabase-url';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'your-supabase-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testSimpleCategories() {
  console.log('üß™ [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...\n');

  try {
    // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const { data: categories, error: categoriesError } = await supabase
      .from('catalog_categories')
      .select('id, key, name, icon, description, sort_order, is_active')
      .eq('is_active', true)
      .order('sort_order');

    if (categoriesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesError);
      return;
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`);
    categories.forEach(cat => {
      console.log(`   ${cat.icon} ${cat.name} (${cat.key})`);
    });
    console.log('');

    // 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    const testCategory = {
      key: 'test_category',
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      icon: 'üß™',
      sort_order: 99,
      is_active: true
    };

    const { data: newCategory, error: createError } = await supabase
      .from('catalog_categories')
      .insert(testCategory)
      .select()
      .single();

    if (createError) {
      console.log('‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', createError.message);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', newCategory.name);
    }
    console.log('');

    // 3. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    const { data: updatedCategory, error: updateError } = await supabase
      .from('catalog_categories')
      .update({ description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' })
      .eq('key', 'test_category')
      .select()
      .single();

    if (updateError) {
      console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError.message);
    } else {
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedCategory?.name);
    }
    console.log('');

    // 4. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('4Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    const { error: deleteError } = await supabase
      .from('catalog_categories')
      .delete()
      .eq('key', 'test_category');

    if (deleteError) {
      console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError.message);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
    }
    console.log('');

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('5Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
    const { data: finalCategories, error: finalError } = await supabase
      .from('catalog_categories')
      .select('*')
      .eq('is_active', true);

    if (finalError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalError);
      return;
    }

    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log(`üìä –ò—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${finalCategories.length}`);
    console.log('üíö –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testSimpleCategories();