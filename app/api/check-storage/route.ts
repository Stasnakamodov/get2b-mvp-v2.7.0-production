import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// GET: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Supabase Storage
export async function GET(request: NextRequest) {
  try {
    console.log("üîç [STORAGE] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Storage");

    const { searchParams } = new URL(request.url);
    const path = searchParams.get('path') || 'accreditation';
    const listBuckets = searchParams.get('buckets') === 'true';

    if (listBuckets) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö buckets
      const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
      
      if (bucketsError) {
        console.error("‚ùå [STORAGE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è buckets:", bucketsError);
        return NextResponse.json({ error: bucketsError.message }, { status: 500 });
      }

      console.log("‚úÖ [STORAGE] –ù–∞–π–¥–µ–Ω–æ buckets:", buckets?.length || 0);

      return NextResponse.json({
        success: true,
        buckets: buckets?.map(bucket => ({
          name: bucket.name,
          public: bucket.public,
          created_at: bucket.created_at
        })) || []
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    const { data: files, error } = await supabase.storage
      .from('project-images')
      .list(path, {
        limit: 100,
        offset: 0
      });

    if (error) {
      console.error("‚ùå [STORAGE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    console.log("‚úÖ [STORAGE] –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", files?.length || 0);

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ URL –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    const filesWithUrls = files?.slice(0, 5).map(file => {
      const filePath = `${path}/${file.name}`;
      const { data: urlData } = supabase.storage
        .from('project-images')
        .getPublicUrl(filePath);

      return {
        name: file.name,
        size: file.metadata?.size,
        type: file.metadata?.mimetype,
        path: filePath,
        public_url: urlData.publicUrl,
        created_at: file.created_at
      };
    });

    return NextResponse.json({
      success: true,
      path,
      total_files: files?.length || 0,
      files_with_urls: filesWithUrls || []
    });

  } catch (error) {
    console.error("‚ùå [STORAGE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 