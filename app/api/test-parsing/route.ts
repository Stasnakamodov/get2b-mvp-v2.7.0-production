import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { text } = await request.json();
    
    console.log("üß™ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê");
    console.log("üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", text);
    console.log("üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:", text.length);
    console.log("üìÑ –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:", text.substring(0, 100));
    console.log("üìÑ –°–æ–¥–µ—Ä–∂–∏—Ç '–ò–ù–ù/–ö–ü–ü':", text.includes('–ò–ù–ù/–ö–ü–ü'));
    console.log("üìÑ –°–æ–¥–µ—Ä–∂–∏—Ç '–û–ì–†–ù':", text.includes('–û–ì–†–ù'));
    console.log("üìÑ –°–æ–¥–µ—Ä–∂–∏—Ç '–û–û–û':", text.includes('–û–û–û'));
    
    // –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    interface TestResults {
      inn?: string;
      kpp?: string;
      ogrn?: string;
      companyName?: string;
      companyType?: string;
      [key: string]: string | undefined;
    }

    const testResults: TestResults = {};
    
    // –¢–µ—Å—Ç –ò–ù–ù/–ö–ü–ü
    const innKppMatch = text.match(/\b–ò–ù–ù\/–ö–ü–ü\s*\n\s*(\d{10})\/(\d{9})\b/i);
    if (innKppMatch) {
      testResults.inn = innKppMatch[1];
      testResults.kpp = innKppMatch[2];
      console.log("‚úÖ –ò–ù–ù/–ö–ü–ü –Ω–∞–π–¥–µ–Ω:", innKppMatch[1], "/", innKppMatch[2]);
    } else {
      console.log("‚ùå –ò–ù–ù/–ö–ü–ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –¢–µ—Å—Ç –û–ì–†–ù
    const ogrnMatch = text.match(/\b–û–ì–†–ù\s*\n\s*(\d{13})\b/i);
    if (ogrnMatch) {
      testResults.ogrn = ogrnMatch[1];
      console.log("‚úÖ –û–ì–†–ù –Ω–∞–π–¥–µ–Ω:", ogrnMatch[1]);
    } else {
      console.log("‚ùå –û–ì–†–ù –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –¢–µ—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    const companyMatch = text.match(/\b–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s*\n\s*([^\n]+)/i);
    if (companyMatch) {
      testResults.companyName = companyMatch[1].trim();
      console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ:", companyMatch[1]);
    } else {
      console.log("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }
    
    // –¢–µ—Å—Ç –±–∞–Ω–∫–∞
    const bankMatch = text.match(/\b–ë–∞–Ω–∫\s*\n\s*([^\n]+)/i);
    if (bankMatch) {
      testResults.bankName = bankMatch[1].trim();
      console.log("‚úÖ –ë–∞–Ω–∫ –Ω–∞–π–¥–µ–Ω:", bankMatch[1]);
    } else {
      console.log("‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –¢–µ—Å—Ç —Å—á–µ—Ç–∞
    const accountMatch = text.match(/\b–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á–µ—Ç\s*\n\s*(\d{20})\b/i);
    if (accountMatch) {
      testResults.bankAccount = accountMatch[1];
      console.log("‚úÖ –°—á–µ—Ç –Ω–∞–π–¥–µ–Ω:", accountMatch[1]);
    } else {
      console.log("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –¢–µ—Å—Ç –ë–ò–ö
    const bikMatch = text.match(/\b–ë–ò–ö –±–∞–Ω–∫–∞\s*\n\s*(\d{9})\b/i);
    if (bikMatch) {
      testResults.bankBik = bikMatch[1];
      console.log("‚úÖ –ë–ò–ö –Ω–∞–π–¥–µ–Ω:", bikMatch[1]);
    } else {
      console.log("‚ùå –ë–ò–ö –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –¢–µ—Å—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneMatch = text.match(/\b–¢–µ–ª–µ—Ñ–æ–Ω\s*\n\s*([^\n]+)/i);
    if (phoneMatch) {
      testResults.phone = phoneMatch[1].trim();
      console.log("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞–π–¥–µ–Ω:", phoneMatch[1]);
    } else {
      console.log("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –¢–µ—Å—Ç –∞–¥—Ä–µ—Å–∞
    const addressMatch = text.match(/\b–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å\s*\n\s*([^\n]+)/i);
    if (addressMatch) {
      testResults.address = addressMatch[1].trim();
      console.log("‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω:", addressMatch[1]);
    } else {
      console.log("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:", testResults);
    
    return NextResponse.json({
      success: true,
      testResults,
      textLength: text.length,
      foundFields: Object.keys(testResults).length
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞" },
      { status: 500 }
    );
  }
} 