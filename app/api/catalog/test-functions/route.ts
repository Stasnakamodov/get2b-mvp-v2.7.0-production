import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// GET: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —É–º–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
export async function GET() {
  try {
    const results: any = {
      timestamp: new Date().toISOString(),
      status: "testing functions",
      tests: [],
      smart_catalog_ready: false
    };

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    try {
      const { count: historyCount } = await supabase
        .from("project_product_history")
        .select("*", { count: "exact", head: true });

      const { count: patternsCount } = await supabase
        .from("supplier_usage_patterns")
        .select("*", { count: "exact", head: true });

      results.tests.push({
        name: "–¢–∞–±–ª–∏—Ü—ã —É–º–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞",
        status: "‚úÖ –ì–æ—Ç–æ–≤—ã",
        details: {
          project_product_history: historyCount || 0,
          supplier_usage_patterns: patternsCount || 0
        }
      });
    } catch (error) {
      results.tests.push({
        name: "–¢–∞–±–ª–∏—Ü—ã —É–º–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞",
        status: "‚ùå –û—à–∏–±–∫–∞",
        error: String(error)
      });
    }

    // –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    try {
      const testProjectId = crypto.randomUUID();
      const testUserId = '86cc190d-0c80-463b-b0df-39a25b22365f';
      const testSupplierId = '977c2bee-750e-467f-a790-1fd5c3ec1e47';

      const { error: insertError } = await supabase
        .from("project_product_history")
        .insert([
          {
            project_id: testProjectId,
            user_id: testUserId,
            supplier_id: testSupplierId,
            supplier_type: 'user',
            product_name: 'Smart Test Product 1',
            product_category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
            quantity: 5,
            unit_price: 150.00,
            total_price: 750.00,
            currency: 'USD',
            project_status: 'completed',
            was_successful: true
          },
          {
            project_id: testProjectId,
            user_id: testUserId,
            supplier_id: testSupplierId,
            supplier_type: 'user',
            product_name: 'Smart Test Product 2',
            product_category: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ',
            quantity: 2,
            unit_price: 500.00,
            total_price: 1000.00,
            currency: 'USD',
            project_status: 'completed',
            was_successful: true
          }
        ]);

      if (insertError) {
        results.tests.push({
          name: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
          status: "‚ùå –û—à–∏–±–∫–∞",
          error: insertError.message
        });
      } else {
        results.tests.push({
          name: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
          status: "‚úÖ –£—Å–ø–µ—à–Ω–æ",
          details: "–î–æ–±–∞–≤–ª–µ–Ω–æ 2 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞"
        });
      }
    } catch (error) {
      results.tests.push({
        name: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        status: "‚ùå –û—à–∏–±–∫–∞",
        error: String(error)
      });
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π
    try {
      const testUserId = '86cc190d-0c80-463b-b0df-39a25b22365f';

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
      const { data: historyData, error: historyError } = await supabase
        .from("project_product_history")
        .select("*")
        .eq("user_id", testUserId);

      if (historyError) {
        throw historyError;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const totalProducts = historyData?.length || 0;
      const totalSpent = historyData?.reduce((sum, item) => sum + (item.total_price || 0), 0) || 0;
      const successfulProjects = historyData?.filter(item => item.was_successful).length || 0;
      const successRate = totalProducts > 0 ? (successfulProjects / totalProducts * 100).toFixed(1) : 0;

      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
      const categories = [...new Set(historyData?.map(item => item.product_category) || [])];

      results.tests.push({
        name: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        status: "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç",
        details: {
          total_products: totalProducts,
          total_spent: `$${totalSpent.toFixed(2)}`,
          success_rate: `${successRate}%`,
          categories: categories
        }
      });

      // –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏, –∫–∞—Ç–∞–ª–æ–≥ –≥–æ—Ç–æ–≤
      if (totalProducts > 0) {
        results.smart_catalog_ready = true;
      }

    } catch (error) {
      results.tests.push({
        name: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        status: "‚ùå –û—à–∏–±–∫–∞",
        error: String(error)
      });
    }

    // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    const successfulTests = results.tests.filter((test: any) => test.status.includes("‚úÖ")).length;
    const totalTests = results.tests.length;

    if (results.smart_catalog_ready) {
      results.status = "üß† –£–º–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç!";
    } else if (successfulTests > 0) {
      results.status = `‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç (${successfulTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤)`;
    } else {
      results.status = "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç";
    }

    console.log('üß† [TEST FUNCTIONS] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
    return NextResponse.json(results);

  } catch (error) {
    console.error('‚ùå [TEST FUNCTIONS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json({ 
      status: "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
      error: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
} 