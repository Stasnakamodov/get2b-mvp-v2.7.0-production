// –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API

export async function sendTelegramMessageClient(text: string) {
  try {
    console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ /api/telegram/send-message")
    console.log("üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", text)

    const response = await fetch("/api/telegram/send-message", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text }),
    })

    console.log("üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status)
    console.log("üì° –°—Ç–∞—Ç—É—Å OK:", response.ok)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:", errorText)
      throw new Error(`HTTP ${response.status}: ${errorText}`)
    }

    const result = await response.json()
    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", result)
    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    return result
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error)
    throw error
  }
}

export async function sendTelegramProjectApprovalRequestClient(
  text: string,
  projectId: string,
  type: "spec" | "receipt" | "invoice" = "spec",
) {
  try {
    const response = await fetch("/api/telegram/send-project-approval", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text, projectId, type }),
    })

    if (!response.ok) {
      throw new Error("Failed to send approval request")
    }

    console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    return await response.json()
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –≤ Telegram:", error)
    throw error
  }
}

export async function sendTelegramDocumentClient(documentUrl: string, caption?: string) {
  try {
    const response = await fetch("/api/telegram/send-document", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ documentUrl, caption }),
    })

    if (!response.ok) {
      throw new Error("Failed to send document")
    }

    console.log("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    return await response.json()
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram:", error)
    throw error
  }
}

export async function sendSupplierReceiptRequestToManagerClient({
  projectId,
  email,
  companyName,
  amount,
  currency,
  paymentMethod,
  requisites,
}: {
  projectId: string
  email: string
  companyName: string
  amount: number
  currency: string
  paymentMethod: string
  requisites?: string
}) {
  console.log("üöÄ [CLIENT] sendSupplierReceiptRequestToManagerClient –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", {
    projectId,
    email,
    companyName,
    amount,
    currency,
    paymentMethod,
    requisites
  });
  
  try {
    const requestBody = { projectId, email, companyName, amount, currency, paymentMethod, requisites };
    console.log("üì¶ [CLIENT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", JSON.stringify(requestBody, null, 2));
    
    const response = await fetch("/api/telegram/send-supplier-receipt-request", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(requestBody),
    })

    console.log("üì° [CLIENT] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
    console.log("üì° [CLIENT] –°—Ç–∞—Ç—É—Å OK:", response.ok);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå [CLIENT] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:", errorText);
      throw new Error("Failed to send supplier receipt request")
    }

    const result = await response.json();
    console.log("‚úÖ [CLIENT] –†–µ–∑—É–ª—å—Ç–∞—Ç:", result);
    console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É")
    return result;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞:", error)
    throw error
  }
}

export async function sendClientConfirmationRequestToTelegramClient({
  projectId,
  email,
  companyName,
}: {
  projectId: string
  email: string
  companyName: string
}) {
  const response = await fetch("/api/telegram/send-client-confirmation-request", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ projectId, email, companyName }),
  })
  if (!response.ok) throw new Error("Failed to send client confirmation request")
  return await response.json()
}
