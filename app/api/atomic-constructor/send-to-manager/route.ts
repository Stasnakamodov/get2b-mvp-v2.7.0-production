import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabaseClient'
import { ManagerBotService } from '@/lib/telegram/ManagerBotService'

export async function POST(request: NextRequest) {
  try {
    const { 
      stepConfigs, 
      manualData, 
      uploadedFiles, 
      user, 
      currentStage,
      activeScenario 
    } = await request.json()

    console.log('üöÄ [Atomic Constructor] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É:', {
      currentStage,
      activeScenario,
      stepsWithData: Object.keys(manualData).length,
      user: user?.email
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!user?.id) {
      return NextResponse.json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, { status: 401 })
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è Telegram)
    const requestId = `atomic${Date.now()}`
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const message = formatAtomicConstructorMessage({
      stepConfigs,
      manualData,
      uploadedFiles,
      user,
      currentStage,
      activeScenario,
      requestId
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const managerBot = new ManagerBotService()
    await managerBot.sendAtomicConstructorApprovalRequest({
      text: message,
      requestId,
      userEmail: user.email,
      userName: user.user_metadata?.full_name || user.email,
      currentStage,
      activeScenario
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await saveAtomicConstructorRequest({
      requestId,
      userId: user.id,
      userEmail: user.email,
      stepConfigs,
      manualData,
      uploadedFiles,
      currentStage,
      activeScenario
    })

    return NextResponse.json({ 
      success: true, 
      message: '–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É',
      requestId 
    })

  } catch (error) {
    console.error('‚ùå [Atomic Constructor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É' },
      { status: 500 }
    )
  }
}

function formatAtomicConstructorMessage({
  stepConfigs,
  manualData,
  uploadedFiles,
  user,
  currentStage,
  activeScenario,
  requestId
}: {
  stepConfigs: Record<number, string>
  manualData: Record<number, any>
  uploadedFiles: Record<number, string>
  user: any
  currentStage: number
  activeScenario: string
  requestId: string
}) {
  const stageNames = {
    1: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
    2: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
    3: '–ê–Ω–∏–º–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏'
  }

  const scenarioNames = {
    'A': '–ê (–ö–ª–∏–µ–Ω—Ç-–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)',
    'B1': '–ë1 (–ü–æ—Å—Ç–∞–≤—â–∏–∫-—Ç–æ–≤–∞—Ä—ã)',
    'B2': '–ë2 (–ü–æ—Å—Ç–∞–≤—â–∏–∫-—Ä–µ–∫–≤–∏–∑–∏—Ç—ã)',
    'none': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
  }

  let message = `üöÄ **–ù–û–í–´–ô –ê–¢–û–ú–ê–†–ù–´–ô –ö–û–ù–°–¢–†–£–ö–¢–û–†**\n\n`
  message += `üìã **ID –∑–∞–ø—Ä–æ—Å–∞:** \`${requestId}\`\n`
  message += `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${user.email}\n`
  message += `üìä **–≠—Ç–∞–ø:** ${stageNames[currentStage as keyof typeof stageNames]}\n`
  message += `üé≠ **–°—Ü–µ–Ω–∞—Ä–∏–π:** ${scenarioNames[activeScenario as keyof typeof scenarioNames]}\n\n`

  // –®–∞–≥ 1: –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
  if (manualData[1]) {
    message += `üè¢ **–®–ê–ì 1: –î–ê–ù–ù–´–ï –ö–û–ú–ü–ê–ù–ò–ò**\n`
    message += `üìù –ò—Å—Ç–æ—á–Ω–∏–∫: ${getSourceDisplayName(stepConfigs[1])}\n`
    message += `üèõÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: ${manualData[1].name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üìÑ –ò–ù–ù: ${manualData[1].inn || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üè¶ –ë–∞–Ω–∫: ${manualData[1].bankName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üí≥ –°—á–µ—Ç: ${manualData[1].bankAccount || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`
  }

  // –®–∞–≥ 2: –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  if (manualData[2]) {
    message += `üì¶ **–®–ê–ì 2: –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–í–ê–†–û–í**\n`
    message += `üìù –ò—Å—Ç–æ—á–Ω–∏–∫: ${getSourceDisplayName(stepConfigs[2])}\n`
    message += `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${manualData[2].supplier || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üí∞ –í–∞–ª—é—Ç–∞: ${manualData[2].currency || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üìä –ü–æ–∑–∏—Ü–∏–π: ${manualData[2].items?.length || 0}\n`
    
    if (manualData[2].items && manualData[2].items.length > 0) {
      const totalQuantity = manualData[2].items.reduce((sum: number, item: any) => sum + (Number(item.quantity) || 0), 0)
      const totalAmount = manualData[2].items.reduce((sum: number, item: any) => sum + (Number(item.total) || 0), 0)
      message += `üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${totalQuantity} —à—Ç\n`
      message += `üíµ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount} ${manualData[2].currency || 'RUB'}\n`
    }
    message += `\n`
  }

  // –®–∞–≥ 4: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
  if (manualData[4]) {
    message += `üí≥ **–®–ê–ì 4: –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´**\n`
    message += `üìù –ò—Å—Ç–æ—á–Ω–∏–∫: ${getSourceDisplayName(stepConfigs[4])}\n`
    message += `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${manualData[4].supplier || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üí≥ –ú–µ—Ç–æ–¥: ${getPaymentMethodName(manualData[4].method)}\n\n`
  }

  // –®–∞–≥ 5: –†–µ–∫–≤–∏–∑–∏—Ç—ã
  if (manualData[5]) {
    message += `üè¶ **–®–ê–ì 5: –†–ï–ö–í–ò–ó–ò–¢–´**\n`
    message += `üìù –ò—Å—Ç–æ—á–Ω–∏–∫: ${getSourceDisplayName(stepConfigs[5])}\n`
    message += `üè¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${manualData[5].recipientName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üè¶ –ë–∞–Ω–∫: ${manualData[5].bankName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üí≥ –°—á–µ—Ç: ${manualData[5].accountNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    message += `üåê SWIFT: ${manualData[5].swift || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`
  }

  // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  const filesList = Object.entries(uploadedFiles)
    .filter(([_, url]) => url)
    .map(([stepId, url]) => `–®–∞–≥ ${stepId}: ${url}`)
    .join('\n')

  if (filesList) {
    message += `üìé **–ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –§–ê–ô–õ–´:**\n${filesList}\n\n`
  }

  message += `‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** ${new Date().toLocaleString('ru-RU')}\n`
  message += `üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç:** https://get2b.ru/dashboard/project-constructor`

  return message
}

function getSourceDisplayName(source: string): string {
  const sourceNames: Record<string, string> = {
    'profile': '–ü—Ä–æ—Ñ–∏–ª—å',
    'template': '–®–∞–±–ª–æ–Ω',
    'catalog': '–ö–∞—Ç–∞–ª–æ–≥',
    'echo': '–≠—Ö–æ –¥–∞–Ω–Ω—ã–µ',
    'manual': '–í—Ä—É—á–Ω—É—é',
    'upload': '–ó–∞–≥—Ä—É–∑–∏—Ç—å (OCR)',
    'automatic': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
  }
  return sourceNames[source] || source
}

function getPaymentMethodName(method: string): string {
  const methodNames: Record<string, string> = {
    'bank-transfer': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥',
    'p2p': 'P2P –ø–ª–∞—Ç–µ–∂',
    'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'
  }
  return methodNames[method] || method
}

async function saveAtomicConstructorRequest({
  requestId,
  userId,
  userEmail,
  stepConfigs,
  manualData,
  uploadedFiles,
  currentStage,
  activeScenario
}: {
  requestId: string
  userId: string
  userEmail: string
  stepConfigs: Record<number, string>
  manualData: Record<number, any>
  uploadedFiles: Record<number, string>
  currentStage: number
  activeScenario: string
}) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏ —Å–ø–æ—Å–æ–± —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
  const initiatorRole = activeScenario === 'A' ? 'client' : 'supplier'
  const startMethod = 'upload' // –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –≤—Å–µ–≥–¥–∞ upload

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ Step1 (–∫–æ–º–ø–∞–Ω–∏—è) –∏ Step2 (—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è) –∏–∑ manualData
  const companyData = manualData[1] || {}
  const supplierData = manualData[2]?.supplier ? { supplier: manualData[2].supplier } : {}
  const stepsData = {
    step1: manualData[1],
    step2: manualData[2],
    step4: manualData[4],
    step5: manualData[5]
  }

  const { error } = await supabase
    .from('projects')
    .insert({
      user_id: userId,
      name: `–ê—Ç–æ–º–∞—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ${requestId}`,
      status: 'draft',
      initiator_role: initiatorRole,
      start_method: startMethod,
      current_step: 1,
      max_step_reached: 1,
      constructor_type: 'atomic',
      atomic_stage: currentStage,
      atomic_scenario: activeScenario,
      atomic_step_configs: stepConfigs,
      atomic_manual_data: manualData,
      atomic_uploaded_files: uploadedFiles,
      atomic_request_id: requestId,
      atomic_moderation_status: 'pending',
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
      company_data: companyData,
      supplier_data: supplierData,
      steps: stepsData,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    })

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:', error)
    throw error
  }
} 