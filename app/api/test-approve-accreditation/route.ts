import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function POST(request: NextRequest) {
  try {
    const { applicationId } = await request.json();
    
    if (!applicationId) {
      return NextResponse.json({ error: "applicationId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 });
    }

    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:", applicationId);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const { data: application, error: fetchError } = await supabase
      .from('accreditation_applications')
      .select('*')
      .eq('id', applicationId)
      .single();

    if (fetchError || !application) {
      return NextResponse.json({ error: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }, { status: 404 });
    }

    console.log("üìã –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞:", application.supplier_name);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    const { error: updateError } = await supabase
      .from('accreditation_applications')
      .update({ 
        status: 'approved',
        reviewed_by: '–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
        reviewed_at: new Date().toISOString()
      })
      .eq('id', applicationId);

    if (updateError) {
      return NextResponse.json({ error: updateError.message }, { status: 500 });
    }

    console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ approved");

    // –ü–∞—Ä—Å–∏–º application_data
    let applicationData: any = {};
    try {
      applicationData = typeof application.application_data === 'string' 
        ? JSON.parse(application.application_data) 
        : application.application_data;
    } catch (e) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ application_data:", e);
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
    const categoryMapping: { [key: string]: string } = {
      '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
      '—Ç–∞–Ω–∫–æ–≤–∞—è': '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã',
      '321d': '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞',
      '312312': '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞',
      '.kjblubuy': '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö',
      '12412': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
    };

    const mappedCategory = categoryMapping[application.category] || application.category;

    // üü† –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –í –û–†–ê–ù–ñ–ï–í–û–ú –ö–ê–ë–ò–ù–ï–¢–ï (catalog_verified_suppliers)
    const verifiedSupplierData = {
      name: application.supplier_name,
      company_name: application.company_name,
      category: mappedCategory,
      country: application.country,
      description: applicationData.description || '',
      contact_email: applicationData.contact_email || '',
      contact_phone: applicationData.contact_phone || '',
      website: applicationData.website || '',
      contact_person: applicationData.contact_person || '',
      min_order: applicationData.min_order || '',
      response_time: applicationData.response_time || '',
      employees: applicationData.employees || '',
      established: applicationData.established || '',
      certifications: applicationData.certifications || null,
      specialties: applicationData.specialties || null,
      payment_methods: applicationData.payment_methods || null,
      logo_url: applicationData.logo_url || null,
      moderation_status: 'approved',
      moderated_by: null,
      moderated_at: new Date().toISOString(),
      is_verified: true,
      is_active: true,
      public_rating: 0,
      reviews_count: 0,
      projects_count: 0,
      success_rate: 0
    };

    console.log("üü† –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:", verifiedSupplierData.name);

    const { data: verifiedSupplier, error: createError } = await supabase
      .from('catalog_verified_suppliers')
      .insert([verifiedSupplierData])
      .select()
      .single();

    if (createError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:", createError);
      return NextResponse.json({ error: createError.message }, { status: 500 });
    }

    console.log("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:", verifiedSupplier.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    await supabase
      .from('accreditation_applications')
      .update({ 
        verified_supplier_id: verifiedSupplier.id 
      })
      .eq('id', applicationId);

    console.log("‚úÖ –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å verified_supplier_id");

    // üì¶ –ö–û–ü–ò–†–£–ï–ú –¢–û–í–ê–†–´ –í –û–†–ê–ù–ñ–ï–í–´–ô –ö–ê–ë–ò–ù–ï–¢ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (application.products_data) {
      try {
        const products = typeof application.products_data === 'string' 
          ? JSON.parse(application.products_data) 
          : application.products_data;

        if (Array.isArray(products) && products.length > 0) {
          console.log("üì¶ –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã:", products.length);
          
          const verifiedProducts = products.map((product: any) => ({
            supplier_id: verifiedSupplier.id,
            name: product.name || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            description: product.description || '',
            category: product.category || application.category,
            price: product.price || 0,
            currency: product.currency || 'USD',
            min_order: product.min_order || '',
            in_stock: true,
            image_url: product.image_url || null,
            certification: product.certification || null
          }));

          await supabase
            .from('catalog_verified_products')
            .insert(verifiedProducts);
          
          console.log("‚úÖ –¢–æ–≤–∞—Ä—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Ä–∞–Ω–∂–µ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç");
        }
      } catch (productError) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:", productError);
      }
    }

    return NextResponse.json({ 
      success: true,
      message: "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ä–∞–Ω–∂–µ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
      application_id: applicationId,
      verified_supplier_id: verifiedSupplier.id,
      supplier_name: application.supplier_name
    });

  } catch (error) {
    console.error("‚ùå Test approve accreditation error:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
} 