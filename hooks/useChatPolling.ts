import { useEffect, useRef, useCallback } from 'react';
import { ChatMessage } from '@/lib/types/chat';

// üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function deduplicateMessages(messages: ChatMessage[]): ChatMessage[] {
  const seen = new Set<string>();
  const uniqueMessages: ChatMessage[] = [];
  
  for (const message of messages) {
    // üéØ –°–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á: ID + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ + –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const compositeKey = `${message.id}-${message.content.substring(0, 50)}-${message.created_at}`;
    
    if (!seen.has(compositeKey)) {
      seen.add(compositeKey);
      uniqueMessages.push(message);
    } else {
      console.log(`üö´ –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.id} (${message.content.substring(0, 30)}...)`);
    }
  }
  
  // üóÇÔ∏è –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
  return uniqueMessages.sort((a, b) => 
    new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
  );
}

// üîß –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
function findNewMessages(oldMessages: ChatMessage[], newMessages: ChatMessage[]): ChatMessage[] {
  const oldIds = new Set(oldMessages.map(msg => msg.id));
  return newMessages.filter(msg => !oldIds.has(msg.id));
}

// –•—É–∫ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Ç–∞ —á–µ—Ä–µ–∑ polling
export function useChatPolling({
  roomId,
  onNewMessage,
  onMessagesUpdate,
  enabled = true, // ‚úÖ –í–ö–õ–Æ–ß–ï–ù –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  pollingInterval = 15000 // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∏–≥–∞–Ω–∏—è (–±—ã–ª–æ 8)
}: {
  roomId?: string;
  onNewMessage?: (message: ChatMessage) => void;
  onMessagesUpdate?: (messages: ChatMessage[]) => void;
  enabled?: boolean;
  pollingInterval?: number;
}) {
  
  const lastMessageIdRef = useRef<string | null>(null);
  const lastMessagesRef = useRef<ChatMessage[]>([]); // üÜï –ö—ç—à –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const pollingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isPollingRef = useRef(false);
  
  // üÜï –ù–û–í–û–ï: –∫–µ—à –¥–ª—è —É–º–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const lastMessagesHashRef = useRef<string>('');
  const lastUpdateTimeRef = useRef<number>(0);

  // üÜï –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const createMessagesHash = (messages: ChatMessage[]): string => {
    return messages.map(msg => 
      `${msg.id}-${msg.content.substring(0, 30)}-${msg.created_at}`
    ).join('|');
  };

  // –§—É–Ω–∫—Ü–∏—è polling –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const pollForUpdates = useCallback(async () => {
    if (!roomId || !enabled || isPollingRef.current) {
      return;
    }

    // üõ°Ô∏è –ü–†–û–°–¢–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø ID - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if (typeof roomId !== 'string' || roomId.trim().length === 0) {
      console.warn('‚ùå useChatPolling: Invalid roomId:', roomId);
      return;
    }

    try {
      isPollingRef.current = true;

      const params = new URLSearchParams({
        room_id: roomId,
        limit: '50',
        offset: '0'
      });

      const response = await fetch(`/api/chat/messages?${params}`);
      
      // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–ê –°–ï–†–í–ï–†–ê
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();

      if (data.success && data.messages) {
        // üîß –°–ù–ê–ß–ê–õ–ê –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const cleanMessages = deduplicateMessages(data.messages);
        
        if (cleanMessages.length > 0) {
          const latestMessage = cleanMessages[cleanMessages.length - 1];
          const newMessagesHash = createMessagesHash(cleanMessages);
          const currentTime = Date.now();
          
          // üöÄ –£–ú–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
          if (newMessagesHash !== lastMessagesHashRef.current) {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º onMessagesUpdate
            if (lastMessagesRef.current.length === 0) {
              console.log('üîÑ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ polling:', cleanMessages.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
              if (onMessagesUpdate) {
                onMessagesUpdate(cleanMessages);
              }
              lastMessageIdRef.current = latestMessage.id;
              lastMessagesRef.current = cleanMessages;
              lastMessagesHashRef.current = newMessagesHash;
              lastUpdateTimeRef.current = currentTime;
            } 
            // –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤
            else {
              const newMessages = findNewMessages(lastMessagesRef.current, cleanMessages);
              
              if (newMessages.length > 0) {
                console.log(`üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newMessages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ polling`);
                
                if (onNewMessage) {
                  // üö® –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏
                  newMessages.forEach((msg: ChatMessage) => {
                    console.log(`üì® –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msg.id} (${msg.content.substring(0, 30)}...)`);
                    onNewMessage(msg);
                  });
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
                lastMessageIdRef.current = latestMessage.id;
                lastMessagesRef.current = cleanMessages;
                lastMessagesHashRef.current = newMessagesHash;
                lastUpdateTimeRef.current = currentTime;
              }
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
              else if (cleanMessages.length !== lastMessagesRef.current.length) {
                console.log('üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π');
                if (onMessagesUpdate) {
                  onMessagesUpdate(cleanMessages);
                }
                lastMessageIdRef.current = latestMessage.id;
                lastMessagesRef.current = cleanMessages;
                lastMessagesHashRef.current = newMessagesHash;
                lastUpdateTimeRef.current = currentTime;
              }
            }
          } else {
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
          }
        } else {
          // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç - –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
          if (lastMessagesRef.current.length > 0 && onMessagesUpdate) {
            console.log('üóëÔ∏è Polling: –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è');
            onMessagesUpdate([]);
          }
          lastMessageIdRef.current = null;
          lastMessagesRef.current = [];
        }
      }
    } catch (error) {
      // üõ°Ô∏è –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
        console.warn('üåê useChatPolling: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω):', error.message);
        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
      } else if (error instanceof Error && error.message.includes('HTTP')) {
        console.error('üö´ useChatPolling: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
      } else {
        console.error('üí• useChatPolling: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      }
    } finally {
      isPollingRef.current = false;
    }
  }, [roomId, enabled, onNewMessage, onMessagesUpdate]);

  // –ó–∞–ø—É—Å–∫ polling - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  const startPolling = useCallback(() => {
    console.log(`üîÑ startPolling –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${pollingInterval}ms`);
    
    // üõë –ö–†–ò–¢–ò–ß–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ polling
    if (pollingTimeoutRef.current) {
      console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π polling');
      clearTimeout(pollingTimeoutRef.current);
      pollingTimeoutRef.current = null;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    isPollingRef.current = false;

    const poll = async () => {
      console.log(`‚è∞ Polling tick –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
      await pollForUpdates();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å polling
      if (enabled && roomId && !isPollingRef.current) {
        console.log(`‚è≥ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π polling —á–µ—Ä–µ–∑ ${pollingInterval}ms`);
        pollingTimeoutRef.current = setTimeout(poll, pollingInterval);
      } else {
        console.log(`üõë –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º polling: enabled=${enabled}, roomId=${roomId}, isPolling=${isPollingRef.current}`);
      }
    };

    // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Å—Ä–∞–∑—É
    poll();
  }, [pollForUpdates, enabled, roomId, pollingInterval]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  const stopPolling = useCallback(() => {
    console.log(`üõë stopPolling –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
    
    if (pollingTimeoutRef.current) {
      console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä polling');
      clearTimeout(pollingTimeoutRef.current);
      pollingTimeoutRef.current = null;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    isPollingRef.current = true; // true –æ–∑–Ω–∞—á–∞–µ—Ç "—É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è/–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    console.log('‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }, [roomId]);

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  const forceUpdate = useCallback(async () => {
    await pollForUpdates();
  }, [pollForUpdates]);

  // –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ polling –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  useEffect(() => {
    console.log(`üîÑ useEffect polling: enabled=${enabled}, roomId=${roomId}`);
    
    // –í–°–ï–ì–î–ê —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π polling
    stopPolling();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å
    const startTimeout = setTimeout(() => {
      if (enabled && roomId) {
        console.log(`‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
        startPolling();
      } else {
        console.log(`‚è∏Ô∏è Polling –æ—Ç–∫–ª—é—á–µ–Ω: enabled=${enabled}, roomId=${roomId}`);
      }
    }, 100);

    return () => {
      console.log(`üßπ Cleanup polling –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
      clearTimeout(startTimeout);
      stopPolling();
    };
  }, [enabled, roomId, startPolling, stopPolling]);

  // –°–±—Ä–æ—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  useEffect(() => {
    console.log(`üîÑ –°–±—Ä–æ—Å –∫—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
    lastMessageIdRef.current = null;
    lastMessagesRef.current = []; // üÜï –û—á–∏—â–∞–µ–º –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π
    lastMessagesHashRef.current = ''; // üöÄ –ù–û–í–û–ï: –æ—á–∏—â–∞–µ–º —Ö–µ—à –¥–ª—è —É–º–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    lastUpdateTimeRef.current = 0; // üöÄ –ù–û–í–û–ï: —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  }, [roomId]);

  // Cleanup –ø—Ä–∏ unmount - –£–°–ò–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  useEffect(() => {
    return () => {
      console.log('üßπ FINAL cleanup useChatPolling –ø—Ä–∏ unmount');
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ —Ñ–ª–∞–≥–∏
      if (pollingTimeoutRef.current) {
        clearTimeout(pollingTimeoutRef.current);
        pollingTimeoutRef.current = null;
      }
      
      isPollingRef.current = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π polling
      lastMessageIdRef.current = null;
      lastMessagesRef.current = []; // üÜï –û—á–∏—â–∞–µ–º –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π
    };
  }, []);

  return {
    startPolling,
    stopPolling,
    forceUpdate,
    isPolling: isPollingRef.current
  };
} 