import { NextRequest, NextResponse } from "next/server";
import { supabaseService } from "@/lib/supabaseServiceClient";

export async function GET() {
  try {
    console.log("üîç [CHECK-ACCREDITATION-STRUCTURE] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã");
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
    const { data, error } = await supabaseService
      .from('accreditation_applications')
      .select('*')
      .limit(1);

    if (error) {
      console.error("‚ùå [CHECK-ACCREDITATION-STRUCTURE] –û—à–∏–±–∫–∞:", error);
      return NextResponse.json({
        success: false,
        error: error.message
      }, { status: 500 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data: sampleRecord, error: sampleError } = await supabaseService
      .from('accreditation_applications')
      .select('*')
      .limit(1)
      .single();

    if (sampleError) {
      console.error("‚ùå [CHECK-ACCREDITATION-STRUCTURE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:", sampleError);
      return NextResponse.json({
        success: false,
        error: sampleError.message
      }, { status: 500 });
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const structure = {
      columns: Object.keys(sampleRecord || {}),
      sample_data: sampleRecord
    };

    console.log("‚úÖ [CHECK-ACCREDITATION-STRUCTURE] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞:", structure.columns);

    return NextResponse.json({
      success: true,
      message: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω–∞",
      structure
    });

  } catch (error) {
    console.error("‚ùå [CHECK-ACCREDITATION-STRUCTURE] –û—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 