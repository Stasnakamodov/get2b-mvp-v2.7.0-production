/**
 * ü§ñ –ë–ê–ó–û–í–´–ô TELEGRAM SERVICE
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ –±–æ—Ç–∞–º–∏ Get2B –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */

export interface TelegramMessage {
  chat_id: string | number;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
  reply_markup?: any;
  disable_web_page_preview?: boolean;
}

export interface TelegramDocument {
  chat_id: string | number;
  document: string;
  caption?: string;
  reply_markup?: any;
}

export interface TelegramPhoto {
  chat_id: string | number;
  photo: string;
  caption?: string;
  parse_mode?: 'HTML' | 'Markdown';
}

export interface TelegramCallbackQuery {
  callback_query_id: string;
  text?: string;
  show_alert?: boolean;
}

export class TelegramService {
  private botToken: string;
  private baseUrl: string;

  constructor(botToken: string) {
    if (!botToken) {
      throw new Error("‚ùå Bot token is required for TelegramService");
    }
    this.botToken = botToken;
    this.baseUrl = `https://api.telegram.org/bot${botToken}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async sendMessage(params: TelegramMessage): Promise<any> {
    const url = `${this.baseUrl}/sendMessage`;
    
    console.log("üì§ TelegramService: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", {
      chat_id: params.chat_id,
      text_length: params.text.length
    });

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(params),
      });

      const result = await response.json();

      if (!response.ok) {
        console.error("‚ùå Telegram API –æ—à–∏–±–∫–∞:", result);
        throw new Error(`Telegram API error: ${result.description || response.statusText}`);
      }

      console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
      return result;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–∞–π–ª
   */
  async sendDocument(params: TelegramDocument): Promise<any> {
    const url = `${this.baseUrl}/sendDocument`;
    
    console.log("üìÑ TelegramService: –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", {
      chat_id: params.chat_id,
      document_url: params.document
    });

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(params),
      });

      const result = await response.json();

      if (!response.ok) {
        console.error("‚ùå Telegram API –æ—à–∏–±–∫–∞:", result);
        throw new Error(`Telegram API error: ${result.description || response.statusText}`);
      }

      console.log("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      return result;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async sendPhoto(params: TelegramPhoto): Promise<any> {
    const url = `${this.baseUrl}/sendPhoto`;
    
    console.log("üì∑ TelegramService: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", {
      chat_id: params.chat_id,
      photo_url: params.photo
    });

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(params),
      });

      const result = await response.json();

      if (!response.ok) {
        console.error("‚ùå Telegram API –æ—à–∏–±–∫–∞:", result);
        throw new Error(`Telegram API error: ${result.description || response.statusText}`);
      }

      console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
      return result;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
      throw error;
    }
  }

  /**
   * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query (–Ω–∞–∂–∞—Ç–∏–µ inline –∫–Ω–æ–ø–∫–∏)
   */
  async answerCallbackQuery(params: TelegramCallbackQuery): Promise<any> {
    const url = `${this.baseUrl}/answerCallbackQuery`;
    
    console.log("üîÑ TelegramService: –æ—Ç–≤–µ—Ç –Ω–∞ callback query", {
      callback_query_id: params.callback_query_id,
      text: params.text
    });

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(params),
      });

      const result = await response.json();

      if (!response.ok) {
        console.error("‚ùå Telegram API –æ—à–∏–±–∫–∞:", result);
        throw new Error(`Telegram API error: ${result.description || response.statusText}`);
      }

      console.log("‚úÖ Callback query –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
      return result;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
   */
  async getFile(fileId: string): Promise<any> {
    const url = `${this.baseUrl}/getFile`;
    
    console.log("üìÅ TelegramService: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ", { fileId });

    try {
      const response = await fetch(`${url}?file_id=${fileId}`);
      const result = await response.json();

      if (!response.ok) {
        throw new Error(`Telegram API error: ${result.description}`);
      }

      return result;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
   */
  getFileDownloadUrl(filePath: string): string {
    return `https://api.telegram.org/file/bot${this.botToken}/${filePath}`;
  }
} 