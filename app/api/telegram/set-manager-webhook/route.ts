import { NextRequest, NextResponse } from "next/server"

const TELEGRAM_MANAGER_BOT_TOKEN = '7674425495:AAGiuSrYNJuJA06a65fXA95Ss0pcXhOE8tQ'

export async function POST(req: NextRequest) {
  try {
    const { webhookUrl } = await req.json()

    if (!webhookUrl) {
      return NextResponse.json({
        error: "–ù–µ —É–∫–∞–∑–∞–Ω URL –≤–µ–±—Ö—É–∫–∞"
      }, { status: 400 })
    }

    console.log("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
    console.log("üì° URL –≤–µ–±—Ö—É–∫–∞:", webhookUrl)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    const webhookResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_MANAGER_BOT_TOKEN}/setWebhook`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: `${webhookUrl}/api/telegram-manager-webhook`,
          allowed_updates: [
            "message",
            "callback_query"
          ],
          drop_pending_updates: true
        })
      }
    )

    const webhookData = await webhookResponse.json()

    if (!webhookData.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:", webhookData)
      return NextResponse.json({
        error: `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: ${webhookData.description}`,
        details: webhookData
      }, { status: 500 })
    }

    console.log("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    console.log("üìä –û—Ç–≤–µ—Ç Telegram:", webhookData)

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–µ–±—Ö—É–∫–µ
    const infoResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_MANAGER_BOT_TOKEN}/getWebhookInfo`
    )

    const infoData = await infoResponse.json()

    if (infoData.ok) {
      console.log("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:", infoData.result)
    }

    return NextResponse.json({
      success: true,
      message: "–í–µ–±—Ö—É–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
      webhookUrl: `${webhookUrl}/api/telegram-manager-webhook`,
      telegramResponse: webhookData,
      webhookInfo: infoData.ok ? infoData.result : null
    })

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞:", error)
    return NextResponse.json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    }, { status: 500 })
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞
export async function GET() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞...")

    const infoResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_MANAGER_BOT_TOKEN}/getWebhookInfo`
    )

    const infoData = await infoResponse.json()

    if (!infoData.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ:", infoData)
      return NextResponse.json({
        error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${infoData.description}`,
        details: infoData
      }, { status: 500 })
    }

    console.log("üìã –¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:", infoData.result)

    return NextResponse.json({
      success: true,
      webhookInfo: infoData.result
    })

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ:", error)
    return NextResponse.json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    }, { status: 500 })
  }
}