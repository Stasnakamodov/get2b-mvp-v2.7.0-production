import { NextRequest, NextResponse } from "next/server";
import { createClient } from '@supabase/supabase-js';
import * as XLSX from 'xlsx';

export async function POST(request: NextRequest) {
  try {
    console.log("üì§ API /upload-supplier-template –≤—ã–∑–≤–∞–Ω");

    // Parse form data
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const supplierId = formData.get('supplierId') as string;
    const supplierType = formData.get('supplierType') as string;
    const templateName = formData.get('templateName') as string;
    const description = formData.get('description') as string;
    const fillingRules = formData.get('fillingRules') as string;
    const isDefault = formData.get('isDefault') === 'true';

    console.log("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏:", {
      supplierId,
      supplierType,
      templateName,
      hasFile: !!file,
      fileSize: file?.size,
      fileName: file?.name,
      isDefault
    });

    // Validation
    if (!file || !supplierId || !supplierType || !templateName || !fillingRules) {
      return NextResponse.json(
        { error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: file, supplierId, supplierType, templateName, fillingRules" },
        { status: 400 }
      );
    }

    // Validate file type
    const allowedTypes = [
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
      'application/vnd.ms-excel' // .xls
    ];

    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json(
        { error: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)" },
        { status: 400 }
      );
    }

    // Validate JSON rules
    let parsedRules;
    try {
      parsedRules = JSON.parse(fillingRules);
    } catch (e) {
      return NextResponse.json(
        { error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è" },
        { status: 400 }
      );
    }

    // Validate required rule fields
    const requiredRuleFields = ['start_row', 'end_row', 'columns'];
    for (const field of requiredRuleFields) {
      if (!parsedRules[field]) {
        return NextResponse.json(
          { error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö: ${field}` },
          { status: 400 }
        );
      }
    }

    // Initialize Supabase client
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    // Generate file path in storage
    const fileExtension = file.name.split('.').pop()?.toLowerCase();
    const sanitizedTemplateName = templateName.replace(/[^a-zA-Z0-9-_]/g, '_');
    const timestamp = Date.now();
    const fileName = `${sanitizedTemplateName}_${timestamp}.${fileExtension}`;
    const storagePath = `templates/${supplierId}/${fileName}`;

    console.log("üíæ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Storage:", storagePath);

    // Convert file to buffer
    const fileBuffer = await file.arrayBuffer();

    // Optional: Validate Excel file by trying to read it
    try {
      const workbook = XLSX.read(fileBuffer, { type: 'array' });
      if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
        return NextResponse.json(
          { error: "–§–∞–π–ª Excel –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤" },
          { status: 400 }
        );
      }
      console.log("‚úÖ Excel —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω, –ª–∏—Å—Ç–æ–≤:", workbook.SheetNames.length);
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞:", e);
      return NextResponse.json(
        { error: "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª Excel. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å." },
        { status: 400 }
      );
    }

    // Upload file to Supabase Storage
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('supplier-proformas')
      .upload(storagePath, fileBuffer, {
        contentType: file.type,
        upsert: false // Don't overwrite existing files
      });

    if (uploadError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", uploadError);
      return NextResponse.json(
        { error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Storage" },
        { status: 500 }
      );
    }

    console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:", uploadData);

    // If setting as default, first unset other defaults for this supplier
    if (isDefault) {
      const { error: unsetError } = await supabase
        .from('supplier_proforma_templates')
        .update({ is_default: false })
        .eq('supplier_id', supplierId)
        .eq('supplier_type', supplierType)
        .eq('is_default', true);

      if (unsetError) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", unsetError);
      }
    }

    // Save template metadata to database
    const { data: templateData, error: dbError } = await supabase
      .from('supplier_proforma_templates')
      .insert({
        supplier_id: supplierId,
        supplier_type: supplierType,
        template_name: templateName,
        description: description || null,
        file_path: storagePath,
        file_size: file.size,
        original_filename: file.name,
        filling_rules: parsedRules,
        is_default: isDefault,
        is_active: true
      })
      .select()
      .single();

    if (dbError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:", dbError);

      // Try to cleanup uploaded file
      await supabase.storage
        .from('supplier-proformas')
        .remove([storagePath]);

      return NextResponse.json(
        { error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" },
        { status: 500 }
      );
    }

    console.log("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:", templateData);

    // Return success response
    return NextResponse.json({
      success: true,
      message: "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
      template: {
        id: templateData.id,
        template_name: templateData.template_name,
        file_path: templateData.file_path,
        file_size: templateData.file_size,
        is_default: templateData.is_default,
        created_at: templateData.created_at
      }
    });

  } catch (error) {
    console.error('‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞:', error);
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// GET method to retrieve templates for a supplier
export async function GET(request: NextRequest) {
  try {
    console.log("üìã API /upload-supplier-template GET –≤—ã–∑–≤–∞–Ω");

    const { searchParams } = new URL(request.url);
    const supplierId = searchParams.get('supplierId');
    const supplierType = searchParams.get('supplierType');

    if (!supplierId || !supplierType) {
      return NextResponse.json(
        { error: "supplierId –∏ supplierType –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      );
    }

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    // Get templates for supplier
    const { data: templates, error } = await supabase
      .from('supplier_proforma_templates')
      .select('*')
      .eq('supplier_id', supplierId)
      .eq('supplier_type', supplierType)
      .eq('is_active', true)
      .order('is_default', { ascending: false })
      .order('created_at', { ascending: false });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:", error);
      return NextResponse.json(
        { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤" },
        { status: 500 }
      );
    }

    console.log("‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤:", templates?.length || 0);

    return NextResponse.json({
      success: true,
      templates: templates || [],
      supplier_id: supplierId,
      supplier_type: supplierType
    });

  } catch (error) {
    console.error('‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// DELETE method to remove a template
export async function DELETE(request: NextRequest) {
  try {
    console.log("üóëÔ∏è API /upload-supplier-template DELETE –≤—ã–∑–≤–∞–Ω");

    const { searchParams } = new URL(request.url);
    const templateId = searchParams.get('templateId');

    if (!templateId) {
      return NextResponse.json(
        { error: "templateId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" },
        { status: 400 }
      );
    }

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    // Get template info first
    const { data: template, error: getError } = await supabase
      .from('supplier_proforma_templates')
      .select('file_path, template_name')
      .eq('id', templateId)
      .single();

    if (getError || !template) {
      return NextResponse.json(
        { error: "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" },
        { status: 404 }
      );
    }

    // Delete from database
    const { error: dbError } = await supabase
      .from('supplier_proforma_templates')
      .delete()
      .eq('id', templateId);

    if (dbError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î:", dbError);
      return NextResponse.json(
        { error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞" },
        { status: 500 }
      );
    }

    // Delete file from storage
    const { error: storageError } = await supabase.storage
      .from('supplier-proformas')
      .remove([template.file_path]);

    if (storageError) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Storage:", storageError);
      // Don't fail the request if storage cleanup fails
    }

    console.log("‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω:", template.template_name);

    return NextResponse.json({
      success: true,
      message: "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    });

  } catch (error) {
    console.error('‚ùå [API] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}