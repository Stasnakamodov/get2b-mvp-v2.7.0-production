import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

export async function GET(request: NextRequest) {
  try {
    console.log("üìä [API] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ verified (–æ—Ä–∞–Ω–∂–µ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞)
    const { data: verifiedStats, error: verifiedError } = await supabase
      .from('catalog_verified_products')
      .select('category')
      .eq('is_active', true);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ user (—Å–∏–Ω—è—è –∫–æ–º–Ω–∞—Ç–∞) 
    const { data: userStats, error: userError } = await supabase
      .from('catalog_user_products')
      .select('category')
      .eq('is_active', true);

    if (verifiedError && userError) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", { verifiedError, userError });
      return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö" }, { status: 500 });
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryCounts: { [key: string]: { verified: number, user: number, total: number } } = {};
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è verified products
    if (verifiedStats) {
      verifiedStats.forEach((product: { category: string }) => {
        if (product.category) {
          if (!categoryCounts[product.category]) {
            categoryCounts[product.category] = { verified: 0, user: 0, total: 0 };
          }
          categoryCounts[product.category].verified++;
          categoryCounts[product.category].total++;
        }
      });
    }

    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è user products
    if (userStats) {
      userStats.forEach((product: { category: string }) => {
        if (product.category) {
          if (!categoryCounts[product.category]) {
            categoryCounts[product.category] = { verified: 0, user: 0, total: 0 };
          }
          categoryCounts[product.category].user++;
          categoryCounts[product.category].total++;
        }
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const baseCategories = [
      '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–î–æ–º –∏ –±—ã—Ç', 
      '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞', '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å', 
      '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞'
    ];

    baseCategories.forEach(category => {
      if (!categoryCounts[category]) {
        categoryCounts[category] = { verified: 0, user: 0, total: 0 };
      }
    });

    console.log(`‚úÖ [API] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`, Object.keys(categoryCounts).length);

    return NextResponse.json({
      success: true,
      categoryStats: categoryCounts
    });

  } catch (error) {
    console.error("‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}